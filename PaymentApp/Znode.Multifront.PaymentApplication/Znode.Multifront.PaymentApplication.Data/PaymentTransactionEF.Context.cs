//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Znode.Multifront.PaymentApplication.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class znode_multifront_paymentEntities : DbContext
    {
        public znode_multifront_paymentEntities()
            : base("name=znode_multifront_paymentEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ZNodeActivityLog> ZNodeActivityLogs { get; set; }
        public virtual DbSet<ZNodeDomain> ZNodeDomains { get; set; }
        public virtual DbSet<ZnodePaymentAddress> ZnodePaymentAddresses { get; set; }
        public virtual DbSet<ZnodePaymentCustomer> ZnodePaymentCustomers { get; set; }
        public virtual DbSet<ZNodePaymentSettingCredential> ZNodePaymentSettingCredentials { get; set; }
        public virtual DbSet<ZNodePaymentType> ZNodePaymentTypes { get; set; }
        public virtual DbSet<ZnodeTransaction> ZnodeTransactions { get; set; }
        public virtual DbSet<ZNodePaymentGateway> ZNodePaymentGateways { get; set; }
        public virtual DbSet<ZNodePaymentSetting> ZNodePaymentSettings { get; set; }
        public virtual DbSet<ZnodeAuthToken> ZnodeAuthTokens { get; set; }
        public virtual DbSet<ZnodePaymentMethod> ZnodePaymentMethods { get; set; }
    
        public virtual int Znode_DeleteAuthToken(string authToken, ObjectParameter status)
        {
            var authTokenParameter = authToken != null ?
                new ObjectParameter("AuthToken", authToken) :
                new ObjectParameter("AuthToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Znode_DeleteAuthToken", authTokenParameter, status);
        }
    
        public virtual ObjectResult<Znode_InsertAuthToken_Result> Znode_InsertAuthToken()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Znode_InsertAuthToken_Result>("Znode_InsertAuthToken");
        }
    
        public virtual int Znode_ValidateAuthToken(string authToken, Nullable<int> totalAttempt, ObjectParameter status)
        {
            var authTokenParameter = authToken != null ?
                new ObjectParameter("AuthToken", authToken) :
                new ObjectParameter("AuthToken", typeof(string));
    
            var totalAttemptParameter = totalAttempt.HasValue ?
                new ObjectParameter("TotalAttempt", totalAttempt) :
                new ObjectParameter("TotalAttempt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Znode_ValidateAuthToken", authTokenParameter, totalAttemptParameter, status);
        }
    }
}
