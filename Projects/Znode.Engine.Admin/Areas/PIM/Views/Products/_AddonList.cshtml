@using Znode.Engine.Admin.ViewModels;
@model AddonGroupListViewModel
@using Znode.Engine.Admin.Models;

@{
    ViewBag.Title = PIM_Resources.TitlePIM + " | " + Admin_Resources.Multifront;
}

@if (Model.AddonGroups.Count > 0)
{
    <div id="@Model.AddonGroups[0].AssociatedChildProducts.GridModel.FrontObjectName" class="col-sm-12 add-on-container">
        @for (int i = 0; i < Model.AddonGroups.Count(); i++)
        {
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title panel-title-edit accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapse-@i">
                        <a><span>Add On</span></a>
                        <button type="button" data-test-selector="btnAddon" class="close" value="@Model.AddonGroups[i].PimAddonProductId" onclick="Products.prototype.RemoveAddonProductAssociation(this)"><i class="z-close-circle"></i>&nbsp;Remove</button>
                    </h4>
                </div>
                <div id="collapse-@i" class="panel-collapse collapse in">
                    <div class="panel-body">
                        <div id="AddonGroup_@i">
                            <div class="add-on-value">
                                <div class="form-group">
                                    <div class="col-sm-12 nopadding">
                                        @Html.LabelFor(m => m.AddonGroups[i].AddonGroupName)
                                    </div>
                                    <div class="col-sm-12 nopadding">
                                        @Html.TextBox("AddonGroupName", Model.AddonGroups[i].AddonGroupName, new { @readonly = "readonly", @data_test_selector = "txtAddonGroupName" })
                                        <span id="errDisplayOrder" class="error-msg"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="add-on-value">
                                <div class="form-group">
                                    <div class="col-sm-12 nopadding">
                                        @Html.LabelFor(m => m.AddonGroups[i].DisplayType)
                                    </div>
                                    <div class="col-sm-12 nopadding">
                                        @Html.TextBox("AddonGroupDisplayType", Model.AddonGroups[i].DisplayType, new { @readonly = "readonly", @data_test_selector = "txtAddonGroupDisplayType" })
                                    </div>
                                </div>
                            </div>
                            <div class="add-on-value">
                                <div class="form-group">
                                    <div class="col-sm-12 nopadding">
                                        @Html.LabelFor(m => m.AddonGroups[i].PimAddOnProducts[0].DisplayOrder)
                                    </div>
                                    <div class="col-sm-12 nopadding">
                                        @Html.TextBox("AddonGroupDisplayOrder", Model.AddonGroups[i].PimAddOnProducts[0].DisplayOrder.GetValueOrDefault().ToString(), new { @data_test_selector = "txtAddonGroupOrder", @id = "txtDisplayOrder" + Model.AddonGroups[i].PimAddonProductId })
                                        @Html.ValidationMessageFor(m => m.AddonGroups[i].PimAddOnProducts[0].DisplayOrder, "", new { @id = "valAddonProductDisplayOrder" + Model.AddonGroups[i].PimAddonProductId })
                                    </div>
                                </div>
                            </div>
                            <div class="add-on-value">
                                <div class="form-group" id="divIsRequired">
                                    <div class="col-sm-12 nopadding">
                                        <label>@Html.LabelFor(model => model.AddonGroups[i].PimAddOnProducts[0].RequiredType)</label>
                                    </div>
                                    <div class="col-sm-12 nopadding">
                                        <div class="switch-field">
                                            @Html.EnumDropDownListFor(model => model.AddonGroups[i].PimAddOnProducts[0].RequiredTypeValue, new { @data_test_selector = "drpAddonGroup", @class = "dropdownAddonGroupRequiredTypeValue" + Model.AddonGroups[i].PimAddonProductId })
                                        </div>
                                    </div>
                                </div>
                            </div>


                            @Html.HiddenFor(m => m.AddonGroups[i].PimAddonGroupId, new { @id = "addonGroupId" + Model.AddonGroups[i].PimAddonProductId })
                            @Html.HiddenFor(m => m.ParentProductId)
                        </div>
                        <div class="add-on-button">
                            @Html.AuthorizedPrototypeRawActionLink(PIM_Resources.ButtonUpdateAssociatedAddon, "UpdateProductAddonAssociation", "Products", "btn-text btn-text-secondary dirtyignore", "Products.prototype.UpdateAssociatedAddonInformation(" + Model.AddonGroups[i].PimAddonProductId + ")")
                            <button type="button" data-test-selector="btnUnAssociateProduct" class="btn-text btn-text-secondary margin-left-10" onclick='Products.prototype.GetUnassociatedAddonProducts("@Model.AddonGroups[i].PimAddonProductId","@Model.AddonGroups[i].AssociatedChildProducts.GridModel.FrontObjectName")'>@Admin_Resources.HeaderAssociateAddons</button>
                        </div>
                        <div class="col-sm-12 list-container">
                            @{
                                @Html.Partial("~/Views/DynamicGrid/_DynamicGrid.cshtml", Model.AddonGroups[i].AssociatedChildProducts.GridModel)
                            }
                        </div>
                    </div>
                </div>
            </div>

        }
    </div>
}
<div id="UnassociatedAddonGroups" class="aside-popup-panel modal-dialog modal-lg">
    @*Partial View*@
</div>

@Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",
            new PopupModel()
            {
                Title = Admin_Resources.HeaderConfirmDelete,
                Description = Admin_Resources.TextConfirmDelete,
                ModalPopUpId = "DeleteProductAddon",
                Buttons = new List<PopUpButtonModel>() {
                new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, ButtonAttributes="data-dismiss=modal", OnClickFunctionName="Products.prototype.DeleteAddonProductDetailItem()"}
                }
            })

<script>
    Products.prototype.AddonInit();

    $(document).ready(function () { EditableGridEvent.Init(); })
    $(".input-text").change(function () {
        validateForm = Products.prototype.ValidateDisplayOrderField(this);
    });
</script>
