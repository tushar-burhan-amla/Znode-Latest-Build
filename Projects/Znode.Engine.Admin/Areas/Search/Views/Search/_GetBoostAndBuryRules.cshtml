@using Znode.Engine.Admin.ViewModels
@model SearchBoostAndBuryRuleListViewModel
@using Znode.Libraries.ECommerce.Utilities;
@using Znode.Engine.Admin.Models
@{
    ViewBag.Title = Admin_Resources.TitleMarketing + " | " + Admin_Resources.Multifront;
    string actionName = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string catalogName = HttpUtility.UrlEncode(@Model.CatalogName);
}
<div class="pull-right create-index">
    @Html.AuthorizedPrototypeRawActionLink(Admin_Resources.ButtonAdd, "CreateBoostAndBuryRule", "Search", new { @class = "btn-text btn-text-secondary", onclick = "Search.prototype.AddBoostAndBuryPopUp(" + Model.PublishCatalogId + ",'"+ catalogName + "')", @data_test_selector = "linkAddNew" })
</div>
<div class="top-keywords-report col-md-12 nopadding search-report-filter">
    <div class="d-flex search-catalog justify-content-around">
        <div class="catalog-selector" id="divSearchCatalog">
           
            
                @Html.FastSelectFor(model => model.CatalogName, model => model.PublishCatalogId, "GetSuggestions", "Search", "Search.prototype.OnSelectGetCatalogProfileList", 1, true,
                                    new
                                    {
                                        htmlAttributes = new { @placeholder = Admin_Resources.LabelSelectCatalog, @class = "", @id = "txtCatalogName", @data_test_selector = "txtPublishCatalogId" },
                                        parameters = new { @type = ZnodeTypeAheadEnum.CatalogList.ToString() }
                                    })
                @CustomHtmlHelper.HiddenField("PublishCatalogId", "hdnPublishCatalogId", "hidden", Convert.ToString(Model.PublishCatalogId))
                @CustomHtmlHelper.HiddenField("CatalogName", "hdnPublishCatalogName", "hidden", Convert.ToString(Model.CatalogName))
                @Html.ValidationMessageFor(model => model.CatalogName, "", new { @id = "errorRequiredCatalog", @data_test_selector = "valPublishCatalogId" })
        
        </div>
    </div>
    @using (Ajax.BeginForm(actionName, controllerName, new { catalogId = Model.PublishCatalogId, catalogName = Model.CatalogName }, new AjaxOptions() { UpdateTargetId = Model.GridModel.FrontObjectName, OnSuccess = "GridPager.prototype.GridUpdateHandler" }, new { @id = "searchform" }))
    {
        <div id="filterComponent">
            @Html.Partial("~/Views/DynamicGrid/_FilterComponent.cshtml", Model.GridModel.FilterColumn)
        </div>
    }
</div>
    


    @Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",
                new PopupModel()
                {
                    Title = Admin_Resources.HeaderConfirmDelete,
                    Description = Admin_Resources.TextSearchProfileConfirmDelete,
                    ModalPopUpId = "SearchCatalogRuleDeletePopup",
                    Buttons = new List<PopUpButtonModel>() {
    new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, ButtonAttributes="data-dismiss=modal",OnClickFunctionName =  "Search.prototype.DeleteCatalogSearchRule(this)"}
                    }
                })
    <div class="col-sm-12 list-container">
        @{
            @Html.Partial("~/Views/DynamicGrid/_DynamicGrid.cshtml", Model.GridModel)
        }
    </div>
    @Html.HiddenFor(m => m.PublishCatalogId, new { @id = "publishCatalogId" })
    @Html.HiddenFor(m => m.CatalogName, new { @id = "catalogName" })
    <script>
        $(document).ready(function () {
            $(".z-enable").removeAttr("data-target").attr("title", "Restart").attr("onclick", "Search.prototype.PauseSearchRule(this)");
            $(".z-disable").removeAttr("data-target").attr("title", "Pause").attr("onclick", "Search.prototype.PauseSearchRule(this)");
            $(".z-edit").off("click").on("click", function () { Search.prototype.EditSearchRule($(this)); });
            $('*[data-url]').each(function () { fastselectwrapper($(this), $(this).data("onselect-function")); });
            SearchConfiguration.prototype.UpdateFastSelectAfterGridUpdate();
            SearchConfiguration.prototype.SetFastSelectFilter("publishcatalogid", $("#hdnPublishCatalogId").val());
        });
    </script>
