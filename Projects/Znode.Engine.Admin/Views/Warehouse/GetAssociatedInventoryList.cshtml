@model Znode.Engine.Admin.ViewModels.InventoryWarehouseMapperListViewModel
@using Znode.Engine.Admin.Models
@using Znode.Libraries.Resources
@using Znode.Engine.Admin.Helpers;
@{
    ViewBag.Title = Admin_Resources.TitleOMS + " | " + Admin_Resources.Multifront;
}
<div id="@Model.GridModel.FrontObjectName">
    <div class="col-sm-12 title-container">
        <h1>@string.Format(@Admin_Resources.TitleEdit, Admin_Resources.TitleWarehouseList)<em class="z-minus"></em><span>@Model.WarehouseName</span></h1>
        <div class="pull-right btn-container">
            @Html.AuthorizedRawActionLink("<em class='z-back'></em>" + Admin_Resources.ButtonBack, "List", "Warehouse", null, new { @class = "btn-text-icon", @data_test_selector = "linkBack" })
        </div>
    </div>
    <div class="main-wrapper">
        <aside>
            <button type="button" id="slide-menu" class="slide-menu-btn" data-toggle="tooltip" data-placement="right" title="Expand/Collapse"><em class="z-left-collaps-arrow"></em></button>
            @Html.Partial("~/Views/Shared/_asideWarehousePanel.cshtml")
        </aside>
        <div id="associateinventorylist" class="aside-popup-panel">
            @*Inventory list will display in this div*@
        </div>
        <!--Main Container-->
        <section class="main-container">
            @using (Ajax.BeginForm("GetAssociatedInventoryList", "Warehouse", new { warehouseId = Model.WarehouseId }, new AjaxOptions() { UpdateTargetId = Model.GridModel.FrontObjectName, OnSuccess = "GridPager.prototype.GridUpdateHandler" }, new { @id = "searchform" }))
            {
                <div id="filterComponent">
                    @Html.Partial("~/Views/DynamicGrid/_FilterComponent.cshtml", Model.GridModel.FilterColumn)
                </div>
            }
            <div class="col-sm-12 list-container">
                @{
                    @Html.Partial("~/Views/DynamicGrid/_DynamicGrid.cshtml", Model.GridModel)
                }
            </div>
            @Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",
                    new PopupModel()
                    {
                        Title = @Admin_Resources.HeaderConfirmDelete,
                        Description = @Admin_Resources.TextConfirmDelete,
                        ModalPopUpId = "InventorySKUDeletePopup",
                        Buttons = new List<PopUpButtonModel>() {
                            new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, ButtonAttributes="data-dismiss=modal",OnClickFunctionName = "Warehouse.prototype.DeleteMultipleSKUInventory(this)"}
                         }
                    })
        </section>
        @Html.HiddenFor(m => m.InventoryListId)
        @Html.HiddenFor(m => m.WarehouseId)
        @Html.HiddenFor(m => m.WarehouseName)
    </div>
</div>
<script>
    $(document).ready(function () { EditableGridEvent.Init(); })
    $(".input-text").change(function () {
        var colname = $(this).data("columnname");
        var message = colname == "Quantity"
            ? '@HelperMethods.GetInventoryFormatErrorMessage(Admin_Resources.ErrorValidQuantityFromInventoryForRoundOff, Admin_Resources.ErrorValidInventory)'
            : '@HelperMethods.GetInventoryFormatErrorMessage(Admin_Resources.ErrorValidReOrderLevelFromInventoryForRoundOff, Admin_Resources.ErrorValidInventory)';
        validateForm = Inventory.prototype.ValidateInventorySKU(this, '@HelperMethods.GetDefaultInventoryRoundOff()', message, colname);
    });
</script>