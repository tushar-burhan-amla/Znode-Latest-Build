@using Znode.Engine.Admin.ViewModels
@model CustomerViewModel
@using Znode.Engine.Admin.Models
@using Znode.Engine.Admin.Helpers
@using Znode.Libraries.ECommerce.Utilities;
@{
    ViewBag.Title = Admin_Resources.TitleCustomers + " | " + Admin_Resources.Multifront;
    string actionName = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string styleToDisplayContent = Model.AccountId > 0 ? "style=display:none" : "";
    string cancelUrl = Model.IsGuestUser ? "/Customer/GuestUserList" : (actionName.ToLower().Equals("customeredit")) ? "/User/CustomerManage?accountId=" + Model.UserId : "/Customer/CustomersList";
    ActionModel actionModel = new ActionModel { Action = actionName, Controller = controllerName, CancelUrl = cancelUrl, FormId = "frmCreateEditCustomerAccount", Callback = "Account.prototype.SubmitCustomerCreateEditForm", IsSaveCloseEnable = true };
    string mainWrapperClass = !actionName.ToLower().Contains("customercreate") ? "main-wrapper" : "";
    string mainContainer = !actionName.ToLower().Contains("customercreate") ? "main-container" : "col-sm-12 page-container";
    PrimaryPageActionModel primaryPageAction = new PrimaryPageActionModel();
    if (System.Web.HttpContext.Current.Request?.UrlReferrer != null && System.Web.HttpContext.Current.Request?.UrlReferrer?.Segments.Count()>=2)
    {
        if ((System.Web.HttpContext.Current.Request?.UrlReferrer?.Segments[1]?.Replace('/', ' ').Trim().ToString()).Equals("Account", StringComparison.CurrentCultureIgnoreCase))
        {
            cancelUrl = "/Account/CustomersList?accountId=" + Model.AccountId;
        }
    }
    primaryPageAction.PageActions.Add(new PageAction { Action = actionName, Controller = controllerName, ControlId = "btnSaveNClose", DataTestSelector = "linkSaveNClose", LinkType = LinkType.AuthorizedPrototypeRawActionLink, LinkDisplayName = @Admin_Resources.ButtonSaveClose, OnClick = "User.prototype.ValidateUserForSameAsAdmin('" + cancelUrl + "')" });
    primaryPageAction.PageActions.Add(new PageAction { Action = actionName, Controller = controllerName, ControlId = "btnSaveNDraft", LinkType = LinkType.OnClick, LinkDisplayName = @Admin_Resources.ButtonSave, OnClick = "User.prototype.ValidateUserForSameAsAdmin()", DataTestSelector = "linkSave" });
    string btnDisplay = Model.IsLock ? Admin_Resources.Unlock.ToUpper() : Admin_Resources.Lock.ToUpper();
    string popUpDisplay = Model.IsLock ? Admin_Resources.UnlockAccountConfirmationMessage : Admin_Resources.LockAccountConfirmationMessage;
    bool IsGuestUser = Model.IsGuestUser;
    string heading = IsGuestUser ? Admin_Resources.LabelGuestUser : Admin_Resources.LabelUser;
    string manageUserTitle = String.IsNullOrEmpty(Model.FullName?.Trim()) ? Model.Email : Model.FullName;
    string displayName = string.IsNullOrEmpty(Model.SalesRepUserName) ? string.Empty : (Model.SalesRepUserName + " | " + Model.SalesRepFullName);
    string accountName = string.IsNullOrEmpty(Model.AccountCode) ? Model.AccountName : Model.AccountName + " | " + Model.AccountCode;
    if (@ViewBag.isAccountAccess != null)
    {
        string checkAccess = Convert.ToString(ViewBag.isAccountAccess);
        <input type="hidden" id="IsAccessAccount" value=@checkAccess.ToLower()>
    }
}

<div class="col-sm-12 title-container">
    @if (actionName.ToLower().Contains("edit"))
    {
        <h1 data-test-selector="hdgUser">@string.Format(@Admin_Resources.TitleManage, heading)<em class="z-minus"></em><span>@manageUserTitle</span></h1>
    }
    else
    {
        <h1 data-test-selector="hdgUser">@string.Format(@Admin_Resources.TitleAdd, "User")</h1>
    }
    <div class="pull-right btn-container">
        <a id="btnCancelForProduct" href=@cancelUrl class="btn-text-icon" data-test-selector="linkCancel"><em class='z-back'></em>BACK</a>
        @Html.Partial("~/Views/Shared/Controls/_PrimaryPageAction.cshtml", primaryPageAction)
    </div>
</div>
<div class="@mainWrapperClass">
    @if (!actionName.ToLower().Contains("customercreate"))
    {
        @Html.Partial("~/views/User/_asidecustomermanagepanel.cshtml")
    }
    <!--Main Container-->
    <section class="@mainContainer">
        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post, new { id = "frmCreateEditCustomerAccount" }))
        {
            if (!DefaultSettingHelper.AllowGlobalLevelUserCreation)
            {
                if (!(Model.AccountId > 0))
                {
                    <h3 id="customer_general_information" class="section-heading" data-test-selector="hdgGeneralInformation">@Admin_Resources.ManageGeneralInformation</h3>
                }
                <div class="form-group" id="ddlPortals" @styleToDisplayContent>
                    <div class="col-sm-12 nopadding">
                        <div id="areaList">
                            @if (string.Equals(actionName.ToLower(), "customercreate"))
                            {
                                <div class="control-label">
                                    @Html.LabelFor(m => m.StoreName, new { @class = "required", @data_test_selector = "lblStoreName" })
                                </div>
                                <div class="control-md">
                                    @Html.FastSelectFor(model => model.StoreName, model => model.PortalId, "GetSuggestions", "Typeahead", "Account.prototype.OnSelectPortalResult", 1, true,
                                    new
                                    {
                                    htmlAttributes = new { @placeholder = Admin_Resources.LabelSelectStore, @class = "", @id = "txtPortalName", @data_test_selector = "txtStoreName" },
                                    parameters = new { @type = ZnodeTypeAheadEnum.StoreList.ToString() }
                                    })
                                    @Html.ValidationMessageFor(model => model.StoreName, null, new { id = "errorRequiredStore", @data_test_selector = "valStoreName" })
                                </div>
                            }
                        </div>
                    </div>
                </div>

                if (actionName.ToLower().Equals("customeredit"))
                {
                    <div class="form-group">
                        <div class="col-sm-12 nopadding">
                            <div class="control-label">
                                @Html.LabelFor(m => m.StoreName, new { @class = "required", @data_test_selector = "lblStoreName" })
                            </div>
                            <div class="control-md">
                                @Html.TextBoxFor(m => m.StoreName, new { @disabled = "disabled", @class = "readonly", @data_test_selector = "txtStoreName" })
                            </div>
                        </div>
                    </div>

                    if (!IsGuestUser)
                    {
                        <div class="form-group">
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(m => m.SalesRepUserName, new { @data_test_selector = "lblSalesRep" })
                                </div>
                                <div class="control-md">
                                    @Html.HiddenFor(model => model.SalesRepId, new { @id = "hdnSalesRepId" })
                                    <input type="text" data-test-selector="txtSalesRep" id="SalesRep" value='@displayName' disabled="disabled" placeholder='@Admin_Resources.TextSalesRep' />
                                </div>
                                <div class="pull-left dirtyignore">
                                    <a id="serachCustomer" onclick="User.prototype.GetSalesRep();" class="btn-narrow-icon" data-toggle="tooltip" data-placement="top" data-original-title="@Admin_Resources.SearchExistingSalesRep" data-test-selector="btnSearchCustomer"><em class='z-search'></em></a>

                                </div>
                            </div>
                        </div>
                    }
                }
                <h3 class="section-heading margin-top-25" data-test-selector="hdgLoginInformation">@Admin_Resources.ManageLoginInformation</h3>
            }
            else
            {
                <h3 class="section-heading margin-top" data-test-selector="hdgLoginInformation">@Admin_Resources.ManageLoginInformation</h3>
            }
            if (actionName.ToLower().Equals("customeredit"))
            {

                if (!IsGuestUser)
                {
                    <div class="form-group">
                        <div class="col-sm-12 nopadding">
                            <div class="control-label">
                                <label>@Admin_Resources.LabelLockUnlock</label>
                            </div>
                            <div class="control-md">
                                <button type="button" id="EnableDisable" class="btn-text btn-text-secondary btn-margin-left" data-toggle='modal' data-target='#PopUpConfirmDisableEnable' data-enablediasble="@Model.IsLock.ToString().ToLower()" data-test-selector="btnResetPassword">@btnDisplay</button>
                                @Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",

                             new PopupModel()
                             {
                                 Title = @Admin_Resources.ConfirmText,
                                 Description = popUpDisplay,
                                 ModalPopUpId = "PopUpConfirmDisableEnable",
                                 Buttons = new List<PopUpButtonModel>() { new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, ButtonAttributes = "data-dismiss=modal", OnClickFunctionName = "User.prototype.EnableDisableSingleAccount(false)" } }

                             })
                            </div>
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.UserName, new { @class = "required", @data_test_selector = "lblUserName" })
                        </div>
                        @if (string.IsNullOrEmpty(Model.AspNetUserId))
                        {
                            <div class="control-md">
                                @Html.TextBoxFor(model => model.UserName, new { @data_test_selector = "txtUserName" })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @data_test_selector = "valUserName", id = "errorSingleEmail" })
                            </div>
                        }
                        else
                        {
                            <div class="control-md">
                                @Html.TextBoxFor(model => model.UserName, new { @readonly = "readonly", @onchange = "User.prototype.ValidateUserNameExists()", @data_test_selector = "txtUserName" })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @data_test_selector = "valUserName", id = "errorUserName" })
                            </div>
                            <div class="pull-left" data-toggle="tooltip" data-original-title="@Admin_Resources.ButtonEdit">
                                <a id="updateUsername"  onclick="User.prototype.SetUsername()" class="btn-narrow-icon" data-toggle="modal" data-target="#updateUserView" data-placement="top" data-original-title="@Admin_Resources.TitleUpdateUsername" data-test-selector="btnUpdateUserName"><i class='z-edit'></i></a>
                            </div>
                            <div class="col-xs-12 nopadding margin-top-15">
                                <div class="col-sm-12 nopadding">
                                    <div class="control-label">
                                        <label data-test-selector="lblResetPassword">@Admin_Resources.ButtonResetPassword</label>
                                    </div>
                                    <div class="control-md">
                                        <button type="button" class="btn-text btn-text-secondary btn-margin-left" data-toggle='modal' data-target='#PopUpConfirmResetPassword' data-test-selector="btnResetPassword">@Admin_Resources.ButtonSubmit</button>
                                        @Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",
                            new PopupModel()
                            {
                            Title = @Admin_Resources.TitleConfirmResetPassword,

                            Description = @Admin_Resources.TextConformResetPassword,
                            ModalPopUpId = "PopUpConfirmResetPassword",
                            Buttons = new List<PopUpButtonModel>
                                () { new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, OnClickFunctionName = "User.prototype.ResetPasswordUsers()" } }
                                })
                                    </div>
                                </div>
                            </div>
                        }

                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.Email, new { @class = "required", @data_test_selector = "lblEmailAddress" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.Email, new { @data_test_selector = "txtEmailAddress" })
                            @Html.ValidationMessageFor(model => model.Email, null, new { id = "errorRequiredEmail", @data_test_selector = "valEmailAddress" })
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.UserName, new { @class = "required", @data_test_selector = "lblUserName" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.UserName, new { @data_test_selector = "txtUserName" })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @data_test_selector = "valUserName", id = "errorSingleEmail" })
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.ExternalId, new { @data_test_selector = "lblExternalId" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.ExternalId, new { @maxlength = 50, @data_test_selector = "txtExternalId" })
                        @Html.ValidationMessageFor(model => model.ExternalId, "", new { @data_test_selector = "valExternalId" })
                    </div>
                    @Html.Partial("_HelpText", @Admin_Resources.NoteExternalId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.FirstName, new { @class = "required", @data_test_selector = "lblFirstName" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.FirstName, new { @data_test_selector = "txtFirstName" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @data_test_selector = "valFirstName" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.LastName, new { @class = "required", @data_test_selector = "lblLastName" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.LastName, new { @data_test_selector = "txtLastName" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @data_test_selector = "valLastName" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.PhoneNumber, new { @data_test_selector = "lblPhoneNumber" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.PhoneNumber, new { @data_test_selector = "txtPhoneNumber" })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @data_test_selector = "valPhoneNumber" })
                    </div>
                    @Html.Partial("_HelpText", @Admin_Resources.HelptextPhoneNumber)
                </div>
            </div>

            if (actionName.ToLower().Equals("customeredit"))
            {
                <div class="form-group margin-bottom-5">
                    <div class="control-md control-non">
                        <label>
                            <input type="checkbox" name="EmailOptIn" value="true" checked="@Model.EmailOptIn" data-test-selector="chkSendPeriodicMail" />
                            <span class="lbl padding-8" data-test-selector="spnSendPeriodicMail">@Admin_Resources.NoteSendPeriodicMail</span>
                            <input name="CustomerAccount.EmailOptIn" type="hidden" value="false">
                        </label>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group margin-bottom-5">
                    <div class="control-md control-non">
                        <label>
                            <input type="checkbox" name="EmailOptIn" value="true" checked="checked" data-test-selector="chkSendPeriodicMail" />
                            <span class="lbl padding-8" data-test-selector="spnSendPeriodicMail">@Admin_Resources.NoteSendPeriodicMail</span>
                            <input name="CustomerAccount.EmailOptIn" type="hidden" value="false">
                        </label>
                    </div>
                </div>
            }

            <div class="form-group">
                <div class="control-md control-non">
                    <label>
                        <input @(Model.SMSOptIn ? "checked='checked'" : "") type="checkbox" name="SMSOptIn" value="true" data-test-selector="chkSendSMSNotification" />
                        <span class="lbl padding-8" data-test-selector="spnSendSMSNotification">@Admin_Resources.NoteSendSMSNotification</span>
                        <input name="CustomerAccount.SMSOptIn" type="hidden" value="false">
                    </label>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.AccountId, new { @data_test_selector = "lblAccountId" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.AccountName, new { @disabled = "disabled", @placeholder = Admin_Resources.LabelSelectAccount, @data_test_selector = "txtAccountId" })
                    </div>
                    <div class="control-sm dirtyignore">
                        <div class="pull-left">
                            @{
                                int selectedPortal = Convert.ToInt32(Model.UserId > 0 ? Model.PortalId : 0);
                            }
                            <a id="searchCustomer" onclick="User.prototype.GetAccountList(@selectedPortal);" class="btn-narrow-icon" data-toggle="tooltip" data-placement="top" data-original-title="@Admin_Resources.SearchExistingAccountButton" data-test-selector="btnSearchAccount"><em class='z-search'></em></a>
                        </div>
                        <a class="btn-narrow-icon" onclick="User.prototype.ClearAccountName()" data-toggle="tooltip" data-placement="top" data-original-title="Clear Account Name" data-test-selector="btnClearAccountName"><em class="z-clear-cache"></em></a>
                    </div>

                </div>
            </div>

            styleToDisplayContent = Model.AccountId > 0 ? "" : "style=display:none";


            <div class="form-group" id="divDepartmentId" @styleToDisplayContent>
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.DepartmentId, new { @data_test_selector = "lblDepartment" })
                    </div>
                    <div class="control-md">
                        @Html.DropDownListFor(model => model.DepartmentId, Model.Departments ?? new List<SelectListItem>
                         (), Admin_Resources.LabelSelectDepartment, new { @id = "ddlDepartment", @data_test_selector = "drpDepartmentList" })
                        @Html.HiddenFor(model => model.DepartmentId)
                    </div>
                </div>
            </div>
            <div class="form-group" id="divUserTypeId" @styleToDisplayContent>
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.RoleName, new { @data_test_selector = "lblRoleName" })
                    </div>
                    <div class="control-md">

                        @Html.DropDownListFor(model => model.RoleName, Model.Roles ?? new List<SelectListItem>
                        (), new { @id = "ddlUserType", @OnChange = "User.prototype.OnUserTypeSelection();", @data_test_selector = "drpRoleNameList" })
                        @Html.ValidationMessageFor(model => model.RoleName, "", new { @data_test_selector = "valRoleName", id = "valRoleName" })
                        @Html.HiddenFor(model => model.RoleName, new { @id = "hdnRoleName" })
                    </div>
                </div>
            </div>

        @Html.HiddenFor(model => model.UserName)
        @Html.HiddenFor(model => model.AccountName, new { @id = "selectedAccountName" })
        @Html.HiddenFor(model => model.AspNetUserId)
        @Html.HiddenFor(model => model.AccountId)
        @Html.HiddenFor(model => model.StoreName)
        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model => model.PortalId, new { @id = "hdnPortalId" })
        @Html.HiddenFor(model => model.PortalId)
        @Html.HiddenFor(model => model.IsSelectAllPortal)
        @Html.HiddenFor(model => model.RoleName)
        @Html.HiddenFor(model => model.AccountPermissionAccessId)
        @Html.HiddenFor(model => model.Email)
        @Html.HiddenFor(model => model.CustomerPaymentGUID)
        @Html.Hidden("AllowGlobalLevelUserCreation", DefaultSettingHelper.AllowGlobalLevelUserCreation)
        @Html.HiddenFor(model => model.IsTradeCentricUser)
    }
    </section>
    <!--Call for popUp (partial view)-->
    <div id="updateUsernamePopUp" data-test-selector="divUpdateUsernamePopUp">@Html.Partial("~/Views/Customer/_EditUsername.cshtml")</div>
</div>
<div id="accountListId" class="aside-popup-panel modal-dialog modal-lg"></div>
<div id="divStoreListAsidePanel" class="aside-popup-panel modal-dialog modal-lg"></div>
<div id="SalesRepAssociationPanel" class="aside-popup-panel modal-dialog modal-xl sales-details"></div>
<script src="~/Content/bootstrap-3.3.7/js/bootstrap-multiselect.js" type="text/javascript"></script>
<script>
    $("#AreaId").multiselect({ includeSelectAllOption: false, enableCaseInsensitiveFiltering: false });
    $("#portals").multiselect({ includeSelectAllOption: true, enableCaseInsensitiveFiltering: false });
</script>
