@using Znode.Engine.Admin.ViewModels
@using Znode.Engine.Admin.Models
@using Znode.Libraries.ECommerce.Utilities
@using Znode.Engine.Admin.Helpers
@model CustomerAccountViewModel
@{
    ViewBag.Title = Admin_Resources.TitleCustomers + " | " + Admin_Resources.Multifront; ;
    string actionName = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string Title = actionName.ToLower().Equals("customeredit") ? Admin_Resources.TitleEdit : Admin_Resources.TitleAdd;
    ActionModel actionModel = new ActionModel { Action = actionName, Controller = controllerName, FormId = "frmCreateEditCustomerAccount", CancelUrl = "/Account/CustomersList?accountId=" + @Model.AccountId };
}
<div id="aside-popup-panel">
    <div class="col-sm-12 title-container">
        @if (string.Equals(actionName.ToLower(), "customeredit"))
        {
            <h1>@string.Format(@Admin_Resources.TitleEdit, Admin_Resources.TitleCustomer)<em class="z-minus"></em><span>@Model.UserName</span></h1>
        }
        else
        {
            <h1>@string.Format(@Admin_Resources.TitleAdd, Admin_Resources.TitleCustomer)</h1>
        }
        <div class="pull-right">
            @Html.Partial("~/Views/Shared/Controls/_SaveCancelButtons.cshtml", actionModel)
        </div>
    </div>
    <!--Main Container-->
    <div class="col-sm-12 page-container">
        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post, new { @id = "frmCreateEditCustomerAccount" }))
            {
            <h3 class="section-heading">@Admin_Resources.ManageGeneralInformation</h3>
            if (actionName.ToLower().Equals("customeredit"))
            {
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.StoreName)
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.StoreName, new { disabled = "disabled" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.Email, new { @class = "required" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.Email)
                            @Html.ValidationMessageFor(model => model.Email, null, new { id = "errorRequiredEmail" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.UserName)
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.UserName, new { disabled = "disabled" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            <label>@Admin_Resources.ButtonResetPassword</label>
                        </div>
                        <div class="control-md">
                            <button type="button" class="btn-text btn-margin-left" data-toggle='modal' data-target='#PopUpConfirmResetPassword'>@Admin_Resources.ButtonSubmit</button>
                            @Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",
                            new PopupModel()
                            {
                                Title = @Admin_Resources.TitleConfirmResetPassword,

                                Description = @Admin_Resources.TextConformResetPassword,
                                ModalPopUpId = "PopUpConfirmResetPassword",
                                Buttons = new List<PopUpButtonModel>() { new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, OnClickFunctionName = "User.prototype.ResetPasswordUsers()" } }
                            })
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.UserName, new { @class = "required" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.UserName)
                            @Html.ValidationMessageFor(model => model.UserName)
                        </div>
                    </div>
                </div>
            }

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.ExternalId)
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.ExternalId, new { @maxlength = 50 })
                        @Html.ValidationMessageFor(model => model.ExternalId)
                    </div>
                    @Html.Partial("_HelpText", @Admin_Resources.NoteExternalId)
                </div>
            </div>

            <h3 class="section-heading margin-top-25">@Admin_Resources.ManageLoginInformation</h3>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.FirstName, new { @class = "required" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.FirstName)
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.LastName, new { @class = "required" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.LastName)
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.PhoneNumber)
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.PhoneNumber)
                        @Html.ValidationMessageFor(model => model.PhoneNumber)
                    </div>
                </div>
            </div>

            if (actionName.ToLower().Equals("customeredit"))
            {
                <div class="form-group">
                    <div class="control-md control-non">
                        <label>
                            <input type="checkbox" name="EmailOptIn" value="true" checked="@Model.EmailOptIn" />
                            <span class="lbl padding-8">@Admin_Resources.NoteSendPeriodicMail</span>
                            <input name="CustomerAccount.EmailOptIn" type="hidden" value="false">
                        </label>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <div class="control-md control-non">
                        <label>
                            <input type="checkbox" name="EmailOptIn" value="true" checked="checked" />
                            <span class="lbl padding-8">@Admin_Resources.NoteSendPeriodicMail</span>
                            <input name="CustomerAccount.EmailOptIn" type="hidden" value="false">
                        </label>
                    </div>
                </div>
            }
            <h3 class="section-heading margin-top-25">@Admin_Resources.ManageCustomInformation</h3>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.AccountName, new { @class = "required" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.AccountName, new { disabled = "disabled" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.Label(Admin_Resources.LabelDepartment)
                    </div>
                    <div class="control-md">
                        @Html.DropDownListFor(model => model.DepartmentId, Model.AccountDepartmentList, Admin_Resources.LabelSelectDepartment)
                        @Html.HiddenFor(model => model.DepartmentId)
                    </div>
                </div>
            </div>
            <div class="form-group" id="divUserTypeId">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.RoleName)
                    </div>
                    <div class="control-md">
                        @if (actionName.ToLower().Equals("customeredit"))
                        {
                            @Html.DropDownListFor(model => model.RoleName, Model.Roles ?? new List<SelectListItem>(), new { @id = "ddlUserType", @OnChange = "User.prototype.OnUserTypeSelection();", @disabled = "disabled", @class = "readonly" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.RoleName, Model.Roles ?? new List<SelectListItem>(), new { @id = "ddlUserType", @OnChange = "User.prototype.OnUserTypeSelection();", })
                        }
                        @Html.HiddenFor(m => m.RoleName, new { @id = "hdnRoleName" })
                    </div>
                </div>
            </div>

            @Html.HiddenFor(model => model.UserName)
            @Html.HiddenFor(model => model.AspNetUserId)
            @Html.HiddenFor(model => model.AccountId)
            @Html.HiddenFor(model => model.UserId)
            @Html.HiddenFor(model => model.AccountPermissionAccessId)
            @Html.HiddenFor(model => model.AccountUserOrderApprovalId)
            @Html.HiddenFor(model => model.PermissionsName)
            @Html.HiddenFor(model => model.PortalId)
            @Html.HiddenFor(model => model.Email)
        }
    </div>
</div>