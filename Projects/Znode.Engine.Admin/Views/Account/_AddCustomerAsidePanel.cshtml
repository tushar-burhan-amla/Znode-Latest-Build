@using Znode.Engine.Admin.ViewModels
@using Znode.Engine.Admin.Models
@using Znode.Libraries.ECommerce.Utilities
@using Znode.Engine.Admin.Helpers
@model CustomerAccountViewModel
@{
    ViewBag.Title = Admin_Resources.TitleCustomers + " | " + Admin_Resources.Multifront;
    string actionName = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string Title = actionName.ToLower().Equals("customeredit") ? Admin_Resources.TitleEdit : Admin_Resources.TitleAdd;
    ActionModel actionModel = new ActionModel { Action = actionName, Controller = controllerName, FormId = "frmCreateEditCustomerAccount", Callback = "Account.prototype.ValidateUserNameExists", CancelUrl = "/Account/CustomersList?accountId=" + @Model.AccountId };
}
<div id="aside-popup-panel">
    @using (Html.BeginForm(actionName, controllerName, FormMethod.Post, new { @id = "frmCreateEditCustomerAccount" }))
    {
        <div class="col-sm-12 title-container">
            @if (string.Equals(actionName.ToLower(), "customeredit"))
            {
                <h1 data-test-selector="hdgEditCustomer">@string.Format(@Admin_Resources.TitleEdit, Admin_Resources.TitleCustomer)<em class="z-minus"></em><span>@Model.UserName</span></h1>
                <div class="pull-right btn-container">
                    <button type="submit" data-test-selector="linkSave" class=" btn-text btn-text-secondary" onclick="return Account.prototype.ValidateBudgetAmount()">@Admin_Resources.ButtonSave</button>
                </div>
            }
            else
            {
                <h1 data-test-selector="hdgAddCustomer">@string.Format(@Admin_Resources.TitleAdd, Admin_Resources.TitleCustomer)</h1>
                <div class="pull-right">
                    <button type="button" data-test-selector="linkSave" style="border:none;margin-top:1px;margin-left:9px;" class=" btn-text btn-text-secondary" onclick="return Account.prototype.ValidateUserNameExists()">@Admin_Resources.ButtonSave</button>
                </div>
            }
            <div class="pull-right btn-container">
                <button type="button" data-test-selector="linkCancel" class="btn-text-icon" onclick="ZnodeBase.prototype.CancelUpload('divAddCustomerAsidePanel')"><em class='z-back'></em>@Admin_Resources.ButtonCancel</button>
            </div>
        </div>
        <section class="col-sm-12 page-container">
            <h3 data-test-selector="hdg@(Admin_Resources.ManageGeneralInformation.Replace(" ", ""))" class="section-heading">@Admin_Resources.ManageGeneralInformation</h3>

            @if (actionName.ToLower().Equals("customeredit"))
            {
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(m => m.StoreName, new { @class = "required", @data_test_selector = "lblStoreName" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(m => m.StoreName, new { @disabled = "disabled", @class = "readonly", @data_test_selector = "txtStoreName" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.UserName, new { @data_test_selector = "lblUserName" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.UserName, new { disabled = "disabled", @data_test_selector = "txtUserName" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            <label data-test-selector="lblResetPassword">@Admin_Resources.ButtonResetPassword</label>
                        </div>
                        <div class="control-md">
                            <button type="button" data-test-selector="btnSubmit" class="btn-text btn-text-secondary" data-toggle='modal' data-target='#PopUpConfirmResetPassword'>@Admin_Resources.ButtonSubmit</button>
                            @Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",
                            new PopupModel()
                            {
                            Title = @Admin_Resources.TitleConfirmResetPassword,

                            Description = @Admin_Resources.TextConformResetPassword,
                            ModalPopUpId = "PopUpConfirmResetPassword",
                            Buttons = new List<PopUpButtonModel>
                                () { new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, OnClickFunctionName = "User.prototype.ResetPasswordUsers()" } }
                                })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.Email, new { @data_test_selector = "lblEmail" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.Email, new { @data_test_selector = "txtEmail" })
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <div class="col-sm-12 nopadding">
                        <div class="control-label">
                            @Html.LabelFor(model => model.UserName, new { @class = "required", @data_test_selector = "lblUserName" })
                        </div>
                        <div class="control-md">
                            @Html.TextBoxFor(model => model.UserName, new { @data_test_selector = "txtUserName" })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { id = "errorUserName", @data_test_selector = "valUserName" })
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.ExternalId, new { @data_test_selector = "lblExternalId" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.ExternalId, new { @data_test_selector = "txtExternalId" })
                        @Html.ValidationMessageFor(model => model.ExternalId, "", new { @data_test_selector = "valExternalId" })
                    </div>
                    @Html.Partial("_HelpText", @Admin_Resources.NoteExternalId)
                </div>
            </div>

            <h3 data-test-selector="hdg@(Admin_Resources.ManageLoginInformation.Replace(" ", ""))" class="section-heading margin-top-25">@Admin_Resources.ManageLoginInformation</h3>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.FirstName, new { @class = "required", @data_test_selector = "lblFirstName" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.FirstName, new { @data_test_selector = "txtFirstName" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { id = "errorFirstName", @data_test_selector = "valFirstName" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.LastName, new { @class = "required", @data_test_selector = "lblLastName" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.LastName, new { @data_test_selector = "txtLastName" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { id = "errorLastName", @data_test_selector = "valLastName" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.PhoneNumber, new { @data_test_selector = "lblPhoneNumber" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.PhoneNumber, new { @data_test_selector = "txtPhoneNumber" })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @data_test_selector = "valPhoneNumber" })
                    </div>
                    @Html.Partial("_HelpText", @Admin_Resources.HelptextPhoneNumber)
                </div>
            </div>


            @if (actionName.ToLower().Equals("customeredit"))
            {
                <div class="form-group">
                    <div class="control-md control-non">
                        <label>
                            <input type="checkbox" name="EmailOptIn" data-test-selector="chkEmailOptIn" value="true" checked="@Model.EmailOptIn" />
                            <span class="lbl padding-8" data-test-selector="spnEmailOptIn">@Admin_Resources.NoteSendPeriodicMail</span>
                            <input name="CustomerAccount.EmailOptIn" type="hidden" value="false">
                        </label>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <div class="control-md control-non">
                        <label>
                            <input type="checkbox" name="EmailOptIn" data-test-selector="chkEmailOptIn" value="true" checked="checked" />
                            <span class="lbl padding-8" data-test-selector="spnEmailOptIn">@Admin_Resources.NoteSendPeriodicMail</span>
                            <input name="CustomerAccount.EmailOptIn" type="hidden" value="false">
                        </label>
                    </div>
                </div>
            }

            <div class="form-group">
                <div class="control-md control-non">
                    <label>
                        <input @(Model.SMSOptIn ? "checked='checked'" : "") type="checkbox" name="SMSOptIn" value="true" data-test-selector="chkSendSMSNotification" />
                        <span class="lbl padding-8" data-test-selector="spnSendSMSNotification">@Admin_Resources.NoteSendSMSNotification</span>
                        <input name="CustomerAccount.SMSOptIn" type="hidden" value="false">
                    </label>
                </div>
            </div>

            <h3 data-test-selector="hdg@(Admin_Resources.ManageCustomInformation.Replace(" ", ""))" class="section-heading margin-top-25">@Admin_Resources.ManageCustomInformation</h3>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.AccountName, new { @class = "required", @data_test_selector = "lblAccountName" })
                    </div>
                    <div class="control-md">
                        @Html.TextBoxFor(model => model.AccountName, new { disabled = "disabled", @data_test_selector = "txtAccountName" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.Label(Admin_Resources.LabelDepartment, new { @data_test_selector = "lblDepartment" })
                    </div>
                    <div class="control-md">
                        @Html.DropDownListFor(model => model.DepartmentId, Model.AccountDepartmentList, Admin_Resources.LabelSelectDepartment, new { @data_test_selector = "drpDepartment" })
                        @Html.HiddenFor(model => model.DepartmentId)
                    </div>
                </div>
            </div>

            <div class="form-group" id="divUserTypeId">
                <div class="col-sm-12 nopadding">
                    <div class="control-label">
                        @Html.LabelFor(model => model.RoleName, new { @data_test_selector = "lblRoleName", @class = "required" })
                    </div>
                    <div class="control-md">
                        @Html.DropDownListFor(model => model.RoleName, Model.Roles ?? new List<SelectListItem>
                         (), new { @id = "ddlUserType", @data_test_selector = "drpUserType", @OnChange = "User.prototype.OnUserTypeSelection();" })

                        @Html.ValidationMessageFor(model => model.RoleName, "", new { @data_test_selector = "valRoleName", id = "valRoleName" })
                        @Html.HiddenFor(m => m.RoleName, new { @id = "hdnRoleName" })
                    </div>
                </div>
            </div>

            @Html.HiddenFor(model => model.UserName)
            @Html.HiddenFor(model => model.AspNetUserId)
            @Html.HiddenFor(model => model.AccountId)
            @Html.HiddenFor(model => model.UserId)
            @Html.HiddenFor(model => model.AccountPermissionAccessId)
            @Html.HiddenFor(model => model.AccountUserOrderApprovalId)
            @Html.HiddenFor(model => model.PermissionsName)
            @Html.HiddenFor(model => model.PortalId)
        </section>
    }
</div>
<script>
    $(document).ready(function () {
        $('form').removeData('validator'); $('form').removeData('unobtrusiveValidation'); $.validator.unobtrusive.parse('form');
        Account.prototype.ValidateAccountsCustomer();
        User.prototype.OnUserTypeSelection();
        GiftCard.prototype.GetActiveCurrencyToStore("");
    })
</script>

