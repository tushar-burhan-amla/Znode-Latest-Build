@model Znode.Engine.Admin.ViewModels.CustomerViewModel
@using Znode.Engine.Admin.Helpers
@using Znode.Libraries.ECommerce.Utilities
@{
    ViewBag.Title = Admin_Resources.LabelAdmin + " | " + Admin_Resources.Multifront; ;
    string actionName = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string Title = actionName.ToLower().Equals("customeredit") ? "Edit" : "Add";
    string styleToDisplayContent = Model.AccountId > 0 ? "style=display:none" : "";
}
<div id="divtaxProductListPopup">
    <div id="aside-popup-panel">
        <div id="grid-container">
            <div class="col-sm-12 title-container">
                <h1 data-test-selector="hdgAddCustomer">@Title @Admin_Resources.CustomerHeader</h1>
                <div class="pull-right btn-container">
                    <button type="button" class="btn-text-icon margin-bottom-8" onclick="ZnodeBase.prototype.CancelUpload('customerDetails')" data-test-selector="linkCancel"><em class='z-back'></em>@Admin_Resources.ButtonCancel</button>
                    <div class="pull-right padding-left">
                        <button type="submit" class="btn-text btn-text-secondary" id="submitbtn" form="frmCreateCustomer" onclick="Order.prototype.SetPortalId()" data-test-selector="linkSave">@Admin_Resources.ButtonSave</button>
                    </div>
                </div>
            </div>

            <div class="col-sm-12 page-container">
                <div class="col-sm-12 nopadding">
                    <div class="messageBoxContainer error-msg text-center margin-bottom" id="error-create-customer" data-test-selector="divErrorCreateCustomer"></div>
                </div>
                @using (Ajax.BeginForm(actionName, controllerName, new AjaxOptions() { HttpMethod = "post", OnBegin = "Order.prototype.ShowLoader()", OnSuccess = "Order.prototype.AddCustomerSuccessCallback" }, new { @id = "frmCreateCustomer" }))
                {
                    <div class="col-sm-7 nopadding">
                        <p class="sub" data-test-selector="paraTextAddCustomer">@Admin_Resources.TextAddCustomer</p>
                    </div>
                    <br />

                    <div class="col-sm-6 nopadding">
                        <h3 class="section-heading" data-test-selector="hdgGeneralInformation">@Admin_Resources.ManageGeneralInformation</h3>
                        <div class="form-group">
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.UserName, new { @class = "required", @data_test_selector = "lblUserName" })
                                </div>
                                <div class="control-md">
                                    @Html.TextBoxFor(model => model.UserName, new { @data_test_selector = "txtUserName" })
                                    @Html.ValidationMessageFor(model => model.UserName, "", new { @data_test_selector = "valUserName" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.ExternalId, new { @data_test_selector = "lblExternalId" })
                                </div>
                                <div class="control-md">
                                    @Html.TextBoxFor(model => model.ExternalId, new { @maxlength = 50, @data_test_selector = "txtExternalId" })
                                    @Html.ValidationMessageFor(model => model.ExternalId, "", new { @data_test_selector = "valExternalId" })
                                </div>
                                @Html.Partial("_HelpText", @Admin_Resources.NoteExternalId)
                            </div>
                        </div>
                        @if (!DefaultSettingHelper.AllowGlobalLevelUserCreation)
                        {
                            <div class="form-group" id="ddlPortals">
                                <div class="col-sm-12 nopadding">
                                    <div class="control-label">
                                        @Html.LabelFor(m => m.Portals, new { @class = "required", @data_test_selector = "lblStore" })
                                    </div>
                                    <div class="control-md">
                                        <div id="areaList">
                                            @Html.TextBoxFor(m => m.StoreName, new { @disabled = "disabled", @class = "readonly", @placeholder = Admin_Resources.LabelSelectStore, @id = "txtPortalName", @data_test_selector = "txtStore" })
                                            @Html.ValidationMessageFor(model => model.StoreName, null, new { id = "errorRequiredStore", @data_test_selector = "valStore" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-sm-6 pull-right">
                        <h3 class="section-heading" data-test-selector="hdgLoginInformation">@Admin_Resources.ManageLoginInformation</h3>
                        <div class="form-group">
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.FirstName, new { @class = "required", @data_test_selector = "lblFirstName" })
                                </div>
                                <div class="control-md">
                                    @Html.TextBoxFor(model => model.FirstName, new { @data_test_selector = "txtFirstName" })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @data_test_selector = "valFirstName" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.LastName, new { @class = "required", @data_test_selector = "lblLastName" })
                                </div>
                                <div class="control-md">
                                    @Html.TextBoxFor(model => model.LastName, new { @data_test_selector = "txtLastName" })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @data_test_selector = "valLastName" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.PhoneNumber, new { @data_test_selector = "lblPhoneNumber" })
                                </div>
                                <div class="control-md">
                                    @Html.TextBoxFor(model => model.PhoneNumber, new { @data_test_selector = "txtPhoneNumber" })
                                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @data_test_selector = "valPhoneNumber" })
                                </div>
                                @Html.Partial("_HelpText", @Admin_Resources.HelptextPhoneNumber)
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="control-md control-non">
                                <label>
                                    <input type="checkbox" name="EmailOptIn" value="true" checked="checked" data-test-selector="chkSendPeriodicMail" />
                                    <span class="lbl padding-8" data-test-selector="spnSendPeriodicMail">@Admin_Resources.NoteSendPeriodicMail</span>
                                    <input name="CustomerAccount.EmailOptIn" type="hidden" value="false">
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="control-md control-non">
                                <label>
                                    <input @(Model.SMSOptIn ? "checked='checked'" : "") type="checkbox" name="SMSOptIn" value="true" data-test-selector="chkSendSMSNotification" />
                                    <span class="lbl padding-8" data-test-selector="spnSendSMSNotification">@Admin_Resources.NoteSendSMSNotification</span>
                                    <input name="CustomerAccount.SMSOptIn" type="hidden" value="false">
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.AccountId, new { @id = "lblAccountId", @data_test_selector = "lblAccount" })
                                </div>
                                <div class="control-md account-typehead text-break">
                                    <div id="divAccountSelect">
                                        @Html.FastSelectFor(model => model.AccountName, model => model.AccountId, "GetSuggestions", "Typeahead", "Order.prototype.OnSelectAccount", 1, false,
                                        new
                                        {
                                        htmlAttributes = new { @placeholder = Admin_Resources.LabelSelectAccount, @class = "", @id = "txtAccountName", @data_test_selector = "txtAccount" },
                                        parameters = new { @type = ZnodeTypeAheadEnum.AccountList.ToString(), @fieldname = "", @query = "", @additionalOptions = "", @mappingId = Model.PortalId, @pageSize = ZnodeConstant.DefaultTypeAheadPageSize }
                                        })
                                    </div>
                                </div>
                            </div>
                        </div>
                        @{styleToDisplayContent = Model.AccountId > 0 ? "" : "style=display:none";
                        }
                        <div class="form-group" id="divDepartmentId" @styleToDisplayContent>
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.DepartmentId, new { @data_test_selector = "lblDepartment" })
                                </div>
                                <div class="control-md">
                                    @Html.DropDownListFor(model => model.DepartmentId, Model.Departments ?? new List<SelectListItem>(), Admin_Resources.LabelSelectDepartment, new { @id = "ddlDepartment", @data_test_selector = "drpDepartment" })
                                    @Html.HiddenFor(model => model.DepartmentId)
                                </div>
                            </div>
                        </div>
                        @{styleToDisplayContent = Model.AccountId > 0 ? "" : "style=display:none";
                        }
                        <div class="form-group" id="divUserTypeId" @styleToDisplayContent>
                            <div class="col-sm-12 nopadding">
                                <div class="control-label">
                                    @Html.LabelFor(model => model.RoleName, new { @data_test_selector = "lblRoleName", @class = "required" })
                                </div>
                                <div class="control-md">
                                    @Html.DropDownListFor(model => model.RoleName, Model.Roles ?? new List<SelectListItem>(), new { @id = "ddlUserType", @OnChange = "User.prototype.OnUserTypeSelection();", @data_test_selector = "drpRoleName" })
                                    @Html.ValidationMessageFor(model => model.RoleName, "", new { @data_test_selector = "valRoleName", id = "valRoleName" })
                                    @Html.HiddenFor(model => model.RoleName, new { @id = "hdnRoleName" })
                                </div>
                            </div>
                        </div>
                        @Html.HiddenFor(model => model.UserName)
                        @Html.HiddenFor(model => model.StoreName)
                        @Html.HiddenFor(model => model.AspNetUserId)
                        @Html.HiddenFor(model => model.AccountId)
                        @Html.HiddenFor(model => model.PortalId)
                        @Html.Hidden("hdnCreatedUserId", Model.UserId)
                        @Html.HiddenFor(model => model.IsSelectAllPortal)
                        @Html.HiddenFor(model => model.Email)
                        @Html.HiddenFor(model => model.AccountPermissionAccessId)
                        @Html.Hidden("hdnErrorMessage", Model.ErrorMessage)
                        @Html.Hidden("hdnHasError", Model.HasError)
                    </div>
                }
            </div>

        </div>
    </div>
</div>
<script src="~/Scripts/Core/Controls/Fastselect.standalone.js"></script>
<script src="~/Content/bootstrap-3.3.7/js/bootstrap-multiselect.js" type="text/javascript"></script>
<script src="~/Scripts/References/fastselect.mvc.model.js"></script>
<script>
    $("#AreaId").multiselect({ includeSelectAllOption: false, enableCaseInsensitiveFiltering: false });
    $("#portals").multiselect({ includeSelectAllOption: true, enableCaseInsensitiveFiltering: false });
    $(document).ready(function () {
        ZnodeBase.prototype.RemoveAndAddUnobtrusiveValidation();
        GiftCard.prototype.GetActiveCurrencyToStore("");
        Order.prototype.MakeAccountIdMandetory();
        $('#txtAccountName').fastselect();
    });
    $('[data-toggle="tooltip"]').tooltip();
</script>
