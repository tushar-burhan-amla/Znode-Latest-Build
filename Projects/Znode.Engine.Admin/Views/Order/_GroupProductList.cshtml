@using Znode.Engine.Admin.ViewModels
@using Znode.Libraries.ECommerce.Utilities
@using Znode.Engine.Admin.Helpers
@model  List<GroupProductViewModel>
@{
    Layout = null;
    GroupProductViewModel groupProduct = Model?.Where(x => x.SalesPrice != null)?.OrderBy(y => (y.SalesPrice != null) ? y.SalesPrice : y.RetailPrice)?.FirstOrDefault();
    string inventoryRoundOff = DefaultSettingHelper.DefaultInventoryRoundOff;
    string message = (!Equals(groupProduct, null) && (!Equals(groupProduct.SalesPrice, null) || !Equals(groupProduct.RetailPrice, null))) ? string.Format(WebStore_Resources.GroupProductMessage, HelperMethods.FormatPriceWithCurrency(groupProduct.SalesPrice, groupProduct.CultureCode)) : string.Empty;    
}
@if (Model?.Count > 0)
{
    <span id="group-product-error" data-test-selector="spnGroupProductError" class="error-msg"></span>
    <div class="col-xs-12 col-sm-12 nopadding" id="dynamic-product-variations">
        @foreach (GroupProductViewModel product in Model?.OrderBy(x => x.AssociatedProductDisplayOrder))
        {
            decimal quantity = string.IsNullOrEmpty(product.Attributes?.Value(ZnodeConstant.MinimumQuantity)) ? 1 : Convert.ToDecimal(product.Attributes?.Value(ZnodeConstant.MinimumQuantity));
            <div class="col-sm-12 nopadding group-product-list">
                <div class="form-group">
                    <div class="col-sm-2 nopadding">
                        <img src="@product.ImageThumbNailPath" alt="@product.Name Image" class="img-responsive" data-test-selector="imgProductImage" />
                    </div>
                    @if (product.IsCallForPricing)
                    {
                        <div class="col-sm-10">
                            <h4 data-test-selector="hdgProductName">@product.Name</h4>
                            <div class="price">@Admin_Resources.LabelCallForPrice</div>
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-10 nopadding">
                            <div class="col-sm-10">
                                <div class="col-sm-12 nopadding">
                                    <h4 data-test-selector="hdgProductName">@product.Name</h4>
                                </div>
                                
                                @if (product.ShowAddToCart)
                                {
                                    <input type="text" class="quantity" name="@product.SKU" style="width:50px;" data-sku="@product.SKU" data-productname="@product.Name" data-inventoryRoundOff="@inventoryRoundOff" data-productId="@product.PublishProductId" onchange="Order.prototype.OnAssociatedProductQuantityChange(this)" data-test-selector="txtQuantity"  value="@quantity"/><span data-test-selector="spnQuantity">&nbsp;&nbsp;@Admin_Resources.LabelQuantity</span>
                                    <div id="quantity-error-msg_@product.PublishProductId" class="status-outofstock hvr-pulse error-msg" data-test-selector="valQuantity"></div>
                                }
                                else
                                {
                                    <div id="quantity-error-msg_@product.PublishProductId" class="status-outofstock hvr-pulse error-msg" data-test-selector="valQuantity">@product.InventoryMessage</div>
                                }
                            </div>
                            <div class="col-sm-2 nopadding text-right margin-top-5 margin-bottom-5">
                                @if (!Equals(product.SalesPrice, null))
                                {
                                    <span class="dynamic-product-price_@product.SKU" data-test-selector="divProductPrice">@HelperMethods.FormatPriceWithCurrency(product.SalesPrice, product.CultureCode)</span>
                                    if (product.SalesPrice != @product.RetailPrice)
                                    {
                                        <span class="cut-price">
                                            @HelperMethods.FormatPriceWithCurrency(product.RetailPrice, product.CultureCode)
                                        </span>
                                    }
                                }
                                else
                                {
                                        <span class="dynamic-product-price_@product.SKU" data-test-selector="divProductPrice">@HelperMethods.FormatPriceWithCurrency(product.RetailPrice, product.CultureCode)</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    @Html.Hidden("isAddToCart", false);
    @Html.Hidden("groupproductmessage", message);
}


