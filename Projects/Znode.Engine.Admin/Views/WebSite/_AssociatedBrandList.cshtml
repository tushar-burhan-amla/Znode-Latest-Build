@model Znode.Engine.Admin.ViewModels.BrandListViewModel
@using Znode.Engine.Admin.Models
@using Znode.Libraries.ECommerce.Utilities
@using Znode.Libraries.Resources
@using Znode.Engine.Admin.Helpers
@{
    ViewBag.Title = Admin_Resources.TitleCMS + " | " + Admin_Resources.Multifront;
    string cancelUrl = Equals(Model.TypeOFMapping, ZnodeCMSTypeofMappingEnum.PortalMapping.ToString())
                ? string.IsNullOrEmpty(Model?.FileName) ? $"/StoreExperience/StoreSetting?portalId={Model.CMSMappingId}" : $"/StoreExperience/StoreSetting?portalId={Model.CMSMappingId}&fileName={Model.FileName}"
        : string.IsNullOrEmpty(Model?.FileName) ? $"/Content/EditContentPage?cmsContentPagesId={Model.CMSMappingId}" : $"/Content/EditContentPage?cmsContentPagesId={Model.CMSMappingId}&fileName={Model.FileName}";
}

<div id="@Model.GridModel.FrontObjectName">
    <div id="associate-store-btn" style="display:none"></div>
    <div id="associateBrandList" class="aside-popup-panel modal-dialog modal-lg">
        @*Brand list will display in this div*@
    </div>

    <div id="ContentAssociatedBrandList">
        <div class="col-sm-12 title-container">
            @{
                string widgetName = string.IsNullOrEmpty(Admin_Resources.ResourceManager.GetString(string.Concat(AdminConstants.ZWidgetDisplayName, @Model.WidgetName))) ? @Model.WidgetName : Admin_Resources.ResourceManager.GetString(string.Concat(AdminConstants.ZWidgetDisplayName, @Model.WidgetName));
                <h1>@Admin_Resources.TextConfigure<em class="z-minus"></em><span>@widgetName</span></h1>
            }
                <div class="pull-right btn-container">
                    @if (Equals(Model.TypeOFMapping, ZnodeCMSTypeofMappingEnum.PortalMapping.ToString()))
                    {
                        <a class="btn-text-icon pull-left" onclick="window.location.href = '@cancelUrl'"><em class="z-back"></em>@Admin_Resources.ButtonBack</a>
                    }
                    else
                    {
                        <button type="button" class="btn-text-icon pull-left" data-test-selector="linkBack" onclick="ZnodeBase.prototype.CancelUpload('associatedPanel')"><em class="z-back"></em>@Admin_Resources.ButtonBack</button>
                    }
                    @Ajax.AuthorizedRawActionLink(Admin_Resources.TextAssociateBrand,
                        "GetUnAssociatedBrandList", "WebSite", new { cmsWidgetsId = Model.CMSWidgetsId, cmsMappingId = Model.CMSMappingId, widgetKey = Model.WidgetsKey, typeOfMapping = Model.TypeOFMapping, widgetName = Model.WidgetName, displayName = Model.DisplayName, fileName = Model.FileName }, new AjaxOptions { UpdateTargetId = "associateBrandList", InsertionMode = InsertionMode.Replace, OnBegin = "$('body').append(\"<div class='modal-backdrop fade in'></div>\");", OnSuccess = "$('#associateBrandList').show(700);" }, new { @class = "btn-text btn-text-secondary margin-left-10" })
                </div>
        </div>
        <!--Main Container-->
        <section class="col-sm-12 page-container">
            @using (Ajax.BeginForm("GetAssociatedBrandList", "WebSite", new { cmsWidgetsId = Model.CMSWidgetsId, cmsMappingId = Model.CMSMappingId, widgetKey = Model.WidgetsKey, typeOFMapping = Model.TypeOFMapping, displayName = Model.DisplayName, widgetName = Model.WidgetName }, new AjaxOptions() { UpdateTargetId = Model.GridModel.FrontObjectName, OnSuccess = "GridPager.prototype.GridUpdateHandler" }, new { @id = "searchform" }))
            {
                <div id="filterComponent">
                    @Html.Partial("~/Views/DynamicGrid/_FilterComponent.cshtml", Model.GridModel.FilterColumn)
                </div>
            }
            <div class="col-sm-12 list-container">
                @{
                    @Html.Partial("~/Views/DynamicGrid/_DynamicGrid.cshtml", Model.GridModel)
                }
            </div>
            @Html.Partial("~/Views/Shared/Controls/_PopUp.cshtml",
        new PopupModel()
        {
            Title = @Admin_Resources.HeaderConfirmDelete,
            Description = @Admin_Resources.TextConfirmDelete,
            ModalPopUpId = "OfferBrandsDelete",
            Buttons = new List<PopUpButtonModel>
            () {
            new PopUpButtonModel { ButtonText = @Admin_Resources.TextOk, ButtonAttributes="data-dismiss=modal",OnClickFunctionName = "WebSite.prototype.DeleteAssociatedBrands(this)"}
            }
        })
            @Html.HiddenFor(x => x.CMSWidgetsId)
            @Html.HiddenFor(x => x.CMSMappingId)
            @Html.HiddenFor(x => x.TypeOFMapping)
            @Html.HiddenFor(x => x.WidgetsKey)
            @Html.HiddenFor(x => x.DisplayName)
            @Html.HiddenFor(x => x.WidgetName)
            @Html.HiddenFor(x => x.FileName)
        </section>
    </div>
</div>

<script>
    $(document).ready(function () { EditableGridEvent.Init(); });
    $("input[data-columnname='DisplayOrder']").on("change", function () {
        if ($(this).val())
            validateForm = Products.prototype.ValidateDisplayOrderField(this);
    });
</script>
