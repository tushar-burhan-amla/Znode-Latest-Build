using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Diagnostics;
using System.Linq;
using Znode.Engine.Api.Models;
using Znode.Engine.Exceptions;
using Znode.Engine.Services.Helper;
using Znode.Engine.Services.Maps;
using Znode.Libraries.Caching.Events;
using Znode.Libraries.Data;
using Znode.Libraries.Data.DataModel;
using Znode.Libraries.Data.Helpers;
using Znode.Libraries.ECommerce.Utilities;
using Znode.Libraries.Framework.Business;
using Znode.Libraries.Resources;
using static Znode.Libraries.ECommerce.Utilities.ZnodeDependencyResolver;

namespace Znode.Engine.Services
{
    public class CustomerReviewService : BaseService, ICustomerReviewService
    {
        #region Private Variable
        private readonly IZnodeRepository<ZnodeCMSCustomerReview> _customerReviewRepository;
        private readonly IZnodeRepository<ZnodePortalCatalog> _portalCatalogRepository;
        #endregion

        #region Constructor
        public CustomerReviewService()
        {
            _customerReviewRepository = new ZnodeRepository<ZnodeCMSCustomerReview>();
            _portalCatalogRepository = new ZnodeRepository<ZnodePortalCatalog>();
        }
        #endregion

        #region Public Methods
        public virtual CustomerReviewListModel GetCustomerReviewList(string localeId, FilterCollection filters, NameValueCollection sorts, NameValueCollection page)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameter localeId: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, localeId);

            //Check if filter contains status as Active, Inactive or New and create filters for them.
            CheckAndCreateStatusFilter(filters, localeId);
            int portalId;
            Int32.TryParse(filters.FirstOrDefault(x => x.FilterName.Equals(FilterKeys.PortalId, StringComparison.InvariantCultureIgnoreCase))?.FilterValue, out portalId);
            filters.RemoveAll(x => x.FilterName.Equals(FilterKeys.PortalId, StringComparison.InvariantCultureIgnoreCase));

            int localeID;
            Int32.TryParse(filters.FirstOrDefault(x => x.FilterName.Equals(FilterKeys.LocaleId, StringComparison.InvariantCultureIgnoreCase))?.FilterValue, out localeID);
            filters.RemoveAll(x => x.FilterName.Equals(FilterKeys.LocaleId, StringComparison.InvariantCultureIgnoreCase));

            ZnodeLogging.LogMessage("portalId and localeID generated by filters: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, new object[]{portalId, localeID});

            CustomerReviewListModel listModel = new CustomerReviewListModel();
            PageListModel pageListModel = new PageListModel(filters, sorts, page);
            ZnodeLogging.LogMessage("pageListModel generated to get customer review list: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, pageListModel?.ToDebugString());

            IZnodeViewRepository<CustomerReviewModel> objStoredProc = new ZnodeViewRepository<CustomerReviewModel>();

            //SP parameters
            objStoredProc.SetParameter("@WhereClause", pageListModel.SPWhereClause, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("@Rows", pageListModel.PagingLength, ParameterDirection.Input, DbType.Int32);
            objStoredProc.SetParameter("@PageNo", pageListModel.PagingStart, ParameterDirection.Input, DbType.Int32);
            objStoredProc.SetParameter("@Order_By", pageListModel.OrderBy, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("@RowCount", pageListModel.TotalRowCount, ParameterDirection.Output, DbType.Int32);
            objStoredProc.SetParameter("@LocaleId", localeID, ParameterDirection.Input, DbType.Int32);
            objStoredProc.SetParameter("@PortalId", portalId, ParameterDirection.Input, DbType.Int32);

            listModel.CustomerReviewList = objStoredProc.ExecuteStoredProcedureList("Znode_GetCMSCustomerReviewInformation  @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT,@LocaleId,@PortalId", 4, out pageListModel.TotalRowCount).ToList();
            listModel.BindPageListModel(pageListModel);
            ZnodeLogging.LogMessage("customerReviewList count: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, listModel.CustomerReviewList?.Count);
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            return listModel;
        }

        //Get Customer Review by Customer Review Id.
        public virtual CustomerReviewModel GetCustomerReview(int customerReviewId, string localeId)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameters customerReviewId and localeId: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, new object[] { customerReviewId, localeId });

            if (customerReviewId > 0)
            {
                //Filter for CustomerReviewId
                FilterCollection filter = new FilterCollection();
                filter.Add(new FilterTuple(ZnodeCMSCustomerReviewEnum.CMSCustomerReviewId.ToString(), ProcedureFilterOperators.Equals, customerReviewId.ToString()));

                //GetEntity call for getting navigation property also.
                ZnodeCMSCustomerReview customerReview = _customerReviewRepository.GetEntity(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filter.ToFilterDataCollection()).WhereClause);
                if (HelperUtility.IsNotNull(customerReview))
                {                     
                    CustomerReviewModel customerReviewModel = customerReview.ToModel<CustomerReviewModel>();

                    //Binds product name 
                    customerReviewModel.ProductName = GetService<IPublishedProductDataService>().GetProductNameBySKU(customerReviewModel.SKU, Convert.ToInt32(localeId), GetVersionId(localeId, customerReviewModel.PortalId));

                    ZnodeLogging.LogMessage("customerReviewModel to be returned: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info, customerReviewModel);
                    ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
                    return HelperUtility.IsNotNull(customerReview) ? customerReviewModel : null;
                }
                return null;
            }
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            return null;
        }

        //To get catalogVersionId
        private int GetVersionId(string localeId, int portalId)
        {
            FilterCollection filters = new FilterCollection();
            filters.Add(new FilterTuple(ZnodeCMSCustomerReviewEnum.PortalId.ToString(), FilterOperators.Equals, portalId.ToString()));
            int? publishCatalogId = _portalCatalogRepository.GetEntity(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filters.ToFilterDataCollection())?.WhereClause)?.PublishCatalogId;
            int versionId = GetCatalogVersionId((int)publishCatalogId, Convert.ToInt32(localeId), Convert.ToInt32(portalId)) ?? 0;

            return versionId;
        }

        //Update Customer Review.
        public virtual bool UpdateCustomerReview(CustomerReviewModel customerReviewModel)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            if (HelperUtility.IsNull(customerReviewModel))
                throw new ZnodeException(ErrorCodes.InvalidData,Admin_Resources.ModelCanNotBeNull);

            if (customerReviewModel.CMSCustomerReviewId < 1)
                throw new ZnodeException(ErrorCodes.InvalidData,Admin_Resources.IdCanNotBeLessThanOne);
            ZnodeLogging.LogMessage("Input parameter customerReviewModel: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, customerReviewModel);
            customerReviewModel.PortalId = _customerReviewRepository.Table.Where(x => x.CMSCustomerReviewId == customerReviewModel.CMSCustomerReviewId)?.Select(x => x.PortalId)?.FirstOrDefault() ?? 0;

            //Update Customer Review.
            bool isCustomerReviewUpdated = _customerReviewRepository.Update(customerReviewModel.ToEntity<ZnodeCMSCustomerReview>());
            ZnodeLogging.LogMessage(isCustomerReviewUpdated ? Admin_Resources.SuccessCustomerReviewUpdate : Admin_Resources.ErrorCustomerReviewUpdate, ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            if(isCustomerReviewUpdated && customerReviewModel.PortalId > 0)
            { 
                ClearCacheHelper.EnqueueEviction(new CustomerReviewUpdateEvent()
                {
                    Comment = "From updating customer review."
                    // TODO - Pass along more specific information to support finer-grained cache eviction.
                });
            }
            return isCustomerReviewUpdated;
        }

        //Delete Customer Review.
        public virtual bool DeleteCustomerReview(ParameterModel customerReviewIds)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            if (string.IsNullOrEmpty(customerReviewIds.Ids))
                throw new ZnodeException(ErrorCodes.InvalidData, Admin_Resources.ErrorCustomerIdNull);
            ZnodeLogging.LogMessage("Input parameter customerReviewIds to delete customer review: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, customerReviewIds);
            //Generates filter clause for multiple customer review ids.
            FilterCollection filter = new FilterCollection();
            filter.Add(new FilterTuple(ZnodeCMSCustomerReviewEnum.CMSCustomerReviewId.ToString(), ProcedureFilterOperators.In, customerReviewIds.Ids));

            //Returns true if customer review deleted successfully else return false.
            bool IsDeleted = _customerReviewRepository.Delete(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filter.ToFilterDataCollection()).WhereClause);
            ZnodeLogging.LogMessage(IsDeleted ? String.Format(Admin_Resources.SuccessCustomerReviewDelete, customerReviewIds.Ids) : String.Format(Admin_Resources.ErrorCustomerReviewDelete,customerReviewIds.Ids), ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            return IsDeleted;
        }

        //Change customer review status.
        public virtual bool BulkStatusChange(ParameterModel customerReviewId, string statusId)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameters customerReviewId and statusId: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, new object[] { customerReviewId, statusId });

            bool isUpdated = false;
            FilterCollection filterList = new FilterCollection();
            filterList.Add(new FilterTuple(ZnodeCMSCustomerReviewEnum.CMSCustomerReviewId.ToString(), ProcedureFilterOperators.In, customerReviewId.Ids));

            var list = _customerReviewRepository.GetEntityList(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filterList.ToFilterDataCollection()).WhereClause).ToList();
            if (list?.Count > 0)
            {
                //For New Status.
                if (statusId == ZnodeConstant.New)
                    isUpdated = ChangeStatus(list, ZnodeConstant.New);

                //For Active Status.
                else if (statusId == ZnodeConstant.Active)
                    isUpdated = ChangeStatus(list, ZnodeConstant.Active);

                //For Inactive Status.
                else
                    isUpdated = ChangeStatus(list, ZnodeConstant.Inactive);
            }
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            return isUpdated;
        }

        //Create Customer Review.
        public virtual CustomerReviewModel Create(CustomerReviewModel customerReviewModel)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);

            if (HelperUtility.IsNull(customerReviewModel))
                throw new ZnodeException(ErrorCodes.InvalidData, Admin_Resources.ModelCanNotBeNull);
            ZnodeLogging.LogMessage("Input parameter customerReviewModel: ", ZnodeLogging.Components.CMS.ToString(), TraceLevel.Verbose, customerReviewModel);

            customerReviewModel.Status = ZnodeConfigManager.SiteConfig.DefaultReviewStatus;
            //create Customer Review.
            ZnodeCMSCustomerReview entity = _customerReviewRepository.Insert(customerReviewModel.ToEntity<ZnodeCMSCustomerReview>());

            //Used Cache Eviction for clearing the cache.
            if (HelperUtility.IsNotNull(entity) && customerReviewModel.PortalId > 0)
            {
                ClearCacheHelper.EnqueueEviction(new CustomerReviewUpdateEvent()
                {
                    Comment = "From creating customer review."
                });
            }

            ZnodeLogging.LogMessage(HelperUtility.IsNotNull(entity) ? Admin_Resources.SuccessCustomerReviewCreate :Admin_Resources.ErrorCustomerReviewCreate, ZnodeLogging.Components.CMS.ToString(), TraceLevel.Info);
            return entity?.CMSCustomerReviewId > 0 ? entity.ToModel<CustomerReviewModel>() : customerReviewModel;
        }
        #endregion

        #region Private Methods
        //Check if filter contains status as Active, Inactive or New and create filters for them.
        private static void CheckAndCreateStatusFilter(FilterCollection filters, string localeId)
        {
            if (Equals(filters?.Where(x => x.FilterName == ZnodeCMSCustomerReviewEnum.Status.ToString().ToLower())?.FirstOrDefault()?.FilterValue, "inactive") || Equals(filters?.Where(x => x.FilterName == ZnodeCMSCustomerReviewEnum.Status.ToString().ToLower())?.FirstOrDefault()?.FilterValue, "active") || Equals(filters?.Where(x => x.FilterName == ZnodeCMSCustomerReviewEnum.Status.ToString().ToLower())?.FirstOrDefault()?.FilterValue, "new"))
            {
                string status = filters?.Where(x => x.FilterName == ZnodeCMSCustomerReviewEnum.Status.ToString().ToLower())?.FirstOrDefault()?.FilterValue.Substring(0, 1);
                if (filters.Any(x => x.FilterName == ZnodeCMSCustomerReviewEnum.Status.ToString().ToLower()))
                {
                    filters?.Remove(filters.FirstOrDefault(x => x.FilterName == ZnodeCMSCustomerReviewEnum.Status.ToString().ToLower()));
                    filters?.Add(ZnodeCMSCustomerReviewEnum.Status.ToString(), ProcedureFilterOperators.Is, status?.ToString());
                }
            }
            filters?.Add(ZnodeLocaleEnum.LocaleId.ToString(), ProcedureFilterOperators.Is, localeId);
        }

        //Change review status.
        private bool ChangeStatus(List<ZnodeCMSCustomerReview> list, string status)
        {
            bool isUpdated = new bool();
            //Remove items from the list which already have the same status.
            list?.RemoveAll(x => x.Status == status);
            list?.ForEach(x => x.Status = status);
            if(HelperUtility.IsNotNull(list))
                isUpdated = list.TrueForAll(x => _customerReviewRepository.Update(x));
            return isUpdated;
        }
        #endregion
    }
}
