using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Diagnostics;
using System.Linq;
using Znode.Engine.Api.Models;
using Znode.Engine.Exceptions;
using Znode.Engine.Services.Maps;
using Znode.Libraries.Data;
using Znode.Libraries.Data.DataModel;
using Znode.Libraries.Data.Helpers;
using Znode.Libraries.ECommerce.Utilities;
using Znode.Libraries.Framework.Business;
using static Znode.Libraries.ECommerce.Utilities.HelperUtility;
using static Znode.Libraries.ECommerce.Utilities.ZnodeDependencyResolver;
using Znode.Libraries.Resources;

namespace Znode.Engine.Services
{
    public class GlobalAttributeService : BaseService, IGlobalAttributeService
    {
        #region Private Variables
        protected readonly IZnodeRepository<ZnodeAttributeType> _attributeTypeRepository;
        protected readonly IZnodeRepository<ZnodeGlobalAttribute> _globalAttributeRepository;
        protected readonly IZnodeRepository<ZnodeGlobalAttributeValidation> _validationRepository;
        protected readonly IZnodeRepository<ZnodeGlobalAttributeLocale> _LocaleRepository;
        protected readonly IZnodeRepository<ZnodeGlobalAttributeDefaultValue> _defaultValueRepository;
        protected readonly IZnodeRepository<ZnodeGlobalAttributeDefaultValueLocale> _defaultValueLocaleRepository;
        protected readonly IZnodeRepository<ZnodeAttributeInputValidation> _inputValidationRepository;
        protected readonly IZnodeRepository<ZnodeGlobalEntity> _globalEntityRepository;
        #endregion

        #region Public Constructor
        public GlobalAttributeService()
        {
            //Initialization of Repositories.
            _attributeTypeRepository = new ZnodeRepository<ZnodeAttributeType>();
            _globalAttributeRepository = new ZnodeRepository<ZnodeGlobalAttribute>();
            _validationRepository = new ZnodeRepository<ZnodeGlobalAttributeValidation>();
            _LocaleRepository = new ZnodeRepository<ZnodeGlobalAttributeLocale>();
            _defaultValueRepository = new ZnodeRepository<ZnodeGlobalAttributeDefaultValue>();
            _defaultValueLocaleRepository = new ZnodeRepository<ZnodeGlobalAttributeDefaultValueLocale>();
            _inputValidationRepository = new ZnodeRepository<ZnodeAttributeInputValidation>();
            _globalEntityRepository = new ZnodeRepository<ZnodeGlobalEntity>();
        }
        #endregion

        #region Public Methods
        //Gets Attribute by ID.
        public virtual GlobalAttributeModel GetAttributeById(int attributeId, NameValueCollection expands)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameter attributeId: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeId);

            if (attributeId < 1)
                    throw new ZnodeException(ErrorCodes.InvalidData,Admin_Resources.IdCanNotBeLessThanOne);

                GlobalAttributeModel attribute = _globalAttributeRepository.GetById(attributeId)?.ToModel<GlobalAttributeModel>() ?? null;
                if (IsNotNull(attribute))
                {
                    attribute.AttributeTypeName = IsNotNull(attribute) ? _attributeTypeRepository.GetById(attribute.AttributeTypeId.GetValueOrDefault())?.AttributeTypeName : null;
                    ZnodeLogging.LogMessage("AttributeTypeName generated by AttributeTypeId: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attribute?.AttributeTypeName);

                FilterCollection filtersForAttributes = new FilterCollection();
                    filtersForAttributes.Add(ZnodeGlobalAttributeDefaultValueEnum.GlobalAttributeId.ToString(), FilterOperators.Equals, attributeId.ToString());

                    int? defaultValueId = _defaultValueRepository.GetEntity(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filtersForAttributes.ToFilterDataCollection()).WhereClause)?.GlobalAttributeDefaultValueId;
                    ZnodeLogging.LogMessage("DefaultValueId generated: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, defaultValueId);

                    if (IsNotNull(defaultValueId))
                    {
                        filtersForAttributes = new FilterCollection();
                        filtersForAttributes.Add(ZnodeGlobalAttributeDefaultValueLocaleEnum.GlobalAttributeDefaultValueId.ToString(), FilterOperators.Equals, defaultValueId.ToString());
                        filtersForAttributes.Add(ZnodeGlobalAttributeDefaultValueLocaleEnum.LocaleId.ToString(), FilterOperators.Equals, GetDefaultLocaleId().ToString());

                        ZnodeGlobalAttributeDefaultValueLocale attributeDefaultValueLocale = _defaultValueLocaleRepository.GetEntity(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filtersForAttributes.ToFilterDataCollection()).WhereClause);
                        attribute.AttributeDefaultValueId = defaultValueId;
                        if (IsNotNull(attributeDefaultValueLocale))
                            attribute.AttributeDefaultValue = attributeDefaultValueLocale.AttributeDefaultValue;
                    }
                }
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            return attribute;
            }

        //Gets the list of Attribute.
        public virtual GlobalAttributeListModel GetAttributeList(NameValueCollection expands, FilterCollection filters, NameValueCollection sorts, NameValueCollection page)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            //set locale Filters if not present
            SetLocaleFilterIfNotPresent(ref filters);
            ResetFilters(filters);

            //set paging parameters.
            PageListModel pageListModel = new PageListModel(filters, sorts, page);
            ZnodeLogging.LogMessage("pageListModel generated to set SP parameters to get attributeList: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, pageListModel?.ToDebugString());

            IZnodeViewRepository<GlobalAttributeModel> objStoredProc = new ZnodeViewRepository<GlobalAttributeModel>();
            objStoredProc.SetParameter("@WhereClause", pageListModel.SPWhereClause, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("@Rows", pageListModel.PagingLength, ParameterDirection.Input, DbType.Int32);
            objStoredProc.SetParameter("@PageNo", pageListModel.PagingStart, ParameterDirection.Input, DbType.Int32);
            objStoredProc.SetParameter("@Order_By", pageListModel.OrderBy, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("@RowCount", pageListModel.TotalRowCount, ParameterDirection.Output, DbType.Int32);

            IList<GlobalAttributeModel> attributeList = objStoredProc.ExecuteStoredProcedureList("Znode_GetGlobalAttributes @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT", 4, out pageListModel.TotalRowCount);
            ZnodeLogging.LogMessage("attributeList count: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeList?.Count);

            GlobalAttributeListModel attributeListModel = new GlobalAttributeListModel();
            attributeListModel.Attributes = attributeList?.Count > 0 ? attributeList?.ToList() : null;

            attributeListModel.BindPageListModel(pageListModel);
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            return attributeListModel;
        }

        //Create attribute details with validation rule, group and family mapping.
        public virtual GlobalAttributeDataModel CreateAttribute(GlobalAttributeDataModel model)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            if (IsNull(model))
                throw new ZnodeException(ErrorCodes.InvalidData,Admin_Resources.ModelNotNull);

            if (IsAttributeCodeExist(model.AttributeModel.AttributeCode))
                throw new ZnodeException(ErrorCodes.AlreadyExist, Admin_Resources.ErrorAttribute);

            if (!ValidateGlobalEntity(model.AttributeModel))
                throw new ZnodeException(ErrorCodes.InvalidData, Admin_Resources.InvalidGlobalEntity);

            ZnodeLogging.LogMessage("AttributeTypeId and AttributeCode properties of AttributeModel: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, new { AttributeTypeId = model?.AttributeModel?.AttributeTypeId, AttributeCode = model?.AttributeModel?.AttributeCode });

            string _attributeType = _attributeTypeRepository.GetById(model.AttributeModel.AttributeTypeId.GetValueOrDefault())?.AttributeTypeName;
            ZnodeLogging.LogMessage("_attributeType generated: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, _attributeType);

            if (Equals(_attributeType, ZnodeConstant.TypeSimpleSelect) || Equals(_attributeType, ZnodeConstant.TypeMultiSelect))
                model.AttributeModel.IsActive = false;

            //Insert attribute details.
            ZnodeGlobalAttribute attributeModel = _globalAttributeRepository.Insert(model.AttributeModel.ToEntity<ZnodeGlobalAttribute>());
            ZnodeLogging.LogMessage(IsNotNull(attributeModel) ? Admin_Resources.SuccessAttributeInsert : Admin_Resources.ErrorAttributeInsert, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);

            if (IsNotNull(attributeModel))
            {
                if (attributeModel.GlobalAttributeId > 0)
                {
                    ZnodeLogging.LogMessage("GlobalAttributeId of ZnodeGlobalAttribute model: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeModel?.GlobalAttributeId);

                    model.AttributeModel.GlobalAttributeId = attributeModel.GlobalAttributeId;

                    //Insert validation rule.
                    if (IsNotNull(model.ValidationRule))
                    {
                        model.ValidationRule.ForEach(x =>
                        {
                            x.GlobalAttributeId = attributeModel.GlobalAttributeId;
                            ZnodeLogging.LogMessage(IsNotNull(_validationRepository.Insert(GlobalAttributeMap.ToValidationEntity(x, _attributeType))) ? "Validation inserted successfully." : "Validation is not inserted.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                        });
                    }

                    //Save defaultvalue 

                    if (_attributeType.Equals(ZnodeConstant.NumberType) || _attributeType.Equals(ZnodeConstant.YesNoType) || _attributeType.Equals(ZnodeConstant.DateType))
                        SaveDefaultValues(GlobalAttributeMap.ToGlobalAttributeDefaultValueModel(model, GetDefaultLocaleId(), _attributeType));

                    return GlobalAttributeMap.ToGlobalAttributeDataModel(attributeModel);
                }
                return model;
            }
            return null;
        }

        //Update attribute details with validation rule, group and family mapping          
        public virtual bool UpdateAttribute(GlobalAttributeDataModel model)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            if (IsNull(model))
                throw new ZnodeException(ErrorCodes.InvalidData, Admin_Resources.AttributeModelNotNull);

            bool statusForAttribute = false;
            try
            {
                if (model?.AttributeModel?.GlobalAttributeId > 0)
                {
                    //Update attribute.
                    statusForAttribute = _globalAttributeRepository.Update(model.AttributeModel.ToEntity<ZnodeGlobalAttribute>());
                    ZnodeLogging.LogMessage(statusForAttribute ? Admin_Resources.SuccessAttributeUpdate : Admin_Resources.ErrorAttributeUpdate, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);

                    string _attributeType = _attributeTypeRepository.GetById(model.AttributeModel.AttributeTypeId.GetValueOrDefault())?.AttributeTypeName;
                    //Update validation rules.
                    if (model?.ValidationRule?.Count > 0)
                    {
                        statusForAttribute = UpdateValidations(model.ValidationRule, model.AttributeModel.GlobalAttributeId, _attributeType);
                        ZnodeLogging.LogMessage(statusForAttribute ? Admin_Resources.SuccessValidationUpdate : Admin_Resources.ErrorValidationUpdate, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                    }      

                    //Save defaultvalue. 
                    if (IsNotNull(_attributeType) && (_attributeType.Equals(ZnodeConstant.NumberType) || _attributeType.Equals(ZnodeConstant.YesNoType) || _attributeType.Equals(ZnodeConstant.DateType)))
                        SaveDefaultValues(GlobalAttributeMap.ToGlobalAttributeDefaultValueModel(model, GetDefaultLocaleId(), _attributeType));
                }
                ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                return statusForAttribute;
            }
            catch (ZnodeException ex)
            {
                ZnodeLogging.LogMessage(ex, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Warning);
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        //Delete  existing Attribute By Attribute Id
        public virtual bool DeleteAttribute(ParameterModel attributeIds)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameter attributeIds to delete  existing attribute(s): ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeIds?.Ids);

            int status = 0;
            IZnodeViewRepository<View_ReturnBoolean> objStoredProc = new ZnodeViewRepository<View_ReturnBoolean>();
            objStoredProc.SetParameter("GlobalAttributeId", attributeIds.Ids, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("Status", null, ParameterDirection.Output, DbType.Int32);
            IList<View_ReturnBoolean> deleteResult = objStoredProc.ExecuteStoredProcedureList("Znode_DeleteGlobalAttribute @GlobalAttributeId,@Status OUT", 1, out status);
            if (deleteResult.FirstOrDefault().Status.Value)
            {
                ZnodeLogging.LogMessage(Admin_Resources.SuccessGlobalAttributeDelete, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                return true;
            }
            else
            {
                throw new ZnodeException(ErrorCodes.AssociationDeleteError, Admin_Resources.ErrorGlobalAttributeDelete);
            }
        }

        //Create Attribute default Value
        public virtual GlobalAttributeDefaultValueModel SaveDefaultValues(GlobalAttributeDefaultValueModel model)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("GlobalAttributeDefaultValueId property of GlobalAttributeDefaultValueModel: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, model?.GlobalAttributeDefaultValueId);

            if (model.GlobalAttributeDefaultValueId == 0)
                InsertDefaultValues(model);
            else
                InsertUpdateDefaultValueLocale(model, model.GlobalAttributeDefaultValueId);
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            return model;
        }

        //Save Attribute Locale Value
        public virtual GlobalAttributeLocaleListModel SaveLocales(GlobalAttributeLocaleListModel model)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);

            if (IsNull(model))
                throw new ZnodeException(ErrorCodes.InvalidData, Admin_Resources.ModelNotNull);

            if (model.Locales?.Count > 0)
            {
                ZnodeLogging.LogMessage("AttributeCode property and locales list count of GlobalAttributeDefaultValueModel: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, new { AttributeCode = model?.AttributeCode, LocalesListCount = model?.Locales?.Count });

                //Delete Existing Locale Values Before Update or save
                _LocaleRepository.Delete(GetWhereClauseForAttributeId((model.Locales.FirstOrDefault().GlobalAttributeId)).WhereClause);

                int defaultLocaleId = GetDefaultLocaleId();
                ZnodeLogging.LogMessage("defaultLocaleId generated by method GetDefaultLocaleId: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, defaultLocaleId);

                //If locale name is present then attribute code will be save as default locale name.
                if (model.Locales.Exists(x => x.LocaleId == defaultLocaleId && string.IsNullOrEmpty(x.AttributeName.Trim())))
                    model.Locales.Where(x => x.LocaleId == defaultLocaleId).ToList().ForEach(x => x.AttributeName = model.AttributeCode);

                model.Locales.RemoveAll(x => x.AttributeName == string.Empty);

                _LocaleRepository.Insert(model.Locales.ToEntity<ZnodeGlobalAttributeLocale>().ToList());
            }
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            return model;
        }

        //Check Attribute Code Exist
        public bool IsAttributeCodeExist(string attributeCode)
        {
            if (string.IsNullOrEmpty(attributeCode))
                throw new ZnodeException(ErrorCodes.NullModel,Admin_Resources.ErrorAttributeModelNull);

            return _globalAttributeRepository.Table.Any(x => x.AttributeCode.ToLower() == attributeCode.ToLower());
        }

        //Get List Of Input Validation
        public virtual GlobalAttributeInputValidationListModel GetInputValidations(int typeId, int attributeId)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameters typeId and attributeId: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, new object[] { typeId, attributeId });

            FilterCollection filter = new FilterCollection();
            filter.Add(new FilterTuple(ZnodeAttributeInputValidationEnum.AttributeTypeId.ToString(), ProcedureFilterOperators.Equals, typeId.ToString()));

            _inputValidationRepository.EnableDisableLazyLoading = true;
            EntityWhereClauseModel whereClause = DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filter.ToFilterDataCollection());
            ZnodeLogging.LogMessage("whereClause generated to get list of input validation: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, whereClause?.WhereClause);

            IList<ZnodeAttributeInputValidation> list = _inputValidationRepository.GetEntityList(whereClause.WhereClause);
            ZnodeLogging.LogMessage("ZnodeAttributeInputValidation list count: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, list?.Count);

            if (Equals(_attributeTypeRepository.GetEntity(whereClause.WhereClause)?.AttributeTypeName, "File"))
            {

                List<ZnodeAttributeInputValidationRule> validationrule = new List<ZnodeAttributeInputValidationRule>();
                _inputValidationRepository.Table.Where(x => (x.ZnodeAttributeType.AttributeTypeName == "Video" || x.ZnodeAttributeType.AttributeTypeName == "Audio") && (x.Name == ZnodeConstant.Extensions))?.ToList().ForEach(item => { validationrule.AddRange(item.ZnodeAttributeInputValidationRules); });

                list?.ToList()?.ForEach(item =>
                {
                    if (item.Name.Equals(ZnodeConstant.Extensions))
                    {
                        validationrule.AddRange(item.ZnodeAttributeInputValidationRules);
                        item.ZnodeAttributeInputValidationRules = validationrule;
                    }
                });
            }

            GlobalAttributeInputValidationListModel _model = GlobalAttributeMap.ToInputValidationListModel(list);
            if (attributeId != 0)
                GetValidationValue(_model, attributeId);
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            return _model;
        }

        //Get attribute locale details by attribute Id.
        public virtual GlobalAttributeLocaleListModel GetAttributeLocale(int attributeId)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameter attributeId: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeId);

            IList<ZnodeGlobalAttributeLocale> attributeEntityList = _LocaleRepository.GetEntityList(GetWhereClauseForAttributeId(attributeId).WhereClause);
            ZnodeLogging.LogMessage("attributeEntityList count: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeEntityList?.Count);

            GlobalAttributeLocaleListModel listModel = new GlobalAttributeLocaleListModel();
            listModel.Locales = attributeEntityList.Count > 0 ? attributeEntityList.ToModel<GlobalAttributeLocaleModel>()?.ToList() : new List<GlobalAttributeLocaleModel>();
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            return listModel;
        }

        //Get attribute default values.
        public virtual GlobalAttributeDefaultValueListModel GetDefaultValues(int attributeId)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameter attributeId: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeId);

            _validationRepository.EnableDisableLazyLoading = true;

            GlobalAttributeDefaultValueListModel listModel;
            listModel = GlobalAttributeMap.ToDefaultValueListModel(_defaultValueRepository.GetEntityList(GetWhereClauseForAttributeId(attributeId).WhereClause));
            ZnodeLogging.LogMessage("GlobalAttributeDefaultValueListModel list count: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, listModel?.DefaultValues?.Count);

            foreach (var item in listModel.DefaultValues)
            {
                item.MediaPath = item.MediaId > 0 ? GetMediaPath(item) : string.Empty;
            }
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            return listModel;
        }

        //Delete Attribute Default Values By GlobalAttributeDefaultValueId
        public virtual bool DeleteDefaultValues(int defaultValueId)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameter defaultValueId: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, defaultValueId);

            int status = 0;
            IZnodeViewRepository<View_ReturnBoolean> objStoredProc = new ZnodeViewRepository<View_ReturnBoolean>();
            objStoredProc.SetParameter(ZnodeGlobalAttributeDefaultValueEnum.GlobalAttributeDefaultValueId.ToString(), defaultValueId, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("Status", null, ParameterDirection.Output, DbType.Int32);
            IList<View_ReturnBoolean> deleteResult = objStoredProc.ExecuteStoredProcedureList("Znode_DeleteGlobalDefaultAttributeValues @GlobalAttributeDefaultValueId,@Status OUT", 1, out status);
            ZnodeLogging.LogMessage("Deleted result count:", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, deleteResult?.Count());

            if (deleteResult.FirstOrDefault().Status.Value)
            {
                ZnodeLogging.LogMessage(Admin_Resources.SuccessAttributeDelete, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                return true;
            }
            else
            {
                throw new ZnodeException(ErrorCodes.RestrictSystemDefineDeletion,Admin_Resources.ErrorDefaultAttributeAsSystemAttributeDelete);
            }
        }

        //Insert Attribute Default values
        public void InsertDefaultValues(GlobalAttributeDefaultValueModel model)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("GlobalAttributeId of GlobalAttributeDefaultValueModel:", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, model?.GlobalAttributeId);

            //Set AttributeDefaultValueCode as if attribute type are Number, Datetime and YesNo type..
            if (model.AttributeDefaultValueCode == null)
                model.AttributeDefaultValueCode = model.ValueLocales?.Select(x => x.DefaultAttributeValue)?.FirstOrDefault();

            //If new added model has IsDefault true ,it disables previous ones. 
            if (Equals(model.IsDefault, true))
                DisableDefaultAttribute(GlobalAttributeMap.ToDefaultValueEntity(model));

            ZnodeGlobalAttributeDefaultValue _defaultValue = _defaultValueRepository.Insert(GlobalAttributeMap.ToDefaultValueEntity(model));
            ZnodeLogging.LogMessage(IsNotNull(_defaultValue) ? Admin_Resources.SuccessGlobalAttributeInsert : Admin_Resources.ErrorGlobalAttributeInsert, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            if (IsNotNull(_defaultValue))
            {
                ZnodeLogging.LogMessage("GlobalAttributeDefaultValueId:", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, _defaultValue?.GlobalAttributeDefaultValueId);
                SetIsActiveForSimpleAndMultiSelect((int)model.GlobalAttributeId);
                model.ValueLocales.ForEach(x =>
                {
                    if (!string.IsNullOrEmpty(x.DefaultAttributeValue))
                    {
                        x.GlobalDefaultAttributeValueId = _defaultValue.GlobalAttributeDefaultValueId;
                        ZnodeLogging.LogMessage(IsNotNull(_defaultValueLocaleRepository.Insert(GlobalAttributeMap.ToDefaultValueLocaleEntity(x))) ? Admin_Resources.SuccessGlobalAttributeInsert : Admin_Resources.ErrorGlobalAttributeInsert, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                    }
                });
                model.GlobalAttributeDefaultValueId = _defaultValue.GlobalAttributeDefaultValueId;
            }
            ZnodeLogging.LogMessage("Execution done.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
        }

        //If new added model has IsDefault true ,it disables previous ones. 
        public void DisableDefaultAttribute(ZnodeGlobalAttributeDefaultValue entity)
        {
            //checks if the filter collection null
            FilterCollection filters = new FilterCollection();
            filters.Add(new FilterTuple(ZnodeGlobalAttributeEnum.GlobalAttributeId.ToString(), ProcedureFilterOperators.Equals, entity.GlobalAttributeId.ToString()));

            IList<ZnodeGlobalAttributeDefaultValue> attributeDefaultValue = _defaultValueRepository.GetEntityList(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filters.ToFilterDataCollection()).WhereClause);
            ZnodeLogging.LogMessage("attributeDefaultValue list count:", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, attributeDefaultValue?.Count());

            if (entity.IsDefault == true)
            {
                List<ZnodeGlobalAttributeDefaultValue> defaultAttributeDefaultValueList = attributeDefaultValue.Where(x => x.IsDefault == true).ToList();
                defaultAttributeDefaultValueList.ForEach(x => x.IsDefault = false);
                defaultAttributeDefaultValueList.ForEach(x => _defaultValueRepository.Update(x));
            }
        }

        //Method To create and edit The attribute locale default values
        public void InsertUpdateDefaultValueLocale(GlobalAttributeDefaultValueModel model, int defaultAttributeValueId)
        {
            //Set AttributeDefaultValueCode as if attribute type are Number, Datetime and YesNo type..
            if (model.AttributeDefaultValueCode == null)
                model.AttributeDefaultValueCode = model.ValueLocales?.Select(x => x.DefaultAttributeValue)?.FirstOrDefault();

            ZnodeGlobalAttributeDefaultValue defaultValueEntity = GlobalAttributeMap.ToDefaultValueEntity(model);
            defaultValueEntity.GlobalAttributeDefaultValueId = defaultAttributeValueId;

            //If new added model has IsDefault true ,it disables previous ones. 
            if (Equals(defaultValueEntity.IsDefault, true))
                DisableDefaultAttribute(defaultValueEntity);

            ZnodeLogging.LogMessage(_defaultValueRepository.Update(defaultValueEntity) ? Admin_Resources.SuccessGlobalAttributeUpdate : Admin_Resources.ErrorGlobalAttributeUpdate, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            foreach (GlobalAttributeDefaultValueLocaleModel item in model.ValueLocales)
            {
                item.GlobalDefaultAttributeValueId = defaultAttributeValueId;
                FilterCollection filterCol = new FilterCollection();
                filterCol.Add(new FilterTuple(ZnodeGlobalAttributeLocaleEnum.LocaleId.ToString(), ProcedureFilterOperators.Equals, item.LocaleId.ToString()));
                filterCol.Add(new FilterTuple(ZnodeGlobalAttributeDefaultValueEnum.GlobalAttributeDefaultValueId.ToString(), ProcedureFilterOperators.Equals, item.GlobalDefaultAttributeValueId.ToString()));

                ZnodeGlobalAttributeDefaultValueLocale _localeEntity = _defaultValueLocaleRepository.GetEntity(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filterCol.ToFilterDataCollection()).WhereClause);
                item.GlobalDefaultAttributeValueId = defaultAttributeValueId;

                ZnodeGlobalAttributeDefaultValueLocale defaultValueLocaleEntity = GlobalAttributeMap.ToDefaultValueLocaleEntity(item);
                if (IsNotNull(_localeEntity))
                {
                    defaultValueLocaleEntity.GlobalAttributeDefaultValueLocaleId = _localeEntity.GlobalAttributeDefaultValueLocaleId;

                    //If locale code if empty than delete record other wise update existing record.
                    if (string.IsNullOrEmpty(defaultValueLocaleEntity.AttributeDefaultValue))
                        ZnodeLogging.LogMessage(_defaultValueLocaleRepository.Delete(defaultValueLocaleEntity) ? Admin_Resources.SuccessGlobalAttributeUpdate : Admin_Resources.ErrorGlobalAttributeUpdate, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                    else
                        ZnodeLogging.LogMessage(_defaultValueLocaleRepository.Update(defaultValueLocaleEntity) ? Admin_Resources.SuccessGlobalAttributeUpdate : Admin_Resources.ErrorGlobalAttributeUpdate, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                }
                else
                {
                    if (!string.IsNullOrEmpty(defaultValueLocaleEntity.AttributeDefaultValue))
                        ZnodeLogging.LogMessage(IsNotNull(_defaultValueLocaleRepository.Insert(defaultValueLocaleEntity)) ? Admin_Resources.SuccessGlobalAttributeInsert : Admin_Resources.ErrorGlobalAttributeInsert, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
                }
            }
        }

        //Get where clause by  global attributeId
        public EntityWhereClauseModel GetWhereClauseForAttributeId(int? attributeId)
        {
            FilterCollection filters = new FilterCollection();
            filters.Add(new FilterTuple(ZnodeGlobalAttributeEnum.GlobalAttributeId.ToString(), ProcedureFilterOperators.Equals, attributeId.ToString()));
            return DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filters.ToFilterDataCollection());
        }

        //Update Existing iNput Validation values
        public bool UpdateValidations(List<GlobalAttributeValidationModel> model, int attributeId, string attributeType)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);
            ZnodeLogging.LogMessage("Input parameters attributeId and attributeType: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, new object[] { attributeId, attributeType });
            try
            {
                if (model.Count > 0)
                {
                    FilterCollection filter = new FilterCollection();
                    filter.Add(new FilterTuple(ZnodeGlobalAttributeEnum.GlobalAttributeId.ToString(), ProcedureFilterOperators.Equals, attributeId.ToString()));

                    //Delete Exiting Validation Values for attribute
                    ZnodeLogging.LogMessage(_validationRepository.Delete(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filter.ToFilterDataCollection()).WhereClause)
                        ? Admin_Resources.SuccessAttributeValidationDelete : Admin_Resources.ErrorAttributeValidationDelete, ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);

                    List<ZnodeGlobalAttributeValidation> attributeValidation = new List<ZnodeGlobalAttributeValidation>();
                    model.ForEach(validationModel =>
                    {
                        validationModel.GlobalAttributeId = attributeId;
                        attributeValidation.Add(GlobalAttributeMap.ToValidationEntity(validationModel, attributeType));
                    });
                    _validationRepository.Insert(attributeValidation);
                    return true;
                }
                else
                    return false;
            }
            catch (Exception)
            {
                 return false;
            }
        }

        //This funcation use for reset filter value of IsSystemDefined,IsRequiredand, IsPersonalizable and IsLocalizable.
        public void ResetFilters(FilterCollection filters)
        {
            filters = IsNull(filters) ? new FilterCollection() : filters;
            if (IsNotNull(filters.Where(x => x.FilterName.Equals(ZnodeGlobalAttributeEnum.IsRequired.ToString().ToLower()))?.FirstOrDefault()))
                SetFilterValue(filters, ZnodeGlobalAttributeEnum.IsRequired.ToString().ToLower());
            if (IsNotNull(filters.Where(x => x.FilterName.Equals(ZnodeGlobalAttributeEnum.IsLocalizable.ToString().ToLower()))?.FirstOrDefault()))
                SetFilterValue(filters, ZnodeGlobalAttributeEnum.IsLocalizable.ToString().ToLower());
        }

        //This funcation use for set filter value.
        public void SetFilterValue(FilterCollection filters, string filterName)
        {
            FilterTuple _filterAttributeType = filters.Where(x => x.FilterName.Equals(filterName))?.FirstOrDefault();
            filters.RemoveAll(x => x.FilterName.Equals(filterName));
            if(IsNotNull(_filterAttributeType))
            {
                if (_filterAttributeType.FilterValue.Equals("true", StringComparison.OrdinalIgnoreCase))
                    filters.Add(filterName, ProcedureFilterOperators.Equals, "1");
                else if (_filterAttributeType.FilterValue.Equals("false", StringComparison.OrdinalIgnoreCase))
                    filters.Add(filterName, ProcedureFilterOperators.Equals, "0");
            }
        }

        //Get List Of Validation Rule
        public void GetValidationValue(GlobalAttributeInputValidationListModel model, int attributeId)
        {
            _validationRepository.EnableDisableLazyLoading = false;
            foreach (GlobalAttributeInputValidationModel item in model.InputValidations)
            {
                FilterCollection filter = new FilterCollection();
                filter.Add(new FilterTuple(ZnodeAttributeInputValidationEnum.InputValidationId.ToString(), ProcedureFilterOperators.Equals, item.AttributeValidationId.ToString()));
                filter.Add(new FilterTuple(ZnodeGlobalAttributeEnum.GlobalAttributeId.ToString(), ProcedureFilterOperators.Equals, attributeId.ToString()));
                //Get Multiple Default values if validation rules is more than 2
                if (item.Rules.Count > 2)
                {
                    List<ZnodeGlobalAttributeValidation> entity = _validationRepository.GetEntityList(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filter.ToFilterDataCollection()).WhereClause).ToList();
                    item.DefaultValue = GetValueRuleIds(entity);
                }
                else
                {
                    ZnodeGlobalAttributeValidation values = _validationRepository.GetEntity(DynamicClauseHelper.GenerateDynamicWhereClauseWithFilter(filter.ToFilterDataCollection()).WhereClause);
                    if(IsNotNull(values))
                        item.DefaultValue = IsNull(values.InputValidationRuleId) ? Convert.ToString(values.Name) : Convert.ToString(values.InputValidationRuleId);
                }
            }
        }

        //Get Multiple Validation Rule Id
        public string GetValueRuleIds(List<ZnodeGlobalAttributeValidation> list)
        {
            ZnodeLogging.LogMessage("ZnodeGlobalAttributeValidation list count: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, list?.Count);
            string ruleIds = string.Empty;
            list.ForEach(item =>
            {
                ruleIds += item.InputValidationRuleId.ToString() + ",";
            });
            return !string.IsNullOrEmpty(ruleIds) ? ruleIds.Remove(ruleIds.Length - 1) : string.Empty;
        }

        //This method is used to get media path from media Id.
        public string GetMediaPath(GlobalAttributeDefaultValueModel model)
        {
            ZnodeLogging.LogMessage("MediaId property of GlobalAttributeDefaultValueModel: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, model?.MediaId);

            IMediaManagerServices mediaService = GetService<IMediaManagerServices>();
            MediaManagerModel mediaData = mediaService.GetMediaByID(Convert.ToInt32(model?.MediaId), null);
            return IsNotNull(mediaData) ? mediaData.MediaServerThumbnailPath : ZnodeAdminSettings.DefaultImagePath;
        }

        //Get attribute type name on the basis of global attribute id.
        public GlobalAttributeModel GetAttributeType(int id)
        {
            if (id > 0)
                return (from globalAttribute in _globalAttributeRepository.Table
                        join attributeType in _attributeTypeRepository.Table on globalAttribute.AttributeTypeId equals attributeType.AttributeTypeId
                        where globalAttribute.GlobalAttributeId == id
                        select new GlobalAttributeModel
                        {
                            AttributeTypeName = attributeType.AttributeTypeName
                        }).FirstOrDefault();
            return null;
        }

        //Set the values of is active field on the basis of attribute type.
        public void SetIsActiveForSimpleAndMultiSelect(int id)
        {
            GlobalAttributeModel model = GetAttributeType(id);
            if ((Equals(model.AttributeTypeName, ZnodeConstant.TypeSimpleSelect) || Equals(model.AttributeTypeName, ZnodeConstant.TypeMultiSelect)) && IsNotNull(model))
            {
                ZnodeGlobalAttribute entity = _globalAttributeRepository.GetById(id);
                if (Equals(entity.IsActive, false))
                {
                    entity.IsActive = true;
                    _globalAttributeRepository.Update(entity);
                }
            }
        }

        //Method to check value of attribute is already exists or not.
        public virtual string IsAttributeValueUnique(GlobalAttributeValueParameterModel attributeCodeValues)
        {
            ZnodeLogging.LogMessage("Execution started.", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Info);

            if (IsNull(attributeCodeValues))
                throw new ZnodeException(ErrorCodes.NullModel, ZnodeConstant.NullModelError);

            if (attributeCodeValues.Id <= 0 || string.IsNullOrEmpty(attributeCodeValues.EntityType))
                throw new ZnodeException(ErrorCodes.IdLessThanOne,Admin_Resources.ErrorEntityIdOrType);
            ZnodeLogging.LogMessage("EntityType, Id and LocaleId properties of input model attributeCodeValues model: ", ZnodeLogging.Components.Admin.ToString(), TraceLevel.Verbose, new object[] { attributeCodeValues?.EntityType, attributeCodeValues?.Id, attributeCodeValues?.LocaleId });

            var xmlData = ToXML(attributeCodeValues.GlobalAttributeCodeValueList);

            IZnodeViewRepository<GlobalAttributeParameterModel> objStoredProc = new ZnodeViewRepository<GlobalAttributeParameterModel>();
            objStoredProc.SetParameter("AttributeCodeValues", xmlData, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("EntityType ", attributeCodeValues.EntityType, ParameterDirection.Input, DbType.String);
            objStoredProc.SetParameter("EntityValueId", attributeCodeValues.Id, ParameterDirection.Input, DbType.Int32);
            objStoredProc.SetParameter(ZnodeLocaleEnum.LocaleId.ToString(), attributeCodeValues.LocaleId, ParameterDirection.Input, DbType.Int32);
            List<GlobalAttributeParameterModel> attributeNames = objStoredProc.ExecuteStoredProcedureList("Znode_CheckUniqueGlobalAttributevalues @AttributeCodeValues,@EntityType,@EntityValueId,@LocaleId")?.ToList();

            if (attributeNames?.Count > 0)
                return string.Join(",", attributeNames.Select(x => x.AttributeName));

            return string.Empty;
        }
        #endregion

        #region private methods
        private bool ValidateGlobalEntity(GlobalAttributeModel globalAttributeModel)
        {
            ZnodeGlobalEntity model = _globalEntityRepository.Table.FirstOrDefault(x => x.EntityName.ToLower() == globalAttributeModel.EntityName.ToLower());

            if (HelperUtility.IsNotNull(model))
            {
                globalAttributeModel.GlobalEntityId = model.GlobalEntityId;
                return true;
            }
            return false;
        }
        #endregion
    }
}
