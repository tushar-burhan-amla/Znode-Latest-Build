<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=301879
  -->
<configuration>
	<configSections>
		<!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
		<section name="ZnodeApiCache" type="Znode.Libraries.ECommerce.Utilities.CacheConfigSectionHandler, Znode.Libraries.ECommerce.Utilities" />
		<section name="ZnodePersistantStorage" type="Znode.Libraries.Framework.Business.ZnodeStorageConfiguration" allowDefinition="MachineToApplication" requirePermission="false" restartOnExternalChanges="true" />
		<section name="ZnodeCacheDependency" type="Znode.Libraries.Framework.Business.ZnodeCacheDependencyConfiguration" allowDefinition="MachineToApplication" requirePermission="false" restartOnExternalChanges="true" />
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
		<section name="CloudflareConfigSection" type="System.Configuration.NameValueSectionHandler" />
		<section name="HangfireConfigSection" type="System.Configuration.NameValueSectionHandler" />
	</configSections>
	<log4net configSource="log4net.config" />
	<ZnodePersistantStorage defaultProvider="ZnodeStorageProviderFile">
		<providers>
			<add name="ZnodeStorageProviderFile" type="Znode.Libraries.ECommerce.Utilities.ZnodeStorageProviderFile" description="File Storage Provider" />
		</providers>
	</ZnodePersistantStorage>
	<ZnodeCacheDependency defaultProvider="ZnodeCacheDependencyProviderSQL">
		<providers>
			<add name="ZnodeCacheDependencyProviderSQL" type="Znode.Libraries.ECommerce.Utilities.ZnodeCacheDependencyProviderSQL" description="SQL Cache Dependency Provider" />
		</providers>
	</ZnodeCacheDependency>
	<connectionStrings>
    <add name="ZnodeECommerceDB" connectionString="Data Source=;Initial Catalog=;User Id=;Password=;" providerName="System.Data.SqlClient" />
    <add name="Znode_Entities" connectionString="metadata=res://*/DataModel.ZnodeEntities.csdl|res://*/DataModel.ZnodeEntities.ssdl|res://*/DataModel.ZnodeEntities.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=;Initial Catalog=;User Id=;Password=;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
    <add name="ZnodePublish_Entities" connectionString="metadata=res://*/DataModel.ZnodePublishEntities.csdl|res://*/DataModel.ZnodePublishEntities.ssdl|res://*/DataModel.ZnodePublishEntities.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=;Initial Catalog=;User Id=;Password=;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
    <add name="ZnodeKlaviyoEntities" connectionString="metadata=res://*/DataModel.Klaviyo_Entities.csdl|res://*/DataModel.Klaviyo_Entities.ssdl|res://*/DataModel.Klaviyo_Entities.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=;Initial Catalog=;User Id=;Password=;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
    <add name="ZnodeReportDB" connectionString="Data Source=;Initial Catalog=;User Id=;Password=" providerName="System.Data.SqlClient" />
    <add name="ZnodeRecommendationDB" connectionString="Data Source=;Initial Catalog=;User Id=;Password=;" providerName="System.Data.SqlClient" />
    <add name="Znode_Recommendation_Entities" connectionString="metadata=res://*/DataModel.ZnodeRecommendationEntities.csdl|res://*/DataModel.ZnodeRecommendationEntities.ssdl|res://*/DataModel.ZnodeRecommendationEntities.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=;Initial Catalog=;User Id=;Password=;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
    <add name="ZnodeMongoDBForLog" connectionString="mongodb://localhost/Znode_Multifront_962_LogMessage" />
    <add name="ZnodeHangfireDB" connectionString="Data Source=;Initial Catalog=;User Id=;Password=;" providerName="System.Data.SqlClient" />
  </connectionStrings>
	<appSettings>
    <!--<add key="ElasticApm:ServerUrls" value="http://localhost:8200/" />-->
		<!--For cache control, default caching time is 7 day-->
		<add key="DefaultCacheControl" value="max-age=604800" />
		<!--For cache control, set value in seconds. If not set media will be cached in azure uptill default time ie.7days-->
		<add key="CacheControl" value="" />
		<!-- Keys requred to call purge API in CDN-->
    <add key="ClientId" value="" />
    <add key="ClientSecret" value="" />
    <add key="TenanatId" value="" />
    <add key="SubscriptionId" value="" />
    <add key="ResourceGroups" value="" />
    <add key="Profiles" value="" />
    <add key="EndPoints" value="" />
    <add key="EnableStemmingFilter" value="1" />
		<add key="EnableStopWordsForSearchIndex" value="True" />
		<add key="StemExclusionWords" value="" />
		<add key="ZnodeApiRootUri" value="https://localhost:44375" />
		<add key="AdminWebsiteUrl" value="https://localhost:44392" />
		<add key="PaymentApplicationUrl" value="https://localhost:44322/" />
	    <!--Security Settings-->
	  	<!-- In most cases this should be true in production environments -->
		<add key="ValidateAuthHeader" value="true" />
		 <!--For Global API Authorization we need to add single API domain name and API domain keys-->
		<add key="IsGlobalAPIAuthorization" value="true" />
	    <add key="EnableTokenBasedAuthorization" value="false" />
	    <add key="EnableBasicAuthorization" value="true" />
	    <!--When Global API Authorization key value as true then set ZnodeApiDomainName ,ZnodeApiDomainKey as per the database table 'ZnodeDomain'-->
		<add key="ZnodeApiDomainName" value="localhost:44375" />
		<add key="ZnodeApiDomainKey" value="115915F1-7E6B-4386-A623-9779F27D9A5E" />
		<add key="ZnodePaymentApiDomainName" value="localhost:44322" />
		<add key="ZnodePaymentApiDomainKey" value="55D5235C-F562-4743-B6F1-8D460A0413C2" />
		<!-- ZnodePrivateKey is used as auth header replacement when working in private network. Currently it is used in Payment App validation only.
    Value for ZnodePrivateKey can be anything random, not driven from DB, Change it.
    But make sure the value is added in Admin, Webstore, API and PaymentApi web.config !-->
		<add key="ZnodePrivateKey" value="432915F1-17ee-d018-a005-a14-61be3e94a83e" />
		<add key="EnableSwagger" value="false" />
    
		<!--To Calculate shipping based Promotion for shipping Estimate when IsCalculatePromotionForShippingEstimate flag is true-->
		<add key="IsCalculatePromotionForShippingEstimate" value="true" />
	  <!-- The path(Relative/Absolute) to the DLSC license file. Defaults to /data/default/config if not specified. -->
		<add key="LicensePath" value="~/License" />
		<!--- This Key is useful to debug Log4net behaviour, when Enabled - it will start showing log4net configuration
         in output window.
         1 - Enable Log4net Debugging 
         0 - Disable Log4net Debugging -->
		<add key="Log4netInternalDebugging" value="0" />
		<add key="EnableDBLogging" value="1" />
		<add key="TokenExpirationTime" value="10" />
		<!--Lock User Account, maximum invalid attempt count -->
		<add key="MaxInvalidPasswordAttempts" value="5" />
		<!--Reset Password Link, expiration duration, in days -->
		<add key="ResetPassworLinkExpirationDuration" value="24" />
        <!--Export file, expiration duration, in days -->
        <add key="ExportFileDeletionDuration" value="30" />
		<!-- URI endpoint separators -->
		<add key="ZnodeApiUriItemSeparator" value="," />
		<add key="ZnodeCommaReplacer" value="^" />
		<add key="ZnodeApiUriKeyValueSeparator" value="~" />
		<!-- Password Expired within days. Default value 60-->
		<add key="PasswordExpiration" value="60" />
		<!--Payment gateways related keys.-->
		<!-- This is the FedEx test URL. The production URL is https://wsbeta.fedex.com:443/web-services/rate. -->
		<add key="FedExGatewayURL" value="https://wsbeta.fedex.com:443/web-services/rate" />
		<add key="UPSGatewayURL" value="https://wwwcie.ups.com/ups.app/xml/Rate" />
		<add key="UPSAddressValidationURL" value="https://wwwcie.ups.com/ups.app/xml/AV" />
		<!-- USPS (United States Postal Service) settings. -->
		<add key="USPSShippingAPIURL" value="http://production.shippingapis.com/ShippingAPI.dll" />
		<add key="USPSWebToolsUserID" value="678ZNODE6006" />
		<!-- This is the  USPS  Shipping Weight Limit-->
		<add key="USPSWeightLimitInLBS" value="65" />
		<add key="USPSWebRequestTimeOutMs" value="" />
		<add key="SiteMapNameSpace" value="xmlns=http://www.sitemaps.org/schemas/sitemap/0.9,xmlns:image=http://www.google.com/schemas/sitemap-image/1.1,xmlns:g=http://base.google.com/ns/1.0" />
		<add key="GoogleProductFeedNameSpace" value="http://base.google.com/ns/1.0" />
		<add key="ProductFeedRecordCount" value="50000" />
		<!-- Import Chunk limit -->
		<add key="ZnodeImportChunkLimit" value="1000" />
		<!--QuickBook web connector login credentials-->
		<add key="QBAdminZnodeUsername" value="admin@znode.com" />
		<add key="QBWebConnectorUsername" value="username" />
		<add key="QBWebConnectorPassword" value="password" />
		<!--Base64 encrypted QuickBook web connector username+password-->
		<add key="QBWebConnectorValidationToken" value="dXNlcm5hbWVwYXNzd29yZA==" />
		<!-- Report Server Details -->
    <add key="MvcReportViewer.ReportServerUrl" value="" />
    <add key="MvcReportViewer.Username" value="" />
    <add key="MvcReportViewer.Password" value="" />
    <add key="ReportServerDomain" value="" />
    <add key="ZnodeReportFolderName" value="" />
    <add key="ReportServerDynamicReportFolderName" value="" />
    <add key="ReportDataSetName" value="" />
    <add key="WebstoreWebsiteName" value="" />
    <!-- Elastic search keys -->
		<!--If set to true then we can use custom analyzer with user defined filters and tokenizers; else default analyzer will be used-->
		<add key="UseCustomAnalyzer" value="true" />
		<add key="UseSynonyms" value="true" />
		<!-- Fix Elastic cluster fault tolerance.-->
    <add key="ElasticSearchRootUri" value="http://localhost:9200" />
    <add key="ElasticSearchUsername" value=""/>
		<add key="ElasticSearchPassword" value=""/>
		<!--Comma seperated values(default token filters available:"standard,asciifolding,uppercase,length,nGram,edgeNGram,porter_stem,shingle,word_delimiter,etc.")-->
		<add key="DefaultTokenFilters" value="lowercase" />
		<add key="SearchIndexChunkSize" value="500" />
		<add key="RemovableProductAttributes" value="{&quot;Hidden&quot;:&quot;true&quot;}" />
		<add key="ZnodeSupportEmail" value="support@znode.com" />
		<!--Znode Current Version.-->
		<add key="SwaggerBuildVersion" value="9_7_5_0" />
		<add key="BuildVersion" value="9.7.5.0" />
		<!--Tax keys-->
		<add key="AvaTaxCode" value="000" />
		<add key="DisableTaxCommit" value="false" />
		<add key="ExemptionNo" value="EXEMPT" />
		<add key="AvaTaxClientHeader" value="ALP,9.0.3,Znode Avalara Tax Addin,1.0" />
		<add key="FlexFieldsToPassInVertex" value="Highlights,Vendor,Brand" />
		<!--Change the below key to 'false' in production environment-->
		<add key="CCHTestTransactionMode" value="true" />
		<add key="ERPConfigurationPath" value="/Data/ERPScheduler/{0}.{1}" />
		<add key="ABSOrderFilePath" value="C:/ZnodeABS" />
		<add key="LastOrderFilePath" value="/Data/ABSPushFolder" />
		<add key="CCHWebServiceURL" value="http://sample.test.com" />
		<add key="CCHTransactionType" value="01" />
		<add key="CCHCustomerType" value="08" />
		<add key="CCHProviderType" value="70" />
		<add key="CCHTaxGroup" value="0000" />
		<add key="CCHTaxItem" value="000" />
		<add key="CCHSourceSystem" value="Znode_Multifront" />
		<add key="CCHTransactionDescription" value="Znode multifront sample transaction" />
		<!--Maximum time for which publish product process will run. If publish product is not complete in maximum time, it will be failed.-->
		<!--Publish product time will be relative to publish product sleep time-->
		<!--Example: If we need publish product service to run for 30 minutes and sleep time is 10000 miliseconds, then publish product max time will be 180-->
		<!--Example: If we need publish product service to run for 30 minutes and sleep time is 20000 miliseconds, then publish product max time will be 90-->
		<add key="ProductPublishMaxTime" value="540" />
		<!--Publish product thread sleep time in miliseconds-->
		<add key="ProductPublishSleepTime" value="20000" />
		<add key="AllowedMediaExtention" value=".svg" />
    <!--If true will genrate the runtime images for product and category else genarte image from store-->
		<add key="GenerateRuntimeImages" value="True" />
		<add key="ABSFilePath" value="c:/ABS/" />
		<add key="Microsoft.VisualStudio.Enterprise.AspNetHelper.VsInstrLocation" value="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Performance Tools\vsinstr.exe" />
		<add key="ShippingContainer" value="VARIABLE" />
		<add key="ShippingPackageSizeFromRequest" value="REGULAR" />
		<add key="CreateIndexAfterPublish" value="True" />
		<!--Shipping URLs for tracking number-->
		<add key="UPSTrackingUrl" value="https://www.ups.com/tracking/tracking.html" />
		<add key="FedExTrackingUrl" value="https://www.fedex.com/apps/fedextrack/?action=track" />
		<add key="USPSTrackingUrl" value="https://tools.usps.com/go/TrackConfirmAction_input" />
		<!--UPS URL for Time In Transit-->
		<add key="UPSGatewayProductionTimeInTransit" value="False" />
		<add key="UPSGatewayDevelopmentTimeInTransitURL" value="https://wwwcie.ups.com/ups.app/xml/TimeInTransit" />
		<add key="UPSGatewayProductionTimeInTransitURL" value="https://www.ups.com/ups.app/xml/TimeInTransit" />
		<add key="PersonalisedAttributeLineItemSeparator" value="," />
		<add key="ImageQualityFactor" value="90" />
		<!--Comma-separated list of attributes to be included while getting the published products-->
		<add key="AdditionalAttributes" value="ColorSwatch, Color, UPC, Size, SizeChart, ColorFamily, ImageName, ColorSwatchReg, BackImageBlank, SubstrateID, IsPrimary" />
		<add key="IsAllowAddOnQuantity" value="false" />
		<!--Cookie setting-->
		<add key="IsCookieHttpOnly" value="false" />
		<add key="IsCookieSecure" value="false" />
		<!--Following keys are used to set chunk size of product while publishing product and creating index on category publish.-->
		<!--Product chunk size on category publish.-->
		<add key="ProductPublishChunkSize" value="200" />
    <!--Export Chunk limit-->
    <add key="ZnodeExportChunkLimit" value="50"/>
    <add key ="ZnodeImportExportChunkLimit" value="300"/>
		<!--Index chunck size on category publish.-->
		<add key="IndexChunkSizeOnCategoryPublish" value="200" />
		<add key="IsDefaultApplicationTypeEnabled" value="false" />
		<add key="CustomAssemblyLookupPrefix" value="Spp." />
		<!-- RequestTimeout time for taskscheduler. Default value 10 mins-->
		<add key="RequestTimeout" value="600000" />
		<!-- Dynamsoft barcode scanner license key-->
    <add key="BarcodeScannerLicenseKey" value="" />
    <add key="EnableBarcodeSpecificSearch" value="false" />
		<!--Entity Logging-->
		<add key="AllowPublishedEntityLogging" value="false" />
		<add key="NoOfPublishedVersionsToBeLogged" value="1" />
		<add key="DisableRoutesForStaticFile" value="True" />
		<!-- To specify the orders chunk size which will be considered for recommendations engine's internal model creation.-->
		<add key="RecommendationModelChunkSize" value="500" />
    
		<!-- Time limit in miliseconds for recommendations engine's internal model creation.-->
    <!-- Currently set for 1800000 milisecods that is 30 minutes-->
    <add key="RecommendationModelTimeLimit" value="1800000" />
		<!-- Time limit in minute for complete catalog publish process-->
		<!-- Currently set for 60 minute, i.e. 1 hour-->
		<add key="PublishCatalogConnectionTime" value="60" />
		<!-- Time limit in seconds for complete portal publish process-->
		<!-- Currently set for 5 minute-->
		<add key="PublishPortalConnectionTime" value="5" />
		<!-- PurgePublishCatalogConnectionTime : Time limit in minutes for deletion of published catalog data process -->
		<!-- Currently set for 30 minute-->
		<add key="PurgePublishCatalogConnectionTime" value="30" />
		<!--ElasticCatalogIndexWaitTimeMinute : Time limit in minutes for completion of elasticsearch indexing process-->
		<!-- Currently set for 30 minute-->
		<add key="ElasticCatalogIndexWaitTimeMinute" value="30" />
		<!--PublishProductFetchChunkSize : To specify chunk size to fetch publish product from database entity during elasticsearch indexing process-->
		<!--The PublishProductFetchChunkSize key value may vary depending on server/system configuration & space capability, so set the value appropriately-->
		<!--If the key value is empty or zero return default chunk size i.e. 10000-->
		<add key="PublishProductFetchChunkSize" value="10000" />

		<!--The Scheduler frequency can be set as "OneTime","Recurring".-->
		<add key="SchedulerFrequencyForVoucherReminderEmail" value="Recurring" />
		<!--If the key value is set it as false the scheduler will be Disable-->
		<add key="EnableSchedulerForVoucherReminderEmail" value="True" />
		<!-- Time format should be like "12:00:00 AM" -->
		<add key="VoucherEmailSchedulerTriggerTime" value="12:00:00 AM" />
		<!-- CRON expression for the voucher email scheduler. Required in case the scheduler frequency -->
		<!-- is set to Recurring. Defaults to repeat every 30 minutes. -->
		<add key="VoucherEmailSchedulerCronExpression" value="*/30 * * * *" />


		<!-- Over due amount round off to split the total amount-->
		<add key="OrderOverDueAmountRoundOffLength" value="7" />
		<!--The EnableLinqSQLDebugging can be set true when need to debug the entity framework queries in SQL format. This details can be seen in the Output window in Visual Studio.-->
		<add key="EnableLinqSQLDebugging" value="false" />
		<!-- Base name (prefix) used for all elasticsearch indexes related to cache events. -->
		<add key="CacheIndexBaseName" value="cache-dev-" />
		<!-- Enable to record metrics related to caching, such as detailed cache evicition information. -->
		<add key="CacheMetricRecordingEnabled" value="false" />
		<!-- Frequency of polling elasticsearch for new cache events. -->
		<add key="CachePollFrequencyInMilliseconds" value="7000" />
		<!-- Time to delay processing of cache events. Used to allow downstream caches to wait for upstream caches to be cleared first. -->
		<add key="CacheEventProcessingDelayInMilliseconds" value="0" />
		<!-- Time to delay processing of cache events of cloudflare. Used to allow downstream caches to wait for upstream caches to be cleared first. -->
		<add key="CloudflareCacheEventProcessingDelayInMilliseconds" value="30000" />
		<add key="AvalaraRestRootUri" value="https://sandbox-rest.avatax.com/api/v2" />
		<!-- AppName to be set in X-Avalara-Client header of request. -->
		<add key="AvalaraAppName" value="a0o5a000006EBvLAAW" />

		<!--this key is used for enable and disable schedular-->
		<!--If the key value is set it as false the scheduler will be Disable-->
		<add key="EnableSchedulerForUserRegistrationAttempt" value="True" />
		<!--The Scheduler frequency can be set as "OneTime","Recurring".-->
		<!--Recurring job is executing multiple time on the basis "Cron Expression"-->
		<add key="UserRegistrationAttemptSchedulerType" value="Recurring" />
		<!-- Time format should be like "12:00:00 AM" -->
		<add key="UserRegistrationAttemptSchedulerTriggerTime" value="12:00:00 AM" />
		<!-- CRON expression for the user registration attempt scheduler. Required in case the scheduler frequency -->
		<!-- is set to Recurring. Defaults to repeat every day at 12:00:00 AM. -->
		<add key="UserRegistrationAttemptSchedulerCronExpression" value="0 0 * * *" />

    <!--this key is used for enable and disable schedular-->
    <!--If the key value is set it as false the scheduler will be Disable-->
    <add key="EnableSchedulerForDeletePaymentAuthToken" value="True" />
    <!--The Scheduler frequency can be set as "OneTime","Recurring".-->
    <!--Recurring job is executing multiple time on the basis "Cron Expression"-->
    <add key="DeletePaymentAuthTokenSchedulerType" value="Recurring" />
    <!-- Time format should be like "12:00:00 AM" -->
    <add key="DeletePaymentAuthTokenSchedulerTriggerTime" value="12:00:00 AM" />
    <!-- CRON expression for the user registration attempt scheduler.-->
    <!-- Required in case the scheduler frequency -->
    <!-- is set to recurring. Defaults to repeat every hour. -->
    <add key="DeletePaymentAuthTokenSchedulerCronExpression" value="0 */1 * * *" />
    
	<!--This key is used for enable or disable stock notice scheduler-->
	<add key="EnableStockNotice" value="True" />
	<!--The Scheduler frequency can be set as "OneTime","Recurring".-->
	<add key="StockNoticeSchedulerType" value="Recurring" />
	<!-- Set to Recurring. Defaults to repeat every day at 12:00:00 AM. -->
	<add key="StockNoticeCronExpression" value="0 0 * * *" />
	<!--this key is used for enable and disable schedular-->
    <!--If the key value is set it as false the scheduler will be Disable-->
    <add key="EnableSchedulerForDeleteExportFiles" value="True" />
    <!--The Scheduler frequency can be set as "OneTime","Recurring".-->
    <!--Recurring job is executing multiple time on the basis "Cron Expression"-->
    <add key="DeleteExportSchedulerType" value="Recurring" />
    <!-- Time format should be like "12:00:00 AM" -->
    <add key="ExportSchedulerTriggerTime" value="12:00:00 AM" />
    <!-- CRON expression for the user registration attempt scheduler. Required in case the scheduler frequency -->
    <!-- is set to recurring. Defaults to repeat every hour. -->
    <add key="DeleteExportSchedulerCronExpression" value="*/5 * * * *" />
    <!--This key is used for setting Shoppingfeed chunk size(Items in one XML) -->
    <add key="ShoppingfeedChunkSize" value="100"/>
	<!--AuthorizeNet iframe URL -->
	<add key ="AuthorizeNetIFrameUrl" value="https://test.authorize.net/payment/payment"/>
	<add key ="IsSandboxAuthorizeNetAccount" value="true"/>
	</appSettings>
  
  <CloudflareConfigSection>
    <add key="CloudflareUrl" value="https://api.cloudflare.com/client/v4" />
    <add key="CloudflareApiKey" value="" />
    <add key="CloudflareEmailAccount" value="" />
  </CloudflareConfigSection>
  
  <HangfireConfigSection>
    <!--If the key value is set it as true we can see hangfire dashboard-->
    <add key="EnableHangfireDashboard" value="false" />
    
    <!--This key is used to create the hangfire database in first time, 
    if the database is not exist and the key value is true then it will create database-->
		<add key="HangfirePrepareSchemaIfNecessary" value="true" />

		<!--The Queue pool interval for Hangfire-->
		<add key="HangfireQueuePollInterval" value="0" />

		<!--The Command Batch Max Timeout in minutes for Hangfire-->
		<add key="HangfireCommandBatchMaxTimeout" value="5" />

		<!--The Sliding Invisibility Timeout in minutes for Hangfire-->
		<add key="HangfireSlidingInvisibilityTimeout" value="5" />

		<!--Stat Polling interval. Defaults to 5 minutes-->
		<add key="HangfireStatsPollingInterval" value="5" />

		<!--Make Hangfire dashboard read-only for all the users specified in the HangfireDashboardCredentials key.-->
		<!--Defaults to true, resulting in a read-only dashboard.-->
		<add key="MakeHangfireDashboardReadOnly" value="false" />

		<!--Credentials for the users allowed to login to the dashboard.-->
		<!--Comma-separated list of username and password in the format Username:Password-->
		<add key="HangfireDashboardCredentials" value="admin:H@ngf1r3" />
	</HangfireConfigSection>

	<ZnodeApiCache configSource="cache.config" />
  <!--
    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.6.1" />
      </system.Web>
  -->
	<system.web>
		<authentication mode="None" />
		<compilation debug="true" targetFramework="4.8" />
		<httpRuntime targetFramework="4.8" maxUrlLength="999999" maxQueryStringLength="999999" maxRequestLength="214748364" />
		<caching>
			<sqlCacheDependency enabled="true" pollTime="5000">
				<databases>
					<add name="ZnodeMultifront" connectionStringName="ZnodeECommerceDB" />
				</databases>
			</sqlCacheDependency>
		</caching>
	</system.web>
	<system.webServer>
		<modules>
      <!--<add name="ElasticApmModule" type="Elastic.Apm.AspNetFullFramework.ElasticApmModule" />-->
			<remove name="WebDAVModule" />
		</modules>
		<handlers>
			<remove name="WebDAV" />
			<remove name="ExtensionlessUrlHandler-Integrated-4.0" />
			<remove name="OPTIONSVerbHandler" />
			<remove name="TRACEVerbHandler" />
			<add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
		</handlers>
		<security>
			<requestFiltering>
				<requestLimits maxQueryString="999999" maxUrl="999999" maxAllowedContentLength="4294967295" />
			</requestFiltering>
		</security>
		<httpProtocol>
			<customHeaders>
				<clear />
				<add name="Access-Control-Allow-Origin" value="*" />
			</customHeaders>
		</httpProtocol>

		<!-- Below code is only used when preload setting is true.-->
		<!--<applicationInitialization doAppInitAfterRestart="true">
      <add initializationPage="/home/index" hostName="localhost:44762" />
    </applicationInitialization>-->

		<!--Below Rule required for the sites to be redirect to the HTTPS.
    Also check the IIS Server has the URL Redirect Module Installed-->
		<!--<rewrite>
    <rules>
      <rule name="HTTP to HTTPS redirect for all requests" stopProcessing="true">
        <match url="(.*)" />
        <conditions>
          <add input="{HTTPS}" pattern="off" />
        </conditions>
        <action type="Redirect" url="https://{HTTP_HOST}/{R:1}" />
      </rule>
    </rules>
  </rewrite>-->
    <staticContent>
      <remove fileExtension=".webp" />
      <mimeMap fileExtension=".webp" mimeType="image/webp" />
    </staticContent>
  </system.webServer>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Nest" culture="neutral" publicKeyToken="96c599bbe3e70f5d" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin.Security" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin.Security.OAuth" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin.Security.Cookies" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Owin" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Newtonsoft.Json" culture="neutral" publicKeyToken="30ad4fe6b2a6aeed" />
				<bindingRedirect oldVersion="0.0.0.0-12.0.0.0" newVersion="12.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Optimization" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="1.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Http" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Net.Http.Formatting" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Autofac" publicKeyToken="17863af14b0044da" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Http.Owin" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Autofac.Integration.WebApi" publicKeyToken="17863af14b0044da" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.VisualStudio.Enterprise.AspNetHelper" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
				<codeBase version="14.0.0.0" href="file:///C:/Program%20Files%20(x86)/Microsoft%20Visual%20Studio%2014.0/Common7/IDE/PrivateAssemblies/Microsoft.VisualStudio.Enterprise.AspNetHelper.DLL" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Autofac.Integration.Owin" publicKeyToken="17863af14b0044da" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-2.0.8.0" newVersion="2.0.8.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="SharpCompress" publicKeyToken="afb0a02973931d96" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-0.24.0.0" newVersion="0.24.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
		</providers>
	</entityFramework>
	<system.serviceModel>
		<bindings>
			<basicHttpsBinding>
				<binding name="CalculateTax70SoapBinding" />
			</basicHttpsBinding>
		</bindings>
		<client>
			<endpoint address="https://sandboxap1.ondemand.vertexinc.com/vertex-ws/services/CalculateTax70" binding="basicHttpsBinding" bindingConfiguration="CalculateTax70SoapBinding" contract="CalculateTax70.CalculateTaxWS70" name="CalculateTax70" />
		</client>
	</system.serviceModel>
	<system.codedom>
		<compilers>
			<compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:default /nowarn:1659;1699;1701" />
			<compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:default /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" />
		</compilers>
	</system.codedom>
</configuration>