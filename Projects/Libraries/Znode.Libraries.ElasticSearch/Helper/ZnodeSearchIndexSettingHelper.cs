using Nest;
using System.Collections.Generic;
using System.Configuration;
using Znode.Libraries.ECommerce.Utilities;
using Znode.Engine.Api.Models;
using Newtonsoft.Json;
using System.Linq;
using System;

namespace Znode.Libraries.ElasticSearch
{
    public class ZnodeSearchIndexSettingHelper : IZnodeSearchIndexSettingHelper
    {
        #region Private variables  

        #region Mapping character filter
        // To specify the mapping for a underscore, underscore will be replaced with the empty string at the time of preprocessing by the mapping character filter.
        private readonly string underscoreMapping = "_ => ";

        // To specify the mapping for a hyphen, hyphen will be replaced with the empty string at the time of preprocessing by the mapping character filter.
        private readonly string hyphenMapping = "- => ";
        #endregion Mapping character filter
        
        #region NGram token filter
        // To specify minimum token length for NGram token filter.
        private readonly int? ngramMinimumTokenLength = 1;

        // To specify maximum token length for NGram token filter.
        private readonly int? ngramMaximumTokenLength = 40;
        #endregion NGram token filter

        #region Edge NGram token filter
        // To specify minimum token length for Edge NGram token filter.
        private readonly int? edgeNGramMinimumTokenLength = 1;

        // To specify maximum token length for Edge NGram token filter.
        private readonly int? edgeNGramMaximumTokenLength = 20;
        #endregion Edge NGram token filter

        #endregion Private variables

        #region Token filters

        // To set the Shingle token filter in the tokenFilters list. 
        public virtual void SetShingleTokenFilter(List<string> tokenFilters, IndexSettings indexSettings)
        {
            indexSettings.Analysis.TokenFilters.Add(ZnodeConstant.ShingleTokenFilter, new ShingleTokenFilter
            {
                MinShingleSize = 2,
                MaxShingleSize = 10
            });

            tokenFilters.Add(ZnodeConstant.ShingleTokenFilter);
        }

        // To set the NGram token filter in the tokenFilters list.
        public virtual void SetNGramTokenFilter(IndexSettings indexSettings, PublishSearchProfileModel publishSearchProfileModel)
        {
            int minGram= ZnodeConstant.ngramMinimumTokenLength, maxGram = ZnodeConstant.ngramMaximumTokenLength;

            if (HelperUtility.IsNotNull(publishSearchProfileModel))
            {
                Int32.TryParse(GetSearchFeatureByFeatureCode(publishSearchProfileModel?.FeaturesList, ZnodeConstant.MinGram), out minGram);
                Int32.TryParse(GetSearchFeatureByFeatureCode(publishSearchProfileModel?.FeaturesList, ZnodeConstant.MaxGram), out maxGram);
            }

            // To set the minimum and maximum token length generated by the NGram token filter, MinGram and MaxGram property needs to be set respectively.
            indexSettings.Analysis.TokenFilters.Add(ZnodeConstant.NGramTokenFilter, new NGramTokenFilter
            {
                // To create tokens of the minimum length of 1.
                MinGram = minGram,
                // To create tokens of the maximum length of 40.
                MaxGram = maxGram,
            });
        }
        
        // Converting Json data into List of Search feature Model.
        protected virtual List<SearchFeatureModel> DeserializeSearchFeaturesList(string searchFeatures)
            => JsonConvert.DeserializeObject<List<SearchFeatureModel>>(searchFeatures);

        // Get search feature by the feature code value.
        public virtual string GetSearchFeatureByFeatureCode(string searchFeatureListJson, string featureCode)
        {
            if (!string.IsNullOrEmpty(searchFeatureListJson))
            {
                List<SearchFeatureModel> searchFeatureList = DeserializeSearchFeaturesList(searchFeatureListJson);
                return searchFeatureList?.FirstOrDefault(x => string.Equals(x.FeatureCode, featureCode, StringComparison.InvariantCultureIgnoreCase))?.SearchFeatureValue;
            }
            return null;
        }

        // To set the Stemming token filter in the tokenFilters list.
        public virtual void SetStemmingFilter(List<string> tokenFilters, IndexSettings indexSettings)
        {
            if (ConfigurationManager.AppSettings["EnableStemmingFilter"]?.Equals("1") ?? false)
            {
                if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["StemExclusionWords"]))
                {
                    indexSettings.Analysis.TokenFilters.Add("preventStemmingFilter", new KeywordMarkerTokenFilter
                    {
                        Keywords = ConfigurationManager.AppSettings["StemExclusionWords"].Split(',')
                    });
                    tokenFilters.Add("preventStemmingFilter");
                }
                indexSettings.Analysis.TokenFilters.Add("stemmerTokenFilter", new StemmerTokenFilter
                {
                    Language = Language.English.ToString()
                });

                tokenFilters.Add("stemmerTokenFilter");
            }
        }

        // To set the Edge NGram token filter in the tokenFilters list.
        public virtual void SetEdgeNGramFilter(List<string> tokenFilters, IndexSettings indexSettings)
        {
            // EdgeNGramTokenFilter also considers the grammar which was not previously considered by stemmerTokenFilter.
            // To set the minimum and maximum token length generated by the Edge NGram token filter, MinGram and MaxGram property needs to be set respectively.
            indexSettings.Analysis.TokenFilters.Add("edgeNgramTokenFilter", new EdgeNGramTokenFilter
            {
                // To create tokens of the minimum length of 1.
                MinGram = edgeNGramMinimumTokenLength,
                // To create tokens of the maximum length of 20.
                MaxGram = edgeNGramMaximumTokenLength
            });

            tokenFilters.Add("edgeNgramTokenFilter");
        }

        // To set the tokenizers in the index settings.
        public virtual void SetTokenizers(IndexSettings indexSettings, PublishSearchProfileModel publishSearchProfileModel)
        {
            int minGram = ZnodeConstant.ngramMinimumTokenLength, maxGram = ZnodeConstant.ngramMaximumTokenLength;

            if (HelperUtility.IsNotNull(publishSearchProfileModel))
            {
                Int32.TryParse(GetSearchFeatureByFeatureCode(publishSearchProfileModel?.FeaturesList, ZnodeConstant.MinGram), out minGram);
                Int32.TryParse(GetSearchFeatureByFeatureCode(publishSearchProfileModel?.FeaturesList, ZnodeConstant.MaxGram), out maxGram);
            }

            // The maximum token length for the standard tokenizer can be set via the MaxTokenLength property.
            // The default value of this property is 255 and the maximum value that can be set is 300.
            // If the mapping character filter is applied and the complete text is considered as the single word(due to mapping for space to empty string replacement) 
            // then the desired tokens will not get generated as MaxTokenLength was restricting the token length.
            indexSettings.Analysis.Tokenizers.Add("standard", new StandardTokenizer() { MaxTokenLength = 40 });

            indexSettings.Analysis.Tokenizers.Add("ngram", new NGramTokenizer()
            {
                MinGram = minGram,
                MaxGram = maxGram,
                TokenChars = new List<TokenChar> { TokenChar.Letter, TokenChar.Digit, TokenChar.Punctuation, TokenChar.Symbol, TokenChar.Whitespace }
            });
        }

        // To set the CustomAnalyzer instance.
        public virtual CustomAnalyzer SetCustomAnalyzer(string tokenizer, List<string> tokenFilters, List<string> characterFilters = null)
        {
            CustomAnalyzer customAnalyzer = new CustomAnalyzer();
            customAnalyzer.Tokenizer = tokenizer;
            customAnalyzer.Filter = tokenFilters;

            if (characterFilters?.Count > 0)
                customAnalyzer.CharFilter = characterFilters;

            return customAnalyzer;
        }

        // To set the porter stem token filter in the IndexSettings.
        public virtual void SetPorterStemTokenFilter(IndexSettings indexSettings)
        {
            if (HelperUtility.IsNotNull(indexSettings?.Analysis?.TokenFilters))
            {
                indexSettings.Analysis.TokenFilters.Add(ZnodeConstant.PorterStemTokenFilter, new PorterStemTokenFilter());
            }
        }

        #endregion Token filters

        #region Character filters

        // To set the HTML Strip character filter.
        public virtual void SetHtmlStripCharacterFilter(IndexSettings indexSettings)
        {
            indexSettings.Analysis.CharFilters.Add("my_char_filter", new HtmlStripCharFilter { });
        }

        // To set the mapping character filters in the IndexSettings.
        public virtual void SetMappingCharacterFilter(IndexSettings indexSettings, PublishSearchProfileModel publishSearchProfileModel)
        {
            string characterFilters = GetSearchFeatureByFeatureCode(publishSearchProfileModel?.FeaturesList, ZnodeConstant.CharacterFilter);

            if (HelperUtility.IsNull(indexSettings?.Analysis?.CharFilters))
                indexSettings.Analysis.CharFilters = new CharFilters();

            indexSettings.Analysis.CharFilters.Add(ZnodeConstant.MappingCharacterFilter, new MappingCharFilter
            {
                // Registered mappings will preprocess the text before passing it to the tokenizer.
                // In the Mappings property, mappings can be registered for special characters, digits and spaces etc.
                // To replace underscore and hyphen with the empty string "_ => " and "- => " mappings have been registered respectively. 
                // These mappings will be made database driven in the upcoming releases.
                Mappings = string.IsNullOrEmpty(characterFilters) ? new List<string>() : characterFilters?.Split(',')?.ToList()
            });
        }

        #endregion Character filters
    }
}
