@using Znode.Engine.WebStore.ViewModels
@using Znode.Libraries.ECommerce.Utilities
@using Znode.Engine.WebStore.Agents;
@model WishListListViewModel

<div id="layout-account-wishlist" class="main-wrapper col">
    <div class="row">
        <div class="container-fluid profile-dashboard">
            <div class="row">
                <div class="container">
                    @Html.Partial("_AccountMenuDashboard")
                </div>
            </div>
        </div>
    </div>
    <div class="row b2b-breadcrumbs d-none d-md-block">
        <div class="container">
            <div class="row">
                <!-- Breadcrumb -->
                <div id="breadCrumb" class="col breadcrumb-container"><a href="/" class="home-icon pr-2" title="Home"></a><a href="/User/Dashboard">My Account</a> / Wishlist</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="container">
            <div class="row user-account">
                <div class="col-12 account-dashboard">
                    <div class="row mb-5">
                        <div class="col-12 col-lg-9 wishlist-container right-container">
                            <div class="row no-gutters">
                                <div class="col-12 p-0">
                                    <h1 class="page-title" data-test-selector="hdgTitleWishlist">@WebStore_Resources.LinkTextWishlist</h1>
                                </div>
                                <div class="col-12 p-0 mb-4 dashboard-content">
                                    <h2 class="b2b-section-header">@Html.RenderBlock(string.Format(WebStore_Resources.SubTextWishlistCount, (!Equals(Model.WishList, null) ? Model.WishList.Count : 0)))</h2>
                                    <div class="col-12 p-0">
                                        <div class="col-12 account-recent-orders">
                                            @if (!Equals(Model.WishList, null))
                                            {
                                                foreach (var item in Model.WishList)
                                                {
                                                    string UOM = Attributes.ValueFromSelectValue(item?.Product?.Attributes, "UOM");
                                                    if (item.Product != null)
                                                    {
                                                        string productType = item.Product?.Attributes?.SelectAttributeList(ZnodeConstant.ProductType)?.FirstOrDefault()?.Code;
                                                        string callForPricingMessage = Html.RenderMessage(WebStoreConstants.ProductCallForPricing)?.ToString();
                                                        bool CallForPricing = Convert.ToBoolean(item.Product.Attributes?.Value(ZnodeConstant.CallForPricing));
                                                        ProductPromotionViewModel promotionCallForPricing = item.Product?.Promotions?.FirstOrDefault(x => x.PromotionType == ZnodeConstant.PromotionCallForPricing);
                                                        if (HelperUtility.IsNotNull(promotionCallForPricing))
                                                        {
                                                            CallForPricing = true;
                                                            callForPricingMessage = string.IsNullOrEmpty(promotionCallForPricing.PromotionMessage) ? callForPricingMessage : promotionCallForPricing.PromotionMessage;
                                                        }

                                                        string disable = CallForPricing || !item.Product.ShowAddToCart ? "disabled" : "";
                                                        <div class="row wishlist-item">
                                                            <div class="col-12 col-lg-6 mb-3 p-0 wishlist-item-detail">
                                                                @if (Convert.ToBoolean(item.Product?.Attributes?.Value("IsActive")))
                                                                {
                                                                    <a class="row" href="@Url.GetProductUrl(item.Product.SEOUrl, item.Product.PublishProductId.ToString())">
                                                                        <div class="col-4 col-lg-3 wishlist-item-image">
                                                                            @{
                                                                                string imageSrc = string.IsNullOrEmpty(item.Product.ImageSmallPath) ? "/no-image.png" : item.Product.ImageSmallPath;
                                                                            }
                                                                            <img id="@item.Product.PublishProductId" src="@imageSrc" class="img-fluid" data-src="@imageSrc" alt="Product" data-test-selector="imgSmallPath"/>
                                                                        </div>

                                                                        <div class="col-12 col-lg-9">
                                                                            <div class="wishlist-item-title" data-test-selector="divProductName">@WebUtility.HtmlDecode(@item.Product.Name)</div>
                                                                            <div class="wishlist-item-date">@WebStore_Resources.ColumnTextAdded @item.WishListAddedDate.ToDateTimeFormat()</div>
                                                                        </div>
                                                                    </a>
                                                                }
                                                                else
                                                                {
                                                                    <a href="/ErrorPage/PageNotFound">
                                                                        <div class="col-4 col-lg-3 wishlist-item-image">
                                                                            @{
                                                                                string imageSrc = string.IsNullOrEmpty(item.Product.ImageSmallPath) ? "/no-image.png" : item.Product.ImageSmallPath;
                                                                            }
                                                                            <img id="@item.Product.PublishProductId" src="@imageSrc" class="img-fluid" data-src="@imageSrc" alt="Product" data-test-selector="imgSmallPath"/>
                                                                        </div>

                                                                        <div class="col-12 col-lg-9">
                                                                            <div class="wishlist-item-title" data-test-selector="divProductName">@WebUtility.HtmlDecode(@item.Product.Name)</div>
                                                                            <div class="wishlist-item-date">@WebStore_Resources.ColumnTextAdded @item.WishListAddedDate.ToDateTimeFormat()</div>
                                                                        </div>
                                                                    </a>
                                                                }

                                                            </div>
                                                            <div class="col-12 col-lg-3 mb-3 p-0 wishlist-item-price">
                                                                @if (CallForPricing)
                                                                {
                                                                    <label data-test-selector="lblcallForPricingMessage">@callForPricingMessage</label>
                                                                }
                                                                else if ((!Equals(item.Product.ProductType, ZnodeConstant.GroupedProduct)) && !Equals(item.Product.ProductType, ZnodeConstant.ConfigurableProduct) && HelperUtility.IsNull(item.Product.ProductPrice))
                                                                {
                                                                    <label data-test-selector="lblErrorPriceNotAssociate">@WebStore_Resources.ErrorPriceNotAssociate</label>
                                                                }

                                                                else
                                                                {
                                                                    if (!Equals(item.Product.ProductType, ZnodeConstant.GroupedProduct))
                                                                    {
                                                                        if (HelperUtility.IsNotNull(item.Product.ProductPrice))
                                                                        {
                                                                            <label data-test-selector="lblProductPrice">@Helper.FormatPriceWithCurrency(item.Product.ProductPrice, item.Product.CultureCode, UOM)</label>
                                                                            if (item.Product.ProductPrice != item.Product.RetailPrice && !Equals(productType, ZnodeConstant.GroupedProduct))
                                                                            {
                                                                                <span class="cut-price">
                                                                                    @Helper.FormatPriceWithCurrency(item.Product.RetailPrice, item.Product.CultureCode, UOM)
                                                                                </span>
                                                                            }
                                                                        }
                                                                        else if (HelperUtility.IsNotNull(item.Product.SalesPrice))
                                                                        {
                                                                            <label data-test-selector="lblSalesPrice"> @Helper.FormatPriceWithCurrency(item.Product.SalesPrice, item.Product.CultureCode, UOM) </label>
                                                                            if (item.Product.SalesPrice != item.Product.RetailPrice && !Equals(productType, ZnodeConstant.GroupedProduct))
                                                                            {
                                                                                <span class="cut-price">
                                                                                    @Helper.FormatPriceWithCurrency(item.Product.RetailPrice, item.Product.CultureCode, UOM)
                                                                                </span>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if (item.Product.PromotionalPrice > 0)
                                                                            {
                                                                                @Helper.FormatPriceWithCurrency(item.Product.PromotionalPrice, item.Product.CultureCode, UOM)
                                                                                <span class="cut-price">
                                                                                    @Helper.FormatPriceWithCurrency(item.Product.RetailPrice, item.Product.CultureCode, UOM)
                                                                                </span>
                                                                            }
                                                                            else
                                                                            {
                                                                                <span>
                                                                                    @Helper.FormatPriceWithCurrency(item.Product.RetailPrice, item.Product.CultureCode, UOM)
                                                                                </span>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </div>
                                                            <div class="col-12 col-lg-3 mb-3 p-0 wishlist-item-tocart quotebutton less-padding">
                                                                @if (Equals(productType, ZnodeConstant.GroupedProduct) || Equals(productType, ZnodeConstant.ConfigurableProduct) && Convert.ToBoolean(item.Product?.Attributes?.Value("IsActive")))
                                                                {
                                                                    <button type="button" class="btn btn-primary hvr-shadow" onclick="javascript: location.href = '@Url.GetProductUrl(item.Product.SEOUrl, item.Product.PublishProductId.ToString())'" id="Model.PublishProductId"><i class='zf-view-details'></i>@WebStore_Resources.ButtonViewDetails</button>
                                                                }
                                                                else if (item.Product.Attributes.Where(x => x.IsPersonalizable == true).Any())
                                                                {
                                                                    <button type="button" class="btn btn-primary hvr-shadow" onclick="javascript: location.href = '@Url.GetProductUrl(item.Product.SEOUrl, item.Product.PublishProductId.ToString())'" id="Model.PublishProductId"><i class='zf-view-details'></i>@WebStore_Resources.ButtonViewDetails</button>
                                                                }
                                                                else if (CallForPricing || Convert.ToBoolean(item.Product.Attributes.Value(ZnodeConstant.IsObsolete)) || !item.Product.ShowAddToCart)
                                                                {
                                                                    @Html.AddToCartLink(@WebStore_Resources.ButtonAddToCart, "/Product/AddToCartProduct", item.Product.CartParameter, "btn btn-primary hvr-shadow", "Product.prototype.GetProductOutOfStockDetails(this, event)", "disabled")
                                                                }
                                                                else if (Convert.ToBoolean(item.Product?.Attributes?.Value("IsActive")))
                                                                {
                                                                    @Html.AddToCartLink(@WebStore_Resources.ButtonAddToCart, "/Product/AddToCartProduct", item.Product.CartParameter, "btn btn-primary hvr-shadow", "Product.prototype.GetProductOutOfStockDetails(this, event)", "")
                                                                }

                                                                else
                                                                {
                                                                    @Html.AddToCartLink(@WebStore_Resources.ButtonAddToCart, "/Product/AddToCartProduct", item.Product.CartParameter, "btn btn-primary hvr-shadow", "Product.prototype.GetProductOutOfStockDetails(this, event)", "disabled")
                                                                }
                                                                <span id="wishlist-error-msg"></span>
                                                            </div>
                                                            <div class="col-lg-1 wishlist-item-remove text-right">
                                                                <a href="JavaScript:void(0);" data-id="@item.UserWishListId" title="@WebStore_Resources.LinkTextRemove" data-test-selector="linkTextRemove"><span class="close-circle-icon"></span></a>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                <div id="subTextWishList" class="p-4">
                                                    @WebStore_Resources.SubTextWishList
                                                </div>
                                            }
                                            else
                                            {
                                                <p id="noWishList" @(!Equals(Model.WishList, null) ? "style=display:none" : "") class="p-4">
                                                    @WebStore_Resources.ErrorNoWishlist
                                                </p>
                                            }
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-3 p-0 mt-4 pt-3">
                            <div class="col-12">
                                <p class="key-PromoSpot">@Html.RenderMessage("PromoSpot")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>