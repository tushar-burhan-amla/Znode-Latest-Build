@using Znode.Engine.WebStore.ViewModels
@model PaymentTokenViewModel

@Html.Hidden("IsIframeRenderInPopup", Model.IsIframeRenderInPopup)
@Html.Hidden("OrderNumber", Model.OrderNumber)
@Html.Hidden("CustomerProfileId", Model.CustomerProfileId)

@if (Model.IsIframeRenderInPopup)
{
    <div class="modal fade braintree-modal" id="BrainTreeModal" data-test-selector="popBrainTree">
        <div class="modal-dialog modal-dialog-centered modal-lg rounded-0">
            <div class="modal-content">

                <div class="modal-header braintree-header">
                    <h4 class="modal-title pl-2 text-uppercase" data-test-selector="popPayAndSubmitHeading">@WebStore_Resources.PayAndSubmit</h4>
                    <button type="button" class="close close-circle-icon" data-test-selector="popBtnClose" data-dismiss="modal"></button>
                </div>

                <div class="modal-body braintree-body px-4">
                    <div class="braintree-payment">
                        <form id="payment-form" data-test-selector="formBrainTreePayment">
                            <section>
                                <div class="bt-drop-in-wrapper">
                                    <div id="bt-dropin"></div>
                                </div>
                            </section>

                            <input id="nonce" name="payment_method_nonce" type="hidden" />
                            <input id="details" name="payment_method_details" type="hidden" />
                            <div class="text-right mt-3">
                                <button class="btn btn-primary btn-pay-and-submit mr-sm-3" type="submit" id="SubmitButton" data-test-selector="popBtnPayAndSubmit"><span>@WebStore_Resources.PayAndSubmit</span></button>
                                <button class="btn btn-secondary btn-pay-cancel mt-3 mt-sm-0" data-dismiss="modal" id="CancelButton" data-test-selector="popBtnCancel">@WebStore_Resources.ButtonCancel</button>
                            </div>
                        </form>
                    </div>

                </div>
            </div>
        </div>
    </div>
}
else
{
    { Html.RenderPartial("_HostedFieldsIframeHtml", Model); }
}
<script>
    var client_token = "@Model.PaymentGatewayToken";
    var form = document.querySelector('#payment-form');

    braintree.dropin.create({
        authorization: client_token,
        container: '#bt-dropin',
        vaultManager: true,
        card: {
            overrides: {
                styles: {
                    input: {
                        color: 'green',
                        'font-size': '18px'
                    },
                    '.number': {
                        'font-family': 'monospace'
                    },
                    '.invalid': {
                        color: 'red'
                    }
                },
                fields: {
                    number: {
                        //placeholder: 'Card Number',
                        formatInput: true // Turn off automatic formatting
                    }
                }
            },
            cardholderName: {
                required: true
                // to make cardholder name required
                // required: true
            }
        }
    }, function (createErr, instance) {
        form.addEventListener('submit', function (event) {
            event.preventDefault();
            var isVault = false;
            if ($('.braintree-large-button').hasClass('braintree-hidden')) {
                isVault = true;
            }
            instance.requestPaymentMethod(function (err, payload) {
                if (err) {
                    console.log('Error', err);
                    return;
                }
                // Add the nonce to the form and submit
                document.querySelector('#nonce').value = payload.nonce;
                document.querySelector('#details').value = payload.details;
                if ($("#QuoteId").val() > 0) {
                    Quote.prototype.SubmitBraintreeQuote(payload,isVault);
                }
                else if ($("#IsFromInvoice").val()) {
                    User.prototype.SubmitBraintreeInvoice(payload,isVault);
                }
                else {
                    Checkout.prototype.SubmitBraintreeOrder(payload,isVault);
                }
                setTimeout(function () {
                    form.submit();
                }, 600000);
            });
        });
    });
</script>



