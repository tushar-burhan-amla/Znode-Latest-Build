IF EXISTS (SELECT TOP 1 1 FROM Sys.Tables WHERE Name = 'ZnodeMultifront')
BEGIN 
 IF EXISTS (SELECT TOP 1 1 FROM ZnodeMultifront where BuildVersion =   9051  )
 BEGIN 
 PRINT 'Script is already executed....'
  SET NOEXEC ON 
 END 
END
ELSE 
BEGIN 
   SET NOEXEC ON
END 
INSERT INTO [dbo].[ZnodeMultifront] ( [VersionName], [Descriptions], [MajorVersion], [MinorVersion], [LowerVersion], [BuildVersion], [PatchIndex], [CreatedBy], 
[CreatedDate], [ModifiedBy], [ModifiedDate]) 
VALUES ( N'Znode_Multifront_9_0_5_1', N'Upgrade GA Release by 905',9,0,2,9051,0,2, GETDATE(),2, GETDATE())
GO 
SET ANSI_NULLS ON
GO

 IF EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE WHERE CONSTRAINT_NAME= 'FK_ZnodePimCategoryHierarchy_ZnodePimCategory_PimParentCategoryId') 
 BEGIN 
  ALTER TABLE ZnodePimCategoryHierarchy DROP CONSTRAINT FK_ZnodePimCategoryHierarchy_ZnodePimCategory_PimParentCategoryId
 END 

 go
  IF EXISTS (SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCategoryHierarchy' AND COLUMN_NAME = 'PimParentCategoryId')
 BEGIN 

 declare @sqlCategory varchar(1000)

 set @sqlCategory = '
 UPDATE a
 SET  a.PimParentCategoryId = b.PimCategoryHierarchyId
 FROM ZnodePimCategoryHierarchy  a 
 INNER JOIN ZnodePimCategoryHierarchy  b ON (b.PimCategoryId  = a.PimParentCategoryId AND b.PimCatalogId = a.PimCatalogId)
 WHERE a.PimParentCategoryId IS NOT NULL '

 exec (@sqlCategory)

 EXEC SP_RENAME 'ZnodePimCategoryHierarchy.PimParentCategoryId','ParentPimCategoryHierarchyId'
 
 
 END 

 go
  IF EXISTS (SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCategoryHierarchy' AND COLUMN_NAME = 'ParentPimCategoryHierarchyId')
 BEGIN 

 declare @sqlCategory1 varchar(1000)

 set @sqlCategory1 = '

 UPDATE a
 SET  a.ParentPimCategoryHierarchyId = b.PimCategoryHierarchyId
 FROM ZnodePimCategoryHierarchy  a 
 INNER JOIN ZnodePimCategoryHierarchy  b ON (b.PimCategoryId  = a.ParentPimCategoryHierarchyId AND b.PimCatalogId = a.PimCatalogId)
 WHERE a.ParentPimCategoryHierarchyId IS NOT NULL '

 exec (@sqlCategory1)

 --EXEC SP_RENAME 'ZnodePimCategoryHierarchy.PimParentCategoryId','ParentPimCategoryHierarchyId'
 
 
 END 

 GO 
 DECLARE @SQL NVARCHAR(max)= ''
 IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCatalogCategory' AND COLUMN_NAME = 'PimCategoryHierarchyId' )
 BEGIN 

 ALTER TABLE ZnodePimCatalogCategory ADD    [PimCategoryHierarchyId] INT      NULL

 ALTER TABLE ZnodePimCatalogCategory ADD CONSTRAINT FK_ZnodePimCatalogCategory_ZnodePimCategoryHierarchy FOREIGN KEY (PimCategoryHierarchyId) REFERENCES ZnodePimCategoryHierarchy(PimCategoryHierarchyId)
 SET @SQL = ' 
 UPDATE a 
 SET a.PimCategoryHierarchyId = b.PimCategoryHierarchyId
 FROM ZnodePimCatalogCategory a 
 INNER JOIN ZnodePimCategoryHierarchy b ON (b.PimCatalogId =  a.PimCatalogId AND b.PimCategoryId = a.PimCategoryId)'

 EXEC (@SQL)
 END 
 GO 
 IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePublishCategory' AND COLUMN_NAME = 'PimCategoryHierarchyId' )
 BEGIN 

 ALTER TABLE ZnodePublishCategory ADD  [PimCategoryHierarchyId]       INT             NULL,
    [ParentPimCategoryHierarchyId] INT             NULL

 ALTER TABLE  ZnodePublishCategoryProduct ADD  [PimCategoryHierarchyId]       INT      NULL

 END  
 GO 
 IF object_id('Znode_DeletePimCatalogProducts') <> 0 
 BEGIN
  DROP PROC  [dbo].[Znode_DeletePimCatalogProducts]
 END 
 GO 
 CREATE PROCEDURE [dbo].[Znode_DeletePimCatalogProducts](
       @ProfileCatalogId INT = NULL ,
       @PimCatalogId     INT ,
       @PimCategoryId    INT ,
       @PimProductId     VARCHAR(2000) ,
	   @PimCategoryHierarchyId INT =0 ,
       @Status           BIT OUT 
	
	   )
AS
   
/*
     Summary : Remove PimCatalog Category data from ZnodePimCatalogCategory, remove corresponding records from ZnodeProfileCatalogCategory  
   
     Unit Testing 
     Begin transaction 
	 Select * from ZnodeProfileCatalogCategory where ProfileCatalogCategoryId in (5898,5899)
	 Declare @Status bit 
     EXEC Znode_DeletePimCatalogProducts 
														@ProfileCatalogId  =415,
                                                        @PimCatalogId     =16,
                                                        @PimCategoryId    =11,
                                                        @PimProductId    = '137,138',
                                                        @Status =@Status OUT 
     SELECT @Status 
	 Select * from ZnodeProfileCatalogCategory where ProfileCatalogCategoryId in (5898,5899)
	 Rollback transaction 
  */
 BEGIN
         BEGIN TRAN DeletePimCatalogProducts;
         BEGIN TRY
             SET NOCOUNT ON;
			  -- table used to hold the CMSContentPageGroupId 
             DECLARE @TBL_DeleteProfileCatalogCategory TABLE (
                                                             ProfileCatalogCategoryId INT
                                                             );
			-- table used to hold the CMSContentPageGroupId 
             DECLARE @TBL_DeletePimCatalogCategory TABLE (
                                                         PimCatalogCategoryId INT
                                                         ); 

             INSERT INTO @TBL_DeletePimCatalogCategory
                    SELECT PimCatalogCategoryId
                    FROM ZnodePimCatalogCategory
                    WHERE PimCatalogId = @PimCatalogId AND PimCategoryId = @PimCategoryId  AND PimCategoryHierarchyId =@PimCategoryHierarchyId
					AND PimProductId IN ( SELECT item
                                            FROM dbo.Split ( @PimProductId , ','));
								 
             IF ISNULL(@ProfileCatalogId , 0) = 0
                 BEGIN
			  	 INSERT INTO @TBL_DeleteProfileCatalogCategory
                            SELECT zpcc.ProfileCatalogCategoryId
                            FROM ZnodeProfileCatalogCategory AS zpcc
                            WHERE EXISTS ( SELECT TOP 1 1
                                           FROM @TBL_DeletePimCatalogCategory AS dpcc
                                           WHERE dpcc.PimCatalogCategoryId = zpcc.PimCatalogCategoryId
                                         );
                 END;
             ELSE
                 BEGIN
			
                     INSERT INTO @TBL_DeleteProfileCatalogCategory
                            SELECT zpcc.ProfileCatalogCategoryId
                            FROM ZnodeProfileCatalogCategory AS zpcc
                            WHERE zpcc.ProfileCatalogId = @ProfileCatalogId
                                  AND
                                  EXISTS ( SELECT TOP 1 1
                                           FROM @TBL_DeletePimCatalogCategory AS dpcc
                                           WHERE dpcc.PimCatalogCategoryId = zpcc.PimCatalogCategoryId
                                         );
														 
                 END;
             DELETE FROM ZnodeProfileCatalogCategory
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @TBL_DeleteProfileCatalogCategory AS DPCC
                            WHERE DPCC.ProfileCatalogCategoryId = ZnodeProfileCatalogCategory.ProfileCatalogCategoryId
                          );

				
             IF ISNULL(@ProfileCatalogId , 0) = 0
                 BEGIN
                     DELETE FROM ZnodePimCatalogCategory
                     WHERE EXISTS ( SELECT TOP 1 1
                                    FROM @TBL_DeletePimCatalogCategory AS zpcc
                                    WHERE zpcc.PimCatalogCategoryId = ZnodePimCatalogCategory.PimCatalogCategoryId
                                  );
                 END;
             IF ( SELECT COUNT(1) FROM @TBL_DeletePimCatalogCategory) = ( SELECT COUNT(1)
                      FROM dbo.Split ( @PimProductId , ','
                                     )
                    ) -- if both count are same then data set status return true other wise false 
                 BEGIN
                     SELECT 1 AS ID , CAST(1 AS BIT) AS [Status];
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID , CAST(0 AS BIT) AS [Status];
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeletePimCatalogProducts;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE() , @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE() , @ErrorLine VARCHAR(100)= ERROR_LINE() , 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePimCatalogCategory @ProfileCatalogId = '+CONVERT(VARCHAR(100) , @ProfileCatalogId)+',@PimCatalogId = '+CONVERT(VARCHAR(100) , @PimCatalogId)+' ,@PimCategoryId =  '+CONVERT(VARCHAR(100) , @PimCategoryId)+',@PimProductId = '+@PimProductId+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             SELECT 0 AS ID , CAST(0 AS BIT) AS [Status];
             ROLLBACK TRAN DeletePimCatalogProducts;
             EXEC Znode_InsertProcedureErrorLog
			  @ProcedureName = 'Znode_DeletePimCatalogCategory' ,
			  @ErrorInProcedure = @Error_procedure ,
			  @ErrorMessage = @ErrorMessage ,
			  @ErrorLine = @ErrorLine ,
			  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF Object_id('Znode_DeletePimCategoryHierarchy') <> 0 
BEGIN 
 DROP PROC Znode_DeletePimCategoryHierarchy  
END 
GO 
CREATE PROCEDURE [dbo].[Znode_DeletePimCategoryHierarchy](
       @PimCategoryHierarchyId INT ,
       @PimCatalogId   INT ,
       @Status         BIT           = 1 OUT)
AS 
   /*
    Summary:  Delete the category Hierarchy  by using multiple category Ids  
    Unit Testing   
    Begin 
    	Begin Transaction 
    		Exec Znode_DeletePimCategoryHierarchy  @PimCategoryIds ='',@PimCatalogId=1  , @Status = 0   
     SELECT * FROM ZnodePimCategoryHierarchy 
     SELECT * FROM ZnodeCMSAreaMessageKey
    	Rollback Transaction 
    ENd  
  */
     BEGIN
         BEGIN TRAN B;
         BEGIN TRY
             SET NOCOUNT ON; 
             ---- Declare the table to store the comma seperated data into record format----------
             DECLARE @TBL_Category TABLE (
                                         ID            INT IDENTITY(1,1),
                                         PimCategoryHierarchyId INT
										
										 );
             DECLARE @TBL_CategoryHierarchy TABLE (
                                                  PimCategoryId INT, PimCategoryHierarchyId INT
                                                  );
			 DECLARE @TBL_PimCatalogCatgory TABLE (PimCatalogcategoyId INT )

           
             ---- Declare this table to find the actual deleted ids -----
             DECLARE @TBL_DeletedCategoryId TABLE (
                                                  id            INT IDENTITY(1 , 1) ,
                                                  CMSCategoryId INT
                                                  );
            
			
			 INSERT INTO @TBL_Category (PimCategoryHierarchyId)
                    SELECT  @PimCategoryHierarchyId
                     --- store the comma separeted category id into variable table 


             ;WITH CategoryDetails
                  AS (
                  -- Add the SELECT statement with parameter references here
                  SELECT zpch.PimCategoryId , ParentPimCategoryHierarchyId,zpch.PimCategoryHierarchyId
                  FROM ZnodePimCategoryHierarchy AS zpch 
				  INNER JOIN @TBL_Category AS tc ON ( zpch.PimCategoryHierarchyId = tc.PimCategoryHierarchyId )
                  WHERE PimCatalogId = @PimCatalogId
                  UNION ALL
                  SELECT a.PimCategoryId , a.ParentPimCategoryHierarchyId,a.PimCategoryHierarchyId
                  FROM ZnodePimCategoryHierarchy AS a 
				  INNER JOIN CategoryDetails AS b ON ( a.ParentPimCategoryHierarchyId = b.PimCategoryHierarchyId )
                  WHERE a.PimCatalogId = @PimCatalogId)
                 
				  INSERT INTO @TBL_CategoryHierarchy (PimCategoryId,PimCategoryHierarchyId)
                         SELECT PimCategoryId,PimCategoryHierarchyId
                         FROM CategoryDetails;
				
				 

				 INSERT INTO @TBL_PimCatalogCatgory (PimCatalogcategoyId)
				 SELECT MAX(ZPCC.PimCatalogCategoryId)
				 FROM @TBL_CategoryHierarchy TBCH 
				 INNER JOIN ZnodePimCatalogCategory ZPCC ON (ZPCC.PimCatalogId = @PimCatalogId AND TBCH.PimCategoryId = ZPCC.PimCategoryId )
				 GROUP BY  ZPCC.PimCategoryId 
				 HAVING COUNT(ZPCC.PimCategoryId )<=1 
             ------ deleted the record  present in variable table and messagekeyid equal to the message key id passed in parameter
       
			 DELETE FROM ZnodeProfileCategoryHierarchy WHERE EXISTS (SELECT TOP 1 1
                            FROM @TBL_CategoryHierarchy AS tch
                            WHERE tch.PimCategoryHierarchyId = ZnodeProfileCategoryHierarchy.PimCategoryHierarchyId )

			 DELETE FROM  ZnodeProfileCatalogCategory 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM ZnodePimCatalogCategory  AS tch
                            WHERE tch.PimCatalogCategoryId = ZnodeProfileCatalogCategory.PimCatalogCategoryId
							AND  EXISTS ( SELECT TOP 1 1
                            FROM @TBL_CategoryHierarchy AS tch2
                            WHERE tch2.PimCategoryHierarchyId = tch.PimCategoryHierarchyId) );
								

             DELETE FROM ZnodePimCatalogCategory 
              WHERE EXISTS ( SELECT TOP 1 1
                            FROM @TBL_CategoryHierarchy AS tch
                            WHERE tch.PimCategoryHierarchyId = ZnodePimCatalogCategory.PimCategoryHierarchyId);
			
			 DELETE FROM ZnodePimCategoryHierarchy
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @TBL_CategoryHierarchy AS tch
                            WHERE tch.PimCategoryHierarchyId = ZnodePimCategoryHierarchy.PimCategoryHierarchyId );
            
			
		
			
			 
             SET @Status = 1;
             SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
             COMMIT TRAN B;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE() 
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePimCategoryHierarchy @PimCategoryIds = '++',@
PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(10))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN B;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePimCategoryHierarchy',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF Object_id('Znode_DeleteProfileCatalogCategory') <> 0 
BEGIN 
 DROP PROC Znode_DeleteProfileCatalogCategory 
END 
GO 
CREATE PROCEDURE [dbo].[Znode_DeleteProfileCatalogCategory]
(
	  @ProfileCatalogId INT 
	 ,@PimCatalogId    INT  
	 ,@PimCategoryHierarchyId INT = 0  
	 ,@Status		   BIT  = 0  OUT 
)
AS 
	/* Summary :- This Procedure is used to remove the portal catalog category ids 
	 Unit Testing 
	 EXEC Znode_DeleteProfileCatalogCategory @ProfileCatalogId= ,@PimCatalogId =,@PimCategoryId=
	*/ 
  BEGIN 
   BEGIN TRAN DeleteProfileCategory
	 BEGIN TRY 
     
	 DECLARE @TBL_PimCategoryHierarchyId TABLE (PimCategoryHierarchyId INT)
	 DECLARE @TBL_PimCatalogCategoryId TABLE (PimCatalogCategoryId INT )
	 	 
		 ;with Cet_Data AS 
		  (
		   SELECT PimCategoryHierarchyId ,ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy yrt 
		   WHERE yrt.PimCategoryHierarchyId = @PimCategoryHierarchyId 
		   AND yrt.PimCatalogId = @PimCatalogId
		   UNION ALL 
		   SELECT yrtr.PimCategoryHierarchyId ,yrtr.ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy yrtr 
		   INNER JOIN Cet_Data thr ON ( yrtr.ParentPimCategoryHierarchyId = thr.PimCategoryHierarchyId )  
		    WHERE yrtr.PimCatalogId = @PimCatalogId
		 )

     SELECT * 
	 INTO #Cet_Data
	 FROM Cet_Data a 

	 INSERT INTO @TBL_PimCategoryHierarchyId (PimCategoryHierarchyId)
	 SELECT PimCategoryHierarchyId  
	 FROM #Cet_Data
	
	 INSERT INTO @TBL_PimCatalogCategoryId(PimCatalogCategoryId)
	 SELECT PimCatalogCategoryId
	 FROM ZnodePimCatalogCategory ZPCC 
	 WHERE ZPCC.PimCatalogId = @PimCatalogId 
	 AND  EXISTS ( SELECT TOP 1  1 FROM #Cet_Data FN WHERE ZPCC.PimCategoryHierarchyId = FN.PimCategoryHierarchyId)
	 
	 DELETE FROM ZnodeProfileCatalogCategory 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCatalogCategoryId TBPCC WHERE TBPCC.PimCatalogCategoryId = ZnodeProfileCatalogCategory.PimCatalogCategoryId)
			AND ProfileCatalogId = @ProfileCatalogId
	 
	 DELETE FROM ZnodeProfileCategoryHierarchy 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryHierarchyId TBPH WHERE TBPH.PimCategoryHierarchyId = ZnodeProfileCategoryHierarchy.PimCategoryHierarchyId)
			AND ProfileCatalogId = @ProfileCatalogId

	 SET @Status = 1 
	 SELECT 1 AS ID , CAST(1 AS BIT) AS [Status];
	COMMIT TRAN DeleteProfileCategory 
   END TRY 
   BEGIN CATCH 
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteProfileCatalogCategory @ProfileCatalogId = '+CAST(@ProfileCatalogId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(200))+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN DeleteProfileCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteProfileCatalogCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
   END CATCH 
 END
GO
IF Object_id('Znode_GetCatalogCategoryProducts') <> 0 
BEGIN 
DROP PROC Znode_GetCatalogCategoryProducts
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0
  ,@AttributeCode   VARCHAR(max) = ''
  ,@PimCategoryHierarchyId INT =0 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

			 DECLARE @TBL_ProfileCatalogCategory TABLE
             (ProfileCatalogId     INT,
              PimProductId         INT,
              PimCategoryId        INT,
              PimCatalogCategoryId INT
             );
             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             IF @Order_By LIKE ''
                 BEGIN
                     SET @OrderId = 1;
                 END;
             IF @ProfileCatalogId > 0
                 BEGIN
                     INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId)
                     SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId
                     FROM ZnodePimCatalogCategory AS ZCC
                     INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
                     WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

                     AND NOT EXISTS
                         (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS ZPCC
                            WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                         );
                 END;
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
              --  AND ZCP.PimCategoryId = @PimCategoryId
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                 --   AND ZCP.PimCategoryId = @PimCategoryId
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			
         --           ORDER BY CASE WHEN @OrderId = 0
         --                       THEN 1
         --                       ELSE ZCP.PimCatalogCategoryId
								 --END 
								 --DESC
                                   
                                 END;
                         END;
                 END;
				 
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 


             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		--END 



	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	-- SELECT * FROM @TAB
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	       
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
             --SET @PimProductId = SUBSTRING(
             --                             (
             --                                 SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                 FROM @ProductIdTable
             --                                 FOR XML PATH('')
             --                             ), 2, 4000);

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder )
            
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
            
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)

             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();

             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)

             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
          
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+URL+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;

             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    RowId
             FROM @ProductIdTable AS zpp
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                              AND ZCC.PimCategoryId = Zpp.PimCategoryId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  --LEFT JOIN ZnodeMedia AS zm ON(zm.MediaId = piv.[ProductImage])
             ORDER BY CASE
                          WHEN @OrderId = 0
                          THEN 1
                          ELSE ZCC.PimCatalogCategoryId
                      END DESC,
                      zpp.RowId;

					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 


         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimCategoryId='+CAST(@PimCategoryId AS VARCHAR(50))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
 IF Object_id('Znode_GetCategoryHierarchy') <> 0 
BEGIN 
DROP PROC Znode_GetCategoryHierarchy 
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetCategoryHierarchy]
( @PimCatalogId     INT,
  @LocaleId         INT = NULL,
  @ProfileCatalogId INT = 0,
  @PimCategoryId    INT = NULL)
AS
/*
     Summary :- This Procedure is used to get category hierarchy 
     Unit Testing 
     EXEC [dbo].[Znode_GetCategoryHierarchy] @PimCatalogId=2,@LocaleId=1,@ProfileCatalogId=0
	
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             SET @LocaleId = dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_ProfileCatalogCategory TABLE
             (ProfileCatalogId       INT,
              PimCategoryHierarchyId INT
             );
             IF @ProfileCatalogId > 0
                 BEGIN
                     INSERT INTO @TBL_ProfileCatalogCategory(ProfileCatalogId,PimCategoryHierarchyId)
                            SELECT ZPC.ProfileCatalogId,ZPCH.PimCategoryHierarchyId                                  
                            FROM ZnodeProfileCategoryHierarchy ZPCH
                            INNER JOIN ZnodeProfileCatalog ZPC ON(ZPCH.ProfileCatalogId = ZPC.ProfileCatalogId)
                            WHERE ZPC.ProfileCatalogId = @ProfileCatalogId;
                 END;

             DECLARE @TBL_PimCategoryHierarchy TABLE
             (PimCategoryHierarchyId INT,
              PimCatalogId           INT,
              PimCategoryId          INT,
              CategoryValue          NVARCHAR(600),
              ParentPimCategoryHierarchyId    INT,
              DisplayOrder           INT
             );
             INSERT INTO @TBL_PimCategoryHierarchy
                    SELECT a.PimCategoryHierarchyId,a.PimCatalogId,a.PimCategoryId,VIPCAV.CategoryValue,ParentPimCategoryHierarchyId,ISNULL(a.DisplayOrder, 0)
                    FROM ZnodePimCategoryHierarchy AS a
                    LEFT JOIN ZnodePimCatalogCategory AS s ON(a.PimCatalogId = s.PimCatalogId
                                                              AND a.PimCategoryId = s.PimCategoryId)
                    LEFT JOIN View_PimCategoryAttributeValue VIPCAV ON (VIPCAV.PimCategoryId = s.PimCategoryId
                                                                       AND VIPCAV.LocaleId = @LocaleId)
                    WHERE A.PimCatalogId = @PimCatalogId
                          AND VIPCAV.AttributeCode = 'CategoryName'
                          AND (EXISTS
                              (
                                  SELECT TOP 1 1
                                  FROM @TBL_ProfileCatalogCategory TBPCC
                                  WHERE TBPCC.PimCategoryHierarchyId = a.PimCategoryHierarchyId
                              )
                               OR @ProfileCatalogId = 0)
                    GROUP BY a.PimCategoryHierarchyId,a.PimCatalogId,a.PimCategoryId,VIPCAV.CategoryValue,ParentPimCategoryHierarchyId,a.DisplayOrder
                    ORDER BY a.PimCatalogId,a.PimCategoryId,a.DisplayOrder;

             IF @PimCategoryId IS NULL
                 BEGIN
                     SELECT Category.PimCategoryHierarchyId,Category.PimCatalogId,Category.PimCategoryId,Category.CategoryValue,Category.ParentPimCategoryHierarchyId,Category.DisplayOrder
                     FROM
                     (
                         SELECT 0 AS PimCategoryHierarchyId,a.PimCatalogId,0 AS PimCategoryId,a.CatalogName AS CategoryValue,-1 AS ParentPimCategoryHierarchyId,0 AS DisplayOrder
                         FROM ZnodePimCatalog AS a
                         WHERE a.PimCatalogId = @PimCatalogId
                         UNION ALL
                         SELECT a.PimCategoryHierarchyId ,a.PimCatalogId,a.PimCategoryId,CategoryValue,ParentPimCategoryHierarchyId,a.DisplayOrder     
                         FROM @TBL_PimCategoryHierarchy AS a
                              LEFT JOIN ZnodePimCatalogCategory AS s ON(a.PimCatalogId = s.PimCatalogId
                                                                        AND a.PimCategoryId = s.PimCategoryId
                                                                        AND S.PimProductId IS NULL)
						GROUP BY a.PimCategoryHierarchyId ,a.PimCatalogId,a.PimCategoryId,CategoryValue,ParentPimCategoryHierarchyId,a.DisplayOrder     
                     ) AS Category 
                     ORDER BY Category.DisplayOrder, PimCategoryId;
                             
                 END;
             ELSE
                 BEGIN
				  
                     SELECT Category.PimCategoryHierarchyId,Category.PimCatalogId,Category.PimCategoryId,Category.CategoryValue,Category.ParentPimCategoryHierarchyId,Category.DisplayOrder
                     FROM
                     (
                         SELECT DISTINCT 0 AS PimCategoryHierarchyId,a.PimCatalogId,0 AS PimCategoryId,a.CatalogName AS CategoryValue,NULL AS ParentPimCategoryHierarchyId,0 AS DisplayOrder
                         FROM ZnodePimCatalog AS a
                         WHERE a.PimCatalogId = @PimCatalogId
                         UNION ALL
                         SELECT a.PimCategoryHierarchyId ,a.PimCatalogId,a.PimCategoryId,CategoryValue,ParentPimCategoryHierarchyId,a.DisplayOrder     
                         FROM @TBL_PimCategoryHierarchy AS a
                              LEFT JOIN ZnodePimCatalogCategory AS s ON(a.PimCatalogId = s.PimCatalogId
                                                                        AND a.PimCategoryId = s.PimCategoryId
                                                                        AND S.PimProductId IS NULL)
						 GROUP BY a.PimCategoryHierarchyId ,a.PimCatalogId,a.PimCategoryId,CategoryValue,ParentPimCategoryHierarchyId,a.DisplayOrder) AS Category
                         WHERE Category.ParentPimCategoryHierarchyId = @PimCategoryId                    
                         ORDER BY Category.DisplayOrder,PimCategoryId;
                              
                 END;
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryHierarchy @PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(50))+',@PimCategoryId='+CAST(@PimCategoryId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCategoryHierarchy',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
 IF Object_id('Znode_GetPimCatalogAssociatedCategory') <> 0 
BEGIN 
DROP PROC Znode_GetPimCatalogAssociatedCategory
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetPimCatalogAssociatedCategory]
(	@WhereClause      XML,
	@Rows             INT           = 100,
	@PageNo           INT           = 1,
	@Order_BY         VARCHAR(1000) = '',
	@RowsCount        INT OUT,
	@LocaleId         INT           = 1,
	@PimCatalogId     INT           = 0,
	@IsAssociated     BIT           = 0,
	@ProfileCatalogId INT           = 0,
	@PimCategoryId    INT           = -1,
	@PimCategoryHierarchyId INT = 0 )
AS
/*
     Summary :- This procedure is used to get the attribute values as per changes 
     Unit Testing 
	 begin tran
     EXEC [dbo].[Znode_GetPimCatalogAssociatedCategory] @WhereClause = '',@RowsCount = 0 ,@PimCatalogId = 5 ,@ProfileCatalogId= 0,@IsAssociated = 1,@PimCategoryId = -1
     rollback tran
	 SELECT * FROM ZnodePimCategoryHierarchy
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @TBL_PimcategoryDetails TABLE
             (PimCategoryId INT,
              CountId       INT,
              RowId         INT
             );
             DECLARE @TBL_CategoryIds TABLE
             (PimCategoryId       INT,
              ParentPimcategoryId INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_FamilyDetails TABLE
             (PimCategoryId        INT,
              PimAttributeFamilyId INT,
              AttributeFamilyName  NVARCHAR(MAX)
             );
             DECLARE @TBL_DefaultAttributeValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(600),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder             INT 
             );
             DECLARE @TBL_ProfileCatalogCategory TABLE
             (ProfileCatalogId       INT,
              PimCategoryHierarchyId INT,
              PimCategoryId          INT,
              PimParentCategoryId    INT,
			  ParentPimCategoryHierarchyId INT 
             );
             DECLARE @PimCategoryIds VARCHAR(MAX), @PimAttributeIds VARCHAR(MAX);
             IF @ProfileCatalogId > 0
                 BEGIN
						INSERT INTO @TBL_ProfileCatalogCategory(ProfileCatalogId,PimCategoryHierarchyId,PimCategoryId,ParentPimCategoryHierarchyId)
						SELECT ZPCC.ProfileCatalogId,ZPCC.PimCategoryHierarchyId,ZCC.PimCategoryId ,ZCC.ParentPimCategoryHierarchyId
						FROM ZnodePimCategoryHierarchy AS ZCC
						--INNER JOIN ZnodePimCategoryHierarchy AS tr ON (tr.PimCategoryHierarchyId = ZCC.ParentPimCategoryHierarchyId)
						INNER JOIN ZnodeProfileCategoryHierarchy AS ZPCC ON(ZPCC.PimCategoryHierarchyId = ZCC.PimCategoryHierarchyId)
						WHERE ZPCC.ProfileCatalogId = @ProfileCatalogId --AND (ZCC.ParentPimCategoryHierarchyId = @PimCategoryHierarchyId OR @PimCategoryHierarchyId = -1)								
					    AND ZCC.PimCatalogId = 	@pimCatalogId
						
							;
                     IF @IsAssociated = 1
                     BEGIN
						INSERT INTO @TBL_CategoryIds(PimCategoryId,ParentPimcategoryId)
						SELECT PimCategoryId, NULL  
						FROM @TBL_ProfileCatalogCategory FNGTRCT                                      							
						--WHERE EXISTS
						--(SELECT TOP 1 1 FROM @TBL_ProfileCatalogCategory AS TBPCC WHERE TBPCC.PimCategoryId = FNGTRCT.PimCategoryId OR TBPCC.PimParentCategoryId = FNGTRCT.ParentPimcategoryId);
																																								
                     END;
                     ELSE
					 BEGIN
				
						                                                                         
						SELECT ZCC.PimCategoryId ,ZCC.ParentPimCategoryHierarchyId,ZCC.PimCategoryHierarchyId
						INTO #temp_table 
						FROM [dbo].[Fn_GetRecurciveCategoryIds_ForChild] (@PimCategoryHierarchyId,@PimCatalogId) AS ZCC
						WHERE NOT EXISTS(SELECT TOP 1 1 FROM @TBL_ProfileCatalogCategory AS TBPCC WHERE TBPCC.PimCategoryHierarchyId = ZCC.PimCategoryHierarchyId) 
						AND ZCC.ParentPimCategoryHierarchyId = @PimCategoryHierarchyId
						--AND ZCC.PimCatalogId=  @PimCatalogId
						--AND (EXISTS( SELECT TOP 1 1 FROM  WHERE RTYR.PimCategoryHierarchyId = ZCC.ParentPimCategoryHierarchyId   ) OR @PimCategoryHierarchyId = -1 )
						--AND (ISNULL(FNGTRCT.ParentPimcategoryId, 0) = @PimCategoryId
					 --    OR @PimCategoryHierarchyId = -1
					--	)
						;           
                       --   SELECT * FROM @TBL_ProfileCatalogCategory                                                                                                                                                                                                                                     
                       --SELECT * FROM #temp_table
             --   SELECT * FROM @TBL_CategoryIds                                      
					 IF @PimCategoryHierarchyId = -1 
						BEGIN
						
						 INSERT INTO @TBL_CategoryIds(PimCategoryId, ParentPimcategoryId)           
						 SELECT DISTINCT PimCategoryId ,NULL 
						 FROM ZnodePimCAtegoryHierarchy a

						 WHERE ParentPimCategoryHierarchyId IS NULL 
						 AND NOT EXISTS ( SELECT TOP 1 1 FROM @TBL_ProfileCatalogCategory RTRYR WHERE RTRYR.PimCategoryHierarchyId = a.PimCategoryHierarchyId )
						 AND a.PimCatalogId=  @PimCatalogId
						-- DELETE FROM @TBL_CategoryIds  WHERE PimCategoryId IN (SELECT PimCategoryId FROM @TBL_CategoryIds WHERE ParentPimcategoryId IS NOT NULL );                                                                                                                

                                                                                                                     
						END
						ELSE 
						BEGIN 

						 INSERT INTO @TBL_CategoryIds(PimCategoryId, ParentPimcategoryId)           
						 SELECT DISTINCT PimCategoryId ,NULL 
						 FROM #temp_table
						-- WHERE ParentPimCategoryHierarchyId IS NULL 

						END 
						
						;
					 SET @IsAssociated = 1;
					 END;
                   
                     IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CategoryIds)                                                                                           
                        BEGIN
                        INSERT INTO @TBL_CategoryIds(PimCategoryId,ParentPimcategoryId)
                        SELECT -1,0;                                                                                                                                        
                        END;
                 END;
					 ELSE
						BEGIN
						INSERT INTO @TBL_CategoryIds(PimCategoryId,ParentPimcategoryId )
						SELECT PimCategoryId,ParentPimcategoryId 
						FROM  [dbo].[Fn_GetRecurciveCategoryIds_new](@PimCategoryHierarchyId, @PimCatalogId) AS FNGTRCT 
						UNION ALL 
					    SELECT ass.PimCategoryId,null
						FROM  ZnodePimCategoryHierarchy ass 
						WHERE (ass.ParentPimCategoryHierarchyId =  @PimCategoryHierarchyId   OR ( @PimCategoryHierarchyId = -1 AND ass.ParentPimCategoryHierarchyId IS NULL ))
						AND ass.PimCatalogId =@PimCatalogId
						 SET @IsAssociated = 0                                                                                                                               
						
						END;
						

					--	SELECT * FROM @TBL_CategoryIds
						SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(100)) 
						FROM @TBL_CategoryIds  FOR XML PATH('') ), 2, 4000);
                        
                        INSERT INTO @TBL_PimcategoryDetails(PimCategoryId, CountId,RowId  )                      
                        EXEC Znode_GetCategoryIdForPaging @WhereClause,@Rows,@PageNo,@Order_BY,@RowsCount,@LocaleId,'',@PimCategoryIds,@IsAssociated;
						
						SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails), 0);
																																														
						SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(100)) FROM @TBL_PimcategoryDetails FOR XML PATH('') ), 2, 4000);
																																																																				
						SET @PimAttributeIds = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(100)) FROM [dbo].[Fn_GetCategoryGridAttributeDetails]()
											   FOR XML PATH('')	), 2, 4000);	
						DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )

						 INSERT INTO @TBL_MediaAttribute (Id,PimAttributeId,AttributeCode )
						 SELECT Id,PimAttributeId,AttributeCode 
						 FROM [dbo].[Fn_GetProductMediaAttributeId]()
																																																															
						INSERT INTO @TBL_AttributeValue(PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
						EXEC [dbo].[Znode_GetCategoryAttributeValue]@PimCategoryIds,@PimAttributeIds,@LocaleId;

						INSERT INTO @TBL_FamilyDetails(PimAttributeFamilyId,AttributeFamilyName,PimCategoryId)
						EXEC Znode_GetCategoryFamilyDetails @PimCategoryIds,@LocaleId;
							
							
						INSERT INTO @TBL_DefaultAttributeValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder )
						EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @PimAttributeIds,@LocaleId;
						
						INSERT INTO @TBL_AttributeValue ( PimCategoryId , CategoryValue , AttributeCode )

						SELECT PimCategoryId,AttributeFamilyName , 'AttributeFamily'
						FROM @TBL_FamilyDetails 		

						UPDATE  TBAV
						SET CategoryValue  = SUBSTRING ((SELECT ','+[dbo].FN_GetMediaThumbnailMediaPath(zm.Path) FROM ZnodeMedia ZM  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(TBAV.CategoryValue ,',') SP  WHERE SP.Item = CAST(ZM.MediaId AS VARCHAR(50)) ) FOR XML PATH('')



),2,4000)
						FROM @TBL_AttributeValue TBAV 
						INNER JOIN @TBL_MediaAttribute TBMA ON (TBMA.PimAttributeId = TBAV.PimAttributeId)	

						DECLARE @CategoryXML XML 

						SET @CategoryXML =  '<MainCategory>'+ STUFF( ( SELECT '<Category>'+'<PimCategoryId>'+CAST(TBAD.PimCategoryId AS VARCHAR(50))+'</PimCategoryId>'+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST((SELECT ''+TBADI.CategoryValue FOR XML PATH('')) AS

 NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
						 									 FROM @TBL_AttributeValue TBADI      
															 WHERE TBADI.PimCategoryId = TBAD.PimCategoryId 
															 ORDER BY TBADI.PimCategoryId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Category>'	   

			FROM @TBL_AttributeValue TBAD
			INNER JOIN @TBL_PimcategoryDetails TBPI ON (TBAD.PimCategoryId = TBPI.PimCategoryId )
			GROUP BY TBAD.PimCategoryId,TBPI.RowId 
			ORDER BY TBPI.RowId 
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainCategory>'


			SELECT  @CategoryXML  CategoryXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1 
			 AND IsCategory = 1  
			 AND ZPA.IsShowOnGrid = 1  

		    SELECT ISNULL(@RowsCount,0) AS RowsCount;
						
						
						
						
						
						--WITH Cte_DefaultCategoryValue	
						--AS (SELECT PimCategoryId,PimAttributeId,
						--	SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_DefaultAttributeValue AS TBDAV WHERE TBDAV.PimAttributeId = TBAV.PimAttributeId
						--	AND EXISTS(SELECT TOP 1 1 FROM dbo.Split(TBAV.CategoryValue, ',') AS SP WHERE sp.Item = TBDAV.AttributeDefaultValueCode)
						--	FOR XML PATH('')), 2, 4000) AS AttributeValue FROM @TBL_AttributeValue AS TBAV
						--	WHERE EXISTS(SELECT TOP 1 1	FROM [dbo].[Fn_GetCategoryDefaultValueAttribute]() AS SP WHERE SP.PimAttributeId = TBAV.PimAttributeId))
																																																			
						--UPDATE TBAV SET TBAV.CategoryValue = CTDCV.AttributeValue FROM @TBL_AttributeValue TBAV
						--INNER JOIN Cte_DefaultCategoryValue CTDCV ON(CTDCV.PimCategoryId = TBAV.PimCategoryId AND CTDCV.PimAttributeId = TBAV.PimAttributeId);
																																										
						--SELECT TBCD.PimCategoryId,Piv.CategoryName,ZPC.IsActive AS [Status],dbo.FN_GetMediaThumbnailMediaPath(Zm.Path) AS CategoryImage,
						--ISNULL(TBFD.AttributeFamilyName, '') AS AttributeFamilyName FROM @TBL_PimcategoryDetails AS TBCD
						--INNER JOIN(SELECT PimCategoryId,CategoryValue,AttributeCode FROM @TBL_AttributeValue)
					 --   AS TBAV PIVOT(MAX(CategoryValue) FOR AttributeCode IN([CategoryName],[CategoryImage])) PIV ON(Piv.PimCategoryId = TBCD.PimCategoryId)																				
						--LEFT JOIN @TBL_FamilyDetails AS TBFD ON(TBFD.PimCategoryId = PIV.PimCategoryId)
						--LEFT JOIN ZnodeMedia AS ZM ON(CAST(ZM.MediaId AS VARCHAR(50)) = PIV.[CategoryImage])
						--LEFT JOIN ZnodePimCategory AS ZPC ON(ZPC.PimCategoryId = Piv.PimCategoryId)
						--ORDER BY RowId;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimCatalogAssociatedCategory @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(50))+',@PimCategoryId='+CAST(@PimCategoryId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPimCatalogAssociatedCategory',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF Object_id('Znode_GetPublishCategory') <> 0 
BEGIN 
DROP PROC Znode_GetPublishCategory 
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetPublishCategory]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
    @IsDebug          BIT = 0)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
     


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT             );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
             SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 WHERE ZPCH.PimCatalogId = @PimCatalogId; 
             -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog
             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
             SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
			 FROM ZnodePublishCategoryProduct ZPCP
             INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
             INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
             INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
             WHERE ZPC.PublishCatalogId = @PublishCataLogId 
			 AND NOT EXISTS(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId
			 AND TBPC.PimProductId = ZPP.PimProductId AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	
             EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
			 TARGET.PimCategoryId = SOURCE.PimCategoryId 
			 AND TARGET.PublishCatalogId = @PublishCataLogId 
			 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,INSERTED.parentPimCategoryHierarchyId INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			
    --         UPDATE TBPC SET PublishParentCategoryId = TBPCS.PublishCategoryId 
			 --FROM @TBL_PublishPimCategoryIds TBPC
    --         INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
    --         INNER JOIN @TBL_PublishPimCategoryIds TBPCS ON(TBC.PimCategoryHierarchyId = TBPCS.parentPimCategoryHierarchyId  ) 
			 --WHERE TBC.parentPimCategoryHierarchyId IS NOT NULL;
           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			 FROM ZnodePublishCategory ZPC
             INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
			 AND TBPC.PublishCatalogId =@PublishCatalogId
			 ;
			 UPDATE a
			 SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId =@PublishCatalogId
			AND b.PublishCatalogId =@PublishCatalogId

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

             UPDATE ZnodePublishCatalogLog SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
			 GROUP BY PublishCategoryId																				
             FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

             DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
            
             INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
             
			 SELECT CategoryXml  
			 FROM @TBL_CategoryXml 
			 
              
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF Object_id('Znode_GetPublishProductbulk') <> 0 
BEGIN 
DROP PROC Znode_GetPublishProductbulk 
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    VARCHAR(2000) = 0 
,@UserId		  INT = 0 

)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk 5, 0 , '' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

  --DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )

   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DELETE FROM #PimProductAttributeXML
   END

  CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )


  DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
  DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
  DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
  DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
 DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 
 --DECLARE #TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

			 INSERT INTO #TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
										MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM dbo.Split(@PimProductId,',') SP WHERE SP.Item = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

WHILE @Counter <= @maxCountId
BEGIN
 
  SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO @PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
        
	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) from #TBL_AttributeVAlue b where a.PimProductId=b.PimProductId and a.PimAttributeId = b.PimAttributeId )
	 from #TBL_AttributeVAlue a

	 --select * from #TBL_AttributeVAlue
	 --return
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 create table #Cte_GetData (PimProductId int,AttributeCode varchar(600),AttributeValue nvarchar(max))

  create index idx_#Cte_GetDataPimProductId on #Cte_GetData(PimProductId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
where a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
--INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId AND CTE.LocaleId  = CASE WHEN cte.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue                 
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
where exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

--  --CREATE INDEX IND_ZnodePublishInline_0999 ON Cte_GetData(PimProductId ASC)

  DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId = @versionId AND IsProductXML = 1   AND LocaleId = @LocaleId 

--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 

  INSERT INTO ZnodePublishedXml (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate)
SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					FROM ZnodeProfileCatalog ZPFC 
					INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
					WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
FROM  #TBL_PublishCatalogId zpp
INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
WHERE ZPPDFG.LocaleId = @LocaleId



--DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
SET @Counter = @counter + 1 
END 

END
GO
IF Object_id('Znode_InsertPublishProductIds') <> 0 
BEGIN 

DROP PROC  Znode_InsertPublishProductIds

END 

GO 
CREATE PROCEDURE [dbo].[Znode_InsertPublishProductIds]
(
	@PublishCatalogId        INT            = NULL,
     @UserId                 INT				  ,
	 @PimProductId           VARCHAR(2000) = 0,
	 @IsCallAssociated       BIT           = 0     
	)
AS
    
/*
  Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

     Unit Testing
    
     SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
     SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
     SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
	 SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
     select * from znodepublishcatalog
	 SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
     SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
	 SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 
     EXEC Znode_GetPublishProducts  @PublishCatalogId = 5 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = 117,@IsDebug= 1 
     EXEC Znode_InsertPublishProductIds  @PublishCatalogId = 5,@UserId= 2  ,@PimProductId = 29 ,@NotReturnXML= NULL,@IsDebug= 1 
     EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
	 SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
	 SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
    */ 

     BEGIN
      --  BEGIN TRAN InsertPublishProductIds;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			 DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
             DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
			,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
			,@ProductTypeAttributeId INT = dbo.Fn_GetProductTypeAttributeId()
			DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1

			 -- This variable used to carry the locale in loop 
			 -- This variable is used to carry the default locale which is globaly set
             DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
			 DECLARE @DeletePublishProductId VARCHAR(MAX)= '', @PimProductIds VARCHAR(MAX)= '', @PimAttributeId VARCHAR(MAX)= '';
             
			 -- This table will used to hold the all currently active locale ids  
			 
			 IF Object_ID ('tempdb..#ActiveProduct') is not null
				drop table #ActiveProduct

			IF Object_ID ('tempdb..#TBL_PimProductIds') is not null
				drop table #TBL_PimProductIds

			 ----- this table holds all active product data
			 CREATE TABLE #ActiveProduct ( PimProductId INT ) 

			 INSERT INTO #ActiveProduct ( PimProductId )
			 SELECT PAV.PimProductId FROM ZnodePimAttributeValue PAV
			 INNER JOIN ZnodePimAttributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
			 INNER JOIN ZnodePimAttribute PA  ON PAV.PimAttributeId = PA.PimAttributeId
			 WHERE PA.AttributeCode = 'IsActive' AND PAVL.AttributeValue = 'true'

		     -- This table hold the complete xml of product with other information like category and catalog
             CREATE TABLE #TBL_PimProductIds(PimProductId INT  ,PimCategoryId INT,PimCatalogId INT,PublishCatalogId INT,IsParentProducts BIT ,DisplayOrder INT,ProductName NVARCHAR(MAX),SKU  NVARCHAR(MAX),
											 IsActive NVARCHAR(MAX),PimAttributeFamilyId INT ,ProfileId   VARCHAR(MAX),CategoryDisplayOrder INT ,ProductIndex INT,PimCategoryHierarchyId INT,PRIMARY KEY (PimCatalogId,PimCategoryHierarchyId,PimProductId)  )

			  -- This table is used to hold the product which publish in current process 
             DECLARE @TBL_PublishProductIds TABLE(PublishProductId  INT  ,PimProductId INT,PublishCatalogId  INT
													,PublishCategoryId VARCHAR(MAX),CategoryProfileIds VARCHAR(max),VersionId INT , PRIMARY KEY (PimProductId,PublishProductId,PublishCatalogId)); 
	 
			-- this check is used when this procedure is call by internal procedure to publish only product and no need to return publish xml;    
			   
			--Collected list of products for  publish 
   
			 INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR 
				EXISTS( SELECT TOP 1 1 FROM dbo.split(@PimProductId,',') SP WHERE SP.Item = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )

				
             --Collected list of link products for  publish
			 INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId , PublishCatalogId,PimCategoryHierarchyId)
				 SELECT ZPLPD.PimProductId, ZPCC.PimCategoryId, 0 AS IsParentProducts, NULL AS DisplayOrder, CTPP.PimCatalogId,CTPP.PublishCatalogId,ZPCC.PimCategoryHierarchyId 
				 FROM ZnodePimLinkProductDetail AS ZPLPD
				 INNER JOIN #TBL_PimProductIds AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId AND  IsParentProducts = 1 
				 INNER JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPLPD.PimProductId AND ZPCC.PimCatalogId = CTPP.PimCatalogId
				 WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTPPI WHERE CTPPI.PimProductId = ZPLPD.PimProductId) 
				-- AND EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPLPD.PimProductId ) 
				 AND ZPCC.PimProductId IS NOT NULL
				 AND EXISTS (SELECT * FROM #ActiveProduct PAV WHERE ZPLPD.PimProductId = PAV.PimProductId )
				 GROUP BY ZPLPD.PimProductId, ZPCC.PimCategoryId,CTPP.PimCatalogId,CTPP.PublishCatalogId ,ZPCC.PimCategoryHierarchyId

             --Collected list of Addon products for  publish
        
		     INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
					 SELECT ZPAPD.PimChildProductId, ISNULL(ZPCC.PimCategoryId,0) AS PublishCategoryId, 0 AS IsParentProducts, null AS DisplayOrder,CTALP.PimCatalogId,CTALP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
					 FROM ZnodePimAddOnProductDetail AS ZPAPD 
					 INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
					 INNER JOIN #TBL_PimProductIds AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId AND  IsParentProducts = 1
					 LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPAPD.PimChildProductId AND ZPCC.PimCatalogId = CTALP.PimCatalogId
					 WHERE NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTALPI WHERE CTALPI.PimProductId = ZPAPD.PimChildProductId) 
				---	 AND EXISTS(SELECT TOP 1 1FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPAPD.PimChildProductId) 
					 AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPAPD.PimChildProductId = PAV.PimProductId ) 
					 GROUP BY ZPAPD.PimChildProductId, ZPCC.PimCategoryId , CTALP.PimCatalogId,CTALP.PublishCatalogId,ZPCC.PimCategoryHierarchyId

					 		 	

             --Collected list of Bundle / Group / Config products for  publish
             INSERT INTO #TBL_PimProductIds(PimProductId,PimCategoryId,IsParentProducts,DisplayOrder,PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
                    SELECT ZPTA.PimProductId,ISNULL(ZPCC.PimCategoryId,0),0 AS IsParentProducts,NULL DisplayOrder,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
                    FROM ZnodePimProductTypeAssociation AS ZPTA INNER JOIN #TBL_PimProductIds AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId AND IsParentProducts = 1
                    LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPTA.PimProductId AND ZPCC.PimCatalogId = CTAAP.PimCatalogId
                    WHERE NOT EXISTS( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTAAPI WHERE CTAAPI.PimProductId = ZPTA.PimProductId)
					--AND EXISTS(SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPTA.PimProductId)
					AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPTA.PimProductId = PAV.PimProductId ) 
					GROUP BY ZPTA.PimProductId,ZPCC.PimCategoryId,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ZPCC.PimCategoryHierarchyId
        				  

			   UPDATE TBPP
               SET PublishCatalogId = ZPC.PublishCatalogId 
			   FROM #TBL_PimProductIds TBPP 
			   INNER JOIN ZnodePublishCatalog ZPC ON ZpC.PimCatalogId = TBPP.PimCatalogId;
        
		DECLARE @PublishProductId TRANSFERId 


		IF @PublishCatalogId IS NOT NULL AND @PublishCatalogId <> 0 
			  BEGIN 
			  -- SELECT * FROM @TBL_PimProductIds AS TBP
			
			  INSERT INTO @PublishProductId
			    SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				--INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId AND TBP.PublishCatalogId = ZPP.PublishCatalogId)
				AND ZPP.PublishCatalogId = @PublishCatalogId
					--Remove extra products from catalog
				
		END
		ELSE IF @IsCallAssociated = 0 
		BEGIN 
		DECLARE @TBL_ProductIdscollect TABLE(PublishProductId INT , PimproductId INT , PublishcatalogId  INT  , ProductType NVARCHAr(max))

	
		INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
		SELECT PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
		INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
		INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
		INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
						AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
         WHERE  IsParentProducts = 1	
		 AND LocaleId =@DefaultLocaleId
    

        IF EXISTS (SELECT TOP 1 1 FROM @TBL_ProductIdscollect WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct','SimpleProduct') )
		     
		BEGIN 
	
		   DECLARE @TBL_DeleteTrackProduct TABLE (PublishProductId INT,AssociatedZnodeProductId INT  ,PublishCatalogId INT,PublishCatalogLogId INT ,IsDelete BIT  )

		   ;With Cte_PublishProduct AS
		   (
		     SELECT TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType ,MAx(PublishCatalogLogId) PublishCatalogLogId
			 FROM  @TBL_ProductIdscollect TBL 
			 INNER JOIN ZnodePublishCatalogLog TBLG ON (TBLG.PublishCatalogId = TBL.PublishcatalogId)
			 WHERE IsCatalogPublished = 1 
		     GROUP BY TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType
		   
		   )
		   , Cte_ConfigData AS 
			 (
			 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
			 FROM ZnodePublishedXml ZPXML 
			 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
			 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
			 WHERE  IsConfigProductXML = 1
			 AND ProductType = 'ConfigurableProduct'
			 UNION ALL 
			  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
			 FROM ZnodePublishedXml ZPXML 
			 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
			 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
			 WHERE  IsGroupProductXML = 1
			 AND ProductType = 'GroupedProduct'
			 UNION ALL 
			  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
			 FROM ZnodePublishedXml ZPXML 
			 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
			 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
			 WHERE  IsBundleProductXML = 1
			 AND ProductType = 'BundleProduct'
			 UNION ALL 
			 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
			 FROM ZnodePublishedXml ZPXML 
			 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
			 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
			 WHERE  IsAddOnXML = 1
			 AND LocaleId = @DefaultLocaleId 
			
			 )

		--	 SELECT * FROM ZnodePublishCatalogLog WHERE PublishCatalogId = 8 

		INSERT INTO @TBL_DeleteTrackProduct (PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId)
		SELECT ZPP.PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId
		FROM Cte_ConfigData ZPP	
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM  @TBL_PublishProductIds TBLP WHERE TBLP.PublishProductId = ZPP.AssociatedZnodeProductId)
		
	

		;With Cte_updateStatus AS
		(
		 
		     SELECT  PublishProductId,PublishcatalogId
			  FROM @TBL_DeleteTrackProduct CTR 
			 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
			 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
			 WHERE  IsConfigProductXML = 1 
			 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
			 AND LocaleId = @DefaultLocaleId 
		     AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
		     AND CTR.PublishProductId = ZPXML.PublishedId ) 

			 UNION ALL 
			  SELECT PublishProductId,PublishcatalogId
			 FROM @TBL_DeleteTrackProduct CTR 
			 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
			 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
			 WHERE  IsGroupProductXML = 1 
			 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
			 AND LocaleId = @DefaultLocaleId 
		     AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
		     AND CTR.PublishProductId = ZPXML.PublishedId ) 

			 UNION ALL 
			  SELECT  PublishProductId,PublishcatalogId
			   FROM @TBL_DeleteTrackProduct CTR 
			 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
			 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
			 WHERE  IsBundleProductXML = 1 
			 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
			 AND LocaleId = @DefaultLocaleId 
		     AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
		     AND CTR.PublishProductId = ZPXML.PublishedId ) 


			 UNION ALL 
			 SELECT PublishProductId,PublishcatalogId
			 FROM @TBL_DeleteTrackProduct CTR 
			 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
			 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
			 WHERE  IsAddOnXML = 1 
			 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
			 AND LocaleId = @DefaultLocaleId 
		     AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
		     AND CTR.PublishProductId = ZPXML.PublishedId ) 
		
		)

		UPDATE a 
		SET IsDelete = CASE WHEN TYR.PublishProductId IS NULL THEN 1 ELSE 0 END 
		FROM @TBL_DeleteTrackProduct a 
		LEFT JOIN Cte_updateStatus TYR ON (TYR.PublishProductId = a.PublishProductId AND TYR.PublishCatalogId = a.PublishCatalogId)

		
		INSERT INTO @PublishProductId 
		SELECT DISTINCT AssociatedZnodeProductId 
		FROM @TBL_DeleteTrackProduct
		WHERE IsDelete =1  
		

		END 

	
		INSERT INTO @PublishProductId
		SELECT PublishProductid
		FROM ZnodePublishProduct ZPP
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId =  ZPP.PublishCatalogId )
        WHERE Not EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPPP WHERE (ZPPP.PimCatalogid = ZPc.PimCatalogId AND ZPPP.PimProductId = ZPP.PimProductId))  
		AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYR WHERE TYR.PimProductId = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @PublishProductId YTR WHERE YTR.Id = ZPP.PublishProductId  )	
		END  

		EXEC dbo.Znode_DeletePublishCatalogProduct  @PublishProductIds = @PublishProductId,@PublishCatalogId = @PublishCatalogId ;

		

			 -- This merge statement is used for crude oprtaion with publisgh product table
			MERGE INTO ZnodePublishProduct TARGET USING  (
				SELECT PimProductId, PublishCatalogId
				FROM #TBL_PimProductIds AS TBP
				GROUP BY PimProductId, PublishCatalogId
			 )  SOURCE
				ON --check for if already exists then just update otherwise insert the product  
				TARGET.PimProductId = SOURCE.PimProductId AND  TARGET.PublishCatalogId = SOURCE.PublishCataLogId 
				WHEN MATCHED      THEN UPDATE SET TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate	
				WHEN NOT MATCHED  THEN INSERT(PimProductId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
									   VALUES( SOURCE.PimProductId, SOURCE.PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate )
				OUTPUT INSERTED.PublishProductId, INSERTED.PimProductId, INSERTED.PublishCatalogId
				INTO @TBL_PublishProductIds(PublishProductId, PimProductId, PublishCatalogId); 
			
			-- Here used the ouput clause to catch what data inserted or updated into variable table
	    	
	
				
			
			-- This merge staetment is used for crude opration with  ZnodePublishCategoryProduct table
			 MERGE INTO ZnodePublishCategoryProduct TARGET USING  (
				 SELECT PublishProductId,
				 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
				 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId
				 FROM #TBL_PimProductIds AS TBP 
				 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
				 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
				 INNER JOIN @TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
				 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
				 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId
			  ) SOURCE
					ON  TARGET.PublishCatalogId = SOURCE.PublishCatalogId AND ISNULL(TARGET.PublishCategoryId, 0) = ISNULL(SOURCE.PublishCategoryId, 0) AND TARGET.PublishProductId = SOURCE.PublishProductId 
					
					WHEN MATCHED THEN UPDATE SET TARGET.PublishCategoryId = CASE WHEN SOURCE.PublishCategoryId = 0 THEN NULL ELSE SOURCE.PublishCategoryId END 
												 ,TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate,TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId				
					WHEN NOT MATCHED THEN INSERT(PublishProductId,PublishCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId) 
										  VALUES(SOURCE.PublishProductId,CASE WHEN SOURCE.PublishCategoryId =0 THEN NULL ELSE SOURCE.PublishCategoryId  END , SOURCE.PublishCatalogId,@UserId,@GetDate,@userId,@GetDate,SOURCE.PimCategoryHierarchyId);
   
    
   WHILE @Counter <= @maxCountId
   BEGIN 
    SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
   
     
	 SELECT VIR.PimProductId,PimAttributeId,AttributeValue,ZnodePimAttributeValueLocaleId,VIR.LocaleId ,COUNT(*)Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 AND (PimAttributeId = @ProductNamePimAttributeId  OR PimAttributeId = @SKUPimAttributeId OR PimAttributeId = @IsActivePimAttributeId  )
  
   

		
	          MERGE INTO ZnodePublishProductDetail   TARGET
			  USING  (SELECT   ZPP.PublishProductId ,TBLA.AttributeValue PRoductName,TBLAI.AttributeValue SKU ,ISNULL(TBLAII.AttributeValue,'0') IsActive --,TBLAIII.AttributeValue ProductType
						FROM  @TBL_PublishProductIds zpp
						INNER JOIN #TBL_AttributeVAlue TBLA ON (TBLA.PimAttributeId = @ProductNamePimAttributeId AND TBLA.PimProductId = ZPP.PimProductId AND TBLA.LocaleId  = CASE WHEN TBLA.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLA ON (TBLA.PimProductId = ZPP.PimProductId AND TBLA.PimAttributeId = @ProductNamePimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAI ON (TBLAI.PimAttributeId = @SKUPimAttributeId AND TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.LocaleId  = CASE WHEN TBLAI.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAI ON (TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.PimAttributeId = @SKUPimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAII ON (TBLAII.PimAttributeId = @IsActivePimAttributeId AND TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.LocaleId  = CASE WHEN TBLAII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
						--INNER JOIN #TBL_AttributeVAlue TBLAIII ON (TBLAIII.PimAttributeId = @ProductTypePimAttributeId AND TBLAIII.PimProductId = ZPP.PimProductId AND TBLAIII.LocaleId  = CASE WHEN TBLAIII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAIII ON (TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.PimAttributeId = @ProductTypeAttributeId)
						GROUP BY ZPP.PublishProductId,TBLA.AttributeValue,TBLAI.AttributeValue,TBLAII.AttributeValue --,TBLAIII.AttributeValue
						)   SOURCE
			ON (TARGET.PublishProductId = SOURCE.PublishProductId
				 AND TARGET.LocaleId = @LocaleId 
			) 
			WHEN MATCHED THEN 
			UPDATE 
			SET TARGET.ProductName   = SOURCE.ProductName
				,TARGET.SKU			 = SOURCE.SKU
				,TARGET.IsActive	= SOURCE.IsActive
				,TARGET.ModifiedBy	 = @userid
				,TARGET.ModifiedDate  = @GetDate
			WHEN NOT MATCHED THEN 
			INSERT (PublishProductId
					,ProductName
					,SKU
					,IsActive
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			VALUES ( SOURCE.PublishProductId
					,SOURCE.ProductName
					,SOURCE.SKU
					,SOURCE.IsActive
					,@LocaleId
					,@userId
					,@GetDate
					,@userId
					,@GetDate);

		 
         DROP TABLE #TBL_AttributeVAlue 
		
		 SET @Counter = @counter + 1 
			  END 

			  IF @PublishCatalogId IS NULL OR @PublishCatalogId =0 
			  BEGIN 
			  SELECT PublishProductId, PimProductId, PublishCatalogId 
			  FROM @TBL_PublishProductIds
			  END 

		--COMMIT TRAN InsertPublishProductIds;
		END TRY 
		BEGIN CATCH 
		 SELECT ERROR_MESSAGE()
	--	 ROLLBACK TRAN InsertPublishProductIds;
		END CATCH 
	END
GO
IF Object_id('Znode_InsertUpdateProfileCatalog') <> 0 
BEGIN 
DROP PROC  Znode_InsertUpdateProfileCatalog
END 
GO 
CREATE PROCEDURE [dbo].[Znode_InsertUpdateProfileCatalog]
(   @ProfileId        INT          = NULL,
	@PimCatalogId     VARCHAR(MAX) = '',
	@UserId           INT,
	@Status           BIT OUT,
	@PimCategoryId    VARCHAR(MAX) = '',
	@ProfileCatalogId INT          = NULL,
	@PimProductId     VARCHAR(MAX) = '',
	@PimCategoryHierarchyId INT =0 
	
	
	)
AS 
    /* Summary :- This Procedure is used to dump the catalog data with profile base catalog 
     Unit Testing 
     EXEC Znode_InsertUpdateProfileCatalog 
	*/
     BEGIN
         BEGIN TRAN InsertUpdateProfileCatalog;
         BEGIN TRY
             DECLARE @TBL_ProfileCatalogId TABLE
             (ProfileCatalogId INT,
              PimCatalogId     INT
             );
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @TBL_PimCatalogId TABLE(PimCatalogId INT);
             DECLARE @TBL_PimCategoryId TABLE(PimCategoryHierarchyId INT,PimCategoryId INT);
             DECLARE @TBL_PimProductId TABLE(PimProductId INT);
             DECLARE @PimCatalogIds INT;
             INSERT INTO @TBL_PimCatalogId(PimCatalogId)
                    SELECT Item
                    FROM dbo.split(@PimCatalogId, ',') SP;
					--SELECT @PimCategoryHierarchyId
					IF @PimCategoryHierarchyId >= 1 
					BEGIN 

             INSERT INTO @TBL_PimCategoryId(PimCategoryId,PimCategoryHierarchyId)
                    SELECT PimCategoryId,PimCategoryHierarchyId
                    FROM dbo.Fn_GetRecurciveCategoryIds_ForChild(@PimCategoryHierarchyId,@PimCatalogId ) SP
					WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimCategoryId,',') th WHERE th.item= Sp.PimCategoryId )
					;
					END 
					ELSE 
					BEGIN 
					 INSERT INTO @TBL_PimCategoryId(PimCategoryId,PimCategoryHierarchyId)
					  SELECT PimCategoryId,PimCategoryHierarchyId
					  FROM ZnodePimCategoryHierarchy  SP
					  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimCategoryId,',') th WHERE th.item= Sp.PimCategoryId )
					  AND ParentPimCategoryHierarchyId IS nULL
					END 
             INSERT INTO @TBL_PimProductId(PimProductId)
                    SELECT ZPCC.PimProductId
                    FROM ZnodePimCatalogCategory ZPCC
                    WHERE(( EXISTS
                         (
                             SELECT TOP 1 1
                             FROM dbo.split(@PimProductId, ',') SP
                             WHERE SP.Item = ZPCC.PimProductId
                         )OR @PimProductId = '')
                    AND ( 

					EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId  )
                                  
                         ))
                    AND EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @TBL_PimCatalogId TBPC
                        WHERE TBPC.PimCatalogId = ZPCC.PimCatalogId
                    );
             IF @ProfileId IS NOT NULL
                AND @ProfileCatalogId IS NULL
                 BEGIN
                     MERGE INTO ZnodeProfileCatalog TARGET
                     USING @TBL_PimCatalogId SOURCE
                     ON(TARGET.PimCatalogId = SOURCE.PimCatalogId
                        AND TARGET.ProfileId = @ProfileId)
                         WHEN NOT MATCHED
                         THEN INSERT(ProfileId,
                                     PimCatalogId,
                                     CreatedBy,
                                     CreatedDate,
                                     ModifiedBy,
                                     ModifiedDate) VALUES
                     (@ProfileId,
                      SOURCE.PimCatalogId,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate
                     )
                     OUTPUT INSERTED.ProfileCatalogId,
                            Source.PimCatalogId
                            INTO @TBL_ProfileCatalogId;
                     INSERT INTO ZnodeProfileCategoryHierarchy
                     (ProfileCatalogId,
                      PimCategoryHierarchyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT TBPC.ProfileCatalogId,
                                   ZPCH.PimCategoryHierarchyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCategoryHierarchy ZPCH
                                 INNER JOIN @TBL_ProfileCatalogId TBPC ON(ZPCH.PimCatalogId = TBPC.PimCatalogId);
                     INSERT INTO ZnodeProfileCatalogCategory
                     (ProfileCatalogId,
                      PimCatalogCategoryId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT TBPC.ProfileCatalogId,
                                   PimCatalogCategoryId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCatalogCategory ZPCC
                                 INNER JOIN @TBL_ProfileCatalogId TBPC ON(ZPCC.PimCatalogId = TBPC.PimCatalogId);
                 END;
             ELSE
                 BEGIN
                     SET @PimCatalogIds = CAST(@PimCatalogId AS INT);
                     INSERT INTO ZnodeProfileCategoryHierarchy
                     (ProfileCatalogId,
                      PimCategoryHierarchyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @ProfileCatalogId,
                                   ZPCH.PimCategoryHierarchyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCategoryHierarchy ZPCH
                            WHERE 
							EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId )  
                            
                                  AND 
								  ZPCH.PimCatalogId = @PimCatalogIds;
                     INSERT INTO ZnodeProfileCatalogCategory
                     (ProfileCatalogId,
                      PimCatalogCategoryId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @ProfileCatalogId,
                                   PimCatalogCategoryId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCatalogCategory ZPCC
                            WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId  )  
                            
                                  AND ZPCC.PimCatalogId = @PimCatalogIds
                                  AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @TBL_PimProductId TBPP
                                WHERE TBPP.PimProductId = ZPCC.PimProductId
                            );
                 END;
             SET @Status = 1;
             COMMIT TRAN InsertUpdateProfileCatalog;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE()
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateProfileCatalog @ProfileId = '+CAST(@ProfileId AS VARCHAR(200))+',@PimCatalogId='+@PimCatalogId+',@UserId='+CAST(@UserId AS VARCHAR(200))+',@PimCategoryId='+@PimCategoryId+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(200))+',@PimProductId='+@PimProductId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN InsertUpdateProfileCatalog;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_InsertUpdateProfileCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF Object_id('Fn_GetRecurciveCategoryIds') <> 0 
BEGIN 
DROP FUNCTION  dbo.Fn_GetRecurciveCategoryIds 
END 

GO 
CREATE FUNCTION [dbo].[Fn_GetRecurciveCategoryIds]
(
       @PimCategoryHierarchyId     VARCHAR(2000)
	   ,@PimCatalogId	   INT 
)
RETURNS  @ConvertTableData TABLE (PimCategoryId INT ,ParentPimCategoryId INT  )
AS
	-- Summary :- This function is used to get the category id recursive 
	-- Unit Testing 
	-- EXEC [dbo].[Znode_SplitWhereClause] '',2
     BEGIN
        
		DECLARE @TBL_PimCategoryId TABLE (PimCategoryHierarchyId INT )

		INSERT INTO @TBL_PimCategoryId (PimCategoryHierarchyId )
		SELECT item FROM dbo.split(@PimCategoryHierarchyId,',') 

		IF @PimCategoryHierarchyId = '' 
		BEGIN 
		   INSERT INTO @ConvertTableData
	       SELECT ZPCH.PimCategoryId ,ZPCI.PimCategoryId PimParentCategoryId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   INNER JOIN ZnodePimCategoryHierarchy   ZPCI ON (ZPCI.PimCategoryHierarchyId = ZPCH.ParentPimCategoryHierarchyId)
		   WHERE ZPCH.PimCatalogId = @PimCatalogId
		END 
		ELSE 
		BEGIN 
	   ;With Cte_RecursiveAccountId AS
	    (
	       SELECT PimCategoryId ,PimCategoryHierarchyId ,ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId TBPC WHERE  ZPCH.ParentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId OR @PimCategoryHierarchyId = '')
		   AND (ZPCH.PimCatalogId = @PimCatalogId)
		   UNION ALL 
		   SELECT ZPCH.PimCategoryId ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   INNER JOIN Cte_RecursiveAccountId CTRA ON (CTRA.PimCategoryHierarchyId = ZPCH.ParentPimCategoryHierarchyId )
	      WHERE  (ZPCH.PimCatalogId = @PimCatalogId)
		  )
  	   INSERT INTO @ConvertTableData
	   SELECT   a.PimCategoryId,t.PimCategoryId 
	   FROM Cte_RecursiveAccountId a 
	   INNER JOIN ZnodePimCategoryHierarchy t ON (t.PimCategoryHierarchyId = a.ParentPimCategoryHierarchyId)
	   
	   END 
	     RETURN 
     END;
GO
IF Object_id('Fn_GetRecurciveCategoryIds_ForChild') <> 0 
BEGIN 

DROP FUNCTION Fn_GetRecurciveCategoryIds_ForChild 

END 

GO
CREATE FUNCTION [dbo].[Fn_GetRecurciveCategoryIds_ForChild]
(
       @PimCategoryHierarchyId     VARCHAR(2000)
	   ,@PimCatalogId	   INT 
)
RETURNS  @ConvertTableData TABLE (PimCategoryId INT ,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   )
AS
	-- Summary :- This function is used to get the category id recursive 
	-- Unit Testing 
	-- EXEC [dbo].[Znode_SplitWhereClause] '',2
     BEGIN
        
		DECLARE @TBL_PimCategoryId TABLE (PimCategoryHierarchyId INT )

		INSERT INTO @TBL_PimCategoryId (PimCategoryHierarchyId )
		SELECT item FROM dbo.split(@PimCategoryHierarchyId,',') 

		IF @PimCategoryHierarchyId = '' 
		BEGIN 
		   INSERT INTO @ConvertTableData
	       SELECT ZPCH.PimCategoryId ,ZPCH.PimCategoryHierarchyId ,ZPCH.ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   WHERE ZPCH.PimCatalogId = @PimCatalogId
		END 
		ELSE 
		BEGIN 
	   ;With Cte_RecursiveAccountId AS
	    (
	       SELECT PimCategoryId ,PimCategoryHierarchyId ,ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId TBPC WHERE  ZPCH.ParentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId OR @PimCategoryHierarchyId = '')
		   AND (ZPCH.PimCatalogId = @PimCatalogId)
		   UNION ALL 
		   SELECT ZPCH.PimCategoryId ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   INNER JOIN Cte_RecursiveAccountId CTRA ON (CTRA.PimCategoryHierarchyId = ZPCH.ParentPimCategoryHierarchyId )
	      WHERE  (ZPCH.PimCatalogId = @PimCatalogId)
		  )
  	   INSERT INTO @ConvertTableData
	   SELECT   a.PimCategoryId,PimCategoryHierarchyId ,ParentPimCategoryHierarchyId
	   FROM Cte_RecursiveAccountId a 
	   
	   
	   END 
	     
     
		 RETURN 
     END;
GO
IF Object_id('Fn_GetRecurciveCategoryIds_new') <> 0 
BEGIN 
DROP FUNCTION Fn_GetRecurciveCategoryIds_new
END 
GO 
CREATE FUNCTION [dbo].[Fn_GetRecurciveCategoryIds_new]
(
       @PimCategoryHierarchyId     VARCHAR(2000)
	   ,@PimCatalogId	   INT 
)
RETURNS  @ConvertTableData TABLE (PimCategoryId INT ,ParentPimCategoryId INT  )
AS
	-- Summary :- This function is used to get the category id recursive 
	-- Unit Testing 
	-- EXEC [dbo].[Znode_SplitWhereClause] '',2
     BEGIN
        
		DECLARE @TBL_PimCategoryId TABLE (PimCategoryHierarchyId INT )

		INSERT INTO @TBL_PimCategoryId (PimCategoryHierarchyId )
		SELECT item FROM dbo.split(@PimCategoryHierarchyId,',') 

		IF @PimCategoryHierarchyId = '' 
		BEGIN 
		   INSERT INTO @ConvertTableData
	       SELECT ZPCH.PimCategoryId ,ZPCI.PimCategoryId PimParentCategoryId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   INNER JOIN ZnodePimCategoryHierarchy   ZPCI ON (ZPCI.PimCategoryHierarchyId = ZPCH.ParentPimCategoryHierarchyId)
		   WHERE ZPCH.PimCatalogId = @PimCatalogId
		END 
		ELSE 
		BEGIN 
	   ;With Cte_RecursiveAccountId AS
	    (
	       SELECT PimCategoryId ,PimCategoryHierarchyId ,ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId TBPC WHERE  ZPCH.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId OR @PimCategoryHierarchyId = '')
		   AND (ZPCH.PimCatalogId = @PimCatalogId)
		   UNION ALL 
		   SELECT ZPCH.PimCategoryId ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
		   FROM ZnodePimCategoryHierarchy   ZPCH 
		   INNER JOIN Cte_RecursiveAccountId CTRA ON (CTRA.ParentPimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId )
	      WHERE  (ZPCH.PimCatalogId = @PimCatalogId)
		  )
  	   INSERT INTO @ConvertTableData
	   SELECT   a.PimCategoryId,t.PimCategoryId 
	   FROM Cte_RecursiveAccountId a 
	   LEFT JOIN ZnodePimCategoryHierarchy t ON (t.PimCategoryHierarchyId = a.ParentPimCategoryHierarchyId)
	   
	   END 
	     
     
		 RETURN 
     END;
GO



IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeERPConfigurator' AND COLUMN_NAME = 'JsonSetting')
BEGIN 
Alter table ZnodeERPConfigurator  add JsonSetting nvarchar(max) null END 
GO

insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'CMS'),	'Pages',	1,	NULL,	'Content',	'ContentPageList',	'z-contents',	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'CMS') and MenuName = 'Pages' and ControllerName = 'Content') 

insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'CMS'),	'Banner Sliders',	1,	NULL,	'WebSite',	'GetSliderList',	'z-slider-configuration',	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'CMS') and MenuName = 'Banner Sliders' and ControllerName = 'WebSite') 

GO
--GetUnAssociatedCatalogAttributes
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Search','GetUnAssociatedCatalogAttributes',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'GetUnAssociatedCatalogAttributes')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes'))


--GetAssociatedCatalogAttributes
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Search','GetAssociatedCatalogAttributes',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'GetAssociatedCatalogAttributes')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes'))

GO 

/****** Object:  StoredProcedure [dbo].[Znode_ImportInsertUpdatePimProduct]    Script Date: 22/Feb/2018 12:22:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[Znode_ImportInsertUpdatePimProduct]
(
    @PimProductDetail  PIMPRODUCTDETAIL READONLY,
    @UserId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0,
	@CopyPimProductId  INT	  = 0 )
AS
   /*
     Summary : To Insert / Update single Product with multiple attribute values 
     Update Logic: 
*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
			 DECLARE @PimProductId INT;
			 DECLARE @TBL_PimProductId TABLE(PimAttributeValueId INT,ZnodePimAttributeValueLocaleId INT );
			 DECLARE @TBL_CopyPimProductId TABLE(PimAttributeValueId INT,OldPimAttributeValueId INT);
			 DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId()
			 DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
			 DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeValue TABLE (PimAttributeValueId INT ,LocaleId INT ,AttributeValue VARCHAr(300),MediaId INT)
			 DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeValueId INT , LocaleId INT , AttributeValue INT)
			 DECLARE @ZnodePimAttributeValue TABLE (PimAttributeValueId  INT, PimAttributeFamilyId INT,PimAttributeId INT);

			 DECLARE @AssociatedProduct VARCHAR(4000);
			 DECLARE @ConfigureAttributeId VARCHAR(4000);
			 DECLARE @ConfigureFamilyId VARCHAR(4000);
			 DECLARE @PimAttributeFamilyId INT;
			 DECLARE @LocaleId INT 

			 DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
			 DECLARE @pimProductNameAttributeId VARCHAR(50) =[dbo].Fn_GetProductNameAttributeId ()
			 DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
			 Declare @SKU nvarchar(300),@ProductName nvarchar(300)
			 Select * into #PimProductDetail from @PimProductDetail
			
			--DECLARE @PimAttributeFamily VARCHAR(50) =  [dbo].[Fn_GetAttributeFamilyId]()
			--Update #PimProductDetail SET AttributeValue = 
			--(SELECT FamilyCode from ZnodePimAttributeFamily where PimAttributeFamilyId = @PimAttributeFamilyId)
			--where PimAttributeId = @PimAttributeFamily

			--DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]()
			 
			--insert into #PimProductDetail ([PimAttributeId],[PimAttributeFamilyId],[ProductAttributeCode],[ProductAttributeDefaultValueId],
			--[PimAttributeValueId],	[LocaleId],[PimProductId],[AttributeValue],[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]) 
			 
			--SELECT TOP 1 @PimAttributeIsPublish,[PimAttributeFamilyId],'PublishStatus' ProductAttributeCode,NULL ProductAttributeDefaultValueId,
			--NULL PimAttributeValueId,	[LocaleId],[PimProductId],
			--CASE when isnull([PimProductId] ,0) > 1 then 'Draft' else 'Not Publish' END AttributeValue,
			--[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]
			--from @PimProductDetail  


			INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM  [dbo].[Fn_GetDefaultAttributeId] ()
			 
			 INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

			 INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
			 SELECT PimAttributeId, AttributeCode   FROM [dbo].[Fn_GetTextAreaAttributeId]()

			 
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
                FROM #PimProductDetail;
             
			 

			 
			 
			 SELECT TOP 1 @LocaleId = LocaleId
                FROM #PimProductDetail;

             -- Retrive input productId from #PimProductDetail table ( having multiple attribute values with common productId) 

             SELECT TOP 1 @PimProductId = PimProductId
             FROM #PimProductDetail;
			
             IF ISNULL(@PimProductId, 0) = 0
                 BEGIN
                     INSERT INTO ZnodePimProduct
                     (PimAttributeFamilyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @PimAttributeFamilyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate;
                     SET @PimProductId = SCOPE_IDENTITY();
					 If EXISTS (select TOP 1 1 from #PimProductDetail where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						
						Select TOP 1 @SKU  =  AttributeValue from  #PimProductDetail where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  #PimProductDetail where PimAttributeId =  @pimProductNameAttributeId
						insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
					 End
		

                 END;
             ELSE 
                 BEGIN
                     UPDATE ZNodePimProduct
                       SET
                           PimAttributeFamilyId = @PimAttributeFamilyId,
						   IsProductPublish  = 
						   -- IsProductPublish = 1 for status published
						   -- IsProductPublish = 0 for status Draft
						   -- IsProductPublish = NULL for status NOT published 
						   
						   CASE 
								when IsProductPublish =1 then  0  -- IF status is publish then status should be draft
								when IsProductPublish =0 then 0   -- IF it is draft then it should be draft 
								else null END , -- if it is not publish then it will not publish
                           ModifiedBy = @UserId,
                           ModifiedDate = @GetDate
                     WHERE PimProductId = @PimProductId;
            									
					 INSERT INTO @TBL_PimProductId(PimAttributeValueId)
					 SELECT ZPAV.PimAttributeValueId
                     FROM ZnodePimAttributeValue ZPAV
					 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId AND ( @localeID = @DefaultLocaleId OR ZPA.IsLocalizable = 1 OR EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FN WHERE FN.PimAttributeId = ZPAV.PimAttributeId)))
					 INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
					 WHERE ZPAV.PimProductId = @PimProductId
					 AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM #PimProductDetail TBPDI
                                WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                      AND TBPDI.PimProductId = ZPAV.PimProductId
							 )
                     
				    --  SELECT * FROM @TBL_PimProductId

			
                     DELETE FROM ZnodePimAttributeValueLocale
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValueLocale.PimAttributeValueId 
								
                     ) AND LocaleId = @LocaleId;
					 DELETE  ZnodePimProductAttributeDefaultValue 
					  WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
								
                     ) AND LocaleId = @LocaleId;
					 DELETE FROM ZnodePimProductAttributeMedia 
					  WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeMedia.PimAttributeValueId 
								
                     ) 
					 AND LocaleId = @LocaleId;

					-- SELECT * FROM @TBL_PimProductId

					 DELETE FROM ZnodePimProductAttributeTextAreaValue
					   WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeTextAreaValue.PimAttributeValueId 
								
                     ) AND LocaleId = @LocaleId ;

                     DELETE FROM ZnodePimAttributeValue
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimProductId TBPD
                         WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId
                     )
					 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
					 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeTextAreaValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
					 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId );
					If EXISTS (select TOP 1 1 from #PimProductDetail where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						Select TOP 1 @SKU  =  AttributeValue from  #PimProductDetail where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  #PimProductDetail where PimAttributeId =  @pimProductNameAttributeId

						insert into ZnodePimDownloadableProduct(SKU,ProductName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select TOP 1 PD.AttributeValue, @ProductName,@UserId , @GetDate, @UserId , @GetDate from  #PimProductDetail PD where  PD.PimAttributeId = @pimSkuAttributeId 
						AND not exists (select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  =  PD.AttributeValue)
						IF NOT Exists (	select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  = @SKU)
							insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
							Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 

					 End
                 END;
		
		    MERGE INTO ZnodePimAttributeValue TARGET
              USING #PimProductDetail SOURCE
              ON(
				TARGET.PimProductId = @PimProductId
                AND TARGET.PimAttributeId = SOURCE.PimAttributeId)
                --AND ISNULL(TARGET.PimAttributeFamilyId, 0) = ISNULL(SOURCE.PimAttributeFamilyId, 0))
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.PimAttributeFamilyId = CASE
                                                                   WHEN Source.PimAttributeFamilyId = 0
                                                                   THEN NULL
                                                                   ELSE Source.PimAttributeFamilyId
                                                               END,
                                 --TARGET.PimAttributeDefaultValueId = CASE
                                 --                                        WHEN SOURCE.ProductAttributeDefaultValueId = 0
                                 --                                        THEN NULL
                                 --                                        ELSE SOURCE.ProductAttributeDefaultValueId
                                 --                                    END, 
                                 -- ,TARGET.AttributeValue					= SOURCE.AttributeValue
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeFamilyId,
                             PimProductId,
                             PimAttributeId,
                             PimAttributeDefaultValueId,
                             --,AttributeValue
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (CASE
                  WHEN Source.PimAttributeFamilyId = 0
                  THEN @PimDefaultFamily
                  ELSE Source.PimAttributeFamilyId
              END,
              @PimProductId,
              SOURCE.PimAttributeId,
              CASE
                  WHEN SOURCE.ProductAttributeDefaultValueId = 0
                  THEN NULL
                  ELSE SOURCE.ProductAttributeDefaultValueId
              END, 
              --,SOURCE.AttributeValue
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             )
             --WHEN NOT MATCHED BY SOURCE AND TARGET.PimProductId = @PimProductId
             --                               AND Target.PimAttributeFamilyId IS NOT NULL
             --THEN DELETE
             OUTPUT INSERTED.PimAttributeValueId,
                    INSERTED.PimAttributeFamilyId,
                    INSERTED.PimAttributeId
                    INTO @ZnodePimAttributeValue;
        		 
		INSERT INTO @TBL_MediaAttributeValue (PimAttributeValueId,LocaleId , AttributeValue,MediaId)
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                         zm.Path AttributeValue
						 ,ZM.MediaId
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_MediaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodeMedia ZM ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue ,',') SP WHERE sp.Item = ZM.MediaId ))
		
		DELETE FROM ZnodePimProductAttributeMedia 
		WHERE EXISTS 
		 (SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId 
		 AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId  AND ZnodePimProductAttributeMedia.Localeid = @LocaleId)



		MERGE INTO ZnodePimProductAttributeMedia TARGET 
		USING @TBL_MediaAttributeValue SOURCE 
		ON (        TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
		        AND TARGET.MediaPAth = SOURCE.AttributeValue
                  AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.MediaPath = SOURCE.AttributeValue,
						   TARGET.MediaId   = SOURCE.MediaId,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             MediaPath,
							 MediaId ,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
			  SOURCE.MediaId,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		 --WHEN NOT MATCHED BY SOURCE AND EXISTS 
		 --(SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE TARGET.PimAttributeValueId = TBLM.PimAttributeValueId AND TBLM.MediaId = TARGET.MediaId  AND TARGET.Localeid = @LocaleId)
		 --  THEN 
		 --DELETE  ;


	   ;With Cte_TextAreaAttributeValue AS 
		 (
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_TextAreaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		
		)
		
		MERGE INTO ZnodePimProductAttributeTextAreaValue TARGET 
		USING Cte_TextAreaAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		-- SELECT a.PimAttributeValueId,
  --                      b.LocaleId,
  --                      d.PimAttributeDefaultValueId  AttributeValue,b.PimAttributeId
  --      FROM @ZnodePimAttributeValue AS a
  --        INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
  --                                              AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		--INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		--INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	



        INSERT INTO @TBL_DefaultAttributeValue (PimAttributeValueId,LocaleId,AttributeValue)  
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        d.PimAttributeDefaultValueId  AttributeValue
        FROM @ZnodePimAttributeValue AS a
          INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	
	     -- SELECT * FROM @TBL_DefaultAttributeValue

		--  SELECT * FROM Cte_DefaultAttributeValue
		DELETE FROM ZnodePimProductAttributeDefaultValue 
		WHERE  EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
												AND TBLAV.AttributeValue   <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId 
												 AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId )

		MERGE INTO ZnodePimProductAttributeDefaultValue TARGET 
		USING @TBL_DefaultAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
              AND TARGET.PimAttributeDefaultValueId =  SOURCE.AttributeValue
			    AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             PimAttributeDefaultValueId,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
			 --WHEN NOT MATCHED BY SOURCE  AND EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = TARGET.PimAttributeValueId 
				--								AND TBLAV.AttributeValue   = TARGET.PimAttributeDefaultValueId  AND TARGET.LocaleId = @LocaleId )
			 --THEN 
			 --DELETE 
			 --;
		
   
			 
		   MERGE INTO ZnodePimAttributeValueLocale TARGET
             USING
             (
                 SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
                 FROM @ZnodePimAttributeValue AS a
                      INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                             AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
                 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId  )
			     AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId  )
				 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId  )
			 ) SOURCE
             ON(TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
             SET @AssociatedProduct =
             (
                 SELECT MAX(AssociatedProducts)
                 FROM #PimProductDetail AS a
             );
             INSERT INTO ZnodePimProductTypeAssociation
             (PimParentProductId,
              PimProductId,
              DisplayOrder,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           Item,
                           ID AS RowId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@AssociatedProduct, ',') AS b
                         INNER JOIN ZNodePimProduct AS q ON(q.PimProductId = b.Item);
             SET @ConfigureAttributeId =
             (
                 SELECT MAX(ConfigureAttributeIds)
                 FROM #PimProductDetail AS a
             );
             SET @ConfigureFamilyId =
             (
                 SELECT MAX(ConfigureFamilyIds)
                 FROM #PimProductDetail AS a
             );
             INSERT INTO [ZnodePimConfigureProductAttribute]
             (PimProductId,
              PimFamilyId,
              PimAttributeId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           @ConfigureFamilyId,
                           q.PimAttributeId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@ConfigureAttributeId, ',') AS b
                         INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
					WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute RTR  WHERE  RTR.PimProductId = @PimProductId AND RTR.PimAttributeId = q.PimAttributeId);



             IF @IsNotReturnOutput = 0
                 SELECT @PimProductId AS Id,
                        CAST(1 AS BIT) AS Status;
             SET @status = 1;

			 IF @CopyPimProductId > 0 
			 BEGIN 
			   INSERT INTO ZnodePimAttributeValueLocale  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimAttributeValueLocale ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId

			    INSERT INTO ZnodePimProductAttributeDefaultValue  (PimAttributeValueId,LocaleId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.PimAttributeDefaultValueId,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeDefaultValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId


			   INSERT INTO ZnodePimProductAttributeTextAreaValue  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   			   
			   INSERT INTO ZnodePimProductAttributeMedia  (PimAttributeValueId,LocaleId,MediaPath,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.MediaPath,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeMedia ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   
			 END 

             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdatePimProduct @UserId = '+CAST(@UserId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@CopyPimProductId='+CAST(@CopyPimProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportInsertUpdatePimProduct',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

GO 

Alter TAble ZnodeCMSSliderBannerLocale Alter Column ButtonLink  nvarchar(max) 
GO 

----ZnodeMenu
insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Admin'),	'Log Message',	14,	NULL,	'LogMessage',	'List',	null,	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'Admin') and MenuName = 'Log Message' and ControllerName = 'LogMessage')

GO 

--Application Setting 
GO 

Update ZnodeApplicationSetting SET Setting =
'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>StackTraceMessage</name>      <headertext>StackTrace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName = 'ZnodeLogMessage'

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeLogMessage',	
'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>StackTraceMessage</name>      <headertext>StackTrace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
,	'ZnodeLogMessageList',	'ZnodeLogMessageList',	'ZnodeLogMessageList',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeLogMessage')
-----------------------------------------------------

--Action : List (MenuName = 'Log Message' ) 
---------------------------------------------------------------------------
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','List',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'List')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Log Message')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Log Message'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List'))

--Action : GetLogMessage (MenuName = 'Log Message' ) 
-------------------------------------------------------------------
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','GetLogMessage',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'GetLogMessage')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Log Message')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Log Message'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage'))

GO

IF  EXISTS (SELECT TOP 1  1 FROM sys.procedures WHERE name = 'Znode_GetProductInfoForWebStore' )
 drop proc Znode_GetProductInfoForWebStore
----------Existing object Change

if exists( select * from sys.types where is_user_defined = 1 and name ='ProductDetailsFromWebStore' )
	drop type ProductDetailsFromWebStore
GO
CREATE TYPE [dbo].[ProductDetailsFromWebStore] AS TABLE (
    [Id]                INT            NULL,
    [ProductType]       NVARCHAR (100) NULL,
    [OutOfStockOptions] NVARCHAR (100) NULL,
    [SKU]               NVARCHAR (MAX) NULL);


GO
PRINT N'Creating [dbo].[SearchProfileFeatureList]...';
go
if exists( select * from sys.types where is_user_defined = 1 and name ='SearchProfileFeatureList' )
	drop type SearchProfileFeatureList
GO
CREATE TYPE [dbo].[SearchProfileFeatureList] AS TABLE (
    [SearchProfileFeatureId] INT            NULL,
    [SearchFeatureValue]     NVARCHAR (MAX) NULL);

go


IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSContentPages' AND COLUMN_NAME = 'IsPublished')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCMSContentPages] ADD [IsPublished]  BIT
END 
go
IF  EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSFormWidgetConfiguration' AND COLUMN_NAME = 'RedirectURL')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCMSFormWidgetConfiguration] ALTER COLUMN RedirectURL  NVARCHAR (MAX) NULL
END 
GO
 
 IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSFormWidgetConfiguration' AND COLUMN_NAME = 'IsShowCaptcha')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCMSFormWidgetConfiguration] ADD [IsShowCaptcha]  BIT CONSTRAINT [DF__ZnodeCMSF__IsSho__332B7579] DEFAULT ((0)) NULL
END 

go
IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSMessage' AND COLUMN_NAME = 'IsPublished')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCMSMessage] ADD [IsPublished]  BIT
END 
 go
IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSSEODetail' AND COLUMN_NAME = 'IsPublish')
BEGIN 
	ALTER TABLE [dbo].[ZnodeCMSSEODetail] ADD [IsPublish]  BIT
END 
  go
IF NOT EXISTS (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSSlider' AND COLUMN_NAME = 'IsPublished')
BEGIN 
	ALTER TABLE [dbo].ZnodeCMSSlider ADD [IsPublished]  BIT
END 

  go
IF NOT EXISTS (SELECT * FROM   sys.objects WHERE  type IN( 'UQ' ) and OBJECT_NAME(parent_object_id) = 'ZnodeFormBuilder' and name ='UC_ZnodeFormBuilder')
BEGIN 
	UPDATE ZnodeFormBuilder SET [FormCode] = FormBuilderId WHERE [FormCode] IS NULL
	ALTER TABLE ZnodeFormBuilder ADD CONSTRAINT [UC_ZnodeFormBuilder] UNIQUE NONCLUSTERED ([FormCode] ASC)
END 
  go
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeImportHead' AND COLUMN_NAME = 'IsCsvUploader')
BEGIN 
	ALTER TABLE [ZnodeImportHead] ADD [IsCsvUploader]  BIT
END 
go
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeListView' AND COLUMN_NAME = 'SortColumn')
BEGIN 
	ALTER TABLE ZnodeListView ADD [SortColumn]   NVARCHAR (100) NULL
END 
go
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeListView' AND COLUMN_NAME = 'SortType')
BEGIN 
	ALTER TABLE ZnodeListView ADD [SortType]   NVARCHAR (100) NULL
END 
go
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeListView' AND COLUMN_NAME = 'IsPublic')
BEGIN 
	ALTER TABLE ZnodeListView ADD [IsPublic]  BIT CONSTRAINT [DF_ZnodeListView_IsPublic] DEFAULT ((0)) NOT NULL
END 
go
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeListView' AND COLUMN_NAME = 'IsDefault')
BEGIN 
	ALTER TABLE ZnodeListView ADD IsDefault  BIT CONSTRAINT [DF_ZnodeListView_IsDefault] DEFAULT ((0)) NOT NULL
END 
go
IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsOrderDetails' AND COLUMN_NAME = 'CreditCardNumber')
BEGIN 
	ALTER TABLE ZnodeOmsOrderDetails ALTER COLUMN CreditCardNumber VARCHAR (4) NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsOrderDetails' AND COLUMN_NAME = 'EstimateShippingCost')
BEGIN 
	ALTER TABLE ZnodeOmsOrderDetails ADD [EstimateShippingCost]    NUMERIC (28, 6) NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCategory' AND COLUMN_NAME = 'IsCategoryPublish')
BEGIN 
	ALTER TABLE ZnodePimCategory ADD [IsCategoryPublish]    TINYINT       NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimCustomField' AND COLUMN_NAME = 'DisplayOrder')
BEGIN 
	ALTER TABLE ZnodePimCustomField ADD DisplayOrder  INT           NULL
END  
GO


IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortal' AND COLUMN_NAME = 'OrderAmount')
BEGIN 
	ALTER TABLE ZnodePortal ADD OrderAmount NUMERIC (28, 6) NULL
END  
GO

IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortal' AND COLUMN_NAME = 'Email')
BEGIN 
	ALTER TABLE ZnodePortal ADD [Email]  VARCHAR (500)   NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortal' AND COLUMN_NAME = 'StoreCode')
BEGIN 
	ALTER TABLE ZnodePortal ADD StoreCode  NVARCHAR (200)  NULL 
END  
GO

GO
IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortal' AND COLUMN_NAME = 'StoreCode')
BEGIN 
	declare @sql2 varchar(1000)
	set @sql2 = N' UPDATE ZnodePortal SET [StoreCode] = cast(PortalId as varchar(10)) WHERE  [StoreCode] IS NULL '
	exec ( @sql2 )
end
go
GO
IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortal' AND COLUMN_NAME = 'StoreCode')
BEGIN 
	declare @sql3 varchar(1000)
	set @sql3 = N' 
	ALTER TABLE ZnodePortal ADD CONSTRAINT [UC_ZnodePortal] UNIQUE NONCLUSTERED ([StoreCode] ASC)'
	exec (@sql3)
end
go
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortalAddress' AND COLUMN_NAME = 'StoreLocationCode')
BEGIN 
	ALTER TABLE [ZnodePortalAddress] ADD  [StoreLocationCode] NVARCHAR (200) NULL 
END
go
IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortalAddress' AND COLUMN_NAME = 'StoreLocationCode')
BEGIN 
	declare @sql1 varchar(1000)
	set @sql1 = ' UPDATE ZnodePortalAddress SET [StoreLocationCode] = cast(PortalAddressId as varchar(10)) WHERE  [StoreLocationCode] IS NULL '
	exec (@sql1)
END
go
IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortalAddress' AND COLUMN_NAME = 'StoreLocationCode')
BEGIN 
	declare @sql4 varchar(1000)
	set @sql4 = ' 
	ALTER TABLE ZnodePortalAddress ADD CONSTRAINT [UK_ZnodePortalAddress] UNIQUE NONCLUSTERED ([StoreLocationCode] ASC)'
	exec ( @sql4 )
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePortalSmtpSetting' AND COLUMN_NAME = 'DisableAllEmails')
BEGIN 
	ALTER TABLE [ZnodePortalSmtpSetting] ADD [DisableAllEmails]    BIT            DEFAULT ((0)) NOT NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePublishedXml' AND COLUMN_NAME = 'ImportedGuId')
BEGIN 
	ALTER TABLE [ZnodePublishedXml] ADD [ImportedGuId]  NVARCHAR (400) NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePublishedXml' AND COLUMN_NAME = 'PublishCategoryId')
BEGIN 
	ALTER TABLE [ZnodePublishedXml] ADD [PublishCategoryId]    INT            NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeSearchQueryType' AND COLUMN_NAME = 'DisplayOrder')
BEGIN 
	ALTER TABLE [ZnodeSearchQueryType] ADD DisplayOrder INT             NULL
END  
GO
IF NOT EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeUser' AND COLUMN_NAME = 'IsShowMessage')
BEGIN 
	ALTER TABLE [ZnodeUser] ADD  [IsShowMessage]            BIT             NULL
END  
GO

IF EXISTS (SELECT * FROM sys.views where name = 'View_CategoryHierarchy')
	drop view View_CategoryHierarchy
go
CREATE VIEW dbo.View_CategoryHierarchy
AS
     SELECT a.PimCategoryHierarchyId,
            a.PimCatalogId,
            a.PimCategoryId,
            d.CategoryValue,
            a.ParentPimCategoryHierarchyId
     FROM dbo.ZnodePimCategoryHierarchy AS a
          INNER JOIN dbo.ZnodePimCatalogCategory AS s ON a.PimCatalogId = s.PimCatalogId
                                                         AND a.PimCategoryId = s.PimCategoryId
          INNER JOIN dbo.ZnodePimCategoryAttributeValue AS b ON a.PimCategoryId = b.PimCategoryId
          INNER JOIN dbo.ZnodePimAttribute AS c ON b.PimAttributeId = c.PimAttributeId
                                                   AND c.AttributeCode = 'CategoryName'
          INNER JOIN dbo.ZnodePimCategoryAttributeValueLocale AS d ON b.PimCategoryAttributeValueId = d.PimCategoryAttributeValueId
     GROUP BY a.PimCategoryHierarchyId,
              a.PimCatalogId,
              a.PimCategoryId,
              d.CategoryValue,
              a.ParentPimCategoryHierarchyId;
GO

IF EXISTS (SELECT * FROM sys.views where name = 'View_GetContentPageDetails')
	drop view View_GetContentPageDetails
go
CREATE VIEW [dbo].[View_GetContentPageDetails]
AS
     SELECT ZCCP.CMSContentPagesId,
            PageName,
            PageTitle,
            ActivationDate,
            ExpirationDate,
            SEODescription,
            SEOKeywords,
            SEOTitle,
            SEOUrl,
            IsActive,
			IsRedirect,
            StoreName,
            CMSTemplateId,
            MetaInformation,
            ZCCP.PortalId,
            ZCCPGM.CMSContentPageGroupId,
            ZCCPL.LocaleId
     FROM ZnodeCMSContentPages ZCCP
          LEFT JOIN ZnodeCMSContentPagesLocale ZCCPL ON(ZCCPL.CMSContentPagesId = ZCCP.CMSContentPagesId)
          LEFT JOIN ZnodeCMSContentPageGroupMapping ZCCPGM ON(ZCCPGM.CMSContentPagesId = ZCCp.CMSContentPagesId)
          LEFT JOIN ZnodeCMSContentPageGroup ZCCPG ON(ZCCPG.CMSContentPageGroupId = ZCCPGM.CMSContentPageGroupId)
          LEFT JOIN ZnodeCMSContentPageGroupLocale ZCCPGL ON(ZCCPGL.CMSContentPageGroupId = ZCCPG.CMSContentPageGroupId
                                                             AND ZCCPGL.LocaleId = ZCCPL.LocaleId)
          LEFT JOIN ZnodeCMSSeoDetail ZCSED ON(ZCSED.SEOId = ZCCp.CMSContentPagesId
                                               AND EXISTS
                                              (
                                                  SELECT TOP 1 1
                                                  FROM ZnodeCMSSEOType ZCST
                                                  WHERE ZCST.CMSSEOTypeId = ZCSED.CMSSEOTypeId
                                                        AND ZCST.Name = 'Content Page'
                                              ))
          LEFT JOIN ZnodeCMSSEODetailLocale ZCSEDL ON(ZCSEDL.CMSSEODetailId = ZCSED.CMSSEODetailId
                                                      AND ZCSEDL.LocaleId = ZCCPL.LocaleId)
          LEFT JOIN ZnodePortal ZP ON(ZP.PortalId = ZCCP.POrtalId);
GO

IF EXISTS (SELECT * FROM sys.views where name = 'View_GetManageMessageList')
	drop view View_GetManageMessageList
go

CREATE  View [dbo].[View_GetManageMessageList]
AS
SELECT  c.CMSPortalMessageId ,a.CMSMessageId , a.[Message]  , b.MessageKey Location,e.StoreName,a.LocaleId,e.PortalId,c.CMSMessageKeyId,ZCPMT.TagXML as MessageTag 
,a.IsPublished PublishStatus FROM  [dbo].[ZnodeCMSMessage] a 
INNER JOIN [dbo].[ZnodeCMSPortalMessage] c ON (a.CMSMessageId = c.CMSMessageId)
LEFT JOIN  [dbo].[ZnodeCMSMessageKey] b ON (b.CMSMessageKeyId  = c.CMSMessageKeyId)
LEFT JOIN  [dbo].ZnodeCMSPortalMessageKeyTag ZCPMT ON (ZCPMT.Portalid = C.PortalId AND C.CMSMessageKeyId = ZCPMT.CMSMessageKeyId )
Left JOIN  [dbo].ZnodePortal e ON (e.PortalId = c.PortalId)
GO

IF EXISTS (SELECT * FROM sys.views where name = 'View_GetMediaPathDetail')
	drop view View_GetMediaPathDetail
go

CREATE VIEW [dbo].[View_GetMediaPathDetail]
AS
     SELECT MediaCategoryId,
            MediaPathId,
            [Folder],
            [FileName],
            Size,
			Height,
			Width,
		    Type,
            [MediaType],
            CreatedDate,
            ModifiedDate,
            MediaId,
            Path,
            MediaServerPath MediaServerPath,
            MediaThumbnailPath MediaServerThumbnailPath,
            FamilyCode,
            CreatedBy,
            [DisplayName] [DisplayName],
            [Description] [ShortDescription]

     /* INTO #temp2*/

     FROM
     (
         SELECT Zmc.MediaCategoryId,
                ZMPL.MediaPathId,
                ZMPL.[PathName] [Folder],
                zM.[FileName],
                Zm.Size,
				Zm.Height,
				Zm.Width,
				Zm.Type,
                Zm.Type [MediaType],
                CONVERT( DATE, zm.CreatedDate) CreatedDate,
                CONVERT( DATE, zm.ModifiedDate) ModifiedDate,
                Zm.MediaId,
                zma.AttributeCode,
                Zmav.AttributeValue,
                 ZMCF.URL+ZMSM.ThumbnailFolderName+'\'+zM.Path MediaThumbnailPath,
				 ZMCF.URL+zM.Path  MediaServerPath,
				zM.Path,
               zmafl.FamilyCode FamilyCode,
                Zm.CreatedBy
         FROM ZnodeMediaCategory ZMC
              LEFT JOIN ZnodeMediaAttributeFamily zmafl ON(zmc.MediaAttributeFamilyId = zmafl.MediaAttributeFamilyId)
			  INNER JOIN ZnodeMediaPathLocale ZMPL ON(ZMC.MediaPathId = ZMPL.MediaPathId)
              INNER JOIN ZnodeMedia zM ON(Zm.MediaId = Zmc.MediaId)
		      LEFT JOIN ZnodeMediaConfiguration ZMCF ON (ZMCF.MediaConfigurationId = ZM.MediaConfigurationId AND ZMCF.IsActive = 1)
			  LEFT JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMCF.MediaServerMasterId)
              LEFT JOIN dbo.ZnodeMediaAttributeValue Zmav ON(zmav.MediaCategoryId = zmc.MediaCategoryId)
              LEFT JOIN dbo.ZnodeMediaAttribute zma ON(zma.MediaAttributeId = Zmav.MediaAttributeId
                                                       AND AttributeCode IN('DisplayName', 'Description'))  
    
     ) v PIVOT(MAX(AttributeValue) FOR AttributeCode IN([DisplayName],
                                                        [Description])) PV;
GO

IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_AdminUsers')
	drop proc [Znode_AdminUsers]
go

CREATE PROCEDURE [dbo].[Znode_AdminUsers]
(	@RoleName		VARCHAR(200),
    @UserName		VARCHAR(200),
    @WhereClause	VARCHAR(MAX)  = '',
    @Rows			INT           = 100,
    @PageNo			INT           = 1,
    @Order_By		VARCHAR(1000) = '',
    @RowCount		INT        = 0 OUT,
	@IsCallOnSite   BIT = 0 ,
	@PortalId		VARCHAR(1000) = 0 )
AS
   /* 
      Summary: List of users with detsils and shows link with ASPNet tables 
      This procedure is used for finding both users and admin users 
      here use three view "View_RoleUsers" for check  @UserName is present or not 
      "View_AdminUserDetail"  this view use for admin users 
      "View_CustomerUserDetail" Use for customer users 
      Unit Testing   
	  SELECT * FROM ZnodeUser 
      DECLARE @EDE INT=0  EXEC Znode_AdminUsers '','admin@znode.com',@WhereClause='',@Order_By='',@PageNo= 1 ,@Rows= 214,@IsCallOnSite='false',@PortalId=0,@RowCount=@EDE OUT  SELECT @EDE
   */
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;


            DECLARE @SQL NVARCHAR(MAX)= '', @PaginationWhereClause VARCHAR(300)= dbo.Fn_GetRowsForPagination(@PageNo, @Rows, ' WHERE RowId');
             
			IF @PortalId  <> '0' 
			BEGIN 
			    SET @WhereClause = CASE WHEN  @WhereClause = '' THEN ' (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' ELSE @WhereClause+' AND (PortalId IN ('+@PortalId+') OR PortalId IS NULL) ' END 
			END 
			IF EXISTS
            (
            SELECT TOP 1 1
            FROM View_RoleUsers
            WHERE Username = @UserName
            )
			-- this check for admin user
            AND @RoleName <> ''  

			BEGIN
				SET @SQL = ' 
				;with Cte_AdminUserDetail AS 
				(
					 
				SELECT DISTINCT A.UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,A.CreatedBy,A.CreatedDate,A.ModifiedBy,A.ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM View_AdminUserDetail A
				'+CASE WHEN @PortalId  <> '0' THEN ' INNER JOIN ZnodeUserPortal ZUP ON (ZUP.UserId = A.UserId) 'ELSE '' END  +'	 
				'+dbo.Fn_GetWhereClause(@WhereClause, ' WHERE ')+'
				), Cte_AdminUserDetailRowId AS 
				(
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId
				FROM Cte_AdminUserDetail
				)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId,CustomerPaymentGUID ,RowId 
				INTO #AccountDetails
				FROM Cte_AdminUserDetailRowId 
					 
				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetails ),0)
					 
				SELECT UserId,AspNetUserId,UserName,FirstName,MiddleName,LastName,Email,EmailOptIn,BudgetAmount,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,RoleId,RoleName,IsActive,IsLock,FullName,AccountName,PermissionsName,PermissionCode,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId,PhoneNumber
				,ExternalId,ApprovalName,ApprovalUserId,AccountUserOrderApprovalId ,CustomerPaymentGUID
				FROM #AccountDetails '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC' );
			    PRINT @SQL
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
			END;
			-- For Customer user
            ELSE   
      BEGIN
				IF @roleName = ''
				BEGIN
				
				SET @SQL = '
				;With Cte_CustomerUserDetail  AS 
				(
				SELECT DISTINCT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				FROM View_CustomerUserAddDetail a 
				
				WHERE 
				(EXISTS   -- this will check for customer 
				(
				SELECT TOP 1 1
				FROM AspNetUserRoles AS b
				WHERE a.AspNetUserId = b.userid
				AND EXISTS
				(SELECT TOP 1 1	FROM AspNetRoles AS d	WHERE(d.Name IN(''Customer'')OR d.TypeOfRole = ''B2B'')	AND d.Id = b.RoleId	)  
				) OR AspNetuserId IS NULL OR '+CAST(CAST(@IsCallOnSite AS INT ) AS VARCHAR(50))+'= ''1'' ) 
				'+dbo.Fn_GetWhereClause(@WhereClause, ' AND ')+'),
				Cte_CustomerUserDetailRowId  AS 
				(
				SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,RANK()Over('+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC')+',UserId DESC) RowId ,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				FROM Cte_CustomerUserDetail -- genrate the unique rowid 
				)
					 			 
				SELECT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode,CustomerPaymentGUID ,RowId,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				INTO #AccountDetail FROM Cte_CustomerUserDetailRowId  

				SET @Count= ISNULL((SELECT  Count(1) FROM #AccountDetail    ),0)

				
												  
				SELECT DISTINCT UserId,AspNetuserId,UserName,FirstName,MiddleName,LastName,PhoneNumber,Email,
				EmailOptIn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,RoleId,RoleName,IsActive,IsLock,FullName,
				AccountName,PermissionsName,DepartmentName,DepartmentId,AccountId,AccountPermissionAccessId , ExternalId,
				BudgetAmount,AccountUserOrderApprovalId,ApprovalName,ApprovalUserId,PermissionCode ,CustomerPaymentGUID,StoreName,PortalId,
				CountryName, CityName, StateName, PostalCode, CompanyName
				FROM #AccountDetail '+@PaginationWhereClause+' '+dbo.Fn_GetOrderByClause(@Order_By, 'UserId DESC');
                PRINT @SQL    					
				EXEC SP_executesql
				@SQL,
				N'@Count INT OUT',
				@Count = @RowCount OUT;
				END;
            ELSE
				BEGIN
					SELECT * FROM View_CustomerUserDetail AS VICUD WHERE 1 = 0;
					SET @RowCount = 0;
				END;
            END;			
         END TRY
         BEGIN CATCH
            DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_AdminUsers @RoleName = '+@RoleName+' ,@UserName='+@UserName+',@WhereClause='+@WhereClause+' ,@Rows= '+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_By='+@Order_By+',@RowCount='+CAST(@RowCount AS VARCHAR(50));
            EXEC Znode_InsertProcedureErrorLog
            @ProcedureName    = 'Znode_AdminUsers',
            @ErrorInProcedure = @ERROR_PROCEDURE,
            @ErrorMessage     = @ErrorMessage,
            @ErrorLine        = @ErrorLine,
            @ErrorCall        = @ErrorCall;
         END CATCH;


     END;
GO

IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_CopyPimCatalog')
	drop proc [Znode_CopyPimCatalog]
go

CREATE PROCEDURE [dbo].[Znode_CopyPimCatalog]
( 
	@CatalogId int,
	@UserId int,
	@CatalogName varchar(500),
	@CopyAllData bit= 0,
	@Status bit OUT
)
AS
/*
	 Summary: Create copy of existing catalog
	 Here copy all data of catalog on the basis of @CopyAllData bit parameter 
	 if true then copy all data other wise not copy all data 	   
	 Three tables are manipulated ZnodePimCatalog create new catalog, 
	 ZnodePimCategoryHierarchy copy the category and ZnodePimCatalogCategory Copy the products 	   
	 
	 Unit Testing   
	 begin tran
	 EXEC Znode_CopyPimCatalog @CatalogId=1,@UserId=2,@CatalogName='test',@CopyAllData=1,@Status=1
	 rollback tran
*/
BEGIN
	BEGIN TRAN CopyPimCatalog;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @PimCatalogId int; -- hold the newly created pim catalog id 
		DECLARE @ZnodePimCategoryHierarchyTable AS TABLE (PimCategoryHierarchyId INT,PimCatalogId INT ,PimCategoryId INT)
		DECLARE @ParentPimCategoryHierarchyId INT;
		IF NOT EXISTS
		(
		SELECT TOP 1 1
		FROM ZnodePimCatalog
		WHERE CatalogName = @CatalogName
		)
		BEGIN
			INSERT INTO ZnodePimCatalog( CatalogName, IsActive, ExternalId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			SELECT @CatalogName, 1, NULL, @UserId, @GetDate, @UserId, @GetDate;
		END;
		SET @PimCatalogId = SCOPE_IDENTITY();
		IF @CopyAllData = 1 -- copy all data 

		BEGIN
		    -- here copy the category Hierarchy
			INSERT INTO ZnodePimCategoryHierarchy( PimCatalogId, ParentPimCategoryHierarchyId, PimCategoryId, DisplayOrder, IsActive, ActivationDate, ExpirationDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			OUTPUT INSERTED.PimCategoryHierarchyId, INSERTED.PimCatalogId,INSERTED.PimCategoryId
			INTO @ZnodePimCategoryHierarchyTable
			SELECT @PimCatalogId, ParentPimCategoryHierarchyId, PimCategoryId, DisplayOrder, IsActive, ActivationDate, ExpirationDate, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodePimCategoryHierarchy
			WHERE PimCatalogId = @CatalogId; 
			
			SELECT @ParentPimCategoryHierarchyId=PimCategoryHierarchyId FROM ZnodePimCategoryHierarchy
			WHERE PimCatalogId=@PimCatalogId and ParentPimCategoryHierarchyId IS NULL

			UPDATE pch
			SET pch.ParentPimCategoryHierarchyId=llpch.PimCategoryHierarchyId
			from ZnodePimCategoryHierarchy pch
			LEFT JOIN ZnodePimCategoryHierarchy lpch on lpch.PimCategoryHierarchyId=pch.ParentPimCategoryHierarchyId and lpch.PimCatalogId=@CatalogId
			LEFT JOIN ZnodePimCategoryHierarchy llpch on llpch.PimCategoryId=lpch.PimCategoryId AND ISNULL(llpch.ParentPimCategoryHierarchyId,0) =  ISNULL(lpch.ParentPimCategoryHierarchyId,0) and llpch.PimCatalogId=pch.PimCatalogId
			where pch.PimCatalogId=@PimCatalogId
			AND pch.ParentPimCategoryHierarchyId IS NOT NULL

			-- here copy the category products 
			INSERT INTO ZnodePimCatalogCategory( PimCatalogId, PimCategoryId, PimProductId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,PimCategoryHierarchyId )
			SELECT @PimCatalogId, cc.PimCategoryId, PimProductId, @UserId, @GetDate, @UserId, @GetDate,cct.PimCategoryHierarchyId
			FROM ZnodePimCatalogCategory cc 
			INNER JOIN @ZnodePimCategoryHierarchyTable cct on cct.PimCategoryId=cc.PimCategoryId and cct.PimCatalogId=@PimCatalogId
			WHERE cc.PimCatalogId = @CatalogId; 
		END;
		SELECT @PimCatalogId AS ID, CAST(CASE
										 WHEN @PimCatalogId IS NULL THEN 0
										 ELSE 1
										 END AS bit) AS [Status]; 
		SET @Status = 1;
	COMMIT TRAN CopyPimCatalog;
	END TRY
	BEGIN CATCH
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_CopyPimCatalog @CatalogId = '+CAST(@CatalogId AS varchar(100))+' ,@UserId='+CAST(@UserId AS varchar(100))+' ,@CatalogName= '+@CatalogName+',@CopyAllData='+CAST(@CopyAllData AS varchar(50))+',@Status='+CAST(@Status AS varchar(50));
		SELECT @CatalogId AS ID, CAST(0 AS bit) AS [Status];
		SET @Status = 0;
		ROLLBACK TRAN CopyPimCatalog;
		EXEC Znode_InsertProcedureErrorLog
			 @ProcedureName = 'Znode_CopyPimCatalog', 
			 @ErrorInProcedure = @Error_procedure,
			 @ErrorMessage = @ErrorMessage,
			 @ErrorLine = @ErrorLine, 
			 @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_CopyPortal')
	drop proc Znode_CopyPortal
go

CREATE PROCEDURE [dbo].[Znode_CopyPortal]
(
	  @PortalId int, 
	  @StoreName varchar(500),
	  @CompanyName varchar(500), 
	  @UserId int,
	  @StoreCode nvarchar(200),
	  @Status bit OUT)
AS
    /*
	
	Summary: Create copy of existing portal
	Copy all corresponding data into following list of tables Catalog,Profile,Units,Countries,Shipping,Locale,SMTP

	ZnodeTaxClass ZnodeTaxClassPortal;ZnodeTaxRuleTypes ZnodeCaseRequest,ZnodeUserPortal ZnodeDomain,AspNetZnodeUser ZnodePortalAccount,
	ZnodePortal ZnodePortalAddress,ZnodePortalCatalog ZnodePortalLocale,ZnodePortalFeatureMapper, ZnodeOmsUsersReferralUrl,ZnodePortalProfile ,ZnodePortalSetting
	ZnodePortalShippingDetails ZnodePortalSmtpSetting,ZnodePortalWarehouse ,ZnodeOmsCookieMapping,ZnodePortalUnit ,ZnodePromotion,
	ZnodePriceListPortal ,ZnodeActivityLog,ZnodeShippingPortal,ZnodeGiftCard ,ZnodeCMSContentPages,ZnodePortalDisplaySetting ,ZnodeCMSPortalMessage,
	ZnodeCMSPortalProductPage ,ZnodeCMSPortalSEOSetting ,ZnodeCMSPortalTheme
				
	Unit Testing   
    ------------------------------------------------------------------------------
           
	   begin tran
	   DECLARE @Status  bit 
       EXEC Znode_CopyPortal @PortalId =2 ,@StoreName  ='copy OF Maxwells FF' , @CompanyName = 'copy OF Maxwells FF' ,@UserId = 2,@Status = @Status OUT 
       rollback tran
	   select @Status
       SELECT * FROM dbo.ZnodePortal zp WHERE zp.CompanyName = 'copy OF Maxwells FF'
       SELECT * FROM ZnodePortalCatalog WHERE dbo.ZnodePortalCatalog.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')
       SELECT * FROM ZnodePortalProfile WHERE dbo.ZnodePortalProfile.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')
       SELECT * FROM ZnodePortalUnit WHERE dbo.ZnodePortalUnit.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')
       SELECT * FROM ZnodePortalCountry WHERE dbo.ZnodePortalCountry.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')
       SELECT * FROM ZnodePortalShippingDetails WHERE dbo.ZnodePortalShippingDetails.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')
       SELECT * FROM ZnodePortalLocale WHERE dbo.ZnodePortalLocale.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')
       SELECT * FROM ZnodePortalSmtpSetting WHERE dbo.ZnodePortalSmtpSetting.PortalId IN (SELECT portalid FROM dbo.ZnodePortal zp  WHERE zp.CompanyName = 'copy OF Maxwells FF')
      
    --------------------------------------------------------------------------- 
     */
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		-- hold the newly created pim catalog id 
		DECLARE @NewPortalId int; 
		--Check if store name is not already exist then process copy
		
		IF EXISTS ( SELECT TOP 1 1 FROM dbo.ZnodePortal AS zp WHERE PortalId = @PortalId ) AND @CompanyName <> '' AND @StoreName <> ''
		
		BEGIN
			INSERT INTO dbo.ZnodePortal(
			--PortalId - this column value is auto-generated
			CompanyName, StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,StoreCode)
			SELECT @CompanyName, @StoreName, LogoPath, UseSSL, AdminEmail, SalesEmail, CustomerServiceEmail, SalesPhoneNumber, CustomerServicePhoneNumber, ImageNotAvailablePath, ShowSwatchInCategory, ShowAlternateImageInCategory, ExternalID, MobileLogoPath, DefaultOrderStateID, DefaultReviewStatus, SplashCategoryID, SplashImageFile, MobileTheme,InStockMsg,OutOfStockMsg,BackOrderMsg, @UserId, @GetDate, @UserId, @GetDate ,@StoreCode
			FROM ZnodePortal
			WHERE PortalId = @PortalId;
			SET @NewPortalId = SCOPE_IDENTITY();
		END;

		-- copy all data if New portalId will generate
		IF @NewPortalId > -0 
		BEGIN
			INSERT INTO dbo.ZnodePortalCatalog(
			--PortalCatalogId - this column value is auto-generated
			PortalId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodePortalCatalog
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodePortalProfile(
			--PortalProfileID - this column value is auto-generated
			PortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, ProfileId, IsDefaultAnonymousProfile, IsDefaultRegistedProfile, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodePortalProfile
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodePortalUnit(
			--PortalUnitId - this column value is auto-generated
			PortalId, CurrencyId, WeightUnit, DimensionUnit, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, CurrencyId, WeightUnit, DimensionUnit, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodePortalUnit
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodePortalCountry(
			--PortalCountryId - this column value is auto-generated
			PortalId, CountryCode, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, CountryCode, IsDefault, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodePortalCountry
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodeShippingPortal(
			--ShippingPortalId - this column value is auto-generated
			PortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, ShippingOriginAddress1, ShippingOriginAddress2, ShippingOriginCity, ShippingOriginStateCode, ShippingOriginZipCode, ShippingOriginCountryCode, ShippingOriginPhone, FedExAccountNumber, FedExLTLAccountNumber, FedExMeterNumber, FedExProductionKey, FedExSecurityCode, FedExDropoffType, FedExPackagingType, FedExUseDiscountRate, FedExAddInsurance, UPSUserName, UPSPassword, UPSKey, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodeShippingPortal
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodePortalLocale(
			--PortalLocaleId - this column value is auto-generated
			PortalId, LocaleId, IsDefault, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, LocaleId, IsDefault, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodePortalLocale
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodePortalSmtpSetting(
			--PortalSmtpSettingId - this column value is auto-generated
			PortalId, ServerName, UserName, Password, Port, IsEnableSsl, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,DisableAllEmails )
				   SELECT @NewPortalId, ServerName, UserName, Password, Port, IsEnableSsl, @UserId, @GetDate, @UserId, @GetDate,DisableAllEmails
				   FROM ZnodePortalSmtpSetting
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodePortalDisplaySetting(
			--PortalDisplaySettingsId - this column value is auto-generated
			PortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, MediaId, MaxDisplayItems, MaxSmallThumbnailWidth, MaxSmallWidth, MaxMediumWidth, MaxThumbnailWidth, MaxLargeWidth, MaxCrossSellWidth, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodePortalDisplaySetting
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodeCMSPortalTheme(
			--CMSPortalThemeId - this column value is auto-generated
			PortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, CMSThemeId, CMSThemeCSSId, MediaId, WebsiteTitle, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodeCMSPortalTheme
				   WHERE PortalId = @PortalId;
			INSERT INTO dbo.ZnodePortalFeatureMapper(
			--PortalFeatureMapperId - this column value is auto-generated
			PortalId, PortalFeatureId, PortalFeatureMapperValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @NewPortalId, PortalFeatureId, PortalFeatureMapperValue, @UserId, @GetDate, @UserId, @GetDate
				   FROM ZnodePortalFeatureMapper
				   WHERE PortalId = @PortalId;
			
		    EXEC Znode_CopyPortalMessageAndContentPages @PortalId,@NewPortalId,@userId,0
		    
			EXEC Znode_CopyPortalEmailTemplate @NewPortalId,@PortalId,@userId
			-- If copy process will complete successfully then return status 1 
			-- return the data set if 
			SELECT @PortalId AS ID, CAST(1 AS bit) AS [Status]; 
			SET @Status = CAST(1 AS bit);
			COMMIT TRAN A;
		END;
		ELSE
		BEGIN
			-- If copy process will not complete successfully then return status 0 
			SELECT @PortalId AS ID, CAST(0 AS bit) AS [Status];
			SET @Status = CAST(0 AS bit);
			ROLLBACK TRAN A;
		END;
	END TRY
	BEGIN CATCH 
		 
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CopyPortal @PortalId = '+CAST(@PortalId AS VARCHAR(200))+',@StoreName='+@StoreName+',@CompanyName='+@CompanyName+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_CopyPortal',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO



IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeleteGlobalAttribute')
	drop proc Znode_DeleteGlobalAttribute
go

-- EXEC Znode_DeleteGlobalAttribute 256 ,1 

CREATE PROCEDURE [dbo].[Znode_DeleteGlobalAttribute](
       @GlobalAttributeId VARCHAR(300) = NULL ,
       @Status         INT OUT)
AS 
    -----------------------------------------------------------------------------
    --Summary:  Remove GlobalAttribute still in used 
    --		   	
    --          
    --Unit Testing   
	--Begin Transaction 
		--DECLARE @Status INT  EXEC Znode_DeleteGlobalAttribute @GlobalAttributeId = '59,60,61,62' ,@Status=@Status OUT  SELECT @Status
		--select * from ZnodeGlobalAttributeValue where GlobalAttributeId in (59,60,61,62)
		--select * from ZnodeGlobalAttribute where AttributeCode in ( 'SpecValue','TempSettings','UPCcode', 'ratest') 	
	--Rollback Transaction 
    ----------------------------------------------------------------------------- 


     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             BEGIN TRAN A;
             DECLARE @DeletdAttributeId TABLE (
                                              GlobalAttributeId INT
                                              );
             INSERT INTO @DeletdAttributeId
                    SELECT Item
                    FROM dbo.split ( @GlobalAttributeId , ','
                                   ) AS a 
					INNER JOIN ZnodeGlobalAttribute AS B ON ( a.item = b.GlobalAttributeId )
					Where not exists(  Select 1 
					from ZnodeGlobalAttributeGroupMapper dd
					where dd.GlobalAttributeId =b.GlobalAttributeId)
             
			
			DELETE FROM ZnodeFormBuilderGlobalAttributeValueLocale
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
							inner join ZnodeFormBuilderGlobalAttributeValue FBAV on sd.GlobalAttributeId = FBAV.GlobalAttributeId
                            WHERE FBAV.FormBuilderGlobalAttributeValueId = ZnodeFormBuilderGlobalAttributeValueLocale.FormBuilderGlobalAttributeValueId
                          );

			DELETE FROM ZnodeFormBuilderGlobalAttributeValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeFormBuilderGlobalAttributeValue.GlobalAttributeId
                          );			

			DELETE FROM ZnodeAccountGlobalAttributeValueLocale
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
							inner join ZnodeAccountGlobalAttributeValue AGAV on sd.GlobalAttributeId = AGAV.GlobalAttributeId
                            WHERE AGAV.AccountGlobalAttributeValueId = ZnodeAccountGlobalAttributeValueLocale.AccountGlobalAttributeValueId
                          );

			DELETE FROM ZnodeAccountGlobalAttributeValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeAccountGlobalAttributeValue.GlobalAttributeId
                          );
			
			DELETE FROM ZnodeUserGlobalAttributeValueLocale
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
							inner join ZnodeUserGlobalAttributeValue UGAV on sd.GlobalAttributeId = UGAV.GlobalAttributeId
                            WHERE UGAV.UserGlobalAttributeValueId = ZnodeUserGlobalAttributeValueLocale.UserGlobalAttributeValueId
                          );

			DELETE FROM ZnodeUserGlobalAttributeValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeUserGlobalAttributeValue.GlobalAttributeId
                          );
			

			DELETE FROM ZnodePortalGlobalAttributeValueLocale
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
							inner join ZnodePortalGlobalAttributeValue PGAV on sd.GlobalAttributeId = PGAV.GlobalAttributeId
                            WHERE PGAV.PortalGlobalAttributeValueId = ZnodePortalGlobalAttributeValueLocale.PortalGlobalAttributeValueId
                          );

			DELETE FROM ZnodePortalGlobalAttributeValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodePortalGlobalAttributeValue.GlobalAttributeId
                          );
			
			DELETE FROM ZnodeGlobalAttributeGroupMapper
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeGroupMapper.GlobalAttributeId
                          );

             DELETE FROM ZnodeGlobalAttributeLocale
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeLocale.GlobalAttributeId
                          );
             DELETE FROM ZnodeGlobalAttributeValidation
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeValidation.GlobalAttributeId
                          );

			 DELETE FROM ZnodeGlobalAttributeValueLocale 
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd Inner join ZnodeGlobalAttributeValue AS zpav ON sd.GlobalAttributeId=zpav.GlobalAttributeId
                            WHERE zpav.GlobalAttributeValueId = ZnodeGlobalAttributeValueLocale.GlobalAttributeValueId);

             DELETE FROM ZnodeGlobalAttributeValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeValue.GlobalAttributeId
                          );
			 DELETE FROM ZnodeGlobalAttributeDefaultValueLocale
             WHERE EXISTS ( SELECT 1
                            FROM ZnodeGlobalAttributeDefaultValue
                            WHERE EXISTS ( SELECT 1
                                           FROM @DeletdAttributeId AS sd
                                           WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeDefaultValue.GlobalAttributeId
                                         )
                                  AND
                                  ZnodeGlobalAttributeDefaultValueLocale.GlobalAttributeDefaultValueId = ZnodeGlobalAttributeDefaultValue.GlobalAttributeDefaultValueId
                          );
           
			 DELETE FROM ZnodeGlobalAttributeDefaultValue
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttributeDefaultValue.GlobalAttributeId
                          );
						  
             DELETE FROM ZnodeGlobalAttribute
             WHERE EXISTS ( SELECT 1
                            FROM @DeletdAttributeId AS sd
                            WHERE sd.GlobalAttributeId = ZnodeGlobalAttribute.GlobalAttributeId
                          );
             IF ( SELECT COUNT(1)
                  FROM @DeletdAttributeId
                ) = ( SELECT COUNT(1)
                      FROM dbo.split ( @GlobalAttributeId , ','
                                     ) AS a
                    )
                 BEGIN
                     SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
             SELECT ERROR_MESSAGE() , ERROR_LINE() , ERROR_PROCEDURE();
             SET @Status = 0;
             ROLLBACK TRAN A;
         END CATCH;
     END;
GO

IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeletePimCategory')
	drop proc Znode_DeletePimCategory
go
CREATE PROCEDURE [dbo].[Znode_DeletePimCategory](
       @PimCategoryIds VARCHAR(500) ,
       @Status         BIT OUT)
AS
/*
Summary: This Procedure is used to delete PimCategory with their reference details from respective tables
Unit Testing:
	Declare @status bit 
	EXEC [Znode_DeletePimCategory]  16,@status =@status 
	Select @status 
 Alter table ZnodePublishCategory Drop Constraint FK_ZnodePublishCategory_ZnodePimCategory
*/
     BEGIN
         BEGIN TRAN;
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @CategoryIds TABLE (
                                        PimCategoryId INT
                                        );
             INSERT INTO @CategoryIds
                    SELECT item
                    FROM dbo.Split ( @PimCategoryIds , ','
                                   );
             DECLARE @V_CategorryCount INT;
             DECLARE @DeletePimCategoryId TABLE (
                                                PimCategoryId               INT ,
                                                PimCategoryAttributeValueId INT
                                                );
             INSERT INTO @DeletePimCategoryId
                    SELECT a.PimCategoryId , c.PimCategoryAttributeValueId
                    FROM [dbo].ZnodePimCategory AS a 
                                                     INNER JOIN @CategoryIds AS b ON ( a.PimCategoryId = b.PimCategoryId )
										   LEFT OUTER JOIN ZnodePimCategoryAttributeValue AS c ON ( a.PimCategoryId = c.PimCategoryId )
                  --  WHERE 
				
				--NOT EXISTS ( SELECT TOP 1 1
    --                                   FROM ZnodePimCatalogCategory AS q
    --                                   WHERE q.PimCategoryId = a.PimCategoryId
    --                                 )
    --                      AND
                          --NOT EXISTS ( SELECT TOP 1 1
                          --             FROM ZnodePimCategoryHierarchy AS qq
                          --             WHERE qq.PimCategoryId = a.PimCategoryId
                          --           );
             SELECT @V_CategorryCount = COUNT(1)
             FROM ( SELECT PimCategoryId
                    FROM @DeletePimCategoryId
                    GROUP BY PimCategoryId
                  ) AS a;
	      		  
		   ----Category Hierarchy Delete
		  Declare @PimCategoryHierarchyId int, @PimCatalogId int

		  Declare Cur_Category_Hierarchy_Delete Cursor For 
		  SELECT PimCategoryHierarchyId,PimCatalogId  
		  FROM ZnodePimCategoryHierarchy WHERE EXISTS (SELECT TOP 1 1 FROM @DeletePimCategoryId DPCI  where DPCI.PimCategoryId = ZnodePimCategoryHierarchy.PimCategoryId )

		  OPEN Cur_Category_Hierarchy_Delete  
		  FETCH NEXT FROM Cur_Category_Hierarchy_Delete INTO @PimCategoryHierarchyId, @PimCatalogId 

		  WHILE (@@FETCH_STATUS = 0)
		  BEGIN

				EXEC [dbo].[Znode_DeletePimCategoryHierarchy] @PimCategoryHierarchyId = @PimCategoryHierarchyId, @PimCatalogId = @PimCatalogId

				FETCH NEXT FROM Cur_Category_Hierarchy_Delete INTO @PimCategoryHierarchyId, @PimCatalogId 

		  END
		  CLOSE Cur_Category_Hierarchy_Delete
		  DEALLOCATE Cur_Category_Hierarchy_Delete


		   DELETE FROM ZnodeProfileCatalogCategory WHERE EXISTS (SELECT TOP 1 1 FROM @DeletePimCategoryId DPCI INNER JOIN 
		   ZnodePimCatalogCategory ZPCC ON DPCI.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogCategoryId = ZnodeProfileCatalogCategory.PimCatalogCategoryId)

		   DELETE FROM ZnodePimCatalogCategory WHERE EXISTS (SELECT TOP 1 1 FROM @DeletePimCategoryId DPCI  where DPCI.PimCategoryId = ZnodePimCatalogCategory.PimCategoryId )
		   
		   DELETE FROM ZnodeProfileCategoryHierarchy WHERE EXISTS (SELECT TOP 1 1 FROM @DeletePimCategoryId DPCI INNER JOIN 
		   ZnodePimCategoryHierarchy ZPCC ON DPCI.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCategoryHierarchyId = ZnodeProfileCategoryHierarchy.PimCategoryHierarchyId)

		   DELETE FROM ZnodePimCategoryHierarchy WHERE EXISTS (SELECT TOP 1 1 FROM @DeletePimCategoryId DPCI  where DPCI.PimCategoryId = ZnodePimCategoryHierarchy.PimCategoryId )
		
             DELETE FROM ZnodePimCategoryAttributeValueLocale
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @DeletePimCategoryId AS b
                            WHERE b.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValueLocale.PimCategoryAttributeValueId
                          );
             DELETE FROM ZnodePimCategoryAttributeValue
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @DeletePimCategoryId AS b
                            WHERE b.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValue.PimCategoryAttributeValueId
                          );
             DELETE FROM ZnodePimCategoryProduct
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @DeletePimCategoryId AS b
                            WHERE b.PimCategoryId = ZnodePimCategoryProduct.PimCategoryId
                          );

             DELETE FROM ZnodePimCategory
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @DeletePimCategoryId AS b
                            WHERE b.PimCategoryId = ZnodePimCategory.PimCategoryId
                          );

             SET @Status = 1;
             IF ( SELECT COUNT(1)
                  FROM @CategoryIds
                ) = @V_CategorryCount
                 BEGIN
                     SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
                 END;
             COMMIT TRAN;
         END TRY
         BEGIN CATCH
                        
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePimCategory @PimCategoryIds = '+@PimCategoryIds+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status,ERROR_MESSAGE();                    
		     ROLLBACK TRAN;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePimCategory',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO



IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeletePortalAddress')
	drop proc Znode_DeletePortalAddress
go

CREATE PROCEDURE [dbo].[Znode_DeletePortalAddress](
       @PortalAddressId VARCHAR(300) = '' ,
	   @StoreLocationCode VARCHAR (300) = '',
       @Status          INT OUT)
AS 
    /*
     Summary : Remove portal address with their mapping in table ZNodePortalAddress and finally delete from table ZnodeAddress 
     Sequence For Delete Data  
     Validation :  AddressId is only associated with ZNodePortalAddress will not associated with other data 
     1. ZNodePortalAddress          
     2. ZnodeAddress	
    Unit Testing
	begin tran	 
    Declare @Status int 
    Exec Znode_DeletePortalAddress @StoreLocationCode = 'test'  , @Status=@Status
   rollback tran
    Exec Znode_DeletePortalAddress @PortalAddressId = 10  , @Status=@Status
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             BEGIN TRAN A;
             DECLARE @DeletedPortalAddressId TABLE (PortalAddressId INT );

             --INSERT INTO @DeletedPortalAddressId
             --       SELECT Item
             --       FROM dbo.split ( @PortalAddressId , ','
             --                      ) AS a;


			 INSERT INTO @DeletedPortalAddressId
					SELECT PortalAddressId FROM ZNodePortalAddress PA
					WHERE CASE WHEN @StoreLocationCode = '' THEN CAST(PortalAddressId AS NVARCHAR(2000)) ELSE StoreLocationCode END IN 
										(SELECT Item FROM dbo.Split (CASE WHEN @StoreLocationCode = '' THEN @PortalAddressId ELSE @StoreLocationCode END, ',' ) AS SP)



             DECLARE @DeletedAddressId TABLE (
                                             AddressId INT
                                             );


             INSERT INTO @DeletedAddressId
                    SELECT AddressID
                    FROM ZNodePortalAddress AS ZPA INNER JOIN @DeletedPortalAddressId AS DPA ON ZPA.PortalAddressId = DPA.PortalAddressId;


             DELETE FROM ZNodePortalAddress
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @DeletedPortalAddressId AS DPA
                            WHERE DPA.PortalAddressId = ZNodePortalAddress.PortalAddressId
                          );
             DELETE FROM ZnodeAddress
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @DeletedAddressId AS DA
                            WHERE DA.AddressId = ZnodeAddress.AddressId
                          );
             IF ( SELECT COUNT(1) FROM @DeletedAddressId) = ( SELECT COUNT(1) FROM dbo.split ( CASE WHEN @StoreLocationCode = '' THEN @PortalAddressId ELSE @StoreLocationCode END, ',' ))

                 BEGIN
                     SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePortalAddress @PortalAddressId = '+@PortalAddressId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePortalAddress',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeletePortalByPortalId')
	drop proc Znode_DeletePortalByPortalId
go

CREATE PROCEDURE [dbo].[Znode_DeletePortalByPortalId]
(
	 @PortalId	varchar(2000) = '' ,
	 @StoreCode varchar(2000) = '',
	 @Status	bit OUT
)
AS
	/*
	 Summary : This Procedure Is Used to delete the all records of portal if order is not place against portal  
	 --Unit Testing   
	 BEGIN TRANSACTION 
	 DECLARE @Status    BIT = 0
	 EXEC Znode_DeletePortalByPortalId @PortalId = '1,7,8', @Status   = @Status   OUT
	 SELECT @Status   
	 ROLLBACK TRANSACTION

	*/
BEGIN
	BEGIN TRAN DeletePortalByPortalId;
	BEGIN TRY
		SET NOCOUNT ON;

		--SET @PortalId = (SELECT PortalId FROM ZnodePortal ZP  )

		DECLARE @TBL_PortalIds TABLE
		( 
								 PortalId int
		);
		DECLARE @TBL_Promotion TABLE
		( 
								 PromotionId int
		);
		DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		DECLARE @DeletedIds varchar(max)= '';
		-- inserting PortalIds which are not present in Order and Quote

		
		INSERT INTO @TBL_PortalIds 
		SELECT PortalId FROM ZnodePortal ZP
		WHERE CASE WHEN @StoreCode = '' THEN CAST(PortalId AS NVARCHAR(2000)) ELSE StoreCode END IN (

		SELECT Item FROM dbo.Split( CASE WHEN @StoreCode = '' THEN @PortalId ELSE @StoreCode END, ',' ) AS SP ) 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeOmsOrderDetails AS ZOD WHERE ZOD.PortalId = ZP.PortalId) 
		--AND  NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsQuote AS ZOQ WHERE ZOQ.PortalId = ZP.PortalId );

		
		--END
		--select * from @TBL_PortalIds

		DELETE ZOH
		FROM ZnodeOmsQuotePersonalizeItem ZOH
		INNER JOIN ZnodeOmsQuoteLineItem ZOM ON ZOH.OmsQuoteLineItemId = ZOM.OmsQuoteLineItemId
		WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZOM.OmsQuoteId )

		DELETE ZOH
		FROM ZnodeOmsHistory ZOH
		INNER JOIN ZnodeOmsNotes ZOM ON ZOH.OmsNotesId = ZOM.OmsNotesId
		WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZOM.OmsQuoteId )

		DELETE FROM ZnodeOmsQuoteLineItem WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZnodeOmsQuoteLineItem.OmsQuoteId )

		DELETE FROM ZnodeOmsNotes WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZnodeOmsNotes.OmsQuoteId )

		DELETE FROM ZnodeOmsQuote WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsQuote.PortalId);

	     DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
	     DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		--DELETE FROM ZnodeTaxRule WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRule.PortalId);
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		DELETE FROM ZnodeFormWidgetEmailConfiguration WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeFormWidgetEmailConfiguration.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		
		 DELETE FROM ZnodeCaseRequestHistory WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
			WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeCaseRequestHistory.CaseRequestId )

		 DELETE FROM ZnodeNote WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
			WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeNote.CaseRequestId )
		
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		DELETE FROM ZnodePortalDisplaySetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalDisplaySetting.PortalId);
		DELETE FROM ZnodeUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGiftCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGiftCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);

		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);

		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);

		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId);

		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);

		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);
		   
		/* Remove Search index */
		--DELETE FROM ZnodeSearchIndexServerStatus WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId
		--		 INNER JOIN ZnodeSearchIndexMonitor AS zsim ON zpi.PortalIndexId = zsim.PortalIndexId WHERE zsim.SearchIndexMonitorId = ZnodeSearchIndexServerStatus.SearchIndexMonitorId);
		--DELETE FROM ZnodeSearchIndexMonitor WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId WHERE zpi.PortalIndexId = ZnodeSearchIndexMonitor.PortalIndexId );
		--DELETE FROM ZnodePortalIndex WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalIndex.PortalId);
		/* Remove Search index */
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);

		INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);

		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);

		
		DELETE FROM ZnodeBlogNewsLocale where exists (select top 1 1 from ZnodeBlogNews ZBN
													where EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )



		DELETE FROM ZnodeBlogNewsCommentLocale where exists (select top 1 1 from ZnodeBlogNewsComment ZBC
													where exists (select top 1 1 from ZnodeBlogNews ZBN
														where exists (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
													



		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )



		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)

		DELETE ZFBGAVL
		FROM ZnodeFormBuilderGlobalAttributeValueLocale ZFBGAVL
		INNER JOIN ZnodeFormBuilderGlobalAttributeValue ZFBGAV ON ZFBGAVL.FormBuilderGlobalAttributeValueId = ZFBGAV.FormBuilderGlobalAttributeValueId
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeFormBuilderSubmit ZFBS
														WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZFBS.PortalId) AND ZFBS.FormBuilderSubmitId = ZFBGAV.FormBuilderSubmitId )


		DELETE FROM ZnodeFormBuilderGlobalAttributeValue WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeFormBuilderSubmit ZFBS
														WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZFBS.PortalId) AND ZFBS.FormBuilderSubmitId = ZnodeFormBuilderGlobalAttributeValue.FormBuilderSubmitId )

	DELETE FROM ZnodeFormBuilderSubmit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeFormBuilderSubmit.PortalId)

		DELETE FROM ZnodeCaseRequestHistory WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeCaseRequestHistory.CaseRequestId )

		DELETE FROM ZnodeNote WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeNote.CaseRequestId )


		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);
		
		
		IF (SELECT Count(1) FROM @TBL_PortalIds) = (SELECT Count(1) FROM dbo.Split( CASE WHEN @StoreCode = '' THEN @PortalId ELSE @StoreCode END, ',' ) )
		 	
		BEGIN 
		SELECT 1 AS ID, CAST(1 AS bit) AS Status;
		SET @Status = 1;
		END 
		ELSE 
		BEGIN 
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		SET @Status = 0;
		END 
		

		COMMIT TRAN DeletePortalByPortalId;
	END TRY
	BEGIN CATCH
		 
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePortalByPortalId @PortalId = '+ISNULL(@PortalId,'''''')+',@StoreCode = '+ISNULL(@StoreCode,'''''')+',@Status='+ISNULL(CAST(@Status AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    -- ROLLBACK TRAN DeletePortalByPortalId;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePortalByPortalId',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
go
IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeletePublishCatalog')
	drop proc Znode_DeletePublishCatalog
go
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalog]
(   @PublishCatalogIds  VARCHAR(1000),
	@PublishCategoryIds VARCHAR(1000) = NULL,
	@PublishProductIds  VARCHAR(1000) = NULL,
	@IsDeleteCatalogId  BIT           = 0)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
             DECLARE @TBL_DeletedCatalog TABLE(PublishCatalogId INT);
             DECLARE @TBL_DeletedCategory TABLE([PublishCategoryId] INT);
             DECLARE @TBL_DeleteProduct TABLE([PublishProductId] INT);
             INSERT INTO @TBL_DeletedCatalog
                    SELECT [item]
                    FROM [dbo].[Split](@PublishCatalogIds, ',');

             INSERT INTO @TBL_DeletedCategory
                    SELECT PublishCategoryId
                    FROM ZnodePublishCategory AS PC
                    WHERE( EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishCategoryIds, ',') AS m
                             WHERE m.Item = PC.PublishCategoryId
                         ));

             INSERT INTO @TBL_DeleteProduct
                    SELECT [PublishProductId]
                    FROM [ZNodePublishProduct] AS adf
                    WHERE(EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishProductIds, ',') AS de
                             WHERE de.[Item] = adf.[PublishProductId]
                         )
                   );
             DELETE FROM [ZnodeCMSWidgetCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             );
         
             DELETE FROM [ZnodeCMSWidgetProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             );
             DELETE FROM [ZnodeCMSCustomerReview]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             );
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEODetail]
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteProduct AS qw
                     WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
                 )
                       AND EXISTS
                 (
                     SELECT TOP 1 1
                     FROM [ZnodeCMSSEOType] AS we
                     WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                           AND [Name] = 'Product'
                 )
                       AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM [ZnodeCMSSEODetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             )
                   AND EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEOType] AS we
                 WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                       AND [Name] = 'Product'
             );
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
			 DELETE FROM ZnodePublishCategoryProduct 
			 WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1

			 DELETE FROM ZnodePublishProductDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishProductDetail.PublishProductId = ZnodePublishProduct.PublishProductId  )
             DELETE FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishCategoryDetail.PublishCategoryId = ZnodePublishCategory.PublishCategoryId)
             DELETE FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishedXml WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCataLogLog 
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishedXml.PublishCatalogLogId = ZnodePublishCataLogLog.PublishCatalogLogId  )

			 DELETE FROM ZnodePublishCataLogLog WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1;

			 DELETE FROM znodeSearchIndexServerStatus 
					WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchIndexMonitor a WHERE EXISTS 
					(SELECT TOP 1 1 FROM ZnodeCatalogIndex b WHERE b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = a.catalogindexid) AND a.SearchIndexMonitorid = znodeSearchIndexServerStatus.SearchIndexMonitorid )

			 DELETE FROM ZnodeSearchIndexMonitor
					WHERE EXISTS (SELECT TOP 1 1  FROM ZnodeCatalogIndex b where b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = ZnodeSearchIndexMonitor.catalogindexid)


			 DELETE FROM ZnodeCatalogIndex
			 WHERE publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1

			
             DELETE FROM ZnodePublishCatalog
             WHERE [PublishCatalogId] = @PublishCatalogIds
                   AND @PublishCategoryIds IS NULL
                   AND @PublishProductIds IS NULL
                   AND @IsDeleteCatalogId = 1;
				  
				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		     
			  DECLARE @Status BIT ;
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			  @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePublishCatalog @PublishCatalogIds = '''+ISNULL(@PublishCatalogIds,'''')+''',@PublishCategoryIds='''+ISNULL(@PublishCategoryIds,'''')+''',@PublishProductIds='''+ISNULL(@PublishProductIds,'''')+''',@IsDeleteCatalogId='+ISNULL(CAST(@IsDeleteCatalogId AS VARCHAR(200)),'''')+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeletePublishCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO



IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeletePublishCatalogProduct')
	drop proc Znode_DeletePublishCatalogProduct
go
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogProduct]
(   
   	@PublishProductIds	Transferid READONLY 
	,@PublishCatalogId   INT = 0 
	,@PimCategoryHierarchyId int = 0 
	,@PimCatalogId int = 0 
	
)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
	         DECLARE @TBL_DeleteIds TABLE (PublishCatalogId INT ,PublishCategoryId INT ,PublishProductId INT )  
			 DECLARE @TBL_DeleteCategoryProduct TABLE (PublishCategoryProductId INT )			 
			 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int )
			 
		
			If @PimCategoryHierarchyId <> 0 AND @PimCatalogId <>  0 
			Begin
				INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 AND ZPPC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )
				 
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 


				 AND a.PublishCatalogId = @PublishCatalogId
			END 
			Else 
			Begin
				 INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where a.PublishProductId = PX.PublishedId )
				 AND a.PublishCatalogId = @PublishCatalogId
			 END 
					
						
		     UPDATE 	TBL 
			 SET PublishCategoryId = NULL 
			 FROM @TBL_DeleteIds TBL 
			 WHERE  EXISTS  (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct ZPCC 
			 WHERE  TBL.PublishCatalogId = ZPCC.PublishCatalogId AND ZPCC.PublishCategoryId = TBL.PublishCategoryId   AND TBL.PublishProductId <> ZPCC.PublishProductId ) 			 

			 DELETE FROM [ZnodeCMSWidgetCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             )
			
			 ;
         
             DELETE FROM [ZnodeCMSWidgetProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             );
             DELETE FROM [ZnodeCMSCustomerReview]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             );
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEODetail]
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteIds AS qw
                     WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
                 )
                       AND EXISTS
                 (
                     SELECT TOP 1 1
                     FROM [ZnodeCMSSEOType] AS we
                     WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                           AND [Name] = 'Product'
                 )
                       AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM [ZnodeCMSSEODetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             )
                   AND EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEOType] AS we
                 WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                       AND [Name] = 'Product'
             );
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             )
			 OR 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCategoryProduct AS qw
                 WHERE qw.PublishCategoryProductId = [ZnodePublishCategoryProduct].PublishCategoryProductId
             )
			 ;
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
			  DELETE FROM dbo.ZnodeSearchGlobalProductBoost WHERE 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = ZnodeSearchGlobalProductBoost.[PublishProductId]
              );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
		
			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategoryDetail.[PublishCategoryId]
              );
			
			DELETE FROM ZnodeSearchGlobalProductCategoryBoost 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodeSearchGlobalProductCategoryBoost.[PublishCategoryId]
             
			 );
			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategory.[PublishCategoryId]
             
			 );

			 			 				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		      SELECT ERROR_MESSAGE() 
			 
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeleteShipping')
	drop proc Znode_DeleteShipping
go

CREATE PROCEDURE [dbo].[Znode_DeleteShipping]
(   @ShippingId VARCHAR(300),
    @Status     INT OUT)
AS
/*
Summary: This Procedure is used to delete shipping details
Unit Testing
begin tran
  EXEC [dbo].[Znode_DeleteShipping] '17',0
 rollback tran
 */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             BEGIN TRAN A;
             DECLARE @DeletdAttributeId TABLE(ShippingId INT);
             INSERT INTO @DeletdAttributeId
                    SELECT Item
                    FROM dbo.split(@ShippingId, ',') AS a
					WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsOrderDetails asa WHERE asa.ShippingId = a.Item )
					AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeShipping s WHERE s.ShippingId = a.Item  AND s.ShippingCode = 'FreeShipping')
					;

					
             DELETE FROM ZnodeShippingSKU
             WHERE ShippingRuleId IN
             (
                 SELECT ShippingRuleId
                 FROM ZNodeShippingRule
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @DeletdAttributeId AS a
                     WHERE a.ShippingId = ZNodeShippingRule.ShippingId
                 )
             );
             DELETE FROM ZNodeShippingRule
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdAttributeId AS a
                 WHERE a.ShippingId = ZNodeShippingRule.ShippingId
             );

             DELETE FROM ZnodeShipping
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @DeletdAttributeId AS a
                 WHERE a.ShippingId = ZnodeShipping.ShippingId
             );
            
			 IF
             (
                 SELECT COUNT(1)
                 FROM @DeletdAttributeId
             ) =
             (
                 SELECT COUNT(1)
                 FROM dbo.split(@ShippingId, ',') AS a
             )
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS Status;
							SET @Status = 1;

                 END;
			 ELSE IF EXISTS (SELECT Item
                    FROM dbo.split(@ShippingId, ',') AS a WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeShipping s WHERE s.ShippingId = a.Item  AND s.ShippingCode = 'FreeShipping'))
				 BEGIN
				 
				 SELECT 2 AS ID,
                            CAST(0 AS BIT)  AS Status;
							SET @Status = 0;

				 END

             ELSE 
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS Status;
							SET @Status = 0;
                 END;
             
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteShipping @ShippingId = '+@ShippingId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteShipping',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_DeleteUserDetails')
	drop proc Znode_DeleteUserDetails
go
CREATE PROCEDURE [dbo].[Znode_DeleteUserDetails]
(
       @UserId VARCHAR(2000) = NULL ,
       @Status INT OUT
)
AS
/*
Summary: This Procedure Is used to delete user details
Unit Testing:
EXEC Znode_DeleteUserDetails 

*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             BEGIN TRAN A;
             DECLARE @V_table TABLE (
                                    USERID1 NVARCHAR(200)
                                    );
             DECLARE @V_tabledeleted TABLE (
                                           UserId1      INT ,
                                           AspnetUserid NVARCHAR(1000)
                                           );
             DECLARE @TBL_DeleteduserName TABLE (
                                                id NVARCHAR(MAX)
                                                );
             INSERT INTO @V_tabledeleted
                    SELECT ITEM , b.AspNetUserId
                    FROM dbo.split ( @UserId , ','
                                   ) AS a INNER JOIN ZnodeUser AS b ON ( a.Item = b.UserId )
								   where not Exists (select top 1 1 from ZnodeOmsOrderDetails zood where zood.UserId= b.UserId);
             DELETE FROM ZnodeUserProfile
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUserProfile.UserId
                          );
             DELETE FROM ZnodeUserAddress
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUserAddress.UserId
                          ); 

             DELETE FROM ZnodeAccountUserOrderApproval
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeAccountUserOrderApproval.UserId
                          );
             DELETE FROM AspNetUserRoles
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.aspNetUserId = AspNetUserRoles.UserId
                          );
             DELETE FROM ZnodeDepartmentUser
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeDepartmentUser.UserId
                          );
             DELETE FROM dbo.ZnodeAccountUserPermission
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeAccountUserPermission.UserId
                          );
             DELETE FROM ZnodeUserPortal
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUserPortal.UserId
                          );
             DELETE FROM ZnodeAccountUserOrderApproval
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeAccountUserOrderApproval.UserId
                                  OR
                                  TBDL.UserId1 = ZnodeAccountUserOrderApproval.ApprovalUserId
                          );
			 DELETE FROM ZnodeOmsUsersReferralUrl 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsUsersReferralUrl.UserId
                           );
			 DELETE FROM ZnodeOmsReferralCommission 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsReferralCommission.UserId      
                          );
			DELETE FROM ZnodeUserWishList 
			WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeUserWishList.UserId      
                          );
			 
			 DELETE FROM ZnodeUserPromotion 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeUserPromotion.UserId      
                          );

			 DELETE FROM AspNetUserClaims 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = AspNetUserClaims.UserId      
                          ); 
			 DELETE FROM ZnodeNote 
			 WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeNote.UserId      
                          ); 
			 DELETE FROM ZnodeOmsQuote 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeOmsQuote.UserId      
                          ); 
			 DELETE FROM ZnodeAccountUserPermission 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeAccountUserPermission.UserId      
                          ); 
			  DELETE FROM ZnodePriceListUser 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodePriceListUser.UserId      
                          ); 
			  DELETE FROM ZnodeMediaFolderUser 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeMediaFolderUser.UserId      
                          ); 
			  DELETE FROM ZnodeAccountUserOrderApproval 
			  WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS TBDL
                            WHERE TBDL.UserId1 = ZnodeAccountUserOrderApproval.UserId      
                          ); 

			  DELETE FROM ZnodeOmsSavedCartLineItem 
			 WHERE OmsSavedCartId IN (SELECT OmsSavedCartId FROM ZnodeOmsSavedCart
			  WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeOmsCookieMapping CM WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted AS TBDL WHERE TBDL.UserId1 = CM.UserId) AND CM.OmsCookieMappingId = ZnodeOmsSavedCart.OmsCookieMappingId ))

			  DELETE FROM ZnodeOmsSavedCart
			  WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeOmsCookieMapping CM WHERE EXISTS (SELECT TOP 1 1 FROM @V_tabledeleted AS TBDL WHERE TBDL.UserId1 = CM.UserId) AND CM.OmsCookieMappingId = ZnodeOmsSavedCart.OmsCookieMappingId )

			  DELETE FROM ZnodeOmsCookieMapping
			  WHERE EXISTS (SELECT TOP  1 1 FROM @V_tabledeleted AS TBDL WHERE TBDL.UserId1 = ZnodeOmsCookieMapping.UserId)


             DELETE FROM ZnodeUser
             OUTPUT deleted.UserId
                    INTO @V_table
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.UserId1 = ZnodeUser.UserId
                          );

             DELETE FROM AspNetUsers
             OUTPUT deleted.UserName
                    INTO @TBL_DeleteduserName
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @V_tabledeleted AS a
                            WHERE a.AspnetUserid = AspNetUsers.Id
                          );

             DELETE FROM AspNetZnodeUser
             WHERE EXISTS ( SELECT TOP 1 1
                            FROM @TBL_DeleteduserName AS TBUN
                            WHERE TBUN.id = AspNetZnodeUser.AspNetZnodeUserId
                          );

			
             IF ( SELECT COUNT(1)
                  FROM @V_tabledeleted
                ) = ( SELECT COUNT(1)
                      FROM dbo.split ( @UserId , ','
                                     )
                    ) OR @UserId IS NULL 
                 BEGIN
                     SELECT 0 AS ID , CAST(1 AS BIT) AS Status;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteUserDetails @UserId = '+@UserId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteUserDetails',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO



IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetAccountGlobalAttributeValue')
	drop proc Znode_GetAccountGlobalAttributeValue
go

CREATE  PROCEDURE [dbo].[Znode_GetAccountGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0--,
 --   @LocaleId       INT = 0,
	--@GlobalEnt
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200)

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT URL+ZMSM.ThumbnailFolderName+'/'
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


 Select @EntityValue=Name  from ZnodeAccount
 Where AccountId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max),DisplayOrder int
			) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300) )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )


			
	insert into @EntityAttributeList
		(	GlobalEntityId ,EntityName ,EntityValue ,
		GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
		AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription,DisplayOrder  ) 
		SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
		c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
		c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
     FROM dbo.ZnodeGlobalEntity AS qq
          INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
		  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
          INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
          INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
          INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
		  Where qq.EntityName=@EntityName


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select GlobalAttributeId,aa.AccountGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodeAccountGlobalAttributeValue aa
		   inner join ZnodeAccountGlobalAttributeValueLocale bb ON bb.AccountGlobalAttributeValueId = aa.AccountGlobalAttributeValueId 
		  Where  AccountId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		 
			if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End
				

			SELECT GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by --GlobalEntityId,GlobalAttributeGroupId,GlobalAttributeId,aab.DisplayOrder,aab.GlobalAttributeDefaultValueId 
			AA.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetBrandDetailsLocale')
	drop proc Znode_GetBrandDetailsLocale
go

CREATE PROCEDURE [dbo].[Znode_GetBrandDetailsLocale]  
( @WhereClause  NVARCHAR(MAX),  
  @Rows    INT           = 10,  
  @PageNo   INT           = 1,  
  @Order_BY   VARCHAR(1000) = '',  
  @RowsCount  INT           = 0 OUT,  
  @LocaleId   INT           = 1,    
  @IsAssociated  BIT           = 0,  
  @PromotionId      INT     = 0   
)  
AS  
  /*  
     Summary :- This Procedure is used to get brand localies   
     Unit Testing   
  begin tran  
     EXEC Znode_GetBrandDetailsLocale ''isactive = 'true''',@RowsCount= 1,@LocaleId = 1   
  rollback tran    
 */  
  BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();  
             DECLARE @SeoId VARCHAR(MAX)= '', @SQL NVARCHAR(MAX);  
             DECLARE @TBL_BrandDetails TABLE  
             (Description         NVARCHAR(MAX),  
              BrandId             INT,  
              BrandCode           VARCHAR(600),  
              DisplayOrder        INT,  
              IsActive            BIT,  
              WebsiteLink         NVARCHAR(1000),  
              BrandDetailLocaleId INT,  
              SEOFriendlyPageName NVARCHAR(600),  
              MediaPath           NVARCHAR(MAX),  
              MediaId             INT,  
     ImageName           VARCHAR(300)  
             );  
  
    DECLARE @AttributeId INT= [dbo].[Fn_GetProductBrandAttributeId]();  
             DECLARE @TBL_AttributeDefault TABLE  
             (PimAttributeId            INT,  
              AttributeDefaultValueCode VARCHAR(600),  
              IsEditable                BIT,  
              AttributeDefaultValue     NVARCHAR(MAX)  
     ,DisplayOrder INT   
             );  
             DECLARE @TBL_SeoDetails TABLE  
             (CMSSEODetailId       INT,  
              SEOTitle             NVARCHAR(MAX),  
              SEOKeywords          NVARCHAR(MAX),  
              SEOURL               NVARCHAR(MAX),  
              ModifiedDate         DATETIME,  
              SEODescription       NVARCHAR(MAX),  
              MetaInformation      NVARCHAR(MAX),  
              IsRedirect           BIT,  
              CMSSEODetailLocaleId INT,  
              SEOId                INT ,
			  PublishStatus        NVARCHAR(20) 
			   
             );  
             DECLARE @TBL_BrandDetail TABLE  
             (Description          NVARCHAR(MAX),  
              BrandId              INT,  
              BrandCode            VARCHAR(600),  
              DisplayOrder         INT,  
              IsActive             BIT,  
              WebsiteLink          NVARCHAR(1000),  
              BrandDetailLocaleId  INT,  
              MediaPath            NVARCHAR(MAX),  
              MediaId              INT,  
     ImageName      VARCHAr(300) ,  
              CMSSEODetailId       INT,  
              SEOTitle             NVARCHAR(MAX),  
              SEOKeywords          NVARCHAR(MAX),  
              SEOURL               NVARCHAR(MAX),  
              ModifiedDate         DATETIME,  
              SEODescription       NVARCHAR(MAX),  
              MetaInformation      NVARCHAR(MAX),  
              IsRedirect           BIT,  
              CMSSEODetailLocaleId INT,  
              SEOId                INT,  
              BrandName            NVARCHAR(MAX),  
              RowId                INT,  
              CountId              INT  
             );  
             IF @PromotionId > 0  
    BEGIN   
      
     SET @SeoId = ISNULL(SUBSTRING((SELECT ','+CAST(BrandId AS VARCHAR(50))  
     FROM ZnodePromotionBrand   
     WHERE PromotionId= @PromotionId  FOR XML PATH ('') ),2,4000),'0')  
  
     SET @WhereClause = CASE WHEN @IsAssociated = 1 THEN ' BrandId IN (' ELSE ' BrandId NOT IN (' END  +@SeoId+') AND '+CASE WHEN @WhereClause = '' THEN '1=1' ELSE @WhereClause END   
     SET @SeoId = ''  
    END    
      
     INSERT INTO @TBL_AttributeDefault  
   EXEC Znode_GetAttributeDefaultValueLocale @AttributeId,@LocaleId;  
      
  
     IF @PromotionId = 0  
    BEGIN   
      
     
              SET @WhereClause = ' '+@WhereClause+CASE  
                                              WHEN @IsAssociated = 1  
                                                     THEN CASE  
                                                              WHEN @WhereClause = ''  
                                                              THEN ' '  
                                                              ELSE ' AND '  
                                                          END+' EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValue ZAV INNER JOIN ZnodePimAttribute ZA ON (ZA.PimAttributeId = ZAV.PimAttributeId AND ZA.AttributeCode = ''Brand'')   
                   INNER JOIN ZnodePimProductAttributeDefaultValue ZAVL ON (ZAV.PimAttributeValueId= ZAVL.PimAttributeValueId )   
                   INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZAVL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId  
                                           WHERE ( ZPADV.AttributeDefaultValueCode = TMADV.AttributeDefaultValueCode))'  
                                                     ELSE CASE  
                                                              WHEN @WhereClause = ''  
                                                              THEN ' 1 = 1  '  
                                                              ELSE ''  
                                                          END  
                                                  END;  
   END    
  
     
             ;WITH Cte_GetBrandBothLocale  
                   AS (SELECT ZBDL.Description,ZBD.BrandId,LocaleId,ZBD.BrandCode,ZBD.DisplayOrder,ZBD.IsActive,ZBD.WebsiteLink,ZBDl.BrandDetailLocaleId,  
           SEOFriendlyPageName,[dbo].[Fn_GetMediaThumbnailMediaPath](Zm.path) MediaPath,ZBD.MediaId,Zm.path ImageName  
        FROM ZnodeBrandDetails ZBD  
        LEFT JOIN ZnodeBrandDetailLocale ZBDL ON(ZBD.BrandId = ZBDL.BrandId)  
        LEFT JOIN ZnodeMedia ZM ON(ZM.MediaId = ZBD.MediaId)  
        WHERE LocaleId IN(@LocaleId, @DefaultLocaleId)  
              
             ),  
                   Cte_BrandFirstLocale  
                   AS (SELECT Description,BrandId,LocaleId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName  
                       FROM Cte_GetBrandBothLocale CTGBBL  
                       WHERE LocaleId = @LocaleId),  
                   Cte_BrandDefaultLocale  
                   AS (SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName  
                       FROM Cte_BrandFirstLocale  
                       UNION ALL  
                       SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName  
                  FROM Cte_GetBrandBothLocale CTBBL  
                  WHERE LocaleId = @DefaultLocaleId  
                  AND NOT EXISTS  
                  (  
                      SELECT TOP 1 1  
                      FROM Cte_BrandFirstLocale CTBFL  
                      WHERE CTBBL.BrandId = CTBFL.BrandId  
                  ))  
  
                  INSERT INTO @TBL_BrandDetails (Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName)  
                         SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName  
                         FROM Cte_BrandDefaultLocale CTEBD;  
                   
     
      SET @SeoId = SUBSTRING(  
                                   (  
                                       SELECT ','+CAST(BrandId AS VARCHAR(600))  
     FROM @TBL_BrandDetails  
                                       FOR XML PATH('')  
                                   ), 2, 4000);  
                  INSERT INTO @TBL_SeoDetails (CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,SEOId,PublishStatus)  
                  EXEC Znode_GetSeoDetails  
                  @SeoId,  
                  'Brand',  
                  @LocaleId;  
                  
      SELECT TBBD.*,TBSD.*,TBAD.AttributeDefaultValue BrandName,TBAD.AttributeDefaultValueCode  
      INTO #TM_BrandLocale  
      FROM @TBL_BrandDetails TBBD  
                  LEFT JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOId = TBBD.BrandId)  
                  INNER JOIN @TBL_AttributeDefault TBAD ON(TBAD.AttributeDefaultValueCode = TBBD.BrandCode);  
  
             SET @SQL = '   
             ;With Cte_BrandDetails AS   
    (  
     SELECT * ,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'BrandId DESC')+',Count(*)Over() CountId  
     FROM #TM_BrandLocale TMADV  
     WHERE 1=1  
     '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+'  
  
       )  
    SELECT Description  , BrandId , BrandCode , DisplayOrder  ,IsActive  ,WebsiteLink ,BrandDetailLocaleId   
         , MediaPath ,MediaId,ImageName ,CMSSEODetailId ,SEOTitle ,SEOKeywords , SEOURL   
         , ModifiedDate  ,  SEODescription   ,MetaInformation   ,IsRedirect ,CMSSEODetailLocaleId  
         , SEOId ,BrandName ,RowId  ,CountId   
    FROM Cte_BrandDetails  
    '+[dbo].[Fn_GetOrderByClause](@Order_BY, 'BrandId DESC')+' ';  
  
  
             INSERT INTO @TBL_BrandDetail  
             (  
    Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,  
    BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,  
    SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,  
    CMSSEODetailLocaleId,SEOId,BrandName,RowId,CountId  
    )  
             EXEC (@SQL);  
             SET @RowsCount = ISNULL(  
                                    (  
                                        SELECT TOP 1 CountId  
                                        FROM @TBL_BrandDetail  
                                    ), 0);  
             SELECT BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,SEOId,BrandName,@PromotionId PromotionId   
             FROM @TBL_BrandDetail;  
         END TRY  
         BEGIN CATCH  
            DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),   
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetBrandDetailsLocale @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))
	+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@PromotionId='+CAST(@PromotionId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetBrandDetailsLocale',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetCatalogCategoryProducts')
	drop proc Znode_GetCatalogCategoryProducts
go
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryProducts]
( 
  @WhereClause      XML,
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PimCategoryId    INT,
  @PimCatalogId     INT           = 0,
  @IsAssociated     BIT           = 0,
  @ProfileCatalogId INT           = 0,
  @AttributeCode   VARCHAR(max) = '',
  @PimCategoryHierarchyId INT =0 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogCategoryProducts @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PimCategoryId=11,@PimCatalogId = 1 ,@LocaleId=1 ,@ProfileCatalogId = 1 
	   rollback tran
	  
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @OrderId INT= 0;
             DECLARE @SQL VARCHAR(MAX), 
					 @PimProductId TransferId,--VARCHAR(MAX)= '', 
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(max);
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

			 --DECLARE @TBL_ProfileCatalogCategory TABLE
    --         (
				--  ProfileCatalogId     INT,
				--  PimProductId         INT,
				--  PimCategoryId        INT,
				--  PimCatalogCategoryId INT,
				--  PimCategoryHierarchyId INT
    --         );
             DECLARE @TBL_AttributeDefaultValue TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (
				  PimProductId   INT,
				  AttributeValue NVARCHAR(MAX),
				  AttributeCode  VARCHAR(600),
				  PimAttributeId INT
             );
             DECLARE @FamilyDetails TABLE
             (
				  PimProductId         INT,
				  PimAttributeFamilyId INT,
				  FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             IF @Order_By LIKE ''
                 BEGIN
                     SET @OrderId = 1;
                 END;
             --IF @ProfileCatalogId > 0
             --    BEGIN
             --        INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId,PimProductId,PimCategoryId,PimCatalogCategoryId,PimCategoryHierarchyId)
             --        SELECT ZPC.ProfileCatalogId,PimProductId,PimCategoryId,ZCC.PimCatalogCategoryId,PimCategoryHierarchyId
             --        FROM ZnodePimCatalogCategory AS ZCC
             --        INNER JOIN ZnodeProfileCatalog AS ZPC ON(ZPC.PimCatalogId = ZCC.PimCatalogId)
             --        WHERE ZPC.ProfileCatalogId = @ProfileCatalogId

             --        AND NOT EXISTS
             --            (
             --               SELECT TOP 1 1
             --               FROM ZnodeProfileCatalogCategory AS ZPCC
             --               WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
             --            );
             --    END;
             IF @PimCatalogId = 0
                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT PimProductId 
                    FROM ZnodePimCategoryProduct AS ZCP
                    WHERE ZCP.PimCategoryId = @PimCategoryId
					AND PimProductId IS NOT NULL 
                                                   
                 END;
             ELSE
                 BEGIN
                     IF @IsAssociated = 0
                        AND @ProfileCatalogId > 0
                         BEGIN
				INSERT INTO @TransferPimProductId 
                SELECT PimProductId 
                FROM ZnodePimCatalogCategory AS ZCP
                WHERE ZCP.PimCatalogId = @PimCatalogId
              --  AND ZCP.PimCategoryId = @PimCategoryId
				AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
                AND NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM ZnodeProfileCatalogCategory AS TBPCC
                    WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                        AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                )
               	AND PimProductId IS NOT NULL                                         
                        END;
                     ELSE
                         BEGIN
                             IF @IsAssociated = 1
                                AND @ProfileCatalogId > 0
                                 BEGIN
						INSERT INTO @TransferPimProductId 
                        SELECT PimProductId
                        FROM ZnodePimCatalogCategory AS ZCP
                        WHERE ZCP.PimCatalogId = @PimCatalogId
                            AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId
                            AND EXISTS
                        (
                            SELECT TOP 1 1
                            FROM ZnodeProfileCatalogCategory AS TBPCC
                            WHERE TBPCC.PimCatalogCategoryId = ZCP.PimCatalogCategoryId
                                AND TBPCC.ProfileCatalogId = @ProfileCatalogId
                        )
                       AND PimProductId IS NOT NULL                                             
                                     SET @IsAssociated = 0;
                                 END;
                             ELSE
                                 BEGIN
					INSERT INTO @TransferPimProductId 
                    SELECT DISTINCT PimProductId 
                    FROM ZnodePimCatalogCategory AS ZCP
                    WHERE ZCP.PimCatalogId = @PimCatalogId
                 --   AND ZCP.PimCategoryId = @PimCategoryId
					AND ZCP.PimCategoryHierarchyId = @PimCategoryHierarchyId 
				    AND PimProductId IS NOT NULL  
			
         --           ORDER BY CASE WHEN @OrderId = 0
         --                       THEN 1
         --                       ELSE ZCP.PimCatalogCategoryId
								 --END 
								 --DESC
                                   
                                 END;
                         END;
                 END;
				 
				 IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId)
				 BEGIN 
                  INSERT INTO @TransferPimProductId
				  SELECT '0'

				 END 


             DECLARE @ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT IDENTITY(1,1)
             );
            DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  
					 WHEN @IsAssociated = 1 THEN 0 END 
		--END 



	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId
	 


	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	-- SELECT * FROM @TAB
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
		 END 
	 ELSE 
	 BEGIN
	       
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 SELECT id 
			 FROM @TBL_MainList 
            
			 UPDATE @ProductIdTable
               SET
                   PimCategoryId = @PimCategoryId;
             --SET @PimProductId = SUBSTRING(
             --                             (
             --                                 SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                 FROM @ProductIdTable
             --                                 FOR XML PATH('')
             --                             ), 2, 4000);

			 INSERT INTO @PimProductId  ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
             INSERT INTO @TBL_AttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder )
            
			 EXEC Znode_GetAttributeDefaultValueLocale @PimAttributeId,@LocaleId;
            
			 INSERT INTO @TBL_AttributeDetails (PimProductId,AttributeValue,AttributeCode,PimAttributeId)

             EXEC Znode_GetProductsAttributeValue @PimProductId,@PimAttributeId,@localeId;
             SET @PimAttributeId = [dbo].[Fn_GetCategoryNameAttributeId]();

             INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)

             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryId,@PimAttributeId,@LocaleId;
          
		    ;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+URL+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;

             INSERT INTO @FamilyDetails (PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @LocaleId);
             UPDATE a
             SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                  AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';


             SELECT zpp.PimProductid AS ProductId,zpp.PimProductId,@PimCatalogId AS PimCatalogId,zpp.PimCategoryId,[ProductName],
			 ProductType,ISNULL(zf.FamilyName, '') AS AttributeFamily,[SKU],[Price],[Quantity],
                    CASE
                        WHEN Piv.[IsActive] IS NULL
                        THEN CAST(0 AS BIT)
                        ELSE CAST(Piv.[IsActive] AS BIT)
                    END AS [IsActive],
                    piv.[ProductImage] ImagePath,
                    [Assortment],
                    TBAV.CategoryValue AS [CategoryName],
                    @LocaleId AS LocaleId,
                    ZCC.[DisplayOrder],
                    ZPCC.ProfileCatalogCategoryId,
                    zpp.RowId,
					ZCC.PimCategoryHierarchyId
             FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.Id = zpp.PimProductId)
                  LEFT JOIN @FamilyDetails AS zf ON(zf.PimProductId = zpp.PimProductId)
                  INNER JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TB PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                 [SKU],
                                                                 [Price],
                                                                 [Quantity],
                                                                 [IsActive],
                                                                 [ProductType],
                                                                 [ProductImage],
                                                                 [Assortment],
                                                                 [DisplayOrder])) AS Piv ON(Piv.PimProductId = zpp.PimProductid)
                  LEFT JOIN @TBL_AttributeValue AS TBAV ON(TBAV.PimCategoryId = ZPP.PimCategoryId)
                  LEFT JOIN ZnodePimCategoryProduct AS ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId
                                                               AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
                  LEFT JOIN ZnodePimCatalogCategory AS ZCC ON(ZCC.PimProductId = Zpp.PimProductId
                                                             AND ZCC.PimCategoryHierarchyId = @PimCategoryHierarchyId
                                                              AND ZCC.PimCatalogId = @PimCatalogId)
                  LEFT JOIN ZnodeProfileCatalogCategory AS ZPCC ON(ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId
                                                                   AND ZPCC.ProfileCatalogId = @ProfileCatalogId)
                  --LEFT JOIN ZnodeMedia AS zm ON(zm.MediaId = piv.[ProductImage])
             ORDER BY CASE
                          WHEN @OrderId = 0
                          THEN 1
                          ELSE ZCC.PimCatalogCategoryId
                      END DESC,
                      TMM.RowId;

					  
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb) 
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT @RowsCount =(SELECT COUNT(1) FROM @ProductListIdRTR)   
	 END 
	

         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCatalogCategoryProducts',
				@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetCatalogList')
	drop proc Znode_GetCatalogList
go
CREATE PROCEDURE [dbo].[Znode_GetCatalogList]
(
	@WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the catalog 
	 Unit Testig 
	 EXEC  Znode_GetCatalogList '',100,1,'',0
	  EXEC  Znode_GetCatalogList null,100,1,'',0
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		 DECLARE @TBL_CatalogId TABLE (PimCatalogId int, PublishCatalogLogId int,CatalogName VARCHAR(max),PublishStatus VARCHAR(300),RowId INT ,CountId INT,PublishCreatedDate DATETIME ,PublishModifiedDate DATETIME,PublishCategoryCount INT ,PublishProductCount INT)
	 
		 SET @SQL = '
		;With Cte_MaxPublish AS 
		(
		 SELECT max(PublishCatalogLogId) PublishCatalogLogId,PimCatalogId
		 FROM ZnodePublishCatalogLog ZPCL  
		 GROUP BY PimCatalogId
		)
		,Cte_CatalogLog AS (
		SELECT ZPC.CatalogName CatalogName, PublishCatalogLogId PublishCatalogLogId,CASE WHEN ZPCL.PublishCatalogLogId IS NULL THEN '''' ELSE 
		CASE WHEN IsCatalogPublished IS NULL THEN ''Processing'' WHEN IsCatalogPublished = 0 THEN ''Publish Failed''
		WHEN IsCatalogPublished = 1 THEN  ''Published Successfully'' END END    PublishStatus ,ZPC.PimCatalogId,ZPCL.CreatedDate AS PublishCreatedDate,ZPCL.ModifiedDate AS PublishModifiedDate,(SELECT DISTINCT COUNT(Item) FROM dbo.split(ZPCL.PublishCategoryId,'','') SP
         ) PublishCategoryCount, ISNULL((SELECT DISTINCT COUNT(PublishProductId) FROM ZnodePublishProduct SP  WHERE Sp.PublishCatalogId = ZPCL.PublishCatalogId AND ZPCL.IsCatalogPublished = 1 ),0) PublishProductCount
		FROM ZnodePimCatalog ZPC 
		LEFT JOIN ZnodePublishCatalogLog ZPCL  ON ( EXISTS (SELECT TOP 1 1 FROM Cte_MaxPublish CTE WHERE CTE.PimCatalogId = ZPC.PimCatalogId AND CTE.PublishCatalogLogId =  ZPCL.PublishCatalogLogId)  )

		)	 
	     ,Cte_PublishStatus 
		 AS (
		 SELECT PimCatalogId, PublishCatalogLogId, CatalogName, PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount,
		 '+[dbo].[Fn_GetPagingRowId](@Order_BY,'PublishCatalogLogId DESC')+' , Count(*)Over() CountId FROM Cte_CatalogLog
         WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )
	 
		 SELECT PimCatalogId, PublishCatalogLogId,CatalogName,PublishStatus,RowId,CountId,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount
		 FROM Cte_PublishStatus 
		 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '
	

	     PRINT @sql 
		 INSERT INTO @TBL_CatalogId 
		 EXEC (@SQL)

		 SELECT  PimCatalogId,PublishCatalogLogId,CatalogName,PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount
		 FROM @TBL_CatalogId

		 SET @RowsCount = ISNULL((SELECT TOP 1 COUNTID FROM @TBL_CatalogId),0)
	 

	 
		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetCatalogList',
					@ErrorInProcedure = 'Znode_GetCatalogList',
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetCategoryFeedList')
	drop proc Znode_GetCategoryFeedList
go
CREATE PROCEDURE [dbo].[Znode_GetCategoryFeedList]
( @PortalId         NVARCHAR(MAX) = NULL,
  @LocaleId         INT,
  --will be used for CategoryId
  @CommaSeparatedId NVARCHAR(MAX) = NULL 
)
AS
/*
 Summary:This procedure is used to get effective keyword feeding of category list
 Unit Testing:
 EXEC Znode_GetCategoryFeedList 1 

*/

     BEGIN
         SET NOCOUNT ON;
		   BEGIN TRY
         DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultValue('Locale');

         DECLARE @TBL_DomainName TABLE
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );

         DECLARE @TBL_PortalIds TABLE(ProtalId INT);
         DECLARE @TBL_SEODetails TABLE
         (loc                   NVARCHAR(MAX),
          lastmod               DATETIME,
          [g:condition]         VARCHAR(100),
          [description]         NVARCHAR(MAX),
          [g:id]                INT,
          link                  VARCHAR(100),
          [g:identifier_exists] VARCHAR(200),
          DomainName            NVARCHAR(300),
          PortalId              INT
         );

         INSERT INTO @TBL_PortalIds
         SELECT Zp.PortalId
         FROM Znodeportal AS ZP
         INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)
         INNER JOIN ZnodePublishCategory AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)
         WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM DBO.Split(@PortalID, ',') AS Sp
                    WHERE(CAST(sp.Item AS INT) = ZP.PortalId
                          OR @PortalID = '0' )
                )
         GROUP BY Zp.PortalId;

	

         INSERT INTO @TBL_DomainName
         SELECT ZD.PortalId,ZD.DomainName,    
                ROW_NUMBER() OVER(Partition BY ZD.DomainName,ZD.PortalId ORDER BY ZD.DomainName,ZD.PortalId) RowId                               
         FROM ZnodeDomain ZD
         WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PortalIds TBP
                    WHERE TBP.ProtalId = ZD.PortalId
                )
		AND ApplicationType = 'Webstore'
		AND IsActive =1 ;

		
         ;WITH Cte_SeoDetailsWithLocale
              AS (
			  SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishCategoryId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId 
              FROM ZnodePublishCategory AS ZPCC 
              LEFT JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPCC.PublishCatalogId)
              LEFT JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPPC.PublishCatalogId)
              LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZPC.PortalId)
			  LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(ZPCC.PublishCategoryId = ZCSD.SEOId AND ZPC.PortalId = ZCSD.PortalId
					    AND EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST
								    WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = 'Category')) 
              LEFT  JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                                            AND LocaleId IN(@LocaleId, @DefaultLocaleId))
              WHERE EXISTS
				  (
					SELECT TOP 1 1
					FROM @TBL_PortalIds TBP
					WHERE ZPC.PortalId = TBP.ProtalId
				  )
			  AND EXISTS (SELECT TOP 1 1 FROM  dbo.split(@CommaSeparatedId,',' ) SP WHERE SP.Item = ZPCC.PublishCategoryId)
			  ),

              Cte_SeoDetailsWithFirstLocale
              AS (SELECT *
                  FROM Cte_SeoDetailsWithLocale
                  WHERE LocaleId = @LocaleId),

              Cte_SeoDetailsWithDefaultLocale
              AS (SELECT *
				  FROM Cte_SeoDetailsWithFirstLocale
				  UNION ALL
				  SELECT *
				  FROM Cte_SeoDetailsWithLocale AS CTSDWL
				  WHERE LocaleId = @DefaultLocaleId
						AND NOT EXISTS
				  (
					  SELECT TOP 1 1
					  FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
					  WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
				  ))

              INSERT INTO @TBL_SEODetails
                     SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId
                     FROM Cte_SeoDetailsWithDefaultLocale;

			  SELECT DISTINCT loc,lastmod,DomainName,[g:id] Id,PortalId,b.PublishCategoryName AS Name
			  FROM @TBL_SEODetails a
              INNER JOIN ZnodePublishCategoryDetail b ON(b.PublishCategoryId = a.[g:id] AND b.LOcaleId = @LocaleId)
			  WHERE DomainName IS NOT NULL;
			  END TRY
			  BEGIN CATCH
               DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@CommaSeparatedId='+@CommaSeparatedId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCategoryFeedList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
			  END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetCMSContentPagesFolderDetails')
	drop proc Znode_GetCMSContentPagesFolderDetails
go
CREATE   PROCEDURE [dbo].[Znode_GetCMSContentPagesFolderDetails]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(100)  = NULL,
  @RowsCount   INT OUT,
  @LocaleId    INT           = 1)
AS  
   /* 
    Summary: To get content page folder details 
             Provide output for paging with dynamic where cluase                  
    		 User view : View_CMSContentPagesFolderDetails
    Unit Testing  
    Exec Znode_GetCMSContentPagesFolderDetails '',@RowsCount = 0
    
	*/
     BEGIN
        BEGIN TRY
          SET NOCOUNT ON;

		     DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @SQLWhereClause nvarchar(max)

			 
             DECLARE @DefaultLocaleId VARCHAR(100)= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_ContenetPageLocale TABLE(CMSContentPagesId INT,PortalId INT,CMSTemplateId INT,PageTitle NVARCHAR(200),PageName NVARCHAR(200),ActivationDate DATETIME, ExpirationDate DATETIME,IsActive BIT
				    ,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME,PortalName  NVARCHAR(max) ,CMSContentPageGroupId INT 
				    , PageTemplateName NVARCHAR(200),SEOUrl NVARCHAR(max),MetaInformation NVARCHAR(max),SEODescription NVARCHAR(max),SEOTitle NVARCHAR(max),SEOKeywords NVARCHAR(max),CMSContentPageGroupName NVARCHAR(200),RowId INT ,CountNo INT,PublishStatus nvarchar(300)  ,SEOPublishStatus  nvarchar(300) )
			--SET @SQLWhereClause  = [dbo].[Fn_GetFilterWhereClause](@WhereClause) 
					SET @SQL = '  
						;With CMSContentPages AS (		
						SELECT DISTINCT ZCCP.CMSContentPagesId,ZCCP.PortalId,ZCCP.CMSTemplateId,ZCCPL.PageTitle,ZCCP.PageName,ZCCP.ActivationDate, ZCCP.ExpirationDate,ZCCP.IsActive
						,ZCCP.CreatedBy,ZCCP.CreatedDate,ZCCP.ModifiedBy,ZCCP.ModifiedDate,e.StoreName PortalName   ,ZCCPG.CMSContentPageGroupId 
						,zct.Name PageTemplateName ,zcsd.SEOUrl,zcsd.MetaInformation,ZCCPGL.Name CMSContentPageGroupName,ZCCPL.LocaleId,ZCSDL.SEODescription,ZCSDL.SEOTitle,ZCSDL.SEOKeywords	,ZCSDL.LocaleId LocaleSeo,ZCCPGL.LocaleId LocaeIdRTR ,ZCCP.IsPublished
						, zcsd.IsPublish IsSEOPublished
					    FROM ZnodeCMSContentPages ZCCP 
						LEFt Outer JOIN [ZnodeCMSContentPageGroupMapping] ZCCPGM ON (ZCCPGM.CMSContentPagesId = ZCCP.CMSContentPagesId) 
					    LEFt Outer JOIN [ZnodeCMSContentPageGroup] ZCCPG ON (ZCCPG.CMSContentPageGroupId = ZCCPGM.CMSContentPageGroupId)
						LEFt Outer JOIN [ZnodeCMSContentPagesLocale] ZCCPL ON (ZCCP.CMSContentPagesId = ZCCPL.CMSContentPagesId  )
						LEFt Outer JOIN [ZnodeCMSContentPageGroupLocale] ZCCPGL ON (ZCCPGL.CMSContentPageGroupId = ZCCPG.CMSContentPageGroupId AND ZCCPGL.LocaleId = ZCCPL.LocaleId  )					
						LEFT JOIN ZnodeCMSTemplate zct ON (zct.CMSTemplateId = ZCCP.CMSTemplateId )
						LEFT JOIN ZnodeCMSSEODetail zcsd ON (zcsd.SEOId = ZCCP.CMSContentPagesId AND ZCSD.Portalid = ZCCP.portalId AND 
					    EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType zcst WHERE zcst.CMSSEOTypeId = zcsd.CMSSEOTypeId AND zcst.Name = ''Content Page'' ))
					    LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON (ZCSDL.CMSSEODetailId = zcsd.CMSSEODetailId  AND ZCSDL.LocaleId = ZCCPL.LocaleId ) 
						LEFt Outer JOIN ZnodePortal e on ZCCP.PortalId = e.PortalId 
					    WHERE  ZCCPL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCSDL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCCPGL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						AND zcsd.PortalId IS NOT NULL ) 
						, Cte_ContaintPageDetails AS (
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEODescription,SEOTitle,SEOKeywords,MetaInformation,IsPublished	, IsSEOPublished FROM CMSContentPages WHERE LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+'
      --                  AND LocaleSeo = '+CAST(@LocaleId AS VARCHAR(50))+'
						--AND LocaeIdRTR   = '+CAST(@LocaleId AS VARCHAR(50))+'
						)
						, Cte_ContentPage  AS (     	 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished	FROM Cte_ContaintPageDetails 
						UNION ALL 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
						,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName ,CMSContentPageGroupId , PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished
					    FROM CMSContentPages CCP WHERE LocaleId = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					    AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_ContaintPageDetails CTCPD WHERE CTCPD.CMSContentPagesId  = CCP.CMSContentPagesId AND  CTCPD.Portalid = CCp.PortalId)  AND  LocaleSeo = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					    AND LocaeIdRTR   = '+CAST(@DefaultLocaleId AS VARCHAR(50))+')				

					    ,Cte_ContenetPageFilter AS (
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,SEOKeywords,SEOTitle,SEODescription,MetaInformation,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,Case When Isnull(IsPublished ,0 ) = 0 then ''Draft'' ELSE ''Published'' END PublishStatus
						,Case When Isnull(IsSEOPublished ,0 ) = 0 then ''Draft'' ELSE ''Published'' END SEOPublishStatus -- ,
						
						 FROM Cte_ContentPage) '
   
						set @SQLWhereClause = @SQL + '
						
						,Cte_ContentFinal AS
						(
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,
						PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,SEOKeywords,SEOTitle,
						SEODescription,MetaInformation,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,
						PortalName,CMSContentPageGroupId, PageTemplateName ,
						SEOUrl,CMSContentPageGroupName,PublishStatus,SEOPublishStatus,'+[dbo].[Fn_GetPagingRowId](@Order_BY,'CMSContentPagesId')+',Count(*)Over() CountNo
						FROM Cte_ContenetPageFilter WHERE  1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )

						
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,MetaInformation,    PublishStatus,SEOPublishStatus
					    FROM Cte_ContentFinal  '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						
						print @SQLWhereClause


					    INSERT INTO @TBL_ContenetPageLocale (CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
									,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,
									MetaInformation,PublishStatus,SEOPublishStatus)
           				
					    EXEC (@SQLWhereClause)      
						                                                     
					    SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ContenetPageLocale) ,0)   
						     
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate,ExpirationDate,IsActive
							   ,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
							   ,PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,
							   PublishStatus,SEOPublishStatus
						FROM @TBL_ContenetPageLocale

           
    END TRY
	
    BEGIN CATCH
        DECLARE @Status BIT ;
		     SET @Status = 0;
			 select ERROR_MESSAGE()
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSContentPagesFolderDetails @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');


              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
        EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorInProcedure = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
    END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetCMSMessageConfiguration')
	drop proc Znode_GetCMSMessageConfiguration
go
CREATE PROCEDURE [dbo].[Znode_GetCMSMessageConfiguration]
( @PortalId INT,
  @UserId   INT = 0)
AS 
   /* 
    Summary :
     Sp To get Znode CMS messages configuration in XML format
     INPUT: PortalId
     Get all Znode CMS messages associated with Portal ID. messages will repeat according to MessageKey  and  number of active locale as already done in Product Publish 
     LocaleId from ZnodeCMSmessage
     PortalId Input(Present in ZnodeCMSPortalMessage)
     MessageKey  from znodecmsmessagekey
     Message from ZnodeCMSmessage
     Keep the filed name in XML as mentioned above
    unit testing : 
     EXEC Znode_GetCMSMessageConfiguration 7 ,1
	
 */
     BEGIN
         BEGIN TRY
             DECLARE @LocaleId INT=
             (
                 SELECT FeatureValues
                 FROM ZnodeGlobalSetting
                 WHERE FeatureName = 'Locale'
             ),  @IncrementValue INT= 1;

             DECLARE @TBL_LocaleAll TABLE
             (RowId    INT IDENTITY(1, 1),
              LocaleId INT,
              Code     VARCHAR(300)
             );
             INSERT INTO @TBL_LocaleAll(LocaleId,Code)
                    SELECT LocaleId,Code
                    FROM ZnodeLocale AS a
                    WHERE a.IsActive = 1;

             DECLARE @ReturnXML TABLE(ReturnXMl XML);
             WHILE @IncrementValue <=
             (
                 SELECT MAX(RowId)
                 FROM @TBL_LocaleAll
             )
                 BEGIN
                     DECLARE @TBL_CMSMessageData TABLE
                     (CMSMessageId INT,
                      LocaleId     INT,
                      Message      NVARCHAR(MAX),
                      MessageKey   NVARCHAR(100),
                      AreaName     VARCHAR(100)
                     );
                     DECLARE @TBL_CMSMessageDataFinal TABLE
                     (CMSMessageId INT,
                      LocaleId     INT,
                      Message      NVARCHAR(MAX),
                      MessageKey   NVARCHAR(100),
                      AreaName     VARCHAR(100)
                     );
                     INSERT INTO @TBL_CMSMessageDataFinal
                            SELECT DISTINCT ZCM.CMSMessageId,ZCM.LocaleId,ZCM.Message,ZCMK.MessageKey,''
                            FROM ZnodeCMSmessage AS ZCM
                            INNER JOIN ZnodeCMSPortalMessage AS ZCPM ON ZCM.CMSMessageId = ZCPM.CMSMessageId
                            INNER JOIN znodecmsmessagekey AS ZCMK ON ZCPM.CMSMessageKeyId = ZCMK.CMSMessageKeyId
                            WHERE ZCPM.PortalId = @PortalId
                                  AND (ZCM.LocaleId IN
                                      (
                                      (
                                          SELECT LocaleId
                                          FROM @TBL_LocaleAll
                                          WHERE RowId = @IncrementValue
                                      ), @LocaleId
                                      )); 

                     INSERT INTO @TBL_CMSMessageData
                            SELECT CMSMessageId,
                            (
                                SELECT LocaleId
                                FROM @TBL_LocaleAll
                                WHERE RowId = @IncrementValue
                            ) AS LocaleId,Message,MessageKey,AreaName
                            FROM @TBL_CMSMessageDataFinal
                            WHERE LocaleId =
                            (
                                SELECT LocaleId
                                FROM @TBL_LocaleAll
                                WHERE RowId = @IncrementValue
                            ); 

                     INSERT INTO @TBL_CMSMessageData
                            SELECT CMSMessageId,
                            (
                                SELECT LocaleId
            FROM @TBL_LocaleAll
                                WHERE RowId = @IncrementValue
                            ) AS LocaleId,Message,MessageKey,AreaName
                            FROM @TBL_CMSMessageDataFinal AS CMDF
                            WHERE CMDF.LocaleId = @LocaleId
                                  AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @TBL_CMSMessageData AS CMD
                                WHERE CMD.MessageKey = CMDF.MessageKey
                                      AND CMDF.AreaName = CMD.AreaName
                            );

                     INSERT INTO @ReturnXML(ReturnXMl)
                            SELECT
                            (
                                SELECT MessageKey,LocaleId,@PortalId AS PortalId,Message,AreaName AS Area,CMSMessageId 
                                FROM @TBL_CMSMessageData AS TCMD
                                WHERE TCMD.CMSMessageId = TCC.CMSMessageId
                                      AND TCC.AreaName = TCMD.AreaName
                                FOR XML PATH('MessageEntity')
                            )
                            FROM @TBL_CMSMessageData AS TCC;

                     SET @IncrementValue = @IncrementValue + 1;
                     DELETE FROM @TBL_CMSMessageData;
                     DELETE FROM @TBL_CMSMessageDataFinal;
                 END;
             SELECT *
             FROM @ReturnXML;
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSMessageConfiguration @PortalId = '+CAST(@PortalId AS VARCHAR
(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSMessageConfiguration',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetCMSWidgetSliderBanner')
	drop proc Znode_GetCMSWidgetSliderBanner
go
CREATE   PROCEDURE [dbo].[Znode_GetCMSWidgetSliderBanner]
( @PortalId INT = 0 ,
  @UserId   INT = 0
  ,@CMSSliderId INT = 0 
 )
AS 
   /* 
    Summary : Get all ZnodeCMSWidgetSliderBanner associated to PortalId and to all Contentpages
    		  associated to portal ID(using PortalMapping,ContentPageMapping)
    		  Get ZnodeCMSSliderBanner Associated to ZnodeCMSWidgetSliderBanner
    		  Data should Repeat According to LocaleId
     Unit Testing 
     EXEC [Znode_GetCMSWidgetSliderBanner]  @PortalId = 1
	
	*/
     BEGIN
         BEGIN TRAN;
         BEGIN TRY 
             
             DECLARE @TBL_Locale TABLE
             (RowId      INT IDENTITY(1, 1),
              LocaleId   INT,
              LocaleCode NVARCHAR(600),
              IsDefault  BIT
             );

             INSERT INTO @TBL_Locale(LocaleId,LocaleCode,IsDefault)
                    SELECT LocaleId,Name,IsDefault
                    FROM ZnodeLocale
                    WHERE IsActive = 1;

             DECLARE @V_LocaleId INT, @V_LocaleDefaultId INT=
             (
                 SELECT FeatureValues
                 FROM ZnodeGlobalSetting
                 WHERE FeatureName = 'Locale'
             );

             DECLARE @V_LocaleCode NVARCHAR(600);
             DECLARE @v_Count INT= 1;
             DECLARE @v_Count_forProduct INT= 1;
             DECLARE @Xmlreturn TABLE
             (CMSWidgetSliderBannerId INT,
              ReturnXML               NVARCHAR(MAX)
             );
             DECLARE @XmlFullreturn TABLE(ReturnXML XML);

             --CMSContentPage associated with portal 
			 DECLARE @TBL_CMSContentPagesPortalWise TABLE(CMSContentPagesId INT);
	

             INSERT INTO @TBL_CMSContentPagesPortalWise(CMSContentPagesId)
                    SELECT CMSContentPagesId
                    FROM ZnodeCMSContentPages
                    WHERE PortalId = @PortalId
                          AND IsActive = 1;
             WHILE @v_Count <= ISNULL(
                                     (
                                         SELECT MAX(RowId)
                                         FROM @TBL_Locale
                                     ), 0)
                 BEGIN
                     SET @V_LocaleId =
                     (
                         SELECT LocaleId
                         FROM @TBL_Locale
                         WHERE RowID = @v_Count
                     );
                     SET @V_LocaleCode =
                     (
                         SELECT LocaleCode
                         FROM @TBL_Locale
                         WHERE RowID = @v_Count
                     );

                     DECLARE @Tlb_ZnodeCMSWidgetSliderBanner TABLE
                     (CMSWidgetSliderBannerId INT,
                      CMSMappingId            INT,
                      PortalId                INT,
                      Type                    NVARCHAR(100) NULL,
                      Navigation              NVARCHAR(100) NULL,
                      AutoPlay                BIT,
                      AutoplayTimeOut         INT,
                      AutoplayHoverPause      BIT,
                      TransactionStyle        NVARCHAR(100) NULL,
                      WidgetsKey              NVARCHAR(256),
                      TypeOFMapping           NVARCHAR(100),
                      CMSSliderId             INT
                     );

                     DECLARE @TBL_ZnodeCMSSliderDetail TABLE
                     (CMSSliderId        INT,
                      CMSSliderBannerId  INT,
                      MediaPath          VARCHAR(300),
                      Title              NVARCHAR(1000),
                      ButtonLabelName    NVARCHAR(1200),
                      ButtonLink         NVARCHAR(600),
                      TextAlignment      NVARCHAR(200),
                      BannerSequence     INT,
                      ActivationDate     DATETIME,
                      ExpirationDate     DATETIME,
                      ImageAlternateText NVARCHAR(1000),
                      DEscription        NVARCHAR(MAX)
                     );

                     DECLARE @TBL_ZnodeCMSSliderDetail_Locale TABLE
                     (CMSSliderId        INT,
                      CMSSliderBannerId  INT,
                      MediaPath          VARCHAR(300),
                      Title              NVARCHAR(1000),
                      ButtonLabelName    NVARCHAR(1200),
                      ButtonLink         NVARCHAR(600),
                      TextAlignment      NVARCHAR(200),
                      BannerSequence     INT,
                      ActivationDate     DATETIME,
                      ExpirationDate     DATETIME,
                      ImageAlternateText NVARCHAR(1000),
                      DEscription        NVARCHAR(MAX),
                      LocaleId           INT
                     );

                    
                     INSERT INTO @Tlb_ZnodeCMSWidgetSliderBanner(CMSWidgetSliderBannerId,CMSMappingId,PortalId,Type,Navigation,AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey,TypeOFMapping,CMSSliderId)
                            SELECT ACWSB.CMSWidgetSliderBannerId,ACWSB.CMSMappingId,ACWSB.CMSMappingId AS PortalId,ACWSB.Type,ACWSB.Navigation,ACWSB.AutoPlay,ACWSB.AutoplayTimeOut
							,ACWSB.AutoplayHoverPause,ACWSB.TransactionStyle,ACWSB.WidgetsKey,ACWSB.TypeOfMapping
							OFMapping,ACWSB.CMSSliderId
                            FROM ZnodeCMSWidgetSliderBanner AS ACWSB
                            WHERE((TypeOfMapping = 'PortalMapping'
                                  AND CMSMappingId = @PortalId OR @PortalId = 0 )
                                  OR (TypeOfMapping = 'ContentPageMapping'
                                     AND CMSMappingId IN
                                    (
                                        SELECT CMSContentPagesId
                                        FROM @TBL_CMSContentPagesPortalWise
                                    )))
							   AND (ACWSB.CMSSliderId = @CMSSliderId OR @CMSSliderId = 0   );

                     INSERT INTO @TBL_ZnodeCMSSliderDetail_Locale
                            SELECT ZCSB.CMSSliderId,ZCSB.CMSSliderBannerId,ZM.Path,ZCSBL.Title,ZCSBL.ButtonLabelName,ZCSBL.ButtonLink,ZCSB.TextAlignment,ZCSB.BannerSequence,ZCSB.ActivationDate,ZCSB.ExpirationDate,ZCSBL.ImageAlternateText,ZCSBL.DEscription,ISNULL(ZCSBL.LocaleId, @V_LocaleDefaultId) AS LocaleId
                            FROM ZnodeCMSSliderBanner AS ZCSB
                                 LEFT JOIN ZnodeCMSSliderBannerLocale AS ZCSBL ON(ZCSB.CMSSliderBannerId = ZCSBL.CMSSliderBannerId
                                                                                  AND ZCSBL.LocaleId IN(@V_LocaleDefaultId, @V_LocaleId))
                                 LEFT OUTER JOIN ZnodeMEdia  AS ZM ON ZCSBL.MediaId = ZM.MediaId
								 
                            WHERE EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @Tlb_ZnodeCMSWidgetSliderBanner AS ACWSB
                                WHERE ACWSB.CMSSliderId = ZCSB.CMSSliderId
                            )
							--AND (ZCSB.CMSSliderId = @CMSSliderId OR @CMSSliderId = 0   )
							;

				

                     INSERT INTO @TBL_ZnodeCMSSliderDetail
                            SELECT CMSSliderId,CMSSliderBannerId,MediaPath,Title,ButtonLabelName,ButtonLink,TextAlignment,BannerSequence,ActivationDate,ExpirationDate,ImageAlternateText,DEscription
                            FROM @TBL_ZnodeCMSSliderDetail_Locale
                            WHERE LocaleId = @V_LocaleId;


                     INSERT INTO @TBL_ZnodeCMSSliderDetail
                            SELECT CMSSliderId,CMSSliderBannerId,MediaPath,Title,ButtonLabelName,ButtonLink,TextAlignment,BannerSequence,ActivationDate,ExpirationDate,ImageAlternateText,DEscription
                            FROM @TBL_ZnodeCMSSliderDetail_Locale AS TZCSDL
                            WHERE LocaleId = @V_LocaleDefaultId
              AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @TBL_ZnodeCMSSliderDetail AS TZCSD
                                WHERE TZCSD.CMSSliderBannerId = TZCSDL.CMSSliderBannerId
                                      AND TZCSD.CMSSliderId = TZCSDL.CMSSliderId
                            );		 


                     INSERT INTO @Xmlreturn
                            SELECT CMSWidgetSliderBannerId,
                            (
                                SELECT
                                (
                                    SELECT CMSSliderId AS SliderId,CMSSliderBannerId AS SliderBannerId,MediaPath,Title,ButtonLabelName,ButtonLink,TextAlignment,BannerSequence,ActivationDate,ExpirationDate,ImageAlternateText,Description
                                    FROM @TBL_ZnodeCMSSliderDetail AS wd
                                    WHERE wd.CMSSliderId = TZCWSB.CMSSliderId 
                                    FOR XML PATH('SliderBannerEntity'), TYPE
                                )
                                FROM @Tlb_ZnodeCMSWidgetSliderBanner AS a
                                WHERE a.CMSWidgetSliderBannerId = TZCWSB.CMSWidgetSliderBannerId
                                FOR XML PATH(''), ROOT('SliderBanners')
                            ) AS XMLGEM

                            FROM @Tlb_ZnodeCMSWidgetSliderBanner AS TZCWSB;

                     INSERT INTO @XmlFullreturn
                            SELECT DISTINCT
                                   '<WidgetSliderBannerEntity>'+
                            (
                                SELECT DISTINCT
                                       CMSWidgetSliderBannerId AS WidgetSliderBannerId,CMSMappingId AS MappingId,PortalId,@V_LocaleId AS LocaleId,Type,Navigation,AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey,TypeOFMapping,CMSSliderId AS SliderId,TransactionStyle
                                FROM @Tlb_ZnodeCMSWidgetSliderBanner AS pr
                                WHERE pr.CMSWidgetSliderBannerId = p.CMSWidgetSliderBannerId
                                FOR XML PATH('')
                            )+
                            (
                                SELECT ReturnXML
                                FROM @Xmlreturn AS q
                                WHERE q.CMSWidgetSliderBannerId = p.CMSWidgetSliderBannerId
                            )+'</WidgetSliderBannerEntity>'
                            FROM @Tlb_ZnodeCMSWidgetSliderBanner AS p;

                     DELETE FROM @Xmlreturn;
                     DELETE FROM @TBL_ZnodeCMSSliderDetail_Locale;
                     DELETE FROM @TBL_ZnodeCMSSliderDetail;
                     DELETE FROM @Tlb_ZnodeCMSWidgetSliderBanner;
                     SET @v_Count = @v_Count + 1;
                 END;
             SELECT *
             FROM @XmlFullreturn;
             COMMIT TRAN;
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSWidgetSliderBanner @PortalId = '+CAST(@PortalId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSWidgetSliderBanner',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO



IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetFilterPimProductId')
	drop proc Znode_GetFilterPimProductId
go

CREATE  PROCEDURE [dbo].[Znode_GetFilterPimProductId]
(
  @WhereClause XML 
 ,@PimProductId TransferId Readonly 
 ,@LocaleId   INT 
)
AS 
BEGIN 
SET NOCOUNT ON 

DECLARE  @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleID()
		,@SQL NVARCHAR(max)
		,@InternalProductWhereClause NVARCHAR(max)

DECLARE @WorkingProcess INT = 0 

DECLARE @TBL_FilterClause TABLE (ID INT IDENTITY(1,1),AttributeValue NVARCHAR(max),AttributeCode NVARCHAr(max),PimAttributeId INT ,AttributeTypeName VARCHAR(300),AttributeCodeOrg VARCHAR(600))

DECLARE @WhereClauseXML XML = @WhereClause 


IF EXISTS (SELECT TOP 1 1 FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col) 
WHERE Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)')  LIKE  '% in (%')
BEGIN 
 SET @WorkingProcess = 1
 INSERT INTO @TBL_FilterClause (AttributeValue,AttributeCode,AttributeTypeName,PimAttributeId,AttributeCodeOrg)
SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeValue,ZTY.AttributeTypeName,ZPA.PimAttributeId,AttributeCode AttributeCodeOrg
FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
LEFT JOIN  ZnodePimAttribute ZPA  ON ((Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)')  LIKE '%in (%' OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')) 
									= ZPA.AttributeCode ) AND IsCategory = 0 
AND IsShowOnGrid = 1   )
LEFT JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)

END 
ELSE 
BEGIN 

INSERT INTO @TBL_FilterClause (AttributeValue,AttributeCode,AttributeTypeName,PimAttributeId,AttributeCodeOrg)
SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeValue,ZTY.AttributeTypeName,ZPA.PimAttributeId,AttributeCode AttributeCodeOrg
FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
LEFT JOIN ZnodePimAttribute ZPA  ON (dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')) 
									= ZPA.AttributeCode AND ZPA.IsCategory = 0 
AND ( ZPA.IsShowOnGrid = 1 OR ZPA.IsConfigurable =1  )  )
LEFT JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)


END 



CREATE TABLE #TBL_PimProductId (PimProductId INT)

CREATE TABLE #TBL_PimProductIdDelete (PimProductId INT )

  INSERT INTO #TBL_PimProductId (PimProductId )
  SELECT Id 
  FROM @PimProductId

  SELECT ZPAV.PimProductId ,PimAttributeValueId 
			,ZPAV.CreatedDate,ZPAV.ModifiedDate,TBLA.AttributeCodeOrg AttributeCode
  INTO #TBL_AttributeValueId 
  FROM  ZnodePimAttributeValue ZPAV 
  INNER JOIN @TBL_FilterClause TBLA ON (TBLA.PimAttributeId = ZPAV.PimAttributeId)
  INNER JOIN #TBL_PimProductId YT ON (YT.PimProductId = ZPAV.PimProductId OR NOT EXISTS (SELECT TOP 1 1 #TBL_PimProductId))
IF @WorkingProcess =1 
BEGIN 
 DECLARE @PimAttributeId_in TransferId 

 INSERT INTO @PimAttributeId_in 
 SELECT PimAttributeId
 FROM  @TBL_FilterClause 
 WHERE AttributeTypeName IN ('Simple Select','Multi Select') 
 AND AttributeCode LIKE '%in (%'


 CREATE TABLE #TBL_AttributeDefaultValue_in ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  )    
 INSERT INTO #TBL_AttributeDefaultValue_in(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
 EXEC Znode_GetAttributeDefaultValueLocaleNew_TansferId @PimAttributeId_in, @LocaleId;
 
 DECLARE @WhereClauseInCom NVARCHAR(max) = (SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%in (%') 

SET @SQL = '
   ;With Cte_AttributeValue AS 
   (
   SELECT PimAttributeValueId 
   FROM ZnodePimAttributeValueLocale 
   WHERE AttributeValue '+@WhereClauseInCom+'
   UNION ALL 
   SELECT PimAttributeValueId 
   FROM ZnodePimProductAttributeTextAreaValue   
   WHERE AttributeValue '+@WhereClauseInCom+'
   UNION ALL 
   SELECT ZPADV.PimAttributeValueID 
   FROM ZnodePimProductAttributeDefaultValue ZPADV 
   INNER JOIN #TBL_AttributeDefaultValue_in TBL ON (TBL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
   WHERE TBL.AttributeDefaultValue '+@WhereClauseInCom+'
   )
   
   SELECT PimProductId 
   FROM #TBL_AttributeValueId ZPAV 
   INNER JOIN  Cte_AttributeValue CTAC ON (CTAC.PimAttributeValueId = ZPAV.PimAttributeVaLueId )
   GROUP BY PimProductId
   UNION ALL  
   SELECT PimProductId 
   FROM ZnodePimProduct a
   INNER JOIN ZnodePimFamilyLocale b ON (b.PimAttributeFamilyId = a.PimAttributeFamilyId) 
   WHERE b.AttributeFamilyName '+@WhereClauseInCom+'
   GROUP BY PimProductId
   UNION ALL 
   SELECT  TBLAV.PimProductId 
   FROM ZnodePimProduct TBLAV
   WHERE CASE WHEN TBLAV.IsProductPublish  IS NULL THEN ''Not Published'' 
         WHEN TBLAV.IsProductPublish = 0 THEN ''Draft''
	     ELSE  ''Published'' END '+@WhereClauseInCom+'
   GROUP BY TBLAV.PimProductId 
   '
   -- PRINT @SQL 
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   IF NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) AND EXISTS (SELECT TOP 1 1  FROM @PimProductId Having Max (ID) = 0 )
   BEGIN
    INSERT INTO  #TBL_PimProductId (PimProductId)
	SELECT 0 
   END 
  DELETE  FROM @TBL_FilterClause WHERE AttributeCode LIKE '% in (%'

   DROP TABLE #TBL_AttributeDefaultValue_in
   SET @WorkingProcess  = 0 
END 

  IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode <> '' AND ISNULL(AttributeValue,'') = '')
  BEGIN 

   SET  @InternalProductWhereClause = STUFF( (  SELECT ' INNER JOIN #TBL_AttributeValueId AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' )'				
							FROM @TBL_FilterClause
							WHERE ISNULL(AttributeValue,'') = ''
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
   
   SET @SQL = ' 
				SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV '+@InternalProductWhereClause+' '+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
				GROUP BY TBLAV.PimProductId 
			'
   PRINT @SQL 
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   DELETE FROM @TBL_FilterClause WHERE ISNULL(AttributeValue,'') = ''
   IF NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) AND EXISTS (SELECT TOP 1 1  FROM @PimProductId Having Max (ID) = 0 )
   BEGIN
    INSERT INTO  #TBL_PimProductId (PimProductId)
	SELECT 0 
   END 
  END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Simple Select','Multi Select') )
BEGIN
 DECLARE @PimAttributeId TransferId 

 INSERT INTO @PimAttributeId 
 SELECT PimAttributeId
 FROM  @TBL_FilterClause WHERE AttributeTypeName IN ('Simple Select','Multi Select') 

 CREATE TABLE #TBL_AttributeDefaultValue ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  )    
 INSERT INTO #TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
 EXEC Znode_GetAttributeDefaultValueLocaleNew_TansferId @PimAttributeId, @LocaleId;
 
  IF @DefaultLocaleId = @LocaleID AND  @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = STUFF( (  SELECT ' INNER JOIN Cte_AttributeValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Simple Select','Multi Select')
							AND AttributeValue <> ''
							AND AttributeValue IS NOT NULL
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')

  SET @SQL = ' ;With Cte_AttributeValue AS 
			   (
	            SELECT TBLAV.PimAttributeValueId ,SUBSTRING((SELECT '',''+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = '+Cast(@localeId AS VARCHAR(200))+'
				FOR XML PATH('''') ),2,4000) AttributeValue
				    ,  '+Cast(@localeId AS VARCHAR(200))+' LocaleId,TBLAV.AttributeCode,TBLAV.PimProductId
				FROM #TBL_AttributeValueId TBLAV
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
				GROUP BY TBLAV.PimAttributeValueId,TBLAV.AttributeCode,TBLAV.PimProductId
			   )
  
				SELECT  TBLAV.PimProductId
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'	GROUP BY TBLAV.PimProductId '
				
  END 
  ELSE IF  @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+'  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Simple Select','Multi Select')
							AND AttributeValue <> ''
							AND AttributeValue IS NOT NULL
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = '  			 
			   SELECT TBLAV.PimAttributeValueId,ZPAVL.PimAttributeDefaultValueId , ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimAttributeValueId ,TBLAV.PimProductId ORDER BY TBLAV.PimAttributeValueId ,TBLAV.PimProductId  ) RowId
			   INTO #temp_Table 
			   FROM #TBL_AttributeValueId TBLAV 
			   INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId)
			   WHERE (ZPAVL.LocaleId = '+Cast(@localeId AS VARCHAR(200))+' OR ZPAVL.LocaleId = '+Cast(@DefaultlocaleId AS VARCHAR(200))+')
				
				;with Cte_AttributeValue AS 
			   (
	            SELECT TBLAV.PimAttributeValueId ,SUBSTRING((SELECT '',''+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN #temp_Table  ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = CASE WHEN ZPAVL.RowId = 2 THEN '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  
				FOR XML PATH('''') ),2,4000) AttributeValue,TBLAV.AttributeCode ,TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
				GROUP BY TBLAV.PimAttributeValueId,TBLAV.AttributeCode ,TBLAV.PimProductId 
			   )
  
				SELECT   TBLAV.PimProductId
				FROM  #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'	GROUP BY TBLAV.PimProductId '

  END 
   PRINT @SQL 
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   DROP TABLE #TBL_AttributeDefaultValue
END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No') )
BEGIN  
   
  IF @DefaultLocaleId = @LocaleID AND @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN View_PimProducttextValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
 
  SET @SQL = '	SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId   ) ' END 
				+' GROUP BY TBLAV.PimProductId '

  END 
  ELSE IF @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeDetails AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId = CASE WHEN ZPAVL'+CAST(ID AS VARCHAR(200))+'.RowId = 2 THEN  '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = ' 
     ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.PimProductId,ZPAVL.AttributeValue,TBLAV.AttributeCode,ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimProductId,TBLAV.AttributeCode ORDER BY TBLAV.PimProductId,TBLAV.AttributeCode  ) RowId
	 FROM #TBL_AttributeValueId TBLAV 
	 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId )
	 WHERE (LocaleId = '+Cast(@DefaultLocaleId AS Varchar(300))+' OR LocaleId = '+CAST(@LocaleId AS Varchar(300))+' )'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END +'
	 ) 
	 SELECT  TBLAV.PimProductId 
  	 FROM #TBL_AttributeValueId TBLAV
	 '+@InternalProductWhereClause+'
	 GROUP BY TBLAV.PimProductId 
	 '
	 

  END 
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Text Area') )
BEGIN    
  IF @DefaultLocaleId = @LocaleID AND @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
								STUFF( (  SELECT ' INNER JOIN View_PimProductTextAreaValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text Area')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
 
  SET @SQL = '
              SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  END 
  ELSE IF @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeDetails AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId = CASE WHEN ZPAVL'+CAST(ID AS VARCHAR(200))+'.RowId = 2 THEN  '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text Area')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = ' 
     ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.PimProductId,TBLAV.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimProductId,TBLAV.AttributeCode ORDER BY TBLAV.PimProductId,TBLAV.AttributeCode  ) RowId
	 FROM #TBL_AttributeValueId TBLAV 
	 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId )
	 WHERE (LocaleId = '+Cast(@DefaultLocaleId AS Varchar(300))+' OR LocaleId = '+CAST(@LocaleId AS Varchar(300))+' )
	 
	 ) 
	 SELECT  TBLAV.PimProductId 
  	 FROM #TBL_AttributeValueId TBLAV
	 '+@InternalProductWhereClause+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' 
							GROUP BY TBLAV.PimProductId 	
							'
   END 
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode  LIKE '%PublishStatus%' )
BEGIN    
 
  SET @SQL = '
              SELECT  TBLAV.PimProductId 
				FROM ZnodePimProduct TBLAV
				WHERE CASE WHEN TBLAV.IsProductPublish  IS NULL THEN ''Not Published'' 
				WHEN TBLAV.IsProductPublish = 0 THEN ''Draft''
				ELSE  ''Published'' END '+(SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%PublishStatus%')+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode  LIKE '%AttributeFamily%' )
BEGIN 

 ;With Cte_attributeValue AS 
   (
	 SELECT ZPAF.PimAttributeFamilyId,FamilyCode,AttributeFamilyName ,ZPFL.LocaleId
	 FROM ZnodePimAttributeFamily ZPAF
	 INNER JOIN ZnodePimFamilyLocale ZPFL ON (ZPFL.PimAttributeFamilyId = ZPAF.PimAttributeFamilyId) 
	 WHERE ZPFL.LocaleId IN (@DefaultLocaleId,@LocaleId)
	 ) 
   , Cte_AttributeValueAttribute AS (
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	   FROM Cte_attributeValue RTY 
	   WHERE LocaleId = @LocaleId
      )
   , Cte_AttributeValueTht AS (
      SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_AttributeValueAttribute
	  UNION ALL 
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_attributeValue TYY  
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeValueAttribute THE WHERE THE.PimAttributeFamilyId = TYY.PimAttributeFamilyId )
	  AND TYY.LocaleId = @DefaultLocaleId
	  )
  
  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
  INTO #TBL_FamilyLocale
  FROM Cte_AttributeValueTht 


  SET @SQL = '
                SELECT  TBLAV.PimProductId 
				FROM ZnodePimProduct TBLAV 
				INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
				WHERE AttributeFamilyName '+(SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%AttributeFamily%')+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  
   
  
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
SET @SQL = '
 IF EXISTS ( SELECT TOP 1 1 FROM tempdb..sysobjects WHERE name = ''##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+''' )
  BEGIN 
   DROP TABLE ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+'
  END 
 CREATE TABLE ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+' (PimProductId INT )
 INSERT INTO  ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+'
 SELECT PimProductId 
 FROM #TBL_PimProductId
'
   EXEC (@SQL)
   DROP TABLE #TBL_PimProductId
   DROP TABLE #TBL_AttributeValueId
   DROP TABLE #TBL_PimProductIdDelete
 END
GO



IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetFormBuilderList')
	drop proc Znode_GetFormBuilderList
go
CREATE  PROCEDURE [dbo].[Znode_GetFormBuilderList]
(   @WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT

)
AS 
   /* 
   SUMMARY : Stored Procedure to Get list of searchProfileid 
   Unit Testing:

   -- EXEC Znode_GetFormBuilderList @WhereClause = '',@RowsCount = 0
   
   
   	*/

     BEGIN
         BEGIN TRY

		 SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 

		 
			DECLARE @TBL_FormBuilder TABLE (FormBuilderId INT,FormCode nvarchar(200), FormDescription nvarchar(200), RowId INT, CountNo INT)


		SET @SQL = '

		;With Cte_GetFormBuilderDetails 
		 AS     (

				SELECT  ZFB.FormBuilderId,ZFB.FormCode,ZFB.FormDescription
				FROM ZnodeFormBuilder ZFB
				--INNER JOIN ZnodePortal ZP ON (ZP.PortalId = ZFB.PortalId)
								
				)



				,Cte_GetFilterFormBuilder
				AS (
				SELECT FormBuilderId,FormCode,FormDescription,
				'+dbo.Fn_GetPagingRowId(@Order_BY,'FormBuilderId DESC')+',Count(*)Over() CountNo 
				FROM  Cte_GetFormBuilderDetails CGPTL 
				WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						
				)
																								
				SELECT FormBuilderId,FormCode,FormDescription,RowId,CountNo
				FROM Cte_GetFilterFormBuilder
				'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						
				INSERT INTO @TBL_FormBuilder(FormBuilderId,FormCode,FormDescription,RowId,CountNo)
				EXEC(@SQL)

				SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_FormBuilder ),0)
			
				SELECT FormBuilderId,FormCode,FormDescription
				FROM @TBL_FormBuilder

			
				
		
		 END TRY
		 BEGIN CATCH
			 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetFormBuilderList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetFormBuilderList',
				@ErrorInProcedure = 'Znode_GetFormBuilderList',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		 END CATCH
     END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetGlobalEntityAttributeValue')
	drop proc Znode_GetGlobalEntityAttributeValue
go
CREATE   PROCEDURE [dbo].[Znode_GetGlobalEntityAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0--,
 --   @LocaleId       INT = 0,
	--@GlobalEnt
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
         BEGIN TRY
 


		 IF @EntityName='Store'
			 Exec [dbo].[Znode_GetPortalGlobalAttributeValue] 
			 @EntityName=@EntityName,
			 @GlobalEntityValueId=@GlobalEntityValueId
		 Else IF @EntityName='User'
			 Exec [dbo].[Znode_GetUserGlobalAttributeValue] 
			 @EntityName=@EntityName,
			 @GlobalEntityValueId=@GlobalEntityValueId
		Else IF @EntityName='Account'
			 Exec [dbo].[Znode_GetAccountGlobalAttributeValue] 
			 @EntityName=@EntityName,
			 @GlobalEntityValueId=@GlobalEntityValueId
		--Else IF @EntityName='FormBuilder'
		--	 Exec [dbo].[Znode_GetFormBuilderGlobalAttributeValue] 
		--	 @EntityName=@EntityName,
		--	 @GlobalEntityValueId=@GlobalEntityValueId
   
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetGlobalEntityAttributeValue @EntityName = '''+ISNULL(@EntityName,'''''')+''',@GlobalEntityValueId='+ISNULL(CAST(@GlobalEntityValueId AS VARCHAR(50)),'''')      			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityAttributeValue',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetImportTemplateLogs')
	drop proc Znode_GetImportTemplateLogs
go
CREATE PROCEDURE [dbo].[Znode_GetImportTemplateLogs]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT)
AS
    /*
	
    Summary : Get Import Template Log details and errorlog associated to it
     Unit Testing 
	 begin tran
    DECLARE @RowsCount INT;
    EXEC Znode_GetImportTemplateLogs @WhereClause = '',@Rows = 1000,@PageNo = 1,@Order_BY = NULL,@RowsCount = @RowsCount OUT;
	rollback tran
   
    */
	 BEGIN
        BEGIN TRY
          SET NOCOUNT ON;
		     DECLARE @SQL NVARCHAR(MAX);
             DECLARE @TBL_ErrorLog TABLE(ImportHeadId INT, ImportName NVARCHAR(100),TemplateName VARCHAR(300) ,[Status] VARCHAR(50) ,ProcessStartedDate DATETIME ,ProcessCompletedDate DATETIME
										,ImportTemplateId INT,ImportProcessLogId INT ,RowId INT,CountNo  INT)

             SET @SQL = ' 
					   ;With Cte_ErrorLog AS (
						select zih.ImportHeadId, zih.NAME ImportName, zit.TemplateName TemplateName ,zipl.Status ,
						zipl.ProcessStartedDate,
						zipl.ProcessCompletedDate,zipl.ImportTemplateId ,zipl.ImportProcessLogId,zipl.Createdby
						from ZnodeImportHead zih inner join  ZnodeImportTemplate zit ON zih.ImportHeadId = zit.ImportHeadId  
						Inner join ZnodeImportProcessLog zipl on zit.ImportTemplateId = zipl.ImportTemplateId
						) 
						,Cte_ErrorlogFilter AS
						(

					   SELECT ImportHeadId,ImportName,TemplateName,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId
								,ImportProcessLogId,'+dbo.Fn_GetPagingRowId(@Order_BY,'ImportProcessLogId DESC')+', Count(*)Over() CountNo
					   FROM Cte_ErrorLog
					   WHERE 1 = 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						) 
					   SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo 
					   FROM Cte_ErrorlogFilter 
					   '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
	       
			 INSERT INTO @TBL_ErrorLog (ImportHeadId, ImportName,TemplateName ,[Status],ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId,RowId,CountNo )
			 EXEC(@SQl)												
             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ErrorLog ), 0);

			 SELECT ImportHeadId, ImportName,TemplateName ,Status,ProcessStartedDate,ProcessCompletedDate,ImportTemplateId ,ImportProcessLogId
			 FROM @TBL_ErrorLog
           
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImportTemplateLogs @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetImportTemplateLogs',
				@ErrorInProcedure = 'Znode_GetImportTemplateLogs',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                   
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetManageMessagelist')
	drop proc Znode_GetManageMessagelist
go
CREATE procedure [dbo].[Znode_GetManageMessagelist]
(  
	 @WhereClause NVARCHAR(Max)     
	,@Rows INT = 100     
	,@PageNo INT = 1     
	,@Order_BY VARCHAR(1000) = ''  
	,@RowsCount INT OUT  
	,@LocaleId INT =1  
)  
AS  
/*
 Summary: Get Managed Message Details list for a PortalId
 Unit Testing:
	declare @p7 int
	set @p7=NULL
	exec sp_executesql N'Znode_GetManageMessagelist @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT,@LocaleId',N'@WhereClause nvarchar(57),@Rows int,@PageNo int,@Order_By nvarchar(17),@RowCount int output,@LocaleId int',@WhereClause=N'localeid = 1 and (PortalId in(''1'',''4'',''5'',''6'',''32'',''33''))',@Rows=50,@PageNo=1,@Order_By=N'PublishStatus asc',@RowCount=@p7 output,@LocaleId=1
	select @p7 

 */
BEGIN    
  BEGIN TRY   
    SET NOCOUNT ON      
    DECLARE @SQL NVARCHAR(MAX)  
     	
    DECLARE @TBL_ManageMessage TABLE (CMSPortalMessageId INT,CMSMessageId INT,[Message] NVARCHAR(max),Location NVARCHAR(100),StoreName NVARCHAR(max)
								,LocaleId INT,PortalId INT,CMSMessageKeyId INT,MessageTag NVARCHAR(max),RowId INT,CountNo INT,PublishStatus NVARCHAR(max))
              
    SET @SQL = ' 
			  ;With Cte_ManageMessage AS 
			  (
			  SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId, MessageTag ,
			  CASE when Isnull(PublishStatus,0) =0 then ''Draft'' else ''Published'' END PublishStatus
			  FROM View_Getmanagemessagelist
			  )
			  ,Cte_ManageMessageFilter AS 
			  (
			   SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId
						,MessageTag,PublishStatus ,'+dbo.Fn_GetPagingRowId(@Order_BY,'CMSPortalMessageId DESC')+',Count(*)Over() CountNo 
			   FROM Cte_ManageMessage 
			   WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
			  )
	  
			  SELECT CMSPortalMessageId, CMSMessageId, [Message], Location,StoreName,LocaleId,PortalId,CMSMessageKeyId, MessageTag,PublishStatus,RowId,CountNo 
			  FROM Cte_ManageMessageFilter
			  '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)

			  print @sql


			  INSERT INTO @TBL_ManageMessage (CMSPortalMessageId,CMSMessageId,[Message],Location,StoreName,LocaleId,PortalId,CMSMessageKeyId,MessageTag,PublishStatus,RowId,CountNo)
			  EXEC (@SQL)
			  SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ManageMessage ),0)

			  SELECT CMSPortalMessageId,CMSMessageId,[Message],Location,StoreName,LocaleId,PortalId,CMSMessageKeyId,MessageTag,  PublishStatus
			  FROM @TBL_ManageMessage
    


			END TRY     
			BEGIN CATCH        
	         DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetManageMessagelist @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetManageMessagelist',
				@ErrorInProcedure = 'Znode_GetManageMessagelist',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;  
   END CATCH     
END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetMediaFolderDetails')
	drop proc Znode_GetMediaFolderDetails
go
CREATE PROCEDURE [dbo].[Znode_GetMediaFolderDetails]
( @WhereClause VARCHAR(1000),
  @MediaPathId INT,
  @Rows        INT           = 1000,
  @PageNo      INT           = 0,
  @Order_BY    VARCHAR(1000) = '',
  @RowsCount   INT OUT,
  @LocaleId    INT           = 1)
AS
/*
  Summary: This Procedure is Used to Get Details of Media Folder
  Unit Testing:
  begin tran
	DECLARE @RowsCount BIGINT  
	EXEC Znode_GetMediaFolderDetails @MediaPathId = -1 , @WhereClause='',@Rows=2147483647,@PageNo=1 ,@Order_By='', @RowsCount = @RowsCount OUT  
  rollback tran
  begin tran
	DECLARE @RowsCount BIGINT  
	EXEC Znode_GetMediaFolderDetails @MediaPathId = 1 , @WhereClause='' ,@Rows=10,@PageNo=1 ,@RowsCount =@RowsCount 
  rollback tran
*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @Rows_start VARCHAR(1000), @Rows_end VARCHAR(1000);
             SET @MediaPathId =  CASE WHEN @MediaPathId = -1 THEN 1 ELSE @MediaPathId END
			 
			 SET @Rows_start = CASE
                                   WHEN @Rows >= 1000000
                                   THEN 0
                                   ELSE(@Rows * (@PageNo - 1)) + 1
                               END;
             SET @Rows_end = CASE
                                 WHEN @Rows >= 1000000
                                 THEN @Rows
                                 ELSE @Rows * (@PageNo)
                             END;
             DECLARE @SQL NVARCHAR(MAX);
		

             SET @Order_BY = REPLACE(@Order_BY, 'MediaPathId', 'Convert(numeric,MediaPathId)');
             SET @Order_BY = REPLACE(@Order_BY, 'Size', 'Convert(numeric,Size)');
             SET @Order_BY = REPLACE(@Order_BY, 'MediaId', 'Convert(numeric,MediaId)');
             SET @Order_BY = REPLACE(@Order_BY, 'CreatedBy', 'Convert(numeric,CreatedBy)');
             SET @Order_BY = REPLACE(@Order_BY, 'MediaCategoryId', 'Convert(numeric,MediaCategoryId)');

             SET @SQL = ' DECLARE @V_MediaServerPath  VARCHAR(max) , @V_MediaServerThumbnailPath  VARCHAR(MAx)  


			 SELECT RANK()OVER(ORDER BY '+CASE
                                                 WHEN @Order_BY IS NULL
                                                      OR @Order_BY = ''
                                                 THEN ''
                                                 ELSE @Order_BY+' ,'
                                          END+'MediaId ) RowId, [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
			 [MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath,
			  ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,[FamilyCode],[CreatedBy],[ShortDescription],[DisplayName] 
			 INTO #MediaPathDetail FROM '+CASE
                                                 WHEN @MediaPathId = -1
                                                 THEN ' View_GetAllMediaInRoot '
                                                 ELSE ' View_GetMediaPathDetail ZMC '
                                          END+' WHERE 1=1 '+CASE
                                                                   WHEN @WhereClause = ''
                                                                        OR @WhereClause IS NULL
                                                                        OR @WhereClause = '-1' 
                                                                   THEN 'AND exists (select top 1 1 from DBO.FN_GetMediaPathHierarchy('+CAST( @MediaPathId  AS VARCHAR(1000))+') Q 
			 where Q.MediaPathId = ZMC.MediaPathId )'
                                                                   ELSE CASE
                                                                            WHEN @MediaPathId = -1
                                                                            THEN ' AND '+@WhereClause
                                                                            ELSE ' AND exists (select top 1 1 from DBO.FN_GetMediaPathHierarchy('+CAST( @MediaPathId AS VARCHAR(1000))+') Q 
			 where Q.MediaPathId = ZMC.MediaPathId ) and  '+@WhereClause
                                                                        END
                                                               END+' Order BY '+CASE
                                                                                    WHEN @Order_BY IS NULL
                                                                                         OR @Order_BY = ''
                                                                                    THEN ' MediaCategoryId DESC'
                                                                                    ELSE @Order_BY
                                                                                END+' SELECT  @Count=ISNULL(Count(1),0) FROM  #MediaPathDetail  SELECT [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
			 [MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath, ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,
			 [FamilyCode],[CreatedBy],[ShortDescription],[DisplayName] FROM #MediaPathDetail 
			 WHERE RowId BETWEEN '+@Rows_start+' AND '+@Rows_end+' Order BY '+CASE
                                                                                   WHEN @Order_BY IS NULL
                                                                                        OR @Order_BY = ''
                                                                                   THEN ' MediaCategoryId DESC '
                                                                                   ELSE @Order_BY
                                                                              END;
           PRINT @SQL 
             EXEC SP_executesql
                  @SQL,
                  N'@Count INT OUT',
                  @Count = @RowsCount OUT;
				 
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetMediaFolderDetails @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@MediaPathId='+ISNULL(CAST(@WhereClause AS VARCHAR(100)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetMediaFolderDetails',
				@ErrorInProcedure = 'Znode_GetMediaFolderDetails',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                                
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetOmsOrderDetail')
	drop proc Znode_GetOmsOrderDetail
go
CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( @WhereClause NVARCHAR(MAx),
  @Rows        INT            = 100,
  @PageNo      INT            = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT			,
  @UserId	   INT = 0 ,
  @IsFromAdmin int=0
  )
AS 
    /*  
     Summary : This procedure is used to get the oms order detils                 
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables			  	 
	 Unit Testing:
	
     EXEC Znode_GetOmsOrderDetail '',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 80, @PageNo = 1
	     EXEC Znode_GetOmsOrderDetail null,@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 80, @PageNo = 1
	 	        
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'

             DECLARE @TBL_OrderList TABLE (OmsOrderId INT,OrderNumber VARCHAR(200),PortalId INT,StoreName NVARCHAR(MAX),CurrencyCode VARCHAR(100),OrderState NVARCHAR(MAX),ShippingId INT ,
				PaymentTypeId INT,PaymentSettingId INT,PaymentStatus NVARCHAR(MAX),PaymentType VARCHAR(100),ShippingStatus BIT ,OrderDate DATETIME,UserId INT,UserName VARCHAR(300),PaymentTransactionToken NVARCHAR(600),Total NUMERIC(28,6),
				OrderItem NVARCHAR(1000),OmsOrderDetailsId INT, ItemCount INT,PODocumentPath NVARCHAR(600),IsInRMA BIT,CreatedByName NVARCHAr(max),ModifiedByName NVARCHAR(max),RowId INT,CountNo INT,Email NVARCHAR(MAX),PhoneNumber NVARCHAR(MAX),
				SubTotal NUMERIC(28,6),TaxCost NUMERIC(28,6),ShippingCost NUMERIC(28,6),BillingPostalCode NVARCHAR(200),ShippingPostalCode NVARCHAR(200),OrderModifiedDate datetime, PaymentDisplayName nvarchar(1200), ExternalId nvarchar(1000))
				
             SET @SQL = '
			   	 
			;WIth  OrderList AS ( 

			  SELECT Zoo.OmsOrderId,Zoo.OrderNumber, Zp.PortalId,Zp.StoreName ,ZODD.CurrencyCode,case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.
PaymentTypeId,ZODD.PaymentSettingId
				,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(ZU.FirstName,'''')
						+'' ''+ISNULL(ZU.LastName,'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument,ZVGD.UserName CreatedBy , ZVGDI.UserName ModifiedBy
						,ZU.Email ,ZU.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,
						(select top 1 ShipToPostalCode from ZnodeOmsOrderShipment where OmsOrderShipmentId in  (select OmsOrderShipmentId from ZnodeOmsOrderLineItems where OmsOrderDetailsId = ZODD.OmsOrderDetailsId)) AS ShippingPostalCode,
						ZODD.ModifiedDate AS OrderModifiedDate, ZPSS.PaymentDisplayName,isnull(Zoo.ExternalId,0) ExternalId
			  FROM ZnodeOmsOrder ZOO 
			  INNER JOIN ZnodeOmsOrderDetails ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId)
			  INNER JOIN ZnodePortal ZP ON (ZP.PortalId = ZODD.portalId ) 
			  LEFT JOIN ZnodePaymentType ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
			  LEFT JOIN  ZnodeOmsOrderStateShowToCustomer ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
			  LEFT JOIN ZnodeOmsOrderState ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId) 
			  LEFT JOIN ZnodeOmsPaymentState ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
			  LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZODD.UserId) 
			  LEFT JOIN [dbo].[View_GetUserDetails]  ZVGD ON (ZVGD.UserId = ZODD.CreatedBy )
			  LEFT JOIN [dbo].[View_GetUserDetails]  ZVGDI ON (ZVGDI.UserId = ZODD.ModifiedBy)
			  LEFT JOIN ZnodeShipping ZS ON (ZS.ShippingId = ZODD.ShippingId)
			  LEFT OUTER JOIN ZnodePaymentSetting ZPSS ON (ZPSS.PaymentSettingId = ZODD.PaymentSettingId)
			  WHERE  ZODD.IsActive = 1 
		       AND (EXISTS (SELECT TOP 1 1 FROM dbo.Fn_GetRecurciveUserId ('+CAST(@UserId AS VARCHAR(50))+','''+@ProcessType+''' ) FNRU WHERE FNRU.UserId = ZU.UserId ) OR '+CAST(@UserId AS VARCHAR(50))+' =0 ) 
		
			) 

		    , Cte_OrderLineItem AS 
		    (
     
			  SELECT ZOOLI.ProductName,ZOOLI.Price,Count(ZOOLI.OmsOrderLineItemsId)Over(PARTITION BY Ol.OmsOrderId Order by ZOOLI.OmsOrderDetailsId) CountId 
			  ,Row_Number()Over( PARTITION BY Ol.OmsOrderId Order BY ZOOLI.Price DESC, ZOOLI.ProductName) RowId,Ol.OmsOrderId
			  ,CAST(Case when ZRRLI.RmaRequestItemId IS NULL THEN 0 ELSE 1 END AS BIT )  IsInRMA  ,OL.CreatedBy ,OL.ModifiedBy
			  FROM ZnodeOmsOrderLineItems  ZOOLI 
			  LEFT JOIN OrderList OL ON ( OL.OmsOrderDetailsId = ZOOLI.OmsOrderDetailsId ) 
			  LEFT JOIN ZnodeRmaRequestItem ZRRLI ON (ZRRLI.OmsOrderLineItemsId = ZOOLI.OmsOrderLineItemsId ) 
			  WHERE ZOOLI.Quantity > 0
			  -- AND OrderLineItemRelationshipTypeId IS  NULL  AND  ParentOmsTemplateLineItemId IS nULL
			  
		    )
		    ,Cte_GetOrderData AS 
			(
			 
			SELECT distinct OL.*, CTOLI.ProductName,CountId ,IsInRMA 
			FROM OrderList OL 
			LEFT JOIN Cte_OrderLineItem CTOLI ON (CTOLI.OmsOrderId = OL.OmsOrderId AND CTOLI.RowId = 1 )
		
			
			)
			, Cte_OrderLineDescribe AS (
	
			SELECT distinct *,'+dbo.Fn_GetPagingRowId(@Order_BY,'OmsOrderId DESC,OmsOrderDetailsId DESC')+',Count(*)Over() CountNo
			FROM Cte_GetOrderData 
			WHERE 1= 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
		    )
  		 
			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			ProductName OrderItem,OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,CASE WHEN CreatedBy IS NULL THEN email  ELSE CreatedBy END AS CreatedByName ,ModifiedBy as ModifiedByName,RowId,CountNo,
			Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode, ShippingPostalCode,OrderModifiedDate,PaymentDisplayName, ExternalId
			FROM Cte_OrderLineDescribe 
			'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
			
			
			PRINT @SQL 

			INSERT INTO @TBL_OrderList(OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,CreatedByName ,ModifiedByName,RowId,CountNo,Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName ,ExternalId )           
		    EXEC(@SQL)

			SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_OrderList),0)
			
			SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
			PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
			OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,CreatedByName ,ModifiedByName,Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName,ExternalId
			FROM @TBL_OrderList	
           
		


         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
			 @Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetOmsOrderDetail',
				@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetOrderByPagingProduct')
	drop proc Znode_GetOrderByPagingProduct
go

CREATE PROCEDURE [dbo].[Znode_GetOrderByPagingProduct]
(
 @Order_by  Nvarchar(max)
 ,@Rows     INT =10 
 ,@PageNo   INT =1 
 ,@PimProductId TransferId Readonly 
 ,@AttributeCode VARCHAR(max)= ''
 ,@localeId INT  
)
AS 
BEGIN 
 SET NOCOUNT ON 
 SET @AttributeCode = CASE WHEN @AttributeCode = '' OR  @AttributeCode IS NULL THEN REPLACE(REPLACE (@Order_by , ' DESC',''),' ASC','')

  ELSE @AttributeCode END 
 DECLARE @StartId INT =  CASE WHEN @PageNo = 1 OR @PageNo = 0 THEN 1 ELSE ((@PageNo-1)*@Rows)+1 END 
 DECLARE @EndId INT = CASE WHEN @PageNo = 0 THEN @Rows ELSE @PageNo*@Rows END
 ,@DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleID()   
 
 DECLARE @AttributeTypeName NVARCHAR(2000)= ''

 SELECT TOP 1 @AttributeTypeName = AttributeTypeName 
 FROM ZnodePimAttribute ZPA 
 INNER JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)
 WHERE ZPA.AttributeCode = @AttributeCode
 
 IF  @Order_by = '' 
 BEGIN 
  
  ;WIth Cte_getData AS ( 
  
  SELECT Id , ROW_NUMBER()Over(Order by ZPP.ModifiedDate DESC,ZPP.PimProductId) RowId  
  FROM @PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
  
  ) 
  
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 
 END 
 IF  @Order_by LIKE 'PimProductId%'  OR @Order_by LIKE 'DisplayOrder%'
 BEGIN 
  ;WIth Cte_getData AS (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by ZPP.PimProductId DESC) ELSE 
	  ROW_NUMBER()Over(Order by ZPP.PimProductId ASC) END  RowId 
  FROM @PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
  ) 
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 END 
 ELSE IF  @Order_by LIKE  'ModifiedDate%' 
 BEGIN 
  ;with Cte_GetData AS
  (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by ZPAV.ModifiedDate DESC ,ZPAV.PimProductId) ELSE 
	  ROW_NUMBER()Over(Order by ZPAV.ModifiedDate ASC ,ZPAV.PimProductId) END  RowId 
  FROM  @PimProductId TBLP
  INNER JOIN ZnodePimAttributeValue ZPAV ON (TBLP.Id = ZPAV.PimProductId)
  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
  WHERE ZPA.AttributeCode = CASE WHEN @AttributeCode = '' OR @AttributeCode = 'ModifiedDate'  THEN 'SKU' ELSE @AttributeCode END 
  )
  SELECT ID PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 END
  ELSE IF  @Order_by LIKE  'PublishStatus%' 
 BEGIN 
  
  ;With Cte_GetData AS
  (
    SELECT TBLP.Id ,CASE WHEN ZPP.IsProductPublish  IS NULL THEN 'Not Published' 
				WHEN ZPP.IsProductPublish = 0 THEN 'Draft'
				ELSE  'Published' END PublishStatus 
  FROM  @PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP oN (ZPP.PimProductId = TBLP.Id) 
  )
  , Cte_Attruyr AS 
  (
  SELECT Id , CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by PublishStatus DESC , Id ) ELSE 
	  ROW_NUMBER()Over(Order by PublishStatus ASC ,  Id ) END  RowId 
  FROM  Cte_GetData
  
  )
  SELECT ID PimProductId ,RowId
  FROM Cte_Attruyr CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 END
 ELSE IF  @Order_by LIKE  'AttributeFamily%' 
 BEGIN 
 ;With Cte_attributeValue AS 
   (
	 SELECT ZPAF.PimAttributeFamilyId,FamilyCode,AttributeFamilyName ,ZPFL.LocaleId
	 FROM ZnodePimAttributeFamily ZPAF
	 INNER JOIN ZnodePimFamilyLocale ZPFL ON (ZPFL.PimAttributeFamilyId = ZPAF.PimAttributeFamilyId) 
	 WHERE ZPFL.LocaleId IN (@DefaultLocaleId,@LocaleId)
	 ) 
   , Cte_AttributeValueAttribute AS (
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	   FROM Cte_attributeValue RTY 
	   WHERE LocaleId = @LocaleId
      )
   , Cte_AttributeValueTht AS (
      SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_AttributeValueAttribute
	  UNION ALL 
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_attributeValue TYY  
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeValueAttribute THE WHERE THE.PimAttributeFamilyId = TYY.PimAttributeFamilyId )
	  AND TYY.LocaleId = @DefaultLocaleId
	  )
  
  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
  INTO #TBL_FamilyLocale
  FROM Cte_AttributeValueTht 

 ;With Cte_GetData AS (
    SELECT  TBLAV.PimProductId ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by THY.AttributeFamilyName DESC ,TBLAV.PimProductId) ELSE 
	  ROW_NUMBER()Over(Order by THY.AttributeFamilyName ASC ,TBLAV.PimProductId) END  RowId 
	FROM ZnodePimProduct TBLAV 
	INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
  )
  SELECT PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
 
 END
 ELSE IF @AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
 BEGIN 
  IF @DefaultLocaleId = @LocaleID 
  BEGIN 
  ;With Cte_getData AS ( 
  SELECT VPP.PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	  ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId 
  FROM @PimProductId TBLP 
  INNER JOIN View_PimProducttextValue VPP ON (TBLP.Id = VPP.PimProductId ) 
  WHERE AttributeCode = @AttributeCode 
  AND LocaleId = @LocaleID
  ) 
  SELECT PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
  END 
  ELSE 
  BEGIN 
   ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By TBLAV.ID,ZPAVL.AttributeCode ORDER BY TBLAV.ID,ZPAVL.AttributeCode  ) RowIdIn
	 FROM @PimProductId   TBLAV 
	 INNER JOIN View_PimProducttextValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	 AND AttributeCode = @AttributeCode
	 ) 
	 ,Cte_DataLocale AS 
	 (
	 SELECT  TBLAV.PimProductId ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId) END RowId
  	 FROM Cte_AttributeDetails TBLAV 
	 WHERE LocaleId = CASE WHEN RowIdIn =2 THEN @localeId ELSE @DefaultLocaleId END 
	 ) 
	 SELECT PimProductId ,RowId
	 FROM Cte_DataLocale 
	 WHERE RowId BETWEEN @StartId AND @EndId
  END 
 END
 ELSE IF @AttributeTypeName IN ('Simple Select','Multi Select') 
  BEGIN 
 DECLARE @PimAttributeId TransferId 

 INSERT INTO @PimAttributeId 
 SELECT PimAttributeId
 FROM  ZnodePimAttribute 
 WHERE AttributeCode = @AttributeCode  
 CREATE TABLE #TBL_AttributeDefaultValue ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  ) 
  --DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
			 -- here collect the both locale data 
             SELECT   VIPDV.PimAttributeId,VIPDV.AttributeDefaultValueCode,VIPDV.IsEditable,VIPDVL.AttributeDefaultValue,VIPDVL.LocaleId,VIPDV.PimAttributeDefaultValueId,VIPDV.DisplayOrder
             
			 INTO #Cte_DefaultValueLocale
			 FROM [dbo].[ZnodePimAttributeDefaultValue] VIPDV
			 INNER JOIN [dbo].[ZnodePimAttributeDefaultValueLocale] VIPDVL ON (VIPDVL.PimAttributeDefaultValueId = VIPDV.PimAttributeDefaultValueId) 
             WHERE VIPDVL.LocaleId IN(@DefaultLocaleId, @LocaleId) 
             AND EXISTS
             (
                SELECT TOP 1 1
                FROM @PimAttributeId SP
                WHERE SP.id = VIPDV.PimAttributeId
             )

			 -- filter for first locale
             ;with Cte_DefaultValueFirstLocale
             AS (SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @LocaleId	 
                ),

			 -- get data for second locale if not exists for firts locale 
             Cte_DefaultValueSecondLocale
             AS (SELECT CTDVFL.PimAttributeId,CTDVFL.AttributeDefaultValueCode,CTDVFL.IsEditable,CTDVFL.AttributeDefaultValue,CTDVFL.PimAttributeDefaultValueId,CTDVFL.DisplayOrder
                 FROM Cte_DefaultValueFirstLocale CTDVFL
                 UNION ALL
                 SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @DefaultLocaleId 
                 AND NOT EXISTS
                  (
                      SELECT TOP 1 1
                      FROM Cte_DefaultValueFirstLocale CTDVFL
                      WHERE CTDVFL.PimAttributeDefaultValueId = CTDVL.PimAttributeDefaultValueId
                  ))

                 

    
 INSERT INTO #TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
  SELECT PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId
                  FROM Cte_DefaultValueSecondLocale;


  IF @DefaultLocaleId = @LocaleID 
  BEGIN
    
      ;with Cte_AttributeValue AS 
	  (
	  SELECT  PimProductId , SUBSTRING((SELECT ','+AttributeDefaultValue 
											FROM #TBL_AttributeDefaultValue TTR 
											INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
											WHERE ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId  
											AND ZPAVL.LocaleId = @localeId 
											FOR XML PATH('') ),2,4000) AttributeValue
	  FROM @PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  WHERE AttributeCode = @AttributeCode
	 ) 
	 ,CTe_GetDataIn AS 
	 (
	 SELECT PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId
	 FROM  Cte_AttributeValue  VPP
     ) 
	 SELECT PimProductId ,RowId
	 FROM CTe_GetDataIn 
	 WHERE RowId BETWEEN @StartId AND @EndId 
   END 
   ELSE 
   BEGIN
    SELECT ZPAV.PimAttributeValueId,ZPAVL.PimAttributeDefaultValueId , ZPAVL.LocaleId ,COUNT(*)Over(Partition By ZPAV.PimAttributeValueId ,ZPAV.PimProductId ORDER BY ZPAV.PimAttributeValueId ,ZPAV.PimProductId  ) RowId
			   INTO #temp_Table 
			   FROM @PimProductId TBLP  
	           INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
			   INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
			   WHERE (ZPAVL.LocaleId = @localeId  OR ZPAVL.LocaleId = @DefaultlocaleId )

   ;with Cte_AttributeValue AS 
	  (
	  SELECT  PimProductId ,SUBSTRING((SELECT ','+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN #temp_Table  ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = CASE WHEN ZPAVL.RowId = 2 THEN @LocaleId  ELSE @DefaultLocaleId  END  
				FOR XML PATH('') ),2,4000) AttributeValue
	  FROM @PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  WHERE AttributeCode = @AttributeCode
	 ) 
	 ,CTe_GetDataIn AS 
	 (
	 SELECT PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId
	 FROM  Cte_AttributeValue  VPP
     ) 
	 SELECT PimProductId ,RowId
	 FROM CTe_GetDataIn 
	 WHERE RowId BETWEEN @StartId AND @EndId 
   
   END 
    DROP TABLE #TBL_AttributeDefaultValue
  END 
  ELSE IF @AttributeTypeName IN ('Text Area') 
  BEGIN 
   IF @DefaultLocaleId = @LocaleID 
   BEGIN 
   ;With Cte_getData AS ( 
    SELECT VPP.PimProductId  ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
    ROW_NUMBER()Over(Order by VPP.AttributeValue DESC ,VPP.PimProductId) ELSE  
	  ROW_NUMBER()Over(Order by VPP.AttributeValue ASC ,VPP.PimProductId) END RowId 
  FROM @PimProductId TBLP 
  INNER JOIN View_PimProductTextAreaValue VPP ON (TBLP.Id = VPP.PimProductId ) 
  WHERE AttributeCode = @AttributeCode 
  AND LocaleId = @LocaleID
  ) 
  SELECT PimProductId ,RowId
  FROM Cte_GetData CTE
  WHERE RowId BETWEEN @StartId AND @EndId
   END 
   ELSE 
   BEGIN 
   ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By ZPAVL.PimProductId,ZPAVL.AttributeCode ORDER BY ZPAVL.PimProductId,ZPAVL.AttributeCode  ) RowIdIn
	 FROM @PimProductId   TBLAV 
	 INNER JOIN View_PimProductTextAreaValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	 AND AttributeCode = @AttributeCode
	 ) 
	 ,Cte_DataLocale AS 
	 (
	 SELECT  TBLAV.PimProductId ,CASE WHEN @Order_by LIKE  '% DESC' THEN 
       ROW_NUMBER()Over(Order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId) ELSE  
	    ROW_NUMBER()Over(Order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId) END RowId
  	 FROM Cte_AttributeDetails TBLAV 
	 WHERE LocaleId = CASE WHEN RowIdIn = 2 THEN @localeId ELSE @DefaultLocaleId END 
	 ) 
	 SELECT PimProductId ,RowId
	 FROM Cte_DataLocale 
	 WHERE RowId BETWEEN @StartId AND @EndId
   END 
END 
END
GO

IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPimAttributes')
	drop proc Znode_GetPimAttributes
go
CREATE  PROCEDURE [dbo].[Znode_GetPimAttributes]
(   @WhereClause         VARCHAR(MAX)  = '',
    @Rows                INT           = 100,
    @PageNo              INT           = 1,
    @Order_BY            VARCHAR(1000) = '',
    @RowsCount           INT OUT,
    @LocaleId            INT           = 0,
    @PimAttributeId      VARCHAR(MAX)  = '',
    @IsReturnAllCoulumns BIT           = 0)
AS
/*
     Summary :- This Procedure is used to get the attribute details with the attribute name locale wise 
				Result is fetched order by PimAttributeId in descending order
     Unit Testing 
	 
     EXEC [Znode_GetPimAttributes] '',10,1,'',0,1,'54,53,56',1

	
*/
     BEGIN
         SET NOCOUNT ON;
		 
         BEGIN TRY
             DECLARE @SQL NVARCHAR(MAX);
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetdefaultLocaleId();
            
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300),
			  IsComparable BIT,
			  IsUseInSearch BIT,
			  IsFacets BIT,
			  UsedInProductsCount int,
              RowId                INT,
              CountId              INT
             );
             IF @PimAttributeId <> ''
                 BEGIN
                     SET @WhereClause = CASE  WHEN @WhereClause = '' THEN '' ELSE ' AND ' END+' EXISTS (SELECT TOP 1  1  FROM dbo.Split('''+@PimAttributeId+''','','') SP WHERE SP.Item = CTPADV.PimAttributeId )';                                            
                 END;

			--collect count of used attribute in product.
            IF OBJECT_ID('tempdb..#AttributeCount', 'U') IS NOT NULL
			Begin
				DROP TABLE tempdb..#AttributeCount 
			End
			
			CREATE TABLE tempdb..#AttributeCount ( PimAttributeId int ,UsedInProductsCount  int  )

			INSERT INTO tempdb..#AttributeCount ( PimAttributeId,UsedInProductsCount)
				SELECT AD.PimAttributeId,COUNT(PAV.PimProductId) 
				FROM ZnodePimAttribute AD Inner JOIN ZnodePimAttributeValue PAV ON AD.PimAttributeId = PAV.PimAttributeId
				WHERE AD.IsCategory =0 
				GROUP BY AD.PimAttributeId
						

             SET @SQL = '
		     ;With Cte_PimAttribute AS 
			 (
				 SELECT ZPA.PimAttributeId,ZPA.ParentPimAttributeId,ZPA.AttributeTypeId,ZPA.AttributeCode,ZPA.IsRequired,ZPA.IsLocalizable,ZPA.IsFilterable
				 ,ZPA.IsSystemDefined,ZPA.IsConfigurable,ZPA.IsPersonalizable,ZPA.DisplayOrder,ZPA.HelpDescription,ZPA.IsCategory,ZPA.IsHidden
				 ,ZPA.CreatedBy,ZPA.CreatedDate,ZPA.ModifiedBy,ZPA.ModifiedDate,ZPAL.AttributeName,ZAT.AttributeTypeName , ZPAL.LocaleId ,
				  ZPFP.IsComparable,ZPFP.IsUseInSearch,ZPFP.IsFacets,AC.UsedInProductsCount
				 FROM ZnodePimAttribute ZPA 
				 INNER JOIN ZnodePimAttributeLocale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId)
				 INNER JOIN ZnodeAttributeType ZAT ON (ZAT.AttributeTypeId = ZPA.AttributeTypeId)
				 Left Outer JOIN ZnodePimFrontendProperties ZPFP ON ZPA.PimAttributeId = ZPFP.PimAttributeId 
				 Left Outer Join tempdb..#AttributeCount AC on ZPA.PimAttributeId = AC.PimAttributeId
				 WHERE IsHidden = 0
			 )
			 , Cte_PimAttributeFirstLocale AS 
			 (
				 SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable
				 ,IsSystemDefined,IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden
				 ,AttributeName ,AttributeTypeName,CreatedDate,ModifiedDate,LocaleId
				 ,IsComparable,IsUseInSearch,IsFacets,UsedInProductsCount
				 FROM Cte_PimAttribute CTA 
				 WHERE LocaleId = '+CAST(@localeId AS VARCHAR(20))+'
			 )
			 , Cte_PimAttributeDefaultLocale AS 
			 (
			     SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable
			     ,IsSystemDefined,IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden
			     ,AttributeName ,AttributeTypeName,CreatedDate,ModifiedDate,LocaleId,IsComparable,IsUseInSearch,IsFacets,UsedInProductsCount
			     FROM Cte_PimAttributeFirstLocale 
			     UNION ALL 
			     SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable
				 ,IsSystemDefined,IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden
				 ,AttributeName ,AttributeTypeName,CreatedDate,ModifiedDate,LocaleId,IsComparable,IsUseInSearch,IsFacets,UsedInProductsCount
			     FROM Cte_PimAttribute CTA
			     WHERE LocaleId = '+CAST(@DefaultLocaleId AS VARCHAR(20))+'
			     AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_PimAttributeFirstLocale CTAFL WHERE CTAFL.PimAttributeId = CTA.PimAttributeId)		 
			  )
			  ,Cte_PimAttributeFilter AS 
			  (
			     SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable
				 ,IsSystemDefined,IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate
				 ,AttributeName ,AttributeTypeName,LocaleId,IsComparable,IsUseInSearch,IsFacets ,UsedInProductsCount, '+[dbo].[Fn_GetPagingRowId](@Order_BY, ' PimAttributeId DESC')+' , Count(*)Over() CountId
			     FROM Cte_PimAttributeDefaultLocale 	CTPADV 
			     WHERE 1=1 
			     '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+'
			  )
			 
			     SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable
				 ,IsSystemDefined,IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate
				 ,AttributeName ,AttributeTypeName ,ISNULL(IsComparable,0)IsComparable ,ISNULL(IsUseInSearch,0)IsUseInSearch,ISNULL(IsFacets,0) IsFacets,UsedInProductsCount,RowId ,CountId 
			     FROM Cte_PimAttributeFilter CTAF 
			     '+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows)+'
			     '+[dbo].[Fn_GetOrderByClause](@Order_BY, 'PimAttributeId DESC')+'
			     ';
           
				 INSERT INTO @TBL_AttributeDefault
				 (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,IsConfigurable
				 ,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,IsComparable,IsUseInSearch,IsFacets,UsedInProductsCount,RowId,CountId)
				 EXEC (@SQL);


				 IF @IsReturnAllCoulumns = 0
                 BEGIN
                     SELECT AD.PimAttributeId,AD.AttributeCode,AD.AttributeName,AttributeTypeName,IsRequired,IsLocalizable,IsSystemDefined,AD.CreatedDate,IsPersonalizable,IsComparable,IsUseInSearch,IsFacets,
					         Isnull(UsedInProductsCount,0) UsedInProductsCount 
                     FROM @TBL_AttributeDefault AD
		         END;
                 ELSE
                 BEGIN
                     SELECT AD.PimAttributeId,ParentPimAttributeId,AttributeTypeId,AD.AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
					 ,IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,AD.CreatedDate,AD.ModifiedDate,AD.AttributeName,AttributeTypeName
					  IsComparable,IsUseInSearch,IsFacets
					  , Isnull(UsedInProductsCount,0) UsedInProductsCount 
                     FROM @TBL_AttributeDefault AD
				 END;
				 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_AttributeDefault), 0);
		
         END TRY
         BEGIN CATCH
		
		DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimAttributes @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimAttributeId='+@PimAttributeId+',@IsReturnAllCoulumns='+CAST(@IsReturnAllCoulumns AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPimAttributes',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
            
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPimAttributeValues')
	drop proc Znode_GetPimAttributeValues
go
CREATE  PROCEDURE [dbo].[Znode_GetPimAttributeValues]
( @PimAttributeFamilyId INT = 0,
  @IsCategory           BIT = 0,
  @LocaleId             INT = 0)
AS
   /*
   Summary: This procedure is used to get PimAttributeValues locale wise
			Result is fetched order by DisplayOrder, PimAttributeId
			If IsCategory = 1, FamilyCode is DefaultCategory and IsCategory = 0 then FamilyCode is Default
   Unit Testing:
   begin tran
   EXEC [Znode_GetPimAttributeValues] @PimAttributeFamilyId = 1,@IsCategory=0,@LocaleId=1
   rollback tran

   */
   
     BEGIN
         BEGIN TRY
             IF @LocaleId = 0
                 BEGIN 
				     -- find the default locale id 
                     SELECT TOP 1 @LocaleId = FeatureValues FROM ZnodeGlobalSetting WHERE FeatureName = 'Locale';                                        
                 END;

             -- this block required for the default family use to remove the configurable attribute from family  
             DECLARE @PimAttributeFamilyId2 INT;  
             SELECT @PimAttributeFamilyId2 = PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsDefaultFamily = 1 AND IsCategory = @IsCategory;
                                      
             IF @PimAttributeFamilyId = 0
                 BEGIN  
				     -- find the default family id
                     SET @PimAttributeFamilyId = @PimAttributeFamilyId2;
                 END;
             DECLARE @TBL_Detailrecord TABLE

             (DisplayOrder               INT,
              DisplayOrder1              INT,
              PimAttributeFamilyId       INT,
              FamilyCode                 VARCHAR(300),
              PimAttributeId             INT,
              PimAttributeGroupId        INT,
              AttributeTypeId            INT,
              AttributeTypeName          VARCHAR(300),
              AttributeCode              VARCHAR(300),
              IsRequired                 BIT,
              IsLocalizable              BIT,
              IsFilterable               BIT,
              AttributeName              NVARCHAR(600),
              AttributeValue             VARCHAR(300),
              PimAttributeValueId        INT,
              PimAttributeDefaultValueId INT,
              AttributeDefaultValueCode  VARCHAR(200),
              AttributeDefaultValue      NVARCHAR(300),
              RowId                      INT,
              IsEditable                 BIT,
              ControlName                VARCHAR(300),
              ValidationName             VARCHAR(100),
              SubValidationName          VARCHAR(300),
              RegExp                     VARCHAR(300),
              ValidationValue            VARCHAR(300),
              IsRegExp                   BIT,
              IsConfigurable             BIT,
              HelpDescription            VARCHAR(MAX),DisplayOrderDefault INT 
             );
             -- temp table to store value on temporary basis

              INSERT INTO @TBL_Detailrecord
              (DisplayOrder,PimAttributeFamilyId,FamilyCode,PimAttributeId,PimAttributeGroupId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			  IsLocalizable,IsFilterable,AttributeName,AttributeValue,PimAttributeValueId,PimAttributeDefaultValueId,AttributeDefaultValueCode,AttributeDefaultValue,RowId
			  ,IsEditable,ControlName,ValidationName,SubValidationName,RegExp,ValidationValue,IsRegExp,IsConfigurable,HelpDescription,DisplayOrderDefault)
                  
		      SELECT DISTINCT ZPA.displayorder,ZPAF.PimAttributeFamilyId,ZPAF.FamilyCode,ZPA.PimAttributeId,ZPFGM.PimAttributeGroupId,ZPA.AttributeTypeId,ZAT.AttributeTypeName,
              ZPA.AttributeCode,ZPA.IsRequired,ZPA.IsLocalizable,ZPA.IsFilterable,ZPAL.AttributeName,'' AS AttributeValue,NULL AS PimAttributeValueId,VPDV.PimAttributeDefaultValueId,
			  VPDV.AttributeDefaultValueCode,VPDV.AttributeDefaultValue,ISNULL(NULL, 0) AS RowId,ISNULL(VPDV.IsEditable, 1) AS IsEditable,ZAIV.ControlName,
			  ZAIV.Name AS ValidationName,ZAIVR.ValidationName AS SubValidationName,ZAIVR.RegExp,ZPAV.Name AS ValidationValue,
              CAST(CASE WHEN ZAIVR.RegExp IS NULL THEN 0 ELSE 1  END AS BIT) AS IsRegExp,ZPA.IsConfigurable,ZPA.HelpDescription ,VPDV.DisplayOrder                                                                                                                                                                                              
              FROM dbo.ZnodePimAttributeFamily AS ZPAF
			  INNER JOIN dbo.ZnodePimFamilyGroupMapper AS ZPFGM ON(ZPAF.PimAttributeFamilyId = ZPFGM.PimAttributeFamilyId)
			  INNER JOIN [dbo].[ZnodePimAttribute] AS ZPA ON(ZPFGM.PimAttributeId = ZPA.PimAttributeId  AND ZPA.IsPersonalizable = 0 AND ZPA.IsCategory = ZPAF.IsCategory)
              LEFT JOIN [dbo].ZnodeAttributeType AS ZAT ON(ZPA.AttributeTypeId = ZAT.AttributeTypeId)
              LEFT JOIN [dbo].[ZnodePimAttributeLocale] AS ZPAL ON(ZPAL.LocaleId = @LocaleId  AND ZPAL.PimAttributeId = ZPA.PimAttributeId) 
              LEFT JOIN View_PimDefaultValue AS VPDV ON(VPDV.PimAttributeId = ZPA.PimAttributeId  AND VPDV.LocaleId = @LocaleId)                                                              
              LEFT JOIN [dbo].ZnodePimAttributeValidation AS ZPAV ON(ZPAV.PimAttributeId = ZPA.PimAttributeId)
              LEFT JOIN [dbo].ZnodeAttributeInputValidation AS ZAIV ON(ZPAV.InputValidationId = ZAIV.InputValidationId)
              LEFT JOIN [dbo].ZnodeAttributeInputValidationRule AS ZAIVR ON(ZPAV.InputValidationRuleId = ZAIVR.InputValidationRuleId)
              WHERE(ZPAF.PimAttributeFamilyId = @PimAttributeFamilyId ) AND ZPAF.IsCategory = @IsCategory;
                                                   				
             -- changes for isconfigurable attribute 
             SELECT PimAttributeFamilyId,FamilyCode,PimAttributeId,PimAttributeGroupId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,IsLocalizable,
			 IsFilterable,AttributeName,AttributeValue,PimAttributeValueId,PimAttributeDefaultValueId,AttributeDefaultValueCode,AttributeDefaultValue,RowId,
			 IsEditable,ControlName,ValidationName,SubValidationName,RegExp,ValidationValue,IsRegExp,HelpDescription  FROM @TBL_Detailrecord                        
             ORDER BY CASE WHEN DisplayOrder IS NULL THEN 0 ELSE 1  END, DisplayOrder,PimAttributeId,DisplayOrderDefault;                     
                      
         END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimAttributeValues @PimAttributeFamilyId = '+CAST(@PimAttributeFamilyId AS VARCHAR(50))+',@IsCategory='+CAST(@IsCategory AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPimAttributeValues',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPimDownloadableProductKeyList')
	drop proc Znode_GetPimDownloadableProductKeyList
go
CREATE PROCEDURE [dbo].[Znode_GetPimDownloadableProductKeyList]
(
 @WhereClause NVARCHAR(3000),
 @Rows        INT            = 100,
 @PageNo      INT            = 1,
 @Order_BY    VARCHAR(1000)  = 'CreatedDate desc',
 @RowsCount   INT OUT
 )
 
AS

/*
 Summary :
 This procedure use to find the list of  DownloadableProduct Keys

 declare @p7 int
set @p7=8
exec sp_executesql N'Znode_GetPimDownloadableProductKeyList @WhereClause,@Rows,@PageNo,@Order_BY,@RowsCount OUT',N'@WhereClause nvarchar(19),@Rows int,@PageNo int,@Order_BY nvarchar(1000),@RowsCount int output',@WhereClause=N'sku like ''%milton%''',@Rows=50,@PageNo=1,@Order_BY=N'DownloadableProductKey desc',@RowsCount=@p7 output
select @p7

*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		  if Isnull(@Order_BY,'') =''
		  Set @Order_BY='CreatedDate desc'

             DECLARE @SQL NVARCHAR(MAX);
             SET @SQL = '
					DECLARE @PimDownloadableProductKey TABLE (PimDownloadableProductKeyId int,PimDownloadableProductId int,SKU Nvarchar(300),
					DownloadableProductKey	nvarchar(250),DownloadableProductURL nvarchar(2000),IsUsed bit,CreatedDate datetime,RowId int)
					

					;With Cte_GetFormBuilderDetails 
					 AS     ( select ZPDPK.PimDownloadableProductKeyId,ZPDPK.PimDownloadableProductId,ZPDP.SKU, ZPDPK.DownloadableProductKey,
								ZPDPK.DownloadableProductURL,ZPDPK.IsUsed,ZPDPK.CreatedDate
							from ZnodePimDownloadableProduct ZPDP 
								INNER JOIN ZnodePimDownloadableProductKey ZPDPK
								ON ZPDP.PimDownloadableProductId =ZPDPK.PimDownloadableProductId 								
							)
				    INSERT INTO @PimDownloadableProductKey
					select PimDownloadableProductKeyId,PimDownloadableProductId,SKU, DownloadableProductKey,
					DownloadableProductURL,IsUsed,CreatedDate, '+[dbo].[Fn_GetPagingRowId](@Order_BY,'PimDownloadableProductKeyId')+'
					from Cte_GetFormBuilderDetails
					WHERE 1=1 '+CASE
									WHEN @WhereClause = ''
									THEN ''
									ELSE ' AND '+@WhereClause
								END
								+' ORDER BY '+CASE
													 WHEN @Order_BY = ''
													 THEN ' 1 '
													 ELSE ' '+ @Order_BY
												 END+' SELECT @Count = COUNT (1) FROM @PimDownloadableProductKey  
												 SELECT * FROM @PimDownloadableProductKey 
												' +[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '+ CASE
													 WHEN @Order_BY = ''
													 THEN ' ORDER BY  1 '
													 ELSE ' ORDER BY  '+ @Order_BY END ; 
													 
					
								 EXEC SP_executesql
									  @SQL,
									  N'@Count INT OUT ',
									  @Count = @RowsCount OUT;

									  
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimDownloadableProductKeyList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              	select ERROR_MESSAGE()		 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPimDownloadableProductKeyList',
				@ErrorInProcedure = 'Znode_GetPimDownloadableProductKeyList',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPortalGlobalAttributeValue')
	drop proc Znode_GetPortalGlobalAttributeValue
go

CREATE   PROCEDURE [dbo].[Znode_GetPortalGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0--,
 --   @LocaleId       INT = 0,
	--@GlobalEnt
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200)

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT URL+ZMSM.ThumbnailFolderName+'/'
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


 Select @EntityValue=StoreName from ZnodePortal
 Where PortalId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max)
			,AttributeGroupDisplayOrder int,DisplayOrder int) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300) )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )


			
	insert into @EntityAttributeList
		(	GlobalEntityId ,EntityName ,EntityValue ,
		GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
		AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,AttributeGroupDisplayOrder,DisplayOrder ) 
		SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
		c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
		c.IsLocalizable,f.AttributeName,c.HelpDescription,w.AttributeGroupDisplayOrder,c.DisplayOrder
     FROM dbo.ZnodeGlobalEntity AS qq
          INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
		  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
          INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
          INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
          INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
		  Where qq.EntityName=@EntityName


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select GlobalAttributeId,aa.PortalGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodePortalGlobalAttributeValue aa
		   inner join ZnodePortalGlobalAttributeValueLocale bb ON bb.PortalGlobalAttributeValueId = aa.PortalGlobalAttributeValueId 
		  Where  PortalId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		  if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End

				

			SELECT  GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by -- GlobalEntityId--,AttributeGroupDisplayOrder
			--,GlobalAttributeGroupId,GlobalAttributeId,
			aa.DisplayOrder--,aab.GlobalAttributeDefaultValueId

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPortalSearchProfile')
	drop proc Znode_GetPortalSearchProfile
go
CREATE  PROCEDURE [dbo].[Znode_GetPortalSearchProfile]
(   @WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
	

)
AS 
   /* 
   SUMMARY : Stored Procedure to Get list of PortalsearchProfileid 
   Unit Testing:

   -- EXEC Znode_GetPortalSearchProfile @WhereClause = 'searchprofileid = 2',@RowsCount = 0
   
   
   	*/

     BEGIN
         BEGIN TRY

		 SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		
			DECLARE @TBL_PortalSearchProfile TABLE (PortalSearchProfileId INT,PublishCatalogId INT,SearchProfileId INT,PortalName nvarchar(400),PortalId INT,ProfileName NVARCHAR(400), CatalogName nvarchar(400), RowId INT, CountNo INT)


		SET @SQL = '

		;With Cte_GetPortalSearchProfileList 
		 AS     (

				SELECT  ZPSP.PortalSearchProfileId,ZPSP.PublishCatalogId,ZPSP.SearchProfileId,ZP.StoreName as PortalName,ZP.PortalId,ZSP.ProfileName,ZPC.CatalogName
				FROM ZnodePortalSearchProfile ZPSP 
				INNER JOIN ZnodePortal ZP ON (ZP.PortalId = ZPSP.PortalId)
				INNER JOIN ZnodeSearchProfile ZSP ON (ZSP.SearchProfileId = ZPSP.SearchProfileId)
				INNER JOIN ZnodePublishCatalogSearchProfile ZSCP ON (ZSCP.PublishCatalogId = ZPSP.PublishCatalogId AND ZSP.SearchProfileId = ZSCP.SearchProfileId)
				INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZSCP.PublishCatalogId)
				
				)


				,Cte_GetFilterPortalSearchProfile
				AS (
				SELECT PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName,
				'+dbo.Fn_GetPagingRowId(@Order_BY,'PortalSearchProfileId DESC')+',Count(*)Over() CountNo 
				FROM  Cte_GetPortalSearchProfileList CGPTL 
				WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						
				)
																								
				SELECT PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName,RowId,CountNo
				FROM Cte_GetFilterPortalSearchProfile
				'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						
				INSERT INTO @TBL_PortalSearchProfile(PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName,RowId,CountNo)
				EXEC(@SQL)

				SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_PortalSearchProfile ),0)
			
				SELECT PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName
				FROM @TBL_PortalSearchProfile
				
		 END TRY
		 BEGIN CATCH
			 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPortalSearchProfile @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPortalSearchProfile',
				@ErrorInProcedure = 'Znode_GetPortalSearchProfile',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		 END CATCH
     END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetProductDataForWebStore')
	drop proc Znode_GetProductDataForWebStore
go
CREATE  PROCEDURE [dbo].[Znode_GetProductDataForWebStore]  
(   @SKU              VARCHAR(MAX) = '' ,  
    @PublishCatalogId int = 0 ,  
    @PublishProductId VARCHAR(MAX),  
    @PortalId         INT,  
    @LocaleId         INT)  
AS   
  /*    
    Summary: WebStore: SP for getting products data   
       Get average rating of products   
       Get Price / Inventory / SEO details .  
    Unit Testing  
 begin tran     
    EXEC [Znode_GetProductDataForWebStore] 'SKBCA1112,SKWI122,SKFVR123,FVZK0237,SKPMAR123,SKLS232',0,'96,92,98,103,94,97',@PortalId=2 ,@LocaleId=1  
    EXEC [Znode_GetProductDataForWebStore] 'SKPMAR123',3,'',@PortalId=1 ,@LocaleId=0  
 rollback tran  
   */  
     BEGIN  
         BEGIN TRAN A;  
         BEGIN TRY  
             SET NOCOUNT ON;  
  
             DECLARE @Tlb_SKU TABLE  
             (SKU        VARCHAR(100),  
              SequenceNo INT IDENTITY  
             );  
	If @SKU <> ''  
		INSERT INTO @Tlb_SKU(SKU) SELECT Item FROM Dbo.split(@SKU, ',');  
	Else if @PublishCatalogId > 0   
		INSERT INTO @Tlb_SKU(SKU)   
		select Distinct ZPPD.SKU  from ZnodePublishCategoryProduct ZPCP INNER JOIN ZnodePublishProductDetail ZPPD ON ZPCP.PublishProductId = ZPPD.PublishProductId   
		where  ZPCP.PublishCatalogId = @PublishCatalogId  
  
             DECLARE @Tlb_PublishProduct TABLE  
             (PublishProductId INT,  
              SequenceNo       INT IDENTITY  
             );  
  
    If @PublishProductId <> ''  
		 INSERT INTO @Tlb_PublishProduct(PublishProductId)  
				 SELECT Item FROM Dbo.split(@PublishProductId, ',');   
    Else if @PublishCatalogId > 0   
		INSERT INTO @Tlb_PublishProduct(PublishProductId)  
		select Distinct ZPCP.PublishProductId  from ZnodePublishCategoryProduct ZPCP where  ZPCP.PublishCatalogId = @PublishCatalogId  
    Else if @PublishCatalogId = 0 AND  @PublishProductId = ''   AND    @SKU <> ''
		INSERT INTO @Tlb_PublishProduct(PublishProductId)  
		SELECT Distinct ZPCP.PublishProductId  from ZnodePublishProductDetail ZPCP INNER JOIN @Tlb_SKU TSK ON ZPCP.SKU = TSK.SKU
		  
             --DECLARE @Tlb_ProductData TABLE  
             --(PublishProductId INT,  
             -- SKU              NVARCHAR(100),  
             -- SEOTitle         NVARCHAR(200),  
             -- SEODescription   NVARCHAR(MAX),  
             -- SEOKeywords      NVARCHAR(MAX),  
             -- SEOUrl           NVARCHAR(MAX),  
             -- Rating           Numeric(28,6),  
             -- TotalReviews     INT  
             --);  
  
    CREATE TABLE #Tlb_ProductData   
             (PublishProductId INT,  
              SKU              NVARCHAR(100),  
              SEOTitle         NVARCHAR(200),  
              SEODescription   NVARCHAR(MAX),  
              SEOKeywords      NVARCHAR(MAX),  
              SEOUrl           NVARCHAR(MAX),  
              Rating           Numeric(28,6),  
              TotalReviews     INT,
			  IsPublish        bit  
             );  
  
             INSERT INTO #Tlb_ProductData (PublishProductId,SKU)  
             SELECT PP.PublishProductId,SK.SKU FROM @Tlb_PublishProduct AS PP INNER JOIN @Tlb_SKU AS SK ON PP.SequenceNo = SK.SequenceNo;  
  
             DECLARE @Tlb_CustomerAverageRatings TABLE  
             (PublishProductId INT,  
              Rating           NUMERIC(28,6),  
              TotalReviews     INT  
             );   
             -- Calculate Average rating   
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)  
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId)   
    FROM ZnodeCMSCustomerReview AS CCR  
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A'   
    AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )  
    GROUP BY CCR.PublishProductId    ;  
  
             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews   
    FROM @Tlb_CustomerAverageRatings CAR  
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;  
  
    UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl, PD.IsPublish = ZCSO.IsPublish 
    FROM #Tlb_ProductData PD  
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.PublishProductId = ZCSO.SEOId  
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)  
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'  
    WHERE ZCSO.PortalId = @PortalId  
  
    UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword 
	FROM #Tlb_ProductData PD  
    INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId 
	WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL  
     --AND ZCSO.PortalId = @PortalId  

    SELECT ZPCP.PublishCatalogId , PD.PublishProductId,SKU,SEOTitle,SEODescription,SEOKeywords,SEOUrl,Rating,TotalReviews, 
		   CASE WHEN ISNULL(IsPublish,0) = 0  THEN 'Draft' ELSE 'Published' END PublishStatus    
    FROM #Tlb_ProductData PD LEFT Outer join ZnodePublishCategoryProduct ZPCP  ON PD.PublishProductId = ZPCP.PublishProductId ;
	               
    COMMIT TRAN A;  
     
         END TRY  
         BEGIN CATCH  
              DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore @SKU = '+@SKU+',@PublishProductId='+@PublishProductId+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetProductDataForWebStore',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetProductsAttributeValueWithCode')
	drop proc Znode_GetProductsAttributeValueWithCode
go
CREATE  PROCEDURE [dbo].[Znode_GetProductsAttributeValueWithCode]
(   
	@PimProductId  VARCHAR(MAX),
    @AttributeCode VARCHAR(MAX),
    @LocaleId      INT = 0,
	@IsPublish bit = 0  
)
AS
/* 
    
     Summary:- This Procedure is used to get the product attribute values 
			   The result is fetched from all locale for ProductId provided
     Unit Testing 
     EXEC Znode_GetProductsAttributeValue_1 '2146','ProductName,SKU,Price,Quantity,IsActive,ProductType,Image,Assortment,DisplayOrder,Style,Material',0
	 SELECT * FROM ZnodePIMProduct
	 EXEC Znode_GetProductsAttributeValue '121','ProductName,SKU,Price,Quantity,IsActive,ProductType,Image,Assortment,DisplayOrder,Style,Material',1
	 
	 EXEC Znode_GetProductsAttributeValueWithCode '5','highlight',,@IsPublish =1 
    
*/	
	 BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 		
				DECLARE @TBL_AttributeValue TABLE (PimAttributeValueId INT,PimProductId INT,AttributeValue NVARCHAR(MAX),PimAttributeId INT)
				DECLARE @TBL_AttributeDefault TABLE (PimAttributeId INT,AttributeDefaultValueCode VARCHAR(100),IsEditable BIT,AttributeDefaultValue NVARCHAR(MAX),DisplayOrder INT)
				DECLARE @DefaultLocaleId INT = DBO.FN_GetDefaultLocaleId()
				DECLARE @TBL_MediaValue TABLE (PimAttributeValueId INT,PimProductId INT,MediaPath NVARCHAR(MAX),PimAttributeId INT ,LocaleId INT )
				DECLARE @TBL_PimProductId TABLE (PimProductId INT)
					
				
				INSERT INTO @TBL_PimProductId 
				SELECT Item 
				FROM dbo.Split( @PimProductId, ',' ) AS SP 
				
				INSERT INTO @TBL_MediaValue
					SELECT ZPAV.PimAttributeValueId	
							,PimProductId
							,ZPPAM.MediaId MediaPath
							,ZPAV.PimAttributeId 
							,ZPPAM.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimProductAttributeMedia ZPPAM ON ( ZPPAM.PimAttributeValueId = ZPAV.PimAttributeValueId)
					LEFT JOIN ZnodeMedia ZM ON (Zm.Path = ZPPAM.MediaPath)  
				

				;WITH Cte_GetDefaultData 
				AS 
				(
					SELECT ZPPADV.PimAttributeValueId ,ZPADVL.AttributeDefaultValueCode AttributeDefaultValue ,ZPPADV.LocaleId LocaleId
					FROM ZnodePimProductAttributeDefaultValue ZPPADV 
					INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPPADV.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue ZPADVL ON (ZPADVL.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )
					)
					--SELECT ZPAV.PimAttributeValueId ,Case When ZPADVL.AttributeDefaultValue is null then ZPADVL2.AttributeDefaultValue ELSE ZPADVL.AttributeDefaultValue END 
					--AttributeDefaultValue ,Case when ZPADVL.LocaleId is null then ZPADVL2.LocaleId ELSE ZPADVL.LocaleId end LocaleId 
					--FROM ZnodePimAttributeValue ZPAV  LEft Outer JOIN ZnodePimProductAttributeDefaultValue ZPPADV 
					--ON (ZPAV.PimAttributeValueId = ZPPADV.PimAttributeValueId)
					--LEft Outer JOIN ZnodePimAttributeDefaultValueLocale ZPADVL ON (ZPADVL.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId)
					--LEft Outer JOIN ZnodePimAttributeDefaultValue ZPAD ON ZPAV.PimAttributeId = ZPAD.PimAttributeId  AND ZPAV.PimAttributeDefaultValueId  = ZPAD.PimAttributeDefaultValueId
					--LEft Outer JOIN ZnodePimAttributeDefaultValueLocale ZPADVL2 ON (ZPAD.PimAttributeDefaultValueId = ZPADVL2.PimAttributeDefaultValueId)
					--Inner join ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId 
					--INNER JOIN @TBL_PimProductId TBP ON (TBP.PimProductId  = ZPAV.PimProductId) 
				 --   WHERE Case when ZPADVL.LocaleId is null then ZPADVL2.LocaleId ELSE ZPADVL.LocaleId END IN (@LocaleId,@DefaultLocaleId)
					--AND ZPA.AttributeCode NOT in ('ShippingCostRules', 'OutOfStockOptions')
					--Union All 
					--SELECT ZPAV.PimAttributeValueId ,ZPAD.AttributeDefaultValueCode AttributeDefaultValue ,Case when ZPADVL.LocaleId is null then ZPADVL2.LocaleId ELSE ZPADVL.LocaleId end LocaleId 
					--FROM ZnodePimAttributeValue ZPAV  LEft Outer JOIN ZnodePimProductAttributeDefaultValue ZPPADV 
					--ON (ZPAV.PimAttributeValueId = ZPPADV.PimAttributeValueId)
					--LEft Outer JOIN ZnodePimAttributeDefaultValueLocale ZPADVL ON (ZPADVL.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId)
					--LEft Outer JOIN ZnodePimAttributeDefaultValue ZPAD ON ZPAV.PimAttributeId = ZPAD.PimAttributeId  AND ZPAV.PimAttributeDefaultValueId  = ZPAD.PimAttributeDefaultValueId
					--LEft Outer JOIN ZnodePimAttributeDefaultValueLocale ZPADVL2 ON (ZPAD.PimAttributeDefaultValueId = ZPADVL2.PimAttributeDefaultValueId)
					--Inner join ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId 
					--INNER JOIN @TBL_PimProductId TBP ON (TBP.PimProductId  = ZPAV.PimProductId) 
				 --   WHERE Case when ZPADVL.LocaleId is null then ZPADVL2.LocaleId ELSE ZPADVL.LocaleId END IN (@LocaleId,@DefaultLocaleId)
					--AND ZPA.AttributeCode  in ('ShippingCostRules', 'OutOfStockOptions')
				--)
				,Cte_AttributeValueDefault AS 
				(
				 SELECT Distinct PimAttributeValueId ,AttributeDefaultValue ,@DefaultLocaleId LocaleId 
				 FROM Cte_GetDefaultData 
				 WHERE LocaleId = @LocaleId 
				 UNION  ALL
				 SELECT PimAttributeValueId ,AttributeDefaultValue ,@DefaultLocaleId LocaleId 
				 FROM Cte_GetDefaultData a 
				 WHERE LocaleId = @DefaultLocaleId 
				 AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetDefaultData b WHERE b.PimAttributeValueId = a.PimAttributeValueId AND b.LocaleId= @LocaleId)
     			)

			
				,Cte_AttributeLocaleComma 
				AS 
				(
				SELECT DISTINCT PimAttributeValueId ,SUBSTRING ((SELECT ',' + AttributeDefaultValue 
													FROM Cte_AttributeValueDefault CTEAI 
													WHERE CTEAI.PimAttributeValueId = CTEA.PimAttributeValueId 
													FOR XML PATH ('')   ),2,4000) AttributeDefaultValue , LocaleId
				
				FROM Cte_AttributeValueDefault  CTEA 
				)

			

				,Cte_AllAttributeData AS 
				(
					SELECT ZPAV.PimAttributeValueId,ZPAV.PimProductId,ZPPATV.AttributeValue,ZPAV.PimAttributeId,ZPPATV.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER join ZnodePimProductAttributeTextAreaValue ZPPATV ON (ZPPATV.PimAttributeValueId= ZPAV.PimAttributeValueId)
					INNER JOIN @TBL_PimProductId TBPP ON (ZPAV.PimProductId = TBPP.PimProductId)
					UNION ALL
					
					SELECT PimAttributeValueId,TBM.PimProductId
							,MediaPath
							,PimAttributeId,LocaleId
					from @TBL_PimProductId TBPP   
					INNER JOIN @TBL_MediaValue TBM ON (TBM.PimProductId = TBPP.PimProductId)

					UNION ALL 
					SELECT ZPAV.PimAttributeValueId,ZPAV.PimProductId,ZPAVL.AttributeValue,ZPAV.PimAttributeId,ZPAVL.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimAttributeValueLocale  ZPAVL ON ( ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
					INNER JOIN @TBL_PimProductId TBPP ON (ZPAV.PimProductId = TBPP.PimProductId)
					UNION ALL
					SELECT ZPAV.PimAttributeValueId,ZPAV.PimProductId,CS.AttributeDefaultValue,ZPAV.PimAttributeId,LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN Cte_AttributeLocaleComma CS ON (ZPAV.PimAttributeValueId = CS.PimAttributeValueId)
					INNER JOIN @TBL_PimProductId TBPP ON (ZPAV.PimProductId = TBPP.PimProductId)
				)
				, Cte_AttributeFirstLocal AS 
				(
					SELECT PimAttributeValueId,PimProductId,AttributeValue,PimAttributeId
					FROM Cte_AllAttributeData
					WHERE LocaleId = @LocaleId
				)
				,Cte_DefaultAttributeValue AS 
				(
					SELECT PimAttributeValueId,PimProductId,AttributeValue,PimAttributeId
					FROM Cte_AttributeFirstLocal
					UNION ALL 
					SELECT PimAttributeValueId,PimProductId,AttributeValue,PimAttributeId
					FROM Cte_AllAttributeData CTAAD
					WHERE LocaleId = @DefaultLocaleId
					AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeFirstLocal CTRT WHERE CTRT.PimAttributeValueId = CTAAD.PimAttributeValueId   )
			 	)

				INSERT INTO @TBL_AttributeValue
				SELECT PimAttributeValueId,PimProductId,AttributeValue,PimAttributeId
				FROM  Cte_DefaultAttributeValue 
			
					SELECT  PimProductId, AttributeValue,ZPA.AttributeCode,TBAV.PimAttributeId 
					FROM @TBL_AttributeValue TBAV
					INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = TBAV.PimAttributeId)
			
		 END TRY
         BEGIN CATCH
            DECLARE @Status BIT ;
			SET @Status = 0;
			--DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
			--@ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductsAttributeValue_1 @PimProductId = '+@PimProductId+
			--',@AttributeCode='+@AttributeCode+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			--SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			--EXEC Znode_InsertProcedureErrorLog
			--	@ProcedureName = 'Znode_GetProductsAttributeValue_1',
			--	@ErrorInProcedure = @Error_procedure,
			--	@ErrorMessage = @ErrorMessage,
			--	@ErrorLine = @ErrorLine,
			--	@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPromotionShippingDetails')
	drop proc Znode_GetPromotionShippingDetails
go
CREATE PROCEDURE [dbo].[Znode_GetPromotionShippingDetails]
(   @WhereClause NVARCHAR(max),
    @Rows				INT            = 100,
    @PageNo				INT            = 1,
    @Order_BY			VARCHAR(1000)  = '',
    @RowsCount			INT  out,
	@PortalId			INT,
	@IsAssociated		BIT           = 0,
    @PromotionId		INT			  = 0 
)		
AS 
/*
    Summary: This procedure is used to find the ShippingDetails of user for portal 
	Unit Testing: 
	declare @aa int
	EXEC Znode_GetPromotionShippingDetails @WhereClause='Userid = 5 '
	 ,@PortalId ='5',  @RowsCount= 0

     EXEC Znode_GetPromotionShippingDetails @WhereClause='' ,@PortalId ='1',  @RowsCount= 0
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX)
			 DECLARE @TBL_ShippingDetailsList TABLE  (PortalId int, ShippingId int,ShippingName varchar(200),ShippingCode nvarchar(max), HandlingCharge numeric(28,6),HandlingChargeBasedOn varchar(50),  RowId INT, CountNo INT  )

			IF @PortalId = 0
			BEGIN
			SET @SQL ='
						;WITH CTE_GetShippingDetails AS
						(
						select DISTINCT
							--zps.PortalId,
							zs.ShippingId,zs.ShippingName, zs.ShippingCode,zs.HandlingCharge,zs.HandlingChargeBasedOn
						from ZnodeShipping zs
						inner join ZnodePortalShipping zps on(zs.ShippingId =zps.ShippingId  ) ';
			
			END
			ELSE
			 SET @SQL ='
						;WITH CTE_GetShippingDetails AS
						(
						select DISTINCT
							--zps.PortalId,
							zs.ShippingId,zs.ShippingName, zs.ShippingCode,zs.HandlingCharge,zs.HandlingChargeBasedOn
						from ZnodeShipping zs
						inner join ZnodePortalShipping zps on(zs.ShippingId =zps.ShippingId and zps.PortalId = '+cast(@PortalId as varchar(200))+' )';



			 If @PromotionId > 0 and @IsAssociated = 1
			 begin
				SET @SQL =@SQL +' inner join ZnodePromotionShipping zpsh on(zs.ShippingId = zpsh.ShippingId and zpsh.PromotionId = '+cast(@PromotionId as varchar(200))+' )';
			 End 
			 SET @SQL =@SQL +')
						, CTE_GetShippingDetailsList AS
						(
						SELECT DISTINCT --PortalId,
						ShippingId,ShippingName,ShippingCode,HandlingCharge,HandlingChargeBasedOn,
						'+dbo.Fn_GetPagingRowId(@Order_BY,'ShippingId ASC')+',Count(*)Over() CountNo 
						FROM CTE_GetShippingDetails
						WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'					
						)

						SELECT DISTINCT --PortalId,
						ShippingId,ShippingName,ShippingCode,HandlingCharge,HandlingChargeBasedOn,RowId,CountNo
						FROM CTE_GetShippingDetailsList
						'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
			

			print @sql
			INSERT INTO @TBL_ShippingDetailsList (--PortalId,
						ShippingId,ShippingName,ShippingCode,HandlingCharge,HandlingChargeBasedOn,RowId,CountNo)
			EXEC(@SQL)
			SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_ShippingDetailsList ),0)
			
			SELECT --PortalId,
			ShippingId,ShippingName,ShippingCode,HandlingCharge,HandlingChargeBasedOn , @PromotionId as PromotionId 
			FROM @TBL_ShippingDetailsList

	     END TRY
		 BEGIN CATCH
			 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPromotionShippingDetails @WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@PortalId='+cast(@PortalId as varchar(200))+'@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPromotionShippingDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		 END CATCH
     END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPublishAssociatedAddons')
	drop proc Znode_GetPublishAssociatedAddons
go
CREATE  PROCEDURE [dbo].[Znode_GetPublishAssociatedAddons](@PublishCatalogId NVARCHAR(MAX) = 0,
                                                         @PimProductId    TransferId Readonly,
                                                         @VersionId        INT           = 0,
                                                         @UserId           INT,
														 @PimCategoryHierarchyId int = 0 )
AS 
   
/*
    Summary : If PimcatalogId is provided get all products with Addons and provide above mentioned data
              If PimProductId is provided get all Addons if associated with given product id and provide above mentioned data
    			Input: @PublishCatalogId or @PimProductId
    		    output should be in XML format
              sample xml5
              <AddonEntity>
              <ZnodeProductId></ZnodeProductId>
              <ZnodeCatalogId></ZnodeCatalogId>
              <AddonGroupName></AddonGroupName>
              <TempAsscociadedZnodeProductIds></TempAsscociadedZnodeProductIds>
              </AddonEntity>
    <AddonEntity>
      <ZnodeProductId>6</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>53,54,55,56,57,82</TempAsscociadedZnodeProductIds>
      <ZnodeProductId>14</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>6,7</TempAsscociadedZnodeProductIds>
      <ZnodeProductId>16</ZnodeProductId>
      <ZnodeCatalogId>2</ZnodeCatalogId>
      <AddonGroupName>RadioButton</AddonGroupName>
      <TempAsscociadedZnodeProductIds>7,14,54,6</TempAsscociadedZnodeProductIds>
    </AddonEntity>
    Unit Testing 
     SELECT * FROM ZnodePublishcatalog
	begin tran
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId = '3',@userId= 2  ,@PimProductId=  '29' ,@UserId=2
	rollback tran
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId = 3 ,@PimProductId=  '' ,@UserId=2
     EXEC [dbo].[Znode_GetPublishAssociatedAddons] @PublishCatalogId =null ,@PimProductId=  6   

	DECLARE	@return_value int

	EXEC	@return_value = [dbo].[Znode_GetPublishAssociatedAddons]
	@PublishCatalogId = 3,
	@UserId = 2,
	@PimCategoryHierarchyId = 125

	SELECT	'Return Value' = @return_value


   
	*/

     BEGIN
        -- BEGIN TRANSACTION GetPublishAssociatedAddons;
         BEGIN TRY
          SET NOCOUNT ON 
			 DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @LocaleId INT, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
			 , @Counter INT= 1
			 , @MaxRowId INT= 0;

            -- DECLARE @PimAddOnGroupId VARCHAR(MAX);

			 CREATE TABLE #TBL_PublisshIds  (PublishProductId INT , PimProductId INT , PublishCatalogId INT)

             DECLARE @TBL_LocaleId TABLE
             (RowId    INT IDENTITY(1, 1),
              LocaleId INT
             );


			 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1
			   
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM #TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
			 END 
			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1,@PimCategoryHierarchyId 

			
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM #TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
			 END 
			
			
			--SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN 0 = 0 OR 0 IS NULL THEN  MAX(PublishCatalogLogId) ELSE 0 END 
			--FROM ZnodePublishProduct ZPP 
			--INNEr JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			--       WHERE zpp.PublishProductId  IN (218,214)
			--          GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT  );

			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @VersionId = 0 OR @VersionId IS NULL THEN  MAX(PublishCatalogLogId) ELSE @VersionId END 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '0' ) 
				 AND (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 END 
			 ELSE 
			 Begin
				 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @VersionId = 0 OR @VersionId IS NULL THEN  MAX(PublishCatalogLogId) ELSE @VersionId END 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '0' ) 
				 OR (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 END 

			 End
			
             DECLARE @TBL_AddonGroupLocale TABLE
             (PimAddonGroupId INT,
              DisplayType     NVARCHAR(400),
              AddonGroupName  NVARCHAR(MAX),
			  LocaleId INT 
             );
           
             INSERT INTO @TBL_LocaleId(LocaleId)
                    SELECT LocaleId
                    FROM ZnodeLocale
                    WHERE IsActive = 1;

          
             SET @MaxRowId = ISNULL(
                                   (
                                       SELECT MAX(RowId)
                                       FROM @TBL_LocaleId
                                   ), 0);
    
             WHILE @Counter <= @MaxRowId
                 BEGIN
                     SET @LocaleId =
                     (
                         SELECT LocaleId
                         FROM @TBL_LocaleId
                         WHERE RowId = @Counter
                     );
                     INSERT INTO @TBL_AddonGroupLocale
                     (PimAddonGroupId,
                      DisplayType,
                      AddonGroupName					  
                     )
                     EXEC Znode_GetAddOnGroupLocale
                          '',
                          @LocaleId;

					UPDATE @TBL_AddonGroupLocale SET LocaleId = @LocaleId WHERE LocaleId IS NULL 

                    SET @Counter = @Counter + 1;
                 END;
				     
					  IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			           BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1  
					 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			    
			  
					 END 
					 ELSE 
					 BEGIN 

					 SET @versionid  =(SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId TBLV )

					 DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1 
					 AND PublishCatalogLogId  = @versionid 
					 END 
			
					--SELECT * FROM #TBL_PublishCatalogId
					 MERGE INTO ZnodePublishedXML TARGET 
					 USING (
					 SELECT   ZPPP.PublishProductId,ZPPP.PublishCatalogId,ZPPD.LocaleId,ZPPP.VersionId,'<AddonEntity><VersionId>'+CAST(ZPPP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeProductId>'+CAST(ZPPP.[PublishProductId] AS VARCHAR(50))+'</ZnodeProductId><ZnodeCatalogId>'
				     +CAST(ZPPP.[PublishCatalogId] AS VARCHAR(50))+'</ZnodeCatalogId><AssociatedZnodeProductId>'+CAST(ZPP.PublishProductId  AS VARCHAR(50))
					 +'</AssociatedZnodeProductId><DisplayOrder>'+CAST( ISNULL(ZPOPD.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder><AssociatedProductDisplayOrder>'
					 +CAST(ISNULL(ZPAOP.DisplayOrder,'') AS VARCHAR(50))+'</AssociatedProductDisplayOrder><RequiredType>'+ISNULL(RequiredType,'')+'</RequiredType><DisplayType>'
					 + ISNULL(DisplayType,'')+'</DisplayType><GroupName>'+ISNULL(AddonGroupName,'')+'</GroupName><LocaleId>'+CAST(ZPPD.LocaleId AS VARCHAR(50))+'</LocaleId><IsDefault>'+CAST(ISNULL(IsDefault,0) AS VARCHAR(50))+'</IsDefault></AddonEntity>'  ReturnXML		   
				 
                      FROM [ZnodePimAddOnProductDetail] AS ZPOPD
                           INNER JOIN [ZnodePimAddOnProduct] AS ZPAOP ON ZPOPD.[PimAddOnProductId] = ZPAOP.[PimAddOnProductId]
						    INNER JOIN #TBL_PublishCatalogId ZPPP ON (ZPPP.PimProductId = ZPAOP.PimProductId )
                           INNER JOIN #TBL_PublishCatalogId ZPP ON(ZPP.PimProductId = ZPOPD.[PimChildProductId] AND ZPP.PublishCatalogId = ZPPP.PublishCatalogId )
						   INNER JOIN ZnodePublishProductDetail ZPPD ON (ZPPD.PublishProductId = ZPPP.PublishProductId)
						   INNER JOIN @TBL_AddonGroupLocale TBAG ON (TBAG.PimAddonGroupId   = ZPAOP.PimAddonGroupId AND TBAG.LocaleId = ZPPD.LocaleId )
						   
					) SOURCE 
					ON (
						 TARGET.PublishCatalogLogId = SOURCE.VersionId 
						 AND TARGET.PublishedId = SOURCE.PublishProductId
						 AND TARGET.IsAddonXML = 1 
						 AND TARGET.LocaleId = SOURCE.LocaleId 
					)
					WHEN MATCHED THEN 
					UPDATE 
					SET  PublishedXML = ReturnXML
					   , ModifiedBy = @userId 
					   ,ModifiedDate = @GetDate
					WHEN NOT MATCHED THEN 
					INSERT (PublishCatalogLogId
					,PublishedId
					,PublishedXML
					,IsAddonXML
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
					
					VALUES (Source.VersionId , Source.publishProductid,Source.ReturnXML,1,SOURCE.localeid,@userId,@getDate,@userId,@getDate);
					
					
					SELECT PublishedXML ReturnXML
					FROM #TBL_PublishCatalogId TBLPP 
					INNER JOIN ZnodePublishedXML ZPX ON (ZPX.PublishCatalogLogId = TBLPP.VersionId AND ZPX.PublishedId = TBLPP.publishProductid )
					WHERE ZPX.IsAddonXML = 1
             --SELECT ReturnXML
             --FROM @TBL_AddonXML;
		
           --  COMMIT TRANSACTION GetPublishAssociatedAddons;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE(),ERROR_PROCEDURE()
             DECLARE @Status BIT;
             SET @Status = 0;
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishAssociatedAddons @PublishCatalogId = '+@PublishCatalogId+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
           --  ROLLBACK TRANSACTION GetPublishAssociatedAddons;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishAssociatedAddons',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPublishAssociatedProducts')
	drop proc Znode_GetPublishAssociatedProducts
go
CREATE PROCEDURE [dbo].[Znode_GetPublishAssociatedProducts]
(   
	@PublishCatalogId VARCHAR(MAX) = '',
    @PimProductId     TransferId Readonly,
    @ProductType      VARCHAR(300) = 'BundleProduct',
    @VersionId        INT          = 0,
    @UserId           INT,
	@PimCategoryHierarchyId int = 0 
)
AS
  /*
    Summary : If PimcatalogId is provided then get all  Bundles / Group / Configurable product and  provide above mentioned data
              If PimProductId is provided then get all Bundles / Group / Configurable if associated with given product id and provide above mentioned data
    		 Input: @PublishCatalogId or @PimProductId
    		 Output should be in XML format
             Required o/p
    			<BundleProductEntity>
    			<ZnodeProductId></ZnodeProductId>
    			<ZnodeCatalogId></ZnodeCatalogId>
    			<AsscociadedZnodeProductIds></AsscociadedZnodeProductIds>
    			</BundleProductEntity>
    Unit Testing 
    BundleProduct
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PublishCatalogId = 3 ,@PimProductId = '' , @ProductType = 'BundleProduct' ,@userId = 2 
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PublishCatalogId =12 ,@PimProductId ='' , @ProductType = 'ConfigurableProduct',@userId = 2 
    Group Product
    EXEC [dbo].[Znode_GetPublishAssociatedProducts]  @PublishCatalogId ='2',@PimProductIdh =''  , @PimProducttType = 'GroupedProduct'
    EXEC [dbo].[Znode_GetPublishAssociatedProducts]  @PublishCatalogId ='',@PimProductId ='200066'  , @PimProducttType = 'GroupedProduct'
    EXEC [dbo].[Znode_GetPublishAssociatedProducts] @PimProductId ='200066'  , @PimProducttType = 'GroupedProduct'
   */
     BEGIN
         BEGIN TRAN GetPublishAssociatedProducts;
         BEGIN TRY
             SET NOCOUNT ON;

			  DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT );
			  DECLARE @PimAttributeId INT = [dbo].[Fn_GetProductTypeAttributeId]()
					  ,@PimAttributeDefaultValueId INT = (SELECT TOP 1 PimAttributeDefaultValueId FROM ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode = @ProductType)
					,@DefaultLocaleId INT = dbo.fn_getDefaultlocaleId() 
			 DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
			 
			 DECLARE @TBL_PublisshIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 DECLARE  @PimProductId_New TransferId
					 
			 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			   INSERT INTO @TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1
			   
			   --SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			   INSERT INTO @PimProductId_New
			   SELECT DISTINCT PimProductId FROM @TBL_PublisshIds

			  -- SELECT 	@PimProductId	
			 END 
			 
			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
			 
			   INSERT INTO @TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1,@PimCategoryHierarchyId
			   
			   --SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			   INSERT INTO @PimProductId_New
			   SELECT PimProductId FROM @TBL_PublisshIds


			  -- SELECT 	@PimProductId	
			 END 

			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
				 INSERT INTO @TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,CASE WHEN @VersionId = 0 OR @VersionId IS NULL THEN  MAX(PublishCatalogLogId) ELSE @VersionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = ZPP.PimProductId )
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPV.PimAttributeValueId)
				 LEFT JOIN  ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId   ) 
				 AND  (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 AND ZPV.PimAttributeId  = @PimAttributeId
				 AND ZPAVL.PimAttributeDefaultValueId= @PimAttributeDefaultValueId
				 AND LocaleId = @DefaultLocaleId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId
					
			 END
			 ELSE 
			 BEGIN 
				 INSERT INTO @TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId,CASE WHEN @VersionId = 0 OR @VersionId IS NULL THEN  MAX(PublishCatalogLogId) ELSE @VersionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePimAttributeValue ZPV ON (ZPV.PimProductId = ZPP.PimProductId )
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPV.PimAttributeValueId)
				 LEFT JOIN  ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 			 
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '' ) 
				 OR (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 AND ZPV.PimAttributeId  = @PimAttributeId
				 AND ZPAVL.PimAttributeDefaultValueId= @PimAttributeDefaultValueId
				 AND LocaleId = @DefaultLocaleId
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,ZPP.PimProductId

			 END
			 			
             DECLARE @TBL_ProductTypeXML TABLE
             (PublishProductId INT,
			  PublishCatalogId INT,
              ReturnXML        XML,
              VersionId        INT
             );
             DECLARE @TBL_PimProductId TABLE
             ([PimProductId]   INT,
              PublishCatalogId INT,
              PublishProductId INT
             );
            
             DECLARE @TBL_PimAssociatedEntity TABLE
             (
			  ZnodeProductId                  INT,
              ZnodeCatalogId                  INT,
              AsscociadedZnodeProductIds  VARCHAR(MAX),
			  ConfigurableProductEntity       NVARCHAR(MAX),
              LocaleId                        INT,
			  DisplayOrder					  INT,
              VersionId                       INT
             );
			

		     SET @versionid  =(SELECT TOP 1 VersionId FROM @TBL_PublishCatalogId TBLV )

             IF @ProductType = 'BundleProduct'
                 BEGIN
				    
					  IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			           BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE  IsBundleProductXML = 1 
					 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
					 END 
					 ELSE 
					 BEGIN 
					 SET @versionid  =(SELECT TOP 1 VersionId FROM @TBL_PublishCatalogId TBLV )

					 DELETE FROM ZnodePublishedXML WHERE IsBundleProductXML = 1 
					 AND PublishCatalogLogId  = @versionid
					 END 

					 
				 	 MERGE INTO ZnodePublishedXML TARGET 
					 USING (        
				     SELECT TBP.PublishProductId, TBP.VersionId, '<BundleProductEntity><VersionId>'+CAST(TBP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeCatalogId>'+CAST(TBP.PublishCatalogId AS VARCHAR(50))+'</ZnodeCatalogId><ZnodeProductId>'
					 +CAST(TBP.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><AssociatedZnodeProductId>'
					 +CAST(TBPU.PublishProductId AS VARCHAR(50))+'</AssociatedZnodeProductId><AssociatedProductDisplayOrder>'+CAST(ZPTA.DisplayOrder AS VARCHAR(50))+'</AssociatedProductDisplayOrder></BundleProductEntity>' ReturnXML 
					 FROM @TBL_PublishCatalogId TBP
					 INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					 INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
					 ) SOURCE 
					ON (
								 TARGET.PublishCatalogLogId = SOURCE.versionId 
								 AND TARGET.PublishedId = SOURCE.PublishProductId
								 AND TARGET.IsBundleProductXML = 1 
								 AND TARGET.LocaleId = 0 
							)
							WHEN MATCHED THEN 
							UPDATE 
							SET  PublishedXML = ReturnXML
							   , ModifiedBy = @userId 
							   ,ModifiedDate = @GetDate
							WHEN NOT MATCHED THEN 
							INSERT (PublishCatalogLogId
							,PublishedId
							,PublishedXML
							,IsBundleProductXML
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)

							VALUES (SOURCE.versionid , Source.PublishProductid,Source.ReturnXML,1,0,@userId,@getDate,@userId,@getDate);
						                                         
                 END;
             ELSE
             IF @ProductType = 'GroupedProduct'
                 BEGIN
				  
				     IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			           BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE  IsGroupProductXML = 1 
					 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
					 END 
					 ELSE 
					 BEGIN 
					 SET @versionid  =(SELECT TOP 1 VersionId FROM @TBL_PublishCatalogId TBLV )

					 DELETE FROM ZnodePublishedXML WHERE IsGroupProductXML = 1 
					 AND PublishCatalogLogId  = @versionid
					 END 

				   

				 	 MERGE INTO ZnodePublishedXML TARGET 
					 USING (  
				     SELECT TBP.PublishProductId, TBP.VersionId, '<GroupProductEntity><VersionId>'+CAST(TBP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeCatalogId>'+CAST(TBP.PublishCatalogId AS VARCHAR(50))+'</ZnodeCatalogId><ZnodeProductId>'
					 +CAST(TBP.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><AssociatedZnodeProductId>'
					 +CAST(TBPU.PublishProductId AS VARCHAR(50))+'</AssociatedZnodeProductId><AssociatedProductDisplayOrder>'+CAST(ZPTA.DisplayOrder AS VARCHAR(50))+'</AssociatedProductDisplayOrder></GroupProductEntity>'  ReturnXML
					 FROM @TBL_PublishCatalogId TBP
					 INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					 INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
					  ) SOURCE 
					ON (
								 TARGET.PublishCatalogLogId = SOURCE.versionId 
								 AND TARGET.PublishedId = SOURCE.PublishProductId
								 AND TARGET.IsGroupProductXML = 1 
								 AND TARGET.LocaleId = 0 
							)
							WHEN MATCHED THEN 
							UPDATE 
							SET  PublishedXML = ReturnXML
							   , ModifiedBy = @userId 
							   ,ModifiedDate = @GetDate
							WHEN NOT MATCHED THEN 
							INSERT (PublishCatalogLogId
							,PublishedId
							,PublishedXML
							,IsGroupProductXML
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)

							VALUES (SOURCE.versionid , Source.PublishProductid,Source.ReturnXML,1,0,@userId,@getDate,@userId,@getDate);
    
                 END;
             ELSE
             IF @ProductType = 'ConfigurableProduct'
                 BEGIN
				        IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			           BEGIN 
			 		 
							DELETE FROM ZnodePublishedXML WHERE  IsConfigProductXML = 1 
							AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			           
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM @TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
					 END 
					 ELSE 
					 BEGIN 
						
						SET @versionid  =(SELECT TOP 1 VersionId FROM @TBL_PublishCatalogId TBLV )

						DELETE FROM ZnodePublishedXML WHERE  IsConfigProductXML = 1 
						AND PublishCatalogLogId  = @versionid
					 END 

				 --  select * from @TBL_PublishCatalogId

				 	 MERGE INTO ZnodePublishedXML TARGET 
					 USING (  
				     SELECT TBP.PublishProductId, TBP.VersionId, '<ConfigurableProductEntity><VersionId>'+CAST(TBP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeCatalogId>'+CAST(TBP.PublishCatalogId AS VARCHAR(50))+'</ZnodeCatalogId><ZnodeProductId>'
					 +CAST(TBP.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><AssociatedZnodeProductId>'
					 +CAST(TBPU.PublishProductId AS VARCHAR(50))+'</AssociatedZnodeProductId><AssociatedProductDisplayOrder>'+CAST(ZPTA.DisplayOrder AS VARCHAR(50))+'</AssociatedProductDisplayOrder>'
					 +(SELECT DISTINCT  ZPA.AttributeCode ConfigurableAttributeCode 
														FROM ZnodePimConfigureProductAttribute ZPCPA 
														LEFT JOIN ZnodePimAttribute ZPA ON (Zpa.PimAttributeId = ZPCPA.PimAttributeId) 
                                                        WHERE  ZPCPA.PimProductId = TBP.PimProductId 
                                                        FOR XML PATH('ConfigurableAttributeCodes')) +'</ConfigurableProductEntity>'  ReturnXML
					 FROM @TBL_PublishCatalogId TBP
					 INNER JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimParentProductId = TBP.PimProductId)
					 INNER JOIN ZnodePublishProduct TBPU ON (TBPU.PimProductId = ZPTA.PimProductId AND TBPU.PublishCatalogId = TBP.PublishCatalogId )
				    ) SOURCE 
					ON (
								 TARGET.PublishCatalogLogId = SOURCE.versionId 
								 AND TARGET.PublishedId = SOURCE.PublishProductId
								 AND TARGET.IsConfigProductXML = 1 
								 AND TARGET.LocaleId = 0 
							)
							WHEN MATCHED THEN 
							UPDATE 
							SET  PublishedXML = ReturnXML
							   , ModifiedBy = @userId 
							   ,ModifiedDate = @GetDate
							WHEN NOT MATCHED THEN 
							INSERT (PublishCatalogLogId
							,PublishedId
							,PublishedXML
							,IsConfigProductXML
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)

							VALUES (SOURCE.versionid , Source.PublishProductid,Source.ReturnXML,1,0,@userId,@getDate,@userId,@getDate);
    
                 END;

				 SELECT PublishedXML ReturnXML
				 FROM ZnodePublishedXML  ZPXM 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPXM.PublishCatalogLogId and TBLP.PublishProductid = ZPXm.PublishedId )
				 AND IsConfigProductXML = CASE WHEN @ProductType = 'ConfigurableProduct' THEN  1 ELSE 0 END 
				 AND IsGroupProductXML = CASE WHEN @ProductType = 'GroupedProduct' THEN  1 ELSE 0 END 
				 AND IsBundleProductXML = CASE WHEN @ProductType = 'BundleProduct' THEN  1 ELSE 0 END 
				  

				 -- Create Nonclustered index ind_ZnodePublishedXML_Bulk on ZnodePublishedXML(PublishCatalogLogId,IsConfigProductXML,IsGroupProductXML,IsBundleProductXML) 
				  				-- SELECT ReturnXML FROM @TBL_ProductTypeXML;
		
		    COMMIT TRAN GetPublishAssociatedProducts;
			
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
            DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishAssociatedProducts @PublishCatalogId = '+@PublishCatalogId+',@ProductType= '+@ProductType+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			ROLLBACK TRANSACTION GetPublishAssociatedProducts;
			EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPublishAssociatedProducts',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPublishCategory')
	drop proc Znode_GetPublishCategory
go
CREATE PROCEDURE [dbo].[Znode_GetPublishCategory]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
    @IsDebug          BIT = 0)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
     


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT             );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
             SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 WHERE ZPCH.PimCatalogId = @PimCatalogId; 
             -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog
             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
             SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
			 FROM ZnodePublishCategoryProduct ZPCP
             INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
             INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
             INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
             WHERE ZPC.PublishCatalogId = @PublishCataLogId 
			 AND NOT EXISTS(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId
			 AND TBPC.PimProductId = ZPP.PimProductId AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	
             EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
			 TARGET.PimCategoryId = SOURCE.PimCategoryId 
			 AND TARGET.PublishCatalogId = @PublishCataLogId 
			 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,INSERTED.parentPimCategoryHierarchyId INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			
    --         UPDATE TBPC SET PublishParentCategoryId = TBPCS.PublishCategoryId 
			 --FROM @TBL_PublishPimCategoryIds TBPC
    --         INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
    --         INNER JOIN @TBL_PublishPimCategoryIds TBPCS ON(TBC.PimCategoryHierarchyId = TBPCS.parentPimCategoryHierarchyId  ) 
			 --WHERE TBC.parentPimCategoryHierarchyId IS NOT NULL;
           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			 FROM ZnodePublishCategory ZPC
             INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
			 AND TBPC.PublishCatalogId =@PublishCatalogId
			 ;
			 UPDATE a
			 SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId =@PublishCatalogId
			AND b.PublishCatalogId =@PublishCatalogId

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

             UPDATE ZnodePublishCatalogLog SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
			 GROUP BY PublishCategoryId																				
             FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

             DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
            
             INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
             
			 SELECT CategoryXml  
			 FROM @TBL_CategoryXml 
			 

			 UPDATE ZnodePimCategory 
			 SET IsCategoryPublish =1 
			 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)

              
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPublishPortalStatus')
	drop proc Znode_GetPublishPortalStatus
go
CREATE PROCEDURE [dbo].[Znode_GetPublishPortalStatus]
(
	@WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the Portal 
	 Unit Testig 
	 EXEC  Znode_GetPublishPortalStatus '',10,1,'',0
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		 DECLARE @TBL_PortalId TABLE (PortalId INT, PublishPortalLogId INT,PublishStatus VARCHAR(300),IsPortalPublished BIT,UserName NVARCHAR(512),PublishCategoryCount INT ,CreatedDate DATETIME ,ModifiedDate DATETIME ,RowId INT ,CountId INT)
	 
		 SET @SQL = '
		 ;With Cte_PortalLog AS
		 (
		 SELECT PublishPortalLogId,CASE WHEN IsPortalPublished IS NULL THEN ''Processing'' WHEN IsPortalPublished = 0 THEN ''Publish Failed''
         WHEN IsPortalPublished = 1 THEN  ''Published Successfully'' END   PublishStatus, IsPortalPublished, APZU.UserName ,(SELECT DISTINCT COUNT(Item) FROM dbo.split(ZPPL.PublishCategoryId,'','') SP
         ) PublishCategoryCount, ZPPL.CreatedDate,ZPPL.ModifiedDate ,ZPPL.PortalId PortalId
	     FROM ZnodePublishPortalLog  ZPPL LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZPPL.CreatedBy )
	    
		 LEFT JOIN AspNetUsers APU ON (APU.Id = ZU.AspNetUserId) LEFT JOIN AspNetZnodeUser APZU ON (APZU.AspNetZnodeUserId = APU.UserName))
	 
	     ,Cte_PublishStatus 
		 AS (SELECT PortalId, PublishPortalLogId, PublishStatus, IsPortalPublished ,UserName , PublishCategoryCount, CreatedDate,ModifiedDate ,
		 '+[dbo].[Fn_GetPagingRowId](@Order_BY,'PublishPortalLogId DESC')+' , Count(*)Over() CountId FROM Cte_PortalLog
         WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )
	 
		 SELECT PortalId, PublishPortalLogId,PublishStatus, IsPortalPublished,UserName,PublishCategoryCount,CreatedDate,ModifiedDate,RowId,CountId 
		 FROM Cte_PublishStatus 
		 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '
	
	
		 INSERT INTO @TBL_PortalId
		 EXEC (@SQL)

		 SELECT  PortalId, PublishPortalLogId,PublishStatus, IsPortalPublished,UserName,PublishCategoryCount,CreatedDate,ModifiedDate
		 FROM @TBL_PortalId

		 SET @RowsCount = ISNULL((SELECT TOP 1 COUNTID FROM @TBL_PortalId),0)
	 
		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishPortalStatus @WhereClause = '+@WhereClause+',@Rows='+CAST(@Rows AS
 VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetPublishPortalStatus',
					@ErrorInProcedure = @Error_procedure,
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPublishProductbulk')
	drop proc Znode_GetPublishProductbulk
go
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk 5, 0 , '' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

  --DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )

   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DELETE FROM #PimProductAttributeXML
   END

   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   Declare @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 
 --DECLARE #TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int  )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,@versionId ,ZPC.PublishCategoryId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and  
				 ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )
  END
  ELSE 
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
											MAX(PublishCatalogLogId) ELSE @versionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

WHILE @Counter <= @maxCountId
BEGIN
 
  SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO @PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       

	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) from #TBL_AttributeVAlue b where a.PimProductId=b.PimProductId and a.PimAttributeId = b.PimAttributeId )
	 from #TBL_AttributeVAlue a

	 --select * from #TBL_AttributeVAlue
	 --return
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 create table #Cte_GetData (PimProductId int,AttributeCode varchar(600),AttributeValue nvarchar(max))

 create index idx_#Cte_GetDataPimProductId on #Cte_GetData(PimProductId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
where a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
--INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId AND CTE.LocaleId  = CASE WHEN cte.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue                 
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

	 

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)


insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
where exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

--  --CREATE INDEX IND_ZnodePublishInline_0999 ON Cte_GetData(PimProductId ASC)

  DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId = @versionId AND IsProductXML = 1   AND LocaleId = @LocaleId 

--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		--IF OBJECT_ID('tempdb..#Index') is not null
		--BEGIN 
		--	DROP TABLE #Index
		--END 

		--Select PCI.PublishProductId into #Index from 
		--#TBL_PublishCatalogId PCI Inner join ZnodePublishCategoryProduct ZPC ON   
		--PCI.PublishProductId = ZPC.PublishProductId 
		--AND PCI.PublishCatalogId = ZPC.PublishCatalogId 

  		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								--+ CAST((select COUNT(*) +1  from #Index WHERE PublishProductId = zpp.PublishProductId) 
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
		AND ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )
  END
  ELSE
  BEGIN
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
END 
 


--DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
SET @Counter = @counter + 1 
END 

END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPublishProducts')
	drop proc Znode_GetPublishProducts
go
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 0 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
	
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			   
	         IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			   IF @IsDebug =1 
			   BEGIN 
			    SELECT * FROM @TBL_PublishIds 
			   END 
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@userid	,@TokenId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId,@VersionId,@PimProductId,@userid
				 UPDATE ZnodePimProduct SET IsProductPublish = 1 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
										MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 AND IsCatalogPublished =1 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				;

				SELECT PublishProductId AS ProductXml
				FROM @TBL_PublishCatalogId
				GROUP BY PublishProductId;
			END
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			    ,PublishProductId = (SELECT DISTINCT COUNT(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId  ) 
		    WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0

			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 
			
			--UPDATE ZnodePimattributeValueLocale SET AttributeValue = 'Published' 
			--FROM ZnodePimattributeValue PAV
			--INNER JOIN ZnodePimattributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
			--WHERE PimAttributeId = @PimAttributeIsPublish
			--AND EXISTS ( SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = PAV.PimProductId )

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)
			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

		--@PimProductId='+CAST(@PimProductId AS Varchar(50))+',
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetPublishSingleProduct')
	drop proc Znode_GetPublishSingleProduct
go
-- SELECT * FROM ZnodePublishCataloglog

-- SELECT * FROM ZnodePublishProduct WHERE PublishProductId = 218 


CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	

)
AS
-- EXEC Znode_GetPublishProductbulk 0, 0 , '10716' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
										MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
		
			

             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

			 INSERT INTO @TBL_AttributeVAlueLocale
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId 
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
 
WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
  DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO @TBL_AttributeVAlue
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO @TBL_AttributeVAlue
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 

	
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_AttributeValue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
UNION ALL 
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  @TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM @TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  @TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1


 

  
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT zpp.PublishProductId,zpp.VersionId ,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					FROM ZnodeProfileCatalog ZPFC 
					INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
					WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
FROM  @TBL_PublishCatalogId zpp
INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
WHERE ZPPDFG.LocaleId = @LocaleId
) SOURCE 
ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

DELETE FROM @TBL_ZnodeTempPublish

DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
DELETE FROM @TBL_AttributeValue 

SET @Counter = @counter + 1 
END 

END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetSearchProfileDetails')
	drop proc Znode_GetSearchProfileDetails
go
CREATE PROCEDURE [dbo].[Znode_GetSearchProfileDetails]
(
	@SearchProfileId int 
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the catalog 
	 Unit Testig 
	 EXEC  Znode_GetCatalogList '',100,1,'',0
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 

		   Declare @SearchQueryTypeId int 

				Select @SearchQueryTypeId=SearchQueryTypeId 
				from ZnodeSearchProfile
				Where  SearchProfileId=@SearchProfileId	

				Exec [dbo].[Znode_GetSearchQueryTypeWiseFeatureDetails] @SearchProfileId=@SearchProfileId,@SearchQueryTypeId=@SearchQueryTypeId
						

				Select b.SearchProfileId,b.AttributeCode,b.BoostValue,b.IsUseInSearch,b.IsFacets
				from ZnodeSearchProfileAttributeMapping b
				Where  b.SearchProfileId=@SearchProfileId AND IsUseInSearch=1

				Select b.SearchProfileId,b.AttributeCode,b.BoostValue,b.IsFacets,b.IsUseInSearch
				from ZnodeSearchProfileAttributeMapping b
				Where  b.SearchProfileId=@SearchProfileId AND IsFacets=1

				Select b.SearchQueryTypeId , b.SearchQueryTypeId ,b.ProfileName,b.Operator,
				c.QueryTypeName,c.QueryBuilderClassName,
				b.SearchSubQueryTypeId,d.QueryTypeName SubQueryTypeName,d.QueryBuilderClassName SubQueryBuilderClassName,
				pc.PublishCatalogId,pc.CatalogName
				from  ZnodeSearchProfile B 
				left join dbo.ZnodePublishCatalogSearchProfile cc on cc.SearchProfileId=b.SearchProfileId
				left join dbo.ZnodePublishCatalog pc on pc.PublishCatalogId=cc.PublishCatalogId
				inner join ZnodeSearchQueryType C on b.SearchQueryTypeId=C.SearchQueryTypeId 
				Left join ZnodeSearchQueryType d on  d.SearchQueryTypeId =b.SearchSubQueryTypeId
				Where  b.SearchProfileId=@SearchProfileId	 

				select pfv.FieldName,pfv.FieldValueFactor 
				from ZnodeSearchProfileFieldValueFactor pfv
				WHERE pfv.SearchProfileId = @SearchProfileId

		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
			@ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)
	--		= 'EXEC Znode_GetCatalogList @WhereClause = '+@WhereClause+',@Rows='+CAST(@Rows AS
 --VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetZnodeSearchProfileList',
					@ErrorInProcedure = @Error_procedure,
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetSearchProfileList')
	drop proc Znode_GetSearchProfileList
go
CREATE PROCEDURE [dbo].[Znode_GetSearchProfileList]
(
	@WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the catalog 
	 Unit Testig 
	 EXEC  Znode_GetSearchProfileList '',100,1,'',0
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		 DECLARE @TBL_CatalogId TABLE 
		 (PublishCatalogId int ,CatalogName NVARCHAR(2000), SearchProfileId INT , SearchQueryTypeId INT , ProfileName NVARCHAR(2000),QueryTypeName  NVARCHAR(2000),QueryBuilderClassName  NVARCHAR(2000),SearchSubQueryTypeId INT,SubQueryTypeName  NVARCHAR(2000),
		SubQueryBuilderClassName  NVARCHAR(2000),--RowId INT ,
		PortalId INT,PortalName NVARCHAR(MAX),IsDefault BIT,CountId INT )
		
	 
		 SET @SQL = '
		;With Cte_CatalogLog AS (
		Select dd.PublishCatalogId,pc.CatalogName,B.SearchProfileId,  b.SearchQueryTypeId ,b.ProfileName,
		c.QueryTypeName,c.QueryBuilderClassName,
		b.SearchSubQueryTypeId,d.QueryTypeName SubQueryTypeName,d.QueryBuilderClassName SubQueryBuilderClassName,ZPSP.PortalId,ZP.StoreName as PortalName,isnull(ZPSP.IsDefault,0) as Isdefault
		from  ZnodeSearchProfile B 
		INNER JOIN ZnodePublishCatalogSearchProfile dd on  dd.SearchProfileId=b.SearchProfileId
		inner join ZnodePublishCatalog pc on pc.PublishCatalogId=dd.PublishCatalogId
		inner join ZnodeSearchQueryType C on b.SearchQueryTypeId=C.SearchQueryTypeId 
		Left join ZnodeSearchQueryType d on  d.SearchQueryTypeId =b.SearchSubQueryTypeId
		LEFT Join ZnodePortalSearchProfile ZPSP ON (ZPSP.SearchProfileId = B.SearchProfileId AND ZPSP.PublishCatalogId = DD.PublishCatalogId)
		LEFT JOIN ZnodePortal ZP ON (ZP.PortalId = ZPSP.PortalId)
			
		)	 
	     ,Cte_PublishStatus 
		 AS (
		 SELECT PublishCatalogId,CatalogName,SearchProfileId , SearchQueryTypeId ,ProfileName,
		QueryTypeName,QueryBuilderClassName,
		SearchSubQueryTypeId,SubQueryTypeName,
		SubQueryBuilderClassName,PortalId,PortalName	,IsDefault,	
		 '+[dbo].[Fn_GetPagingRowId](@Order_BY,'SearchProfileId DESC')+' , Count(*)Over() CountId FROM Cte_CatalogLog
         WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )
	 
		 SELECT PublishCatalogId,CatalogName,SearchProfileId , SearchQueryTypeId ,
		 ProfileName,
		QueryTypeName,QueryBuilderClassName,
		SearchSubQueryTypeId,SubQueryTypeName,
		SubQueryBuilderClassName,PortalId,PortalName	,IsDefault,CountId
		 FROM Cte_PublishStatus 
		 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '
	

	     PRINT @sql 
		 INSERT INTO @TBL_CatalogId 
		 EXEC (@SQL)

		 SELECT   PublishCatalogId,CatalogName,SearchProfileId , SearchQueryTypeId ,
		 ProfileName,
		QueryTypeName,QueryBuilderClassName,
		SearchSubQueryTypeId,SubQueryTypeName,
		SubQueryBuilderClassName,PortalId,PortalName	,IsDefault,CountId
		 FROM @TBL_CatalogId

		 SET @RowsCount = ISNULL((SELECT TOP 1 COUNTID 
		 FROM @TBL_CatalogId),0)

		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSearchProfileList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetSearchProfileList',
					@ErrorInProcedure = 'Znode_GetSearchProfileList',
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetSearchProfileTrigger')
	drop proc Znode_GetSearchProfileTrigger
go
CREATE  PROCEDURE [dbo].[Znode_GetSearchProfileTrigger]
(   @WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT

)
AS 
   /* 
   SUMMARY : Stored Procedure to Get list of searchProfileid 
   Unit Testing:

   -- EXEC Znode_GetSearchProfileTrigger N'keyword like ''%vvvvvv%'' ',@RowsCount = 0 , @Order_BY = 'UserProfile '
   
   searchProfileid = 2
   	*/

     BEGIN
         BEGIN TRY

		 SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		
			DECLARE @TBL_ProfileTrigger TABLE (SearchProfileTriggerId INT,Keyword nvarchar(2000),UserProfileId INT,SearchProfileId INT,UserProfile nvarchar(400), RowId INT, CountNo INT)


		SET @SQL = '
						;With Cte_GetProfileTriggerList 
						AS (
						Select ZSPT.SearchProfileTriggerId, ZSPT.Keyword,ZSPT.UserProfileId,ZSPT.SearchProfileId,ZP.ProfileName as UserProfile
						FROM  ZnodeSearchProfileTrigger ZSPT 
						left JOIN ZnodeUserProfile ZUP ON (ZSPT.UserProfileId = ZUP.UserProfileID)
						left JOIN ZnodeProfile ZP ON (ZUP.ProfileId = ZP.ProfileId)
						
									
						)	
						
						
						,Cte_GetFilterProfileTrigger
						AS (
						SELECT SearchProfileTriggerId,Keyword,UserProfileId,SearchProfileId,UserProfile,
						'+dbo.Fn_GetPagingRowId(@Order_BY,'SearchProfileTriggerId DESC')+',Count(*)Over() CountNo 
						FROM  Cte_GetProfileTriggerList CGPTL 
						WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						
						)
																								
						SELECT SearchProfileTriggerId,Keyword,UserProfileId,SearchProfileId,UserProfile,RowId,CountNo
						FROM Cte_GetFilterProfileTrigger
						'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						--print @sql
						INSERT INTO @TBL_ProfileTrigger(SearchProfileTriggerId,Keyword,UserProfileId,SearchProfileId,UserProfile,RowId,CountNo)
						EXEC(@SQL)

						SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_ProfileTrigger ),0)
			
						SELECT SearchProfileTriggerId,Keyword,UserProfileId,SearchProfileId,UserProfile
						FROM @TBL_ProfileTrigger

				
		 END TRY
		 BEGIN CATCH
			 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSearchProfileTrigger @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSearchProfileTrigger',
				@ErrorInProcedure = 'Znode_GetSearchProfileTrigger',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		 END CATCH
     END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetSeoDetails')
	drop proc Znode_GetSeoDetails
go
CREATE PROCEDURE [dbo].[Znode_GetSeoDetails]
(   @SeoId    VARCHAR(MAX) = '',
	@SeoType  VARCHAR(100),
	@LocaleId INT,
	@PortalId INT=0)
AS 
   /*
     Summary:- This Procedure is used to get the Seo Detials on the bassis of seo type  
     Unit Testing 
     EXEC Znode_GetSeoDetails 1,'Category'
	 Znode_GetSeoDetails  @SeoId=null,@SeoType='Category',@LocaleId=1,@PortalId=1
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_SeoId TABLE(SeoId INT);

             INSERT INTO @TBL_SeoId(SeoId)
			 SELECT item FROM dbo.Split(@SeoId, ',') SP;

            ; WITH Cte_SeoDetailsIds
              AS (SELECT ZCSD.CMSSEODetailId, SEOTitle,SEOKeywords,SEOURL,ZCSD.ModifiedDate,ZCSDL.SEODescription,MetaInformation,SEOId,IsRedirect,
              CMSSEODetailLocaleId,LocaleId, ZCSD.IsPublish FROM ZnodeCMSSEODetail AS ZCSD 
              INNER JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = @SeoType)                                                   
              INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
              WHERE LocaleId IN(@LocaleId, @DefaultLocaleId) AND  (ZCSD.PortalId= @PortalId OR @PortalId = 0 )
              AND( EXISTS (SELECT TOP 1 1 FROM @TBL_SeoId TBSD WHERE TBSD.SeoId = ZCSD.SEOId) OR @SeoId = '' )  )

            ,Cte_SeoDetailsFirstLocale
             AS (SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,
             SEOId,IsPublish FROM Cte_SeoDetailsIds WHERE LocaleId = @LocaleId)

            ,Cte_SeoDetailDefaultLocale
				AS (
				SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,
				SEOId,IsPublish FROM Cte_SeoDetailsFirstLocale
				UNION ALL
				SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,
				SEOId,IsPublish FROM Cte_SeoDetailsIds CTSD
				WHERE LocaleId = @DefaultLocaleId
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_SeoDetailsFirstLocale CTSDL WHERE CTSDL.CMSSEODetailId = CTSD.CMSSEODetailId))

        SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,
        SEOId ,Case When Isnull(IsPublish ,0 ) = 0 then 'Draft' ELSE 'Published' END   PublishStatus
		 FROM Cte_SeoDetailDefaultLocale;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSeoDetails @SeoId = '+@SeoId+',@SeoType='+@SeoType+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSeoDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetSKUInventoryList')
	drop proc Znode_GetSKUInventoryList
go
CREATE  PROCEDURE [dbo].[Znode_GetSKUInventoryList]
(   @WhereClause VARCHAR(1000),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT,
    @LocaleId    INT           = 1)
AS 
    /*
    Summary : this procedure is used to Get the inventory list by sku 
    Unit Testing 
     EXEC Znode_GetSKUInventoryList  '' ,@RowsCount= 1,@PageNo= 1 ,@Rows = 100
     SELECT * FROM ZnodePublishProduct WHERE PimProductid  = 4
    */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @TBL_InventoryList TABLE (PimProductId int,InventoryId INT ,WarehouseId INT ,WarehouseCode NVARCHAR(100),WarehouseName VARCHAR(100),SKU  VARCHAR(300)
			 ,Quantity NUMERIC (28,6),ReOrderLevel NUMERIC (28,6),IsDownloadable bit default 0,ProductName NVARCHAR(max),RowId INT,CountNo INT);

             DECLARE @DefaultLocaleId VARCHAR(100)= Dbo.Fn_GetDefaultValue('Locale');
             
             IF  OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
			 BEGIN 
				DROP TABLE #TBL_AttributeVAlue
			 END 	
			 DECLARE @PimAttributeSKUId INT = dbo.FN_GetProductSKUAttributeid()
			 ,@PimAttributeProductNameId INT = dbo.FN_GetProductNameAttributeid()
			 SELECT VI.PimProductId,VI.PimAttributeId,VI2.AttributeValue,Case when VI.PimAttributeId =@PimAttributeSKUId then 'SKU'
                    Else 'ProductName' END  AttributeCode,VI2.LocaleId --,COUNT(*)Over(Partition By VI.PimProductId,VI.PimAttributeId ORDER BY VI.PimProductId,VI.PimAttributeId  ) RowId
			 INTO #TBL_AttributeVAlue
			 FROM  ZnodePimAttributeValue  VI 
			 INNER JOIN ZnodePimAttributeValueLocale VI2 ON (VI.PimAttributeValueId = VI2.PimAttributeValueId )
			 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
			 AND  VI.PimAttributeId IN ( @PimAttributeSKUId,@PimAttributeProductNameId)	


			 alter table #TBL_AttributeVAlue add IsDownloadable bit not null  default 0

			 Update a
			 set a.IsDownloadable=1
			 From #TBL_AttributeVAlue a
			 inner join ZnodePimDownloadableProduct b on  a.AttributeValue=b.SKU
			 WHERE a.AttributeCode = 'SKU'  

					
			 SET @SQL = '	
				;With CTE_InventoryListWithSKU AS 
				(
					SELECT  CTE.PimProductId , CTEI.AttributeValue ProductName,ZW.WarehouseCode,ZW.WarehouseName , CTEI.LocaleId,SKU,SPN.InventoryId,SPN.WarehouseId
						,SPN.Quantity,SPN.ReOrderLevel,cte.IsDownloadable
					FROM #TBL_AttributeVAlue CTE
					INNER JOIN #TBL_AttributeVAlue CTEI ON (CTEI.PimProductId = CTE.Pimproductid 
											AND CTEI.AttributeCode = ''ProductName'' )
					INNER JOIN ZnodeInventory  SPN ON ((SELECT ''''+SPN.SKU FOR XML PATH(''''))  = CTE.AttributeValue)
					INNER JOIN ZnodeWarehouse ZW ON (ZW.WarehouseId = SPN.WarehouseId) 
					WHERE CTE.AttributeCode = ''SKU'' 
				)
				,CTE_ListDetailForPaging AS 
				(
					SELECT PimProductId, InventoryId,WarehouseId,WarehouseCode,WarehouseName,SKU,Quantity,ReOrderLevel,IsDownloadable,ProductName
					,'+dbo.Fn_GetPagingRowId(@Order_BY,'InventoryId DESC')+',Count(*)Over() CountNo 
					FROM CTE_InventoryListWithSKU
					WHERE 1=1 
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				)				
				SELECT PimProductId,InventoryId,WarehouseId,WarehouseCode,WarehouseName,dbo.Fn_Trim(SKU)SKU,Quantity,ReOrderLevel,IsDownloadable,dbo.Fn_Trim(ProductName)ProductName,RowId,CountNo
				FROM CTE_ListDetailForPaging 
				'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)



				INSERT INTO @TBL_InventoryList(PimProductId,InventoryId,WarehouseId,WarehouseCode,WarehouseName,SKU,Quantity,ReOrderLevel,IsDownloadable,ProductName,RowId,CountNo)
				EXEC (@SQL);

            SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_InventoryList), 0);

            SELECT PimProductId,InventoryId,WarehouseId,WarehouseCode,WarehouseName,SKU,Quantity,ReOrderLevel,IsDownloadable,ProductName
			FROM @TBL_InventoryList;
         
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSKUInventoryList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSKUInventoryList',
				@ErrorInProcedure = 'Znode_GetSKUInventoryList',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetSkuListForInventoryAndPrice')
	drop proc Znode_GetSkuListForInventoryAndPrice
go
CREATE  PROCEDURE [dbo].[Znode_GetSkuListForInventoryAndPrice](
       @WhereClause VARCHAR(MAX) ,
       @Rows        INT           = 100 ,
       @PageNo      INT           = 1 ,
       @Order_BY    VARCHAR(1000) = '' ,
       @RowsCount   INT = 0  OUT ,
       @LocaleId    INT           = 1 ,
       @PriceListId INT           = 0)
AS 
   /* 
    Summary : this procedure is used to Get the inventory list by sku 
    Unit Testing 
     EXEC Znode_GetSkuListForInventoryAndPrice  '',@Order_BY = '',@RowsCount= 1 ,@Rows = 100,@PageNo= 1,@PriceListId = 26,@LocaleId =1 
     SELECT * FROM ZnodePublishProduct WHERE PimProductid  = 4
   */
     BEGIN
         BEGIN TRY
		     DECLARE @PimProductIds TransferId, --NVARCHAR(max)= '', 
					@OutPimProductIds NVARCHAR(max)= '',
					@PimAttributeId NVARCHAR(max)=''
			 DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
			 DECLARE @PimProductNameAttributeId VARCHAR(50) = [dbo].[Fn_GetProductNameAttributeId]()
			 DECLARE @PimProductTypeAttributeId VARCHAR(50) = [dbo].[Fn_GetProductTypeAttributeId]()
			 DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
			 DECLARE @PimProductImageAttributeId VARCHAR(50) = [dbo].[Fn_GetProductImageAttributeId]()

			 DECLARE @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId()
			 DECLARE @TransferPimProductId TransferId 
			 DECLARE @IsProductNotIn BIT = 1 
			 DECLARE @IMamgePAth NVARCHAR(max) = [dbo].[Fn_GetServerThumbnailMediaPath]()

			 DECLARE @ProductIdTable TABLE
             (
				PimProductId INT,
				CountId      INT,
				RowId        INT IDENTITY(1,1)
             );

			 DECLARE @TBL_AttributeDetails AS TABLE
             (
				PimProductId   INT,
				AttributeValue NVARCHAR(MAX),
				AttributeCode  VARCHAR(600),
				PimAttributeId INT
             );

             IF @PriceListId > 0
             BEGIN
				INSERT INTO @TransferPimProductId 
				SELECT Distinct PimProductId 
				FROM  [dbo].[View_PimProductAttributeValueLocale] VIMP
				INNER JOIN ZnodePrice  ZP ON (Zp.SKU = VIMP.AttributeValue )
				WHERE VIMP.PimAttributeid = @pimSkuAttributeId
				AND VIMP.LocaleId = @LocaleId
				AND ZP.PriceListId = @PriceListId
					
               SET @IsProductNotIn = 1 --CASE WHEN @PimProductIds IS NULL OR @PimProductIds = '' then 1 else 0 end 

			   IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId )
			   BEGIN 
					INSERT INTO @TransferPimProductId
					SELECT '-1'
			   END 
			 --  set @PimProductIds = CASE WHEN @PimProductIds IS NULL OR @PimProductIds = '' then  else @PimProductIds end 
		     END;
			-- SELECT * FROM ZnodePrice WHERE PriceListId = 21
			DECLARE @AttributeCode NVARCHAR(max)= '',@SQL NVARCHAR(max)=''
 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 --SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
		--			 WHEN @IsProductNotIn = 1 THEN 0 END 
		--END 
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  0,@TransferPimProductId
	 
	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	     
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
			 INSERT INTO @ProductIdTable (PimProductId)              
			 SELECT Id 
			 FROM @TBL_MainList SP 
				  	           
             --SET @PimProductIds = SUBSTRING((SELECT ','+CAST(PimProductId AS VARCHAR(100)) FROM @ProductIdTable FOR XML PATH('')), 2, 4000);
			 INSERT INTO @PimProductIds ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = @pimSkuAttributeId  + ',' + @PimProductNameAttributeId + ',' +@PimProductTypeAttributeId + ',' + @PimIsDownlodableAttributeId + ',' + @PimProductImageAttributeId ;
			
			  DECLARE @FamilyDetails TABLE
             (
				PimProductId         INT,
				PimAttributeFamilyId INT,
				FamilyName           NVARCHAR(3000)
             );	


			 INSERT INTO @FamilyDetails ( PimAttributeFamilyId, PimProductId )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductIds, 1;

             UPDATE a
             SET  FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
             INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId AND LocaleId = @LocaleId);

             UPDATE a
             SET FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a 
			 INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL OR a.FamilyName = '';

			 
             INSERT INTO @TBL_AttributeDetails ( PimProductId, AttributeValue, AttributeCode, PimAttributeId )
             EXEC Znode_GetProductsAttributeValue @PimProductIds, @PimAttributeId, @localeId;
			 
			 INSERT INTO @TBL_AttributeDetails ( PimProductId, AttributeValue, AttributeCode )
			 SELECT PimProductId,FamilyName ,'AttributeFamily'
			 FROM @FamilyDetails

		    ;With Cte_pimProductDetails AS
			(
			  SELECT PimProductId,AttributeValue,AttributeCode FROM @TBL_AttributeDetails
			)
			SELECT PimProductId,ProductName,SKU,Convert ( BIT, CASE when ISNULL(IsDownloadable,0)= 'true' then 1 else 0 END )IsDownloadable,@IMamgePAth+ZM.[Path] ProductImage, AttributeFamily,[ProductType]
			FROM Cte_pimProductDetails CTEPD
			PIVOT
			(
				Max(AttributeValue) FOR AttributeCode IN ([ProductName],[SKU],[IsDownloadable],[ProductImage],[AttributeFamily],[ProductType])
			) PIV
			LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = Piv.[ProductImage])
			 
			
				  IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount= (SELECT COUNT(1) FROM @TAb)   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT  @RowsCount= (SELECT COUNT(1) FROM @ProductListIdRTR) 
	 END 

	 
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
			 @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSkuListForInventoryAndPrice @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSkuListForInventoryAndPrice',
				@ErrorInProcedure = 'Znode_GetSkuListForInventoryAndPrice',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetSkuPricebyCatalog')
	drop proc Znode_GetSkuPricebyCatalog
go
CREATE  PROCEDURE [dbo].[Znode_GetSkuPricebyCatalog]
(   @WhereClause		NVARCHAR(max),
    @Rows				INT            = 100,
    @PageNo				INT            = 1,
    @Order_BY			VARCHAR(1000)  = '',
    @RowsCount			INT  out,
	@LocaleId			INT			   = 0,
	@Sku                VARCHAR(MAX),
	@PortalId		    INT = 0,
	@currentUtcDate     VARCHAR(200) = '',
	@PublishProductId   ProductForSortPrice READONLY,
	@IsInStock			varchar(5) ,
	@IsSorting			Bit = 1 
		)		
AS 
/*
    Summary: This procedure is used to find the PriceList by catalog 
	Unit Testing: 
	
    @IsInStock --- for 1 - In stock data , for 0 - out off stock data , for -1 - all data

	declare @p7 int
	set @p7=NULL
	declare @p12 dbo.ProductForSortPrice
	insert into @p12 values(947,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(948,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(949,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(950,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(951,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(953,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(957,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1002,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1003,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1004,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1005,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1026,N'BundleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1030,N'BundleProduct',N'DisablePurchasing',1)
	insert into @p12 values(1039,N'GroupedProduct',N'DontTrackInventory',0)
	insert into @p12 values(1013,N'BundleProduct',N'AllowBackOrdering',0)
	insert into @p12 values(1031,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1032,N'SimpleProduct',N'DisablePurchasing',0)
	insert into @p12 values(1042,N'SimpleProduct',N'DisablePurchasing',0)

	exec sp_executesql N'Znode_GetSkuPricebyCatalog  @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT
	,@LocaleId,@Sku,@PortalId,@currentUtcDate,@PublishProductId,@IsInStock',N'@WhereClause nvarchar(4000),
	@Rows int,@PageNo int,@Order_By nvarchar(15),@RowCount int output,@LocaleId int,
	@Sku nvarchar(4000),@PortalId int,@currentUtcDate datetime,@PublishProductId [dbo].[ProductForSortPrice] 
	READONLY,@IsInStock nvarchar(2)',@WhereClause=N'',@Rows=16,@PageNo=1,@Order_By=N'retailprice asc',@RowCount=@p7 output,
	@LocaleId=1,@Sku=N'',@PortalId=1,@currentUtcDate='2017-11-30 00:00:00',@PublishProductId=@p12,@IsInStock=N'1'
	select @p7

	GO

	declare @p7 int
	set @p7=NULL
	declare @p12 dbo.TransferId
	insert into @p12 values(947)
	insert into @p12 values(948)
	insert into @p12 values(949)
	insert into @p12 values(950)
	insert into @p12 values(951)
	insert into @p12 values(953)
	insert into @p12 values(957)
	insert into @p12 values(1002)
	insert into @p12 values(1003)
	insert into @p12 values(1004)
	insert into @p12 values(1005)
	insert into @p12 values(1026)
	insert into @p12 values(1030)
	insert into @p12 values(1039)
	insert into @p12 values(1013)
	insert into @p12 values(1031)
	insert into @p12 values(1032)
	insert into @p12 values(1042)

	exec sp_executesql N'Znode_GetSkuPricebyCatalog  @WhereClause,@Rows,@PageNo,@Order_By,@RowCount OUT
	,@LocaleId,@Sku,@PortalId,@currentUtcDate,@PublishProductId,@IsInStock',N'@WhereClause nvarchar(4000),
	@Rows int,@PageNo int,@Order_By nvarchar(15),@RowCount int output,@LocaleId int,
	@Sku nvarchar(4000),@PortalId int,@currentUtcDate datetime,@PublishProductId [dbo].[TransferId] 
	READONLY,@IsInStock nvarchar(2)',@WhereClause=N'',@Rows=16,@PageNo=1,@Order_By=N'retailprice asc',@RowCount=@p7 output,
	@LocaleId=1,@Sku=N'',@PortalId=1,@currentUtcDate='2017-11-30 00:00:00',@PublishProductId=@p12,@IsInStock=N'1'
	select @p7

*/

     BEGIN
     BEGIN TRY
	 SET NOCOUNT ON;
			 Declare @ProductIdForPricing   TransferId 
             DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @TBL_PricebyCatalog TABLE (SKU NVARCHAR(4000),RetailPrice numeric(28,6),RowId INT,CountNo INT,ProductType nvarchar(200),OutOfStockOptions nvarchar(200),SalesPrice numeric(28,6))
			 DECLARE @TBL_PricebyCatalogforAssociateProduct TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
			 ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int , TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
			 DECLARE @DefaultLocaleId INT = dbo.FN_GetDefaultLocaleId()
			 
			 DECLARE @tbl_PricingSku TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))		
			 DECLARE @tbl_PricingSkuOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				
			
			Select [Id],[ProductType],[OutOfStockOptions],--[CallForPricing] ,
			 Convert(varchar(300),'') SKU into #PublishProductId from @PublishProductId
			
			UPDATE PDI SET PDI.SKU = ZPPD.SKU 
						from #PublishProductId PDI inner join
						ZnodePublishProductDetail ZPPD On PDI.ID = ZPPD.PublishProductId
		
					--Read price for all products
					--Start
					INSERT INTO @ProductIdForPricing SELECT id FROM @PublishProductId
	
					INSERT INTO @tbl_PricingSku (sku,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId )	
					EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portaliD  ,@currentUtcDate,2,@ProductIdForPricing
					--End
					
					--Read Associate Products price only
					--Start
						--If @IsSorting = 0 
						--Begin
							INSERT into @TBL_PricebyCatalogforAssociateProduct (PimProductId ,AssociatedProductId, ParentSKU,ChildSKU,AssociatedProductDisplayOrder,TypeOfProduct ) 
							SELECT ZPX.PublishedId,ZPX.PublishedXML.value('(ConfigurableProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)'),
							PDI.SKU,ChildZPPD.SKU,ZPX.PublishedXML.value('(ConfigurableProductEntity/AssociatedProductDisplayOrder)[1]', 'nvarchar(20)')
							,'ConfigurableProduct'
							from #PublishProductId PDI inner join
							ZnodePublishedXml ZPX ON PDI.id  = ZPX.PublishedId
							Left Outer JOIN ZnodePublishProductDetail ChildZPPD On 
							ZPX.PublishedXML.value('(ConfigurableProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)') = ChildZPPD.PublishProductId
							WHERE PDI.ProductType = 'ConfigurableProduct'
						
							--INSERT into @TBL_PricebyCatalogforAssociateProduct (PimProductId ,AssociatedProductId, ParentSKU,ChildSKU, TypeOfProduct) 
							--SELECT ZPX.PublishedId,ZPX.PublishedXML.value('(BundleProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)'),
							--PDI.SKU,ChildZPPD.SKU,'BundleProduct'
							--from #PublishProductId PDI inner join
							--ZnodePublishedXml ZPX ON PDI.id  = ZPX.PublishedId
							--Left Outer JOIN ZnodePublishProductDetail ChildZPPD On 
							--ZPX.PublishedXML.value('(BundleProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)')	= ChildZPPD.PublishProductId
							--WHERE PDI.ProductType ='BundleProduct'
						--End	
						INSERT into @TBL_PricebyCatalogforAssociateProduct (PimProductId ,AssociatedProductId, ParentSKU,ChildSKU, TypeOfProduct ) 
						SELECT ZPX.PublishedId,ZPX.PublishedXML.value('(GroupProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)'),
						PDI.SKU,ChildZPPD.SKU ,'GroupedProduct'
						from #PublishProductId PDI inner join
						ZnodePublishedXml ZPX ON PDI.id  = ZPX.PublishedId
						Left Outer JOIN ZnodePublishProductDetail ChildZPPD On 
						ZPX.PublishedXML.value('(GroupProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)') = ChildZPPD.PublishProductId
						WHERE PDI.ProductType = 'GroupedProduct'

				

					DELETE FROM @ProductIdForPricing 
					INSERT INTO @ProductIdForPricing SELECT Distinct AssociatedProductId FROM @TBL_PricebyCatalogforAssociateProduct where AssociatedProductId is not null 
			
					--select PublishCatalogLogId	,PublishedId	,PublishedXML,  PublishedXML.value('(GroupProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)') from ZnodePublishedXml where IsGroupProductXML =1 
					
					INSERT INTO @tbl_PricingSkuOfAssociatedProduct (sku,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId )	
					EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portaliD  ,@currentUtcDate,2,@ProductIdForPricing
								

					update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
					PLC.SalesPrice = PLCA.SalesPrice 
					from @TBL_PricebyCatalogforAssociateProduct PLC inner join @tbl_PricingSkuOfAssociatedProduct
					PLCA on PLC.ChildSKU = PLCA.sku
 
					--End
		
					SELECT DISTINCT sku,RetailPrice,SalesPrice  INTO #tbl_PricingSku FROM   @tbl_PricingSku 
					UNION  ALL 
					SELECT item sku,NULL RetailPrice  ,NULL SalesPrice FROM dbo.split(@Sku,',') SP  
					WHERE NOT EXISTS (SELECT TOP 1 1  FROM @tbl_PricingSku TBSP WHERE TBSP.sku = Sp.Item) AND @Sku <> ''
					UNION ALL 
					SELECT a.SKU , NULL RetailPrice , NULL SalesPrice  FROM ZnodePublishProductDetail  a INNER JOIN @PublishProductId b ON (b.Id = a.PublishProductId) 
					WHERE LocaleId = @DefaultLocaleId AND NOT EXISTS (SELECT TOP 1 1  FROM @tbl_PricingSku TBSP WHERE TBSP.sku = a.SKU) 
					AND @Sku = ''
							
					Update PBC SET PBC.RetailPrice = 
					(Select min(Isnull(RetailPrice, SalesPrice)) from @TBL_PricebyCatalogforAssociateProduct PCBA  
					where PCBA.ParentSKU =PBC.SKU and PCBA.ParentSKU is not null)
					from #tbl_PricingSku  PBC  where 
					Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'GroupedProduct')
			      
				 	Update PBC SET PBC.RetailPrice = 
					(Select TOP 1 Isnull(RetailPrice ,SalesPrice) from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU
					 and PCBA.ParentSKU is not null and PCBA.ChildSKU is not null
					Order by AssociatedProductDisplayOrder)
					from #tbl_PricingSku  PBC  where 
					Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'ConfigurableProduct')
					and PBC.RetailPrice IS null 
			

		
					--select PublishCatalogLogId	,PublishedId	,PublishedXML,  PublishedXML.value('(GroupProductEntity/AssociatedZnodeProductId)[1]', 'nvarchar(20)') from ZnodePublishedXml where IsGroupProductXML =1 
			   If @IsSorting = 1 
				BEGIN
					SET @Order_BY = Replace (@Order_BY,'RetailPrice', 'Case when SalesPrice is not null then SalesPrice else RetailPrice end ')

					SET @SQL = 
					';WITH CTE_GetFilteredList AS
					(
						SELECT DISTINCT A.sku,A.RetailPrice,SalesPrice , '+dbo.Fn_GetPagingRowId(@Order_BY,'A.SKU DESC ')+',Count(*)Over() CountNo
						FROM #tbl_PricingSku A 
						WHERE 1=1
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
					)
					SELECT SKU,RetailPrice,SalesPrice,RowId,CountNo
					FROM CTE_GetFilteredList
					'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)+
					CASE WHEN @Order_BY = '' THEN '' ELSE ' ORDER BY '+ @Order_BY END
 
				END
				Else 
				BEGIN
				
					SET @SQL = 
					';WITH CTE_GetFilteredList AS
					(
						SELECT DISTINCT A.sku,A.RetailPrice,A.SalesPrice ,'+dbo.Fn_GetPagingRowId(@Order_BY,'A.SKU DESC ')+',Count(*)Over() CountNo
						FROM #tbl_PricingSku A 
						WHERE 1=1
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
					)
					SELECT SKU,RetailPrice,SalesPrice , RowId,CountNo
					FROM CTE_GetFilteredList
					'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
					--CASE WHEN @Order_BY = '' THEN '' ELSE ' ORDER BY '+ @Order_BY END
				END
		   

			INSERT INTO @TBL_PricebyCatalog(SKU,RetailPrice,SalesPrice,RowId,CountNo)
			EXEC sys.sp_sqlexec @SQL
        	
			DECLARE @TBL_PricebyCatalogFinalResult TABLE ( SKU NVARCHAR(4000), RetailPrice numeric(28,6),SalesPrice numeric(28,6) , RowId INT,CountNo INT, PublishProductId int  )
	
			IF ( @IsInStock = '-1' )  
			BEGIN
				INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,SalesPrice, RowId ,CountNo,PublishProductId )
				SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
				FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
			END
			ELSE IF ( @IsInStock = '1' )
			BEGIN	
				  INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,SalesPrice, RowId ,CountNo,PublishProductId )			
					  SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU AND 1 =
					  (case when PPI.OutOfStockOptions = 'DisablePurchasing' and I.Quantity < 1 then 0 else 1 end))
					  Union All 
					  SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE NOT EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU AND 1 =
					  (case when PPI.OutOfStockOptions = 'DisablePurchasing' and I.Quantity < 1 then 0 else 1 end))
			END
			ELSE IF ( @IsInStock = '0' )
			BEGIN
		
				  INSERT INTO @TBL_PricebyCatalogFinalResult ( SKU,RetailPrice,SalesPrice, RowId ,CountNo,PublishProductId )			
					  SELECT PBC.SKU,RetailPrice,SalesPrice, RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU 
					  AND  PPI.OutOfStockOptions = 'DisablePurchasing' 
					  GROUP BY I.SKU HAVING SUM(I.Quantity ) < 1   )
					  Union all 
					  SELECT PBC.SKU,RetailPrice,SalesPrice,RowId ,CountNo,PPI.ID
					  FROM @TBL_PricebyCatalog  PBC LEft Outer JOIN #PublishProductId PPI On PBC.SKU = PPI.SKU 
					  WHERE NOT EXISTS ( SELECT TOP 1 1 FROM [dbo].[ZnodeInventory] I WHERE I.SKU = PPI.SKU 
					  AND  PPI.OutOfStockOptions = 'DisablePurchasing' 
					  GROUP BY I.SKU HAVING SUM(I.Quantity ) < 1   )

			END

			SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_PricebyCatalogFinalResult),0)

			SELECT SKU,RetailPrice,SalesPrice,PublishProductId FROM @TBL_PricebyCatalogFinalResult
			--Order by Isnull(RetailPrice,SalesPrice)

		END TRY
		BEGIN CATCH
		DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSkuPricebyCatalog @WhereClause = '
			 +CAST(@WhereClause AS VARCHAR(MAX))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))
			 +',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(20))
			 +',@PortalId= '+cast(@PortalId as varchar(200))+',@currentUtcDate= '
			 +@currentUtcDate+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status,ERROR_MESSAGE();                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSkuPricebyCatalog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

		END CATCH

	END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetStoreDetail')
	drop proc Znode_GetStoreDetail
go
CREATE PROCEDURE [dbo].[Znode_GetStoreDetail]
(   @WhereClause NVARCHAR(MAX),
	@Rows        INT           = 100,
	@PageNo      INT           = 1,
	@Order_BY    VARCHAR(100)  = '',
	@StateCode   NVARCHAR(200),										 
	@RowsCount   INT OUT)
AS 
    /*
		 Summary :- this procedure is used to find the store details 
	 
		 Unit Testing 
		 EXEC Znode_GetStoreDetail '',@RowsCount = 0, @StateCode = ''
	*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
              DECLARE @TBL_PortalDetails TABLE (StoreName NVARCHAR(MAX),CityName VARCHAR(3000),StateName VARCHAR(3000),PhoneNumber NVARCHAR(100),PostalCode VARCHAR(50),
			 [Status] BIT,PortalAddressId INT,AddressId INT,PortalId INT,IsActive BIT,DisplayOrder INT,Address1 VARCHAR(3000),Address2 VARCHAR(3000),
             Address3 VARCHAR(3000) ,CountryName VARCHAR(3000),RowId INT,CountNo INT,PortalName NVARCHAR(MAX),MediaPath VARCHAR(MAX),FileName VARCHAR(MAX), Latitude Decimal(9,6), Longitude Decimal(9,6),StoreLocationCode NVARCHAR(200));
             SET @SQL = '
				;with Cte_GetStoreDetails AS 
				(
				 SELECT DISTINCT ZPA.StoreName,ZA.CityName,ZA.StateName,ZA.PostalCode,ZA.IsActive Status,ZA.PhoneNumber,ZPA.PortalAddressId,ZA.AddressId,
				 Zp.PortalId,ZA.IsActive,ZPA.DisplayOrder,ZA.Address1,ZA.Address2,ZA.Address3,ZA.CountryName,ZP.Storename AS PortalName,[dbo].[Fn_GetMediaThumbnailMediaPath](ZM.path) MediaPath,ZM.path FileName
				 ,zpa.Latitude, zpa.Longitude,ZPA.StoreLocationCode
				 FROM ZnodePortal ZP 
				 INNER JOIN ZnodePortalAddress ZPA ON (ZPA.portalId = ZP.PortalId) 
				 INNER JOIN ZnodeAddress ZA ON (Za.AddressId = ZPA.AddressId) 
				 LEFT JOIN ZnodeState ZS on(ZA.StateName = ZS.StateName OR ZA.StateName = ZS.StateCode)
				 --LEFT JOIN ZnodePortalAddress ZPDS ON (ZPDS.PortalId = ZP.PortalId)
				 LEFT JOIN ZnodeMedia ZM ON (ZPA.MediaId = ZM.MediaId)
				 WHERE  (ZS.StateCode =  '''+@statecode+''' OR ZS.StateName = '''+@statecode+''' OR  '''+@statecode+ ''' = ''''	)			 				
				 ) 
				 , Cte_GetStore AS 
				 (
				  SELECT  * ,'+dbo.Fn_GetPagingRowId(@Order_BY,'PortalId DESC')+',Count(*)Over() CountNo
				  FROM Cte_GetStoreDetails
				  WHERE 1=1 
				  '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				 )

				 SELECT DISTINCT StoreName,CityName,StateName,PhoneNumber,PostalCode,Status,PortalAddressId,AddressId,PortalId,IsActive,DisplayOrder,Address1,Address2,Address3,CountryName,RowId,CountNo,PortalName,MediaPath,FileName,Latitude, Longitude,StoreLocationCode
				 FROM Cte_GetStore
				'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
          
             INSERT INTO @TBL_PortalDetails(StoreName,CityName,StateName,PhoneNumber,PostalCode,[Status],PortalAddressId,AddressId,PortalId,IsActive,
			 DisplayOrder,Address1,Address2,Address3,CountryName,RowId,CountNo,PortalName,MediaPath,FileName,Latitude, Longitude,StoreLocationCode)
             EXEC (@sql);

             SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_PortalDetails), 0);

             SELECT StoreName,CityName,StateName,PostalCode,Status,PhoneNumber,PortalAddressId,AddressId,PortalId,IsActive,DisplayOrder,Address1,Address2,PortalName,
			 Address3,CountryName,MediaPath,FileName, Latitude, Longitude,StoreLocationCode FROM @TBL_PortalDetails;
			
         END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE();
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetStoreDetail @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@StateCode = '+CAST(@StateCode AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetStoreDetail',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetStoreList')
	drop proc Znode_GetStoreList
go
CREATE PROCEDURE [dbo].[Znode_GetStoreList]
(
	@WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
	@UserId		 INT=0,
    @RowsCount   INT OUT

)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the Portal 
	 Unit Testig
	 begin tran 
	 EXEC  Znode_GetStoreList '',100,'','',0

	 EXEC  Znode_GetStoreList '',100,1,null,2,0
	 rollback tran
	 select * from ZnodeDomain
*/
   BEGIN 
		BEGIN TRY 
			SET NOCOUNT ON 

			 DECLARE @SQL  NVARCHAR(MAX) 
			 DECLARE @TBL_PortalId TABLE (PortalId INT, PublishPortalLogId INT,StoreName NVARCHAR(MAX),CompanyName NVARCHAR(MAX),LogoPath NVARCHAR(MAX),UseSSL BIT,AdminEmail 
			 NVARCHAR(MAX),SalesEmail NVARCHAR(MAX),CustomerServiceEmail NVARCHAR(MAX),SalesPhoneNumber NVARCHAR(MAX),CustomerServicePhoneNumber NVARCHAR(MAX),ImageNotAvailablePath NVARCHAR(MAX),ShowSwatchInCategory BIT,
			 ShowAlternateImageInCategory BIT,ExternalID VARCHAR(50),MobileLogoPath NVARCHAR(MAX),DefaultOrderStateID INT,DefaultReviewStatus NVARCHAR(2),SplashCategoryID INT,SplashImageFile NVARCHAR(MAX),
			 MobileTheme NVARCHAR(MAX),CopyContentBasedOnPortalId INT,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME,InStockMsg NVARCHAR(max),OutOfStockMsg NVARCHAR(MAX),BackOrderMsg NVARCHAR(MAX)
			 ,PublishStatus VARCHAR(300),ThemeName VARCHAR(200),CSSName NVARCHAr(2000),CatalogName NVARCHAR(max),DomainUrl NVARCHAR(200),OrderStatus NVARCHAR(200),LocaleId INT,PublishCatalogId INT,StoreCode NVARCHAR(200),RowId INT ,CountId INT)
	

			 SET @SQL = '
			 ;With Cte_MaxPublish AS 
			 (
			 SELECT MAX(PublishPortalLogId) PublishPortalLogId,PortalId
			 FROM ZnodePublishPortalLog ZPCL  
			 GROUP BY PortalId
			 )
			 ,Cte_PortalLog AS (
			 SELECT ZPC.StoreName ,ZPC.CompanyName ,ZPC.LogoPath ,ZPC.UseSSL ,ZPC.AdminEmail ,ZPC.SalesEmail ,ZPC.CustomerServiceEmail ,ZPC.SalesPhoneNumber ,ZPC.CustomerServicePhoneNumber ,
			 ZPC.ImageNotAvailablePath ,ZPC.ShowSwatchInCategory ,ZPC.ShowAlternateImageInCategory ,ZPC.ExternalID ,ZPC.MobileLogoPath ,ZPC.DefaultOrderStateID ,ZPC.DefaultReviewStatus ,
			 ZPC.SplashCategoryID ,ZPC.SplashImageFile ,ZPC.MobileTheme ,ZPC.CopyContentBasedOnPortalId ,
			 ZPC.CreatedBy ,ZPC.CreatedDate ,ZPC.ModifiedBy ,ZPC.ModifiedDate ,ZPC.InStockMsg ,ZPC.OutOfStockMsg ,ZPC.BackOrderMsg , PublishPortalLogId ,CASE WHEN ZPCL.PublishPortalLogId IS NULL THEN '''' ELSE 
			 CASE WHEN IsPortalPublished IS NULL THEN ''Processing'' WHEN IsPortalPublished = 0 THEN ''Publish Failed''
			 WHEN IsPortalPublished = 1 THEN  ''Published Successfully'' END END    PublishStatus ,ZPC.PortalId, ZCT.Name as ThemeName, ZCTC.CSSName, ZPUC.CatalogName,
			 CASE WHEN ZD.DomainName IS NULL  THEN ''#'' ELSE ZD.DomainName END DomainUrl,ZOOS.Description OrderStatus,
			 ZPL.LocaleId, ZPPC.PublishCatalogId,ZPC.StoreCode
			FROM ZnodePortal ZPC 
			INNER JOIN ZnodeCMSPortalTheme AS ZCPT ON (ZCPT.PortalId = ZPC.PortalId )
			INNER JOIN ZnodeCMSThemeCSS AS ZCTC ON ZCPT.CMSThemeCSSId = ZCTC.CMSThemeCSSId 
			INNER JOIN ZnodeCMSTheme AS ZCT ON ZCPT.CMSThemeId = ZCT.CMSThemeId AND ZCTC.CMSThemeId = ZCT.CMSThemeId 
			INNER JOIN ZnodePortalCatalog ZPCI ON ZPCI.PortalId = ZPC.PortalId 
			INNER JOIN ZnodePublishCatalog ZPUC ON ZPCI.PublishCatalogId = ZPUC.PublishCatalogId 
			INNER JOIN ZnodeOmsOrderState ZOOS ON ZPC.DefaultOrderStateID = ZOOS.OmsOrderStateId
			INNER JOIN ZnodePortalCatalog ZPPC ON ZPPC.PortalId = ZPC.PortalId
			LEFT JOIN ZnodePortalLocale ZPL ON (ZPL.LocaleId = ( select TOP 1 LocaleId from ZnodePortalLocale WHERE ZPC.PortalId = ZPL.PortalId AND ZPL.IsDefault = 1)) 
			LEFT JOIN ZnodePublishPortalLog ZPCL  ON ( EXISTS (SELECT TOP 1 1 FROM Cte_MaxPublish CTE WHERE CTE.PortalId = ZPC.PortalId AND CTE.PublishPortalLogId =  ZPCL.PublishPortalLogId)  )
			LEFT JOIN ZnodeDomain ZD ON (ZD.DomainId = (SELECT TOP 1 DomainId FROM ZnodeDomain ZDR WHERE ZDR.PortalId = ZPC.PortalId AND ZDR.IsActive = 1 AND ZDR.ApplicationType = ''WebStore''))
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeUserPortal ZUP WHERE (ZUP.PortalId=ZPC.PortalId OR ZUP.PortalId IS NULL)   AND ZUP.UserId='+CAST(@UserId AS VARCHAR (200)) +')
			 )
			 ,Cte_PublishStatus 
			 AS (
			 SELECT PortalId,PublishPortalLogId, StoreName,CompanyName,LogoPath,UseSSL,AdminEmail,SalesEmail,CustomerServiceEmail,SalesPhoneNumber,CustomerServicePhoneNumber,ImageNotAvailablePath,
			 ShowSwatchInCategory,ShowAlternateImageInCategory,ExternalID,MobileLogoPath,DefaultOrderStateID,DefaultReviewStatus,SplashCategoryID,SplashImageFile,MobileTheme,CopyContentBasedOnPortalId,
			 CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,InStockMsg,OutOfStockMsg,BackOrderMsg, PublishStatus,ThemeName,CSSName,CatalogName,DomainUrl,OrderStatus,LocaleId,PublishCatalogId,StoreCode,
			 '+[dbo].[Fn_GetPagingRowId](@Order_BY,'PortalId ,PublishPortalLogId DESC')+' , Count(*)Over() CountId FROM Cte_PortalLog
			 WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )
	 
			 SELECT PortalId,PublishPortalLogId,StoreName,CompanyName,LogoPath,UseSSL,AdminEmail,SalesEmail,CustomerServiceEmail,SalesPhoneNumber,CustomerServicePhoneNumber,ImageNotAvailablePath,
			 ShowSwatchInCategory,ShowAlternateImageInCategory,ExternalID,MobileLogoPath,DefaultOrderStateID,DefaultReviewStatus,SplashCategoryID,SplashImageFile,MobileTheme,CopyContentBasedOnPortalId,
			 CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,InStockMsg,OutOfStockMsg,BackOrderMsg,PublishStatus,ThemeName,CSSName,CatalogName,DomainUrl,OrderStatus,LocaleId,PublishCatalogId,StoreCode,RowId,CountId 
			 FROM Cte_PublishStatus 
			 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)
	

	         PRINT @SQL
			 INSERT INTO @TBL_PortalId 
			
			 EXEC (@SQL)

			 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_PortalId),0)

		
			 SELECT  PortalId,PublishPortalLogId,StoreName,CompanyName,LogoPath,UseSSL,AdminEmail,SalesEmail,CustomerServiceEmail,SalesPhoneNumber,CustomerServicePhoneNumber,ImageNotAvailablePath,
			 ShowSwatchInCategory,ShowAlternateImageInCategory,ExternalID,MobileLogoPath,DefaultOrderStateID,DefaultReviewStatus,SplashCategoryID,SplashImageFile,MobileTheme,CopyContentBasedOnPortalId,
			 CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,InStockMsg,OutOfStockMsg,BackOrderMsg,PublishStatus,ThemeName,CSSName,CatalogName,DomainUrl,OrderStatus,LocaleId,PublishCatalogId,StoreCode
			 FROM @TBL_PortalId
	 
				

		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetStoreList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
             
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetStoreList',
					@ErrorInProcedure = 'Znode_GetStoreList',
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetTaxlClassDetail')
	drop proc Znode_GetTaxlClassDetail
go
CREATE PROCEDURE [dbo].[Znode_GetTaxlClassDetail]
(   @WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(1000) = '',
    @RowsCount   INT OUT,
    @LocaleId    INT           = 1,
    @TaxClassId  INT		   = 0  ,
    @IsDebug bit = 0 )
AS 
   /* 
     Summary : get tax with product name and other details 
     Sequence For Delete Data 
	 SELECT * FROM ZnodeTaxClassSKU
     EXEC Znode_GetTaxlClassDetail  '' , @RowsCount = 1  ,@TaxClassId = -1 

   */
     BEGIN
         BEGIN TRY
           SET NOCOUNT ON;
           
		    DECLARE @PimProductIds TransferId,--NVARCHAR(max)= '', 
					@OutPimProductIds NVARCHAR(max)= '',
					@PimAttributeId NVARCHAR(max)=''
			 DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
			 DECLARE @PimProductNameAttributeId VARCHAR(50) = [dbo].[Fn_GetProductNameAttributeId]()
			 DECLARE @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId()
			 ,@IsProductNotIn INT = 0 
			 DECLARE @TransferPimProductId TransferId 
			 DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
			  DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
               IF @TaxClassId <> 0
                 BEGIN
				insert into @TransferPimProductId 
				  SELECT DISTINCT PimProductId 
					 FROM  [dbo].[View_PimProductAttributeValueLocale] VIMP
					 INNER JOIN ZnodeTaxClassSKU  ZP ON (dbo.FN_trim(Zp.SKU) = dbo.FN_Trim(VIMP.AttributeValue) )
					 WHERE VIMP.PimAttributeid = @pimSkuAttributeId
					 AND VIMP.LocaleId = @DefaultLocaleId
					 AND (ZP.TaxClassId = @TaxClassId OR @TaxClassId = -1 )
				UNION ALL 
				SELECT -1 
					--If @IsDebug =1 
					--Begin
					--   select * from @TransferPimProductId
					--END 
      --          SET @PimProductIds = SUBSTRING(( SELECT DISTINCT ','+CAST(PimProductId AS VARCHAR(50))
					 --FROM  [dbo].[View_PimProductAttributeValueLocale] VIMP
					 --INNER JOIN ZnodeTaxClassSKU  ZP ON (dbo.FN_trim(Zp.SKU) = dbo.FN_Trim(VIMP.AttributeValue) )
					 --WHERE VIMP.PimAttributeid = @pimSkuAttributeId
					 --AND VIMP.LocaleId = @DefaultLocaleId
					 --AND (ZP.TaxClassId = @TaxClassId OR @TaxClassId = -1 )
					 --FOR XML PATH('')),2,8000)
					
				SET @Rows = CASE WHEN @TaxClassId = -1  THEN  214748368  ELSE @Rows END 
                  
			  END;
          DECLARE @AttributeCode NVARCHAR(1000), @SQL NVARCHAR(max)=''
		 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF @PimProductId <> ''  OR   @IsCallForAttribute=1
		--BEGIN 
	 --SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
		--			 WHEN @IsProductNotIn = 1 THEN 0 END 
		--END 
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  1,@TransferPimProductId
	 
	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	    -- SELECT @order_by,@AttributeCode
		 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
		 
		 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
		 INSERT INTO @TBL_MainList(id,RowId)
		 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 

			 INSERT INTO @ProductIdTable (PimProductId)              
			 SELECT Id  
			 FROM @TBL_MainList
				  	           
             --SET @PimProductIds = SUBSTRING((SELECT ','+CAST(PimProductId AS VARCHAR(100)) FROM @ProductIdTable FOR XML PATH('')), 2, 4000);
			 INSERT INTO @PimProductIds ( Id )
			 SELECT PimProductId FROM @ProductIdTable

             SET @PimAttributeId = @pimSkuAttributeId +','+@PimProductNameAttributeId;
				

             INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue
                  @PimProductIds,
                  @PimAttributeId,
                  @localeId;

		    ;With Cte_pimProductDetails AS
			(
			  SELECT PimProductId,
              AttributeValue,
              AttributeCode
			  FROM @TBL_AttributeDetails
			)

			SELECT PIV.PimProductId,ProductName,PIV.SKU ,TaxClassId,TaxClassSKUId
			FROM Cte_pimProductDetails CTEPD
			PIVOT
			(
			
			Max(AttributeValue) FOR AttributeCode IN ([ProductName],[SKU])
			
			) PIV
		    LEFT JOIN ZnodeTaxClassSKU  ZP ON (dbo.FN_TRIM(Zp.SKU) = dbo.FN_TRIM(PIV.SKU))
		 	INNER JOIN @ProductIdTable XP ON (XP.PimProductId = PIV.PimProductId)
			WHERE (ZP.TaxClassId = @TaxClassId	  OR   @TaxClassId =  -1 ) 
		    ORDER BY RowId 
		  IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT @RowsCount= (SELECT COUNT(1) FROM @TAb)   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT  @RowsCount= (SELECT COUNT(1) FROM @ProductListIdRTR) 
	 END 

	 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			  @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetTaxlClassDetail @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
			  +',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@TaxClassId = '+ISNULL(CAST(@TaxClassId AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetTaxlClassDetail',
					@ErrorInProcedure = 'Znode_GetTaxlClassDetail',
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetTextWidgetConfiguration')
	drop proc Znode_GetTextWidgetConfiguration
go
CREATE PROCEDURE [dbo].[Znode_GetTextWidgetConfiguration]
(
       @PortalId INT
	   ,@UserId INT =  0  	
	   ,@CMSMappingId INT =0,
	   @LocaleId INT = 0
)
AS
/*
Summary: This Procedure is used to get text widget configuration
Unit Testing :
 EXEC Znode_GetTextWidgetConfiguration 1,2

 exec Znode_GetTextWidgetConfiguration 1,2,213,1

 exec Znode_GetTextWidgetConfiguration @PortalId=1,@UserId=2,@CMSMappingId=213
*/
     BEGIN
         BEGIN TRY
		
             DECLARE @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId() ,@IncrementValue INT= 1;

             DECLARE @LocaleAll TABLE (
                                      RowId    INT IDENTITY(1 , 1) ,
                                      LocaleId INT ,
                                      Code     VARCHAR(300)
                                      );
             INSERT INTO @LocaleAll ( LocaleId , Code
                                    )
                    SELECT LocaleId , Code
                    FROM ZnodeLocale AS a
                    WHERE a.IsActive = 1 AND
					a.LocaleId IN (CASE WHEN  @LocaleId = 0  THEN LocaleId ELSE @LocaleId END)
					;

             DECLARE @ReturnXML TABLE (
                                      ReturnXMl XML
                                      );
             WHILE @IncrementValue <= ( SELECT MAX(RowId)
                                        FROM @LocaleAll
                                      )
                 BEGIN
                     DECLARE @CMSWidgetData TABLE (CMSTextWidgetConfigurationId INT ,LocaleId  INT ,CMSWidgetsId INT ,WidgetsKey NVARCHAR(256) ,CMSMappingId  INT ,TypeOFMapping   NVARCHAR(100) ,[Text]  NVARCHAR(MAX));
                     
					 DECLARE @CMSWidgetDataFinal TABLE (CMSTextWidgetConfigurationId INT ,LocaleId    INT ,CMSWidgetsId INT ,WidgetsKey  NVARCHAR(256) ,CMSMappingId  INT ,TypeOFMapping NVARCHAR(100) ,[Text]  NVARCHAR(MAX));

                     INSERT INTO @CMSWidgetDataFinal
                            SELECT CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
                            FROM ZnodeCMSTextWidgetConfiguration AS a
                            WHERE a.TypeOFMapping = 'ContentPageMapping'
                            AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  )
                            OR (a.TypeOFMapping = 'PortalMapping' AND a.CMSMappingId = @PortalId )
							AND
                                 ( a.LocaleId IN 
								 ( ( SELECT LocaleId
                                                      FROM @LocaleAll
                                                      WHERE RowId = @IncrementValue
                                                    ) , @DefaultLocaleId 
                                                  ) ) )
										  
						   AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0  )
						 	  


                     INSERT INTO @CMSWidgetData
                            SELECT CMSTextWidgetConfigurationId , (SELECT  LocaleId FROM @LocaleAll WHERE RowId = @IncrementValue)  AS LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
                            FROM @CMSWidgetDataFinal
                            WHERE LocaleId = ( SELECT LocaleId
                                               FROM @LocaleAll
                                               WHERE RowId = @IncrementValue
                                             );



                     INSERT INTO @CMSWidgetData
                            SELECT CMSTextWidgetConfigurationId , ( SELECT LocaleId FROM @LocaleAll WHERE RowId = @IncrementValue) AS LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
                            FROM @CMSWidgetDataFinal AS p
                            WHERE p.LocaleId = @DefaultLocaleId
                                  AND
                                  NOT EXISTS ( SELECT TOP 1 1
                                               FROM @CMSWidgetData AS q
                                               WHERE q.CMSWidgetsId = p.CMSWidgetsId
                                                     AND
                                                     q.WidgetsKey = p.WidgetsKey
                                                     AND
                                                     q.TypeOFMapping = p.TypeOFMapping
                                                     AND
                                                     q.CMSMappingId = p.CMSMappingId
                                             );

										

                     INSERT INTO @ReturnXML ( ReturnXMl
                                            )
                            SELECT ( SELECT CMSTextWidgetConfigurationId AS TextWidgetConfigurationId , LocaleId , CMSWidgetsId AS WidgetsId , WidgetsKey , CMSMappingId AS MappingId , TypeOFMapping , [Text] , @PortalId AS PortalId
                                     FROM @CMSWidgetData AS a
                                     WHERE a.CMSTextWidgetConfigurationId = w.CMSTextWidgetConfigurationId 
                                     FOR XML PATH('TextWidgetEntity')
                                   )
                            FROM @CMSWidgetData AS w
						
							;
                     SET @IncrementValue = @IncrementValue + 1;
                     DELETE FROM @CMSWidgetData;
                     DELETE FROM @CMSWidgetDataFinal;
                 END;
             SELECT *
             FROM @ReturnXML;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetTextWidgetConfiguration @PortalId = '+CAST(@PortalId AS VARCHAR(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetTextWidgetConfiguration',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_GetUserGlobalAttributeValue')
	drop proc Znode_GetUserGlobalAttributeValue
go
CREATE   PROCEDURE [dbo].[Znode_GetUserGlobalAttributeValue]
(
    @EntityName       nvarchar(200) = 0,
    @GlobalEntityValueId   INT = 0--,
 --   @LocaleId       INT = 0,
	--@GlobalEnt
)
AS
/*
	 Summary :- This procedure is used to get the Attribute and EntityValue attribute value as per filter pass 
	 Unit Testing 
	 BEGIN TRAN
	 EXEC [Znode_GetGlobalEntityAttributeValue] 'Store',1
	 ROLLBACK TRAN

*/	 
     BEGIN
 BEGIN TRY
 declare @EntityValue nvarchar(200)

  DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT URL+ZMSM.ThumbnailFolderName+'/'
             FROM ZnodeMediaConfiguration ZMC 
			 INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );


		 Select @EntityValue=Isnull(FirstName,'')+' '+Isnull(LastName,'')
		  from ZnodeUser
		 Where UserId=@GlobalEntityValueId

            Declare	@EntityAttributeList as	table  (GlobalEntityId int,EntityName nvarchar(300),EntityValue nvarchar(max),
			GlobalAttributeGroupId int,GlobalAttributeId int,AttributeTypeId int,AttributeTypeName nvarchar(300),
			 AttributeCode nvarchar(300) ,IsRequired bit,IsLocalizable bit,AttributeName  nvarchar(300) , HelpDescription nvarchar(max),DisplayOrder int
			) 
			 
			Declare @EntityAttributeValidationList  as	table  
			( GlobalAttributeId int, ControlName nvarchar(300), ValidationName nvarchar(300),SubValidationName nvarchar(300),
			 RegExp nvarchar(300), ValidationValue nvarchar(300),IsRegExp Bit)

			Declare	@EntityAttributeValueList as	table  (GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),
			MediaId int,MediaPath nvarchar(300) )



			Declare	@EntityAttributeDefaultValueList as	table  (GlobalAttributeDefaultValueId int,GlobalAttributeId int,
			AttributeDefaultValueCode nvarchar(300),AttributeDefaultValue nvarchar(300),RowId int,IsEditable bit,DisplayOrder int )


			
	insert into @EntityAttributeList
		(	GlobalEntityId ,EntityName ,EntityValue ,
		GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
		AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription ,DisplayOrder ) 
		SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,ww.GlobalAttributeGroupId,
		c.GlobalAttributeId,c.AttributeTypeId,q.AttributeTypeName,c.AttributeCode,c.IsRequired,
		c.IsLocalizable,f.AttributeName,c.HelpDescription,c.DisplayOrder
     FROM dbo.ZnodeGlobalEntity AS qq
          INNER JOIN dbo.ZnodeGlobalGroupEntityMapper AS w ON qq.GlobalEntityId = w.GlobalEntityId
		  INNER JOIN dbo.ZnodeGlobalAttributeGroupMapper AS ww ON ww.GlobalAttributeGroupId = w.GlobalAttributeGroupId
          INNER JOIN dbo.ZnodeGlobalAttribute AS c ON ww.GlobalAttributeId = c.GlobalAttributeId
          INNER JOIN dbo.ZnodeAttributeType AS q ON c.AttributeTypeId = q.AttributeTypeId
          INNER JOIN dbo.ZnodeGlobalAttributeLocale AS f ON c.GlobalAttributeId = f.GlobalAttributeId
		  Where qq.EntityName=@EntityName


		  INSERT INTO @EntityAttributeValidationList
		  (GlobalAttributeId,ControlName , ValidationName ,SubValidationName ,
		RegExp, ValidationValue,IsRegExp)

		 Select aa.GlobalAttributeId,i.ControlName,i.Name AS ValidationName,j.ValidationName AS SubValidationName,
		j.RegExp,k.Name AS ValidationValue,CAST(CASE WHEN j.RegExp IS NULL THEN 0 ELSE 1 END AS BIT) AS IsRegExp
		
		fROM @EntityAttributeList aa
		  inner  JOIN dbo.ZnodeGlobalAttributeValidation AS k ON k.GlobalAttributeId = aa.GlobalAttributeId
          inner  JOIN dbo.ZnodeAttributeInputValidation AS i ON k.InputValidationId = i.InputValidationId
          LEFT  JOIN dbo.ZnodeAttributeInputValidationRule AS j ON k.InputValidationRuleId = j.InputValidationRuleId

		  insert into @EntityAttributeValueList
		  (GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath)
		  Select GlobalAttributeId,aa.UserGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
		  case when bb.MediaPath is not null then  @V_MediaServerThumbnailPath+bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
		  else bb.AttributeValue end,		  
		  bb.MediaId,bb.MediaPath
		  from  dbo.ZnodeUserGlobalAttributeValue aa
		   inner join ZnodeUserGlobalAttributeValueLocale bb ON bb.UserGlobalAttributeValueId = aa.UserGlobalAttributeValueId 
		  Where  UserId=@GlobalEntityValueId

		

		  

		  update aa
		  Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
              AttributeDefaultValue=g.AttributeDefaultValue,
			  GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			  AttributeValue=case when aa.AttributeValue is  null then h.AttributeDefaultValueCode else aa.AttributeValue end
		  from  @EntityAttributeValueList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		  insert into @EntityAttributeDefaultValueList
		  (GlobalAttributeDefaultValueId,GlobalAttributeId,AttributeDefaultValueCode,
			AttributeDefaultValue ,RowId ,IsEditable ,DisplayOrder )
		  Select  h.GlobalAttributeDefaultValueId, aa.GlobalAttributeId,h.AttributeDefaultValueCode,g.AttributeDefaultValue,0,ISNULL(h.IsEditable, 1),
		  h.DisplayOrder
		  from  @EntityAttributeList aa
		  inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeId = aa.GlobalAttributeId
          inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
		  
		   if not exists (Select 1 from @EntityAttributeList )
			Begin
			insert into @EntityAttributeList
			(	GlobalEntityId ,EntityName ,EntityValue ,
			GlobalAttributeGroupId ,GlobalAttributeId ,AttributeTypeId ,AttributeTypeName ,
			AttributeCode  ,IsRequired ,IsLocalizable ,AttributeName,HelpDescription  ) 
			SELECT qq.GlobalEntityId,qq.EntityName,@EntityValue EntityValue,0 GlobalAttributeGroupId,
			0 GlobalAttributeId,0 AttributeTypeId,''AttributeTypeName,''AttributeCode,0 IsRequired,
			0 IsLocalizable,'' AttributeName,'' HelpDescription
			FROM dbo.ZnodeGlobalEntity AS qq
			 Where qq.EntityName=@EntityName 
			End
				

			SELECT GlobalEntityId,EntityName,EntityValue,GlobalAttributeGroupId,
			AA.GlobalAttributeId,AttributeTypeId,AttributeTypeName,AttributeCode,IsRequired,
			IsLocalizable,AttributeName,ControlName,ValidationName,SubValidationName,RegExp,
			ValidationValue,cast(isnull(IsRegExp,0) as bit)  IsRegExp,
			HelpDescription,AttributeValue,GlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
			aab.AttributeDefaultValueCode,
			aab.AttributeDefaultValue,isnull(aab.RowId,0)   RowId,cast(isnull(aab.IsEditable,0) as bit)   IsEditable
			,bb.MediaId,AA.DisplayOrder
			fROM @EntityAttributeList AA				
			left join @EntityAttributeDefaultValueList aab on aab.GlobalAttributeId=AA.GlobalAttributeId	
			left join @EntityAttributeValidationList vl on vl.GlobalAttributeId=aa.GlobalAttributeId			
			LEFT JOIN @EntityAttributeValueList BB ON BB.GlobalAttributeId=AA.GlobalAttributeId		 
		    and ( (aab.GlobalAttributeDefaultValueId=bb.GlobalAttributeDefaultValueId	)
			or  ( bb.MediaId is not null and isnull(vl.ValidationName,'')='IsAllowMultiUpload'  and bb.GlobalAttributeDefaultValueId is null )
			or  ( bb.MediaId is  null and  bb.GlobalAttributeDefaultValueId is null ))
			order by --GlobalEntityId,GlobalAttributeGroupId,GlobalAttributeId,aab.DisplayOrder,aab.GlobalAttributeDefaultValueId
			AA.DisplayOrder

			SELECT 1 AS ID,CAST(1 AS BIT) AS Status;       
		  END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE()
             DECLARE @Status BIT ;
		  SET @Status = 0;
		  DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		   @ErrorLine VARCHAR(100)= ERROR_LINE(),
		    @ErrorCall NVARCHAR(MAX)= null       			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
          EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_GetGlobalEntityValueAttributeValues',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportAttributes')
	drop proc Znode_ImportAttributes
go
CREATE PROCEDURE [dbo].[Znode_ImportAttributes](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,AttributeTypeId int,AttributeCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   select AttributeCode  FROM @InsertPimAtrribute  Group BY AttributeCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'AttributeType', AttributeType, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeType NOT in 
			   (
				   SELECT AttributeTypeName  FROM ZnodeAttributeType  where IsPimAttributeType = 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '%[^0-9A-Za-z]%'

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '% %' -----space not allowed


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End


		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
			,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
			CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
		OUTPUT Inserted.PimAttributeId,Inserted.AttributeTypeId,Inserted.AttributeCode INTO @InsertedPimAttributeIds  
		
		SELECT ZAT.AttributeTypeId,AttributeCode, 0 IsRequired , 1 IsLocalizable,1 IsFilterable, 0 IsSystemDefined, 0 IsConfigurable,
		0 IsPersonalizable,  0 IsShowOnGrid , Case when Isnull(DisplayOrder,0) = 0 then  999 else DisplayOrder end  , '' HelpDescription ,0  IsCategory , 0 IsHidden , 0 IsSwatch,
		@UserId , @GetDate ,@UserId , @GetDate from @InsertPimAtrribute IPA INNER JOIN ZnodeAttributeType ZAT 
		ON IPA.AttributeType = ZAT.AttributeTypeName  
		
		
		INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeId, IPA.AttributeName, '', @UserId , @GetDate ,@UserId , @GetDate   
		 FROM @InsertedPimAttributeIds IPAS INNER JOIN @InsertPimAtrribute IPA ON IPAS.AttributeCode= IPA.AttributeCode 
		
		INSERT INTO ZnodePimAttributeValidation
		(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT IPA.PimAttributeId,ZAIV.InputValidationId,NULL,null , @UserId , @GetDate ,@UserId , @GetDate  
		FROM @InsertedPimAttributeIds IPA INNER JOIN ZnodeAttributeInputValidation ZAIV ON IPA.AttributeTypeId = ZAIV.AttributeTypeId


		insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select PimAttributeId, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, @UserId CreatedBy,@GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
		from  @InsertedPimAttributeIds
		--      SET @Status = 1;

		UPDATE ZnodeImportProcessLog
		  SET STATUS = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportCustomer')
	drop proc Znode_ImportCustomer
go
CREATE  PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max), GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber,       EmailOptIn,IsActive,ExternalId,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		

		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '10', 'Default Portal Profile', '', @NewGUId, null , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;
				SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
				ROLLBACK TRAN A;
				Return 0 
		End

		--UserName,FirstName,LastName,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId
	
	    -- start Functional Validation 

		-----------------------------------------------
		If @IsAllowGlobalLevelUserCreation = 'true'
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
					   );
		Else 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   
					   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName in 
					   (SELECT UserName  FROM @InsertCustomer group by UserName  having count(*) > 1 )

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256) )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

	
				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,NULL LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,@Getdate,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId,@Getdate,@UserId,@Getdate from @InsertZnodeUser
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileId  , UserId, 1 , @UserId,@Getdate,@UserId,@Getdate from @InsertZnodeUser
		-- 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportCustomerAddress')
	drop proc Znode_ImportCustomerAddress
go
CREATE PROCEDURE [dbo].[Znode_ImportCustomerAddress](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max), @IsAccountAddress bit = 0 )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive Value from global setting 
		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertCustomerAddress 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,UserName	nvarchar(512)
			,FirstName	varchar	(300),LastName	varchar	(300),DisplayName	nvarchar(1200),Address1	varchar	(300),Address2	varchar	(300)
			,CountryName	varchar	(3000),StateName	varchar	(3000),CityName	varchar	(3000),PostalCode	varchar	(50)
			,PhoneNumber	varchar	(50),
			--Mobilenumber	varchar(50),AlternateMobileNumber	varchar(50),FaxNumber	varchar(30),
			IsDefaultBilling	bit 
			,IsDefaultShipping	bit	,IsActive	bit	,ExternalId	nvarchar(2000),CompanyName nvarchar(2000), GUID NVARCHAR(400)
		);
		
		--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,MiddleName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		--SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		SET @SSQL = ' INSERT INTO #InsertCustomerAddress ( RowNumber, ' + @CsvColumnString + ' ,GUID )
		SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		--INSERT INTO @InsertCustomerAddress( RowNumber,UserName,FirstName,LastName,DisplayName,Address1,Address2,CountryName,
		--									StateName,CityName,PostalCode,PhoneNumber,
		--									IsDefaultBilling,IsActive,IsDefaultShipping,ExternalId,CompanyName,GUID )
		EXEC sys.sp_sqlexec @SSQL;

	
		-- start Functional Validation 
		-----------------------------------------------
		IF (@IsAccountAddress = 0)
		BEGIN
			IF @IsAllowGlobalLevelUserCreation = 'true'
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
						   );
			ELSE 
					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
						   SELECT '19', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
						   FROM #InsertCustomerAddress AS ii
						   WHERE ii.UserName NOT IN 
						   (
							   SELECT UserName FROM AspNetZnodeUser   
						   );

					INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
							SELECT '8', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							FROM #InsertCustomerAddress AS ii
							WHERE ISnull(ltrim(rtrim(ii.UserName)), '') = ''

		 END

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM #InsertCustomerAddress IC where  exists (
		SELECT TOP 1 1  from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		where ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
		AND ZA.IsDefaultShipping =IC.IsDefaultShipping )
			
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM #InsertCustomerAddress IC WHERE IsDefaultBilling = 0 AND IsDefaultShipping = 0 
				--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				--	   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				--	   FROM @InsertCustomer AS ii
				--	   WHERE ii.UserName not like '%_@_%_.__%' 
		 
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		--IF ( @IsAccountAddress = 1 )
		--BEGIN
		--	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--		SELECT '53', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--		FROM #InsertCustomerAddress AS ii
		--		WHERE isnull(ii.UserName,'') <> ''
		--END

		DELETE FROM #InsertCustomerAddress
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomerAddress
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name = 'ShippingAddress')

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
				
		-- Insert Product Data 
				
				CREATE TABLE #InsertedUserAddress (AddressId  nvarchar(256), UserId nvarchar(max)) 
		-- Pending for discussion include one identity column for modify address
				
				--UPDATE ANU SET 
				--ANU.PhoneNumber	= IC.PhoneNumber
				--from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				--INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				--INNER JOIN @InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
				--INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
				--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
				 
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)			

			    IF ( @IsAccountAddress = 1 )
				BEGIN

					--UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					--from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					--INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					--INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					--INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
					--										AND ZA.IsDefaultShipping =IC.IsDefaultShipping

					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
											StateName,CityName,PostalCode,PhoneNumber,
											IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
					OUTPUT INSERTED.AddressId INTO  #InsertedUserAddress (AddressId) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,null,IC.CountryName,
					IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
					FROM  #InsertCustomerAddress IC
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

					EXEC (@SSQL)

					DECLARE @AccountId INT
					SELECT @AccountId = AccountId FROM ZnodeUser where UserId = @UserId
					INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
					SELECT @AccountId, Addressid ,  @UserId , @GetDate, @UserId , @GetDate FROM #InsertedUserAddress UA
					WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AccountId = @AccountId and AA.Addressid = UA.Addressid )
				END
				ELSE
				BEGIN
					
					--UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
					--from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					--INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					--INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
					--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
					--INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
					--										AND ZA.IsDefaultShipping =IC.IsDefaultShipping
					
					SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = getdate() '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END
						--print @SSQL
					EXEC (@SSQL)

					SET @SSQL = '
					Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
												StateName,CityName,PostalCode,PhoneNumber,
												IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
					OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedUserAddress (AddressId, UserId ) 			 
					SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,convert(nvarchar(100),ZU.UserId),IC.CountryName,
					IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
					isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , getdate() , '+CONVERT(VARCHAR(10), @UserId)+' ,getdate()
					FROM AspNetZnodeUser ANZU 
					INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
					INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
					INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
					WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'
					--print @SSQL
					EXEC (@SSQL)

					INSERT INTO ZnodeUserAddress(UserId,AddressId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					SELECT CAST( UserId AS INT ) , Addressid , @UserId , @GetDate, @UserId , @GetDate FROM  #InsertedUserAddress
				END
	
				UPDATE ZA SET ZA.Address3 = null 
				From ZnodeAddress ZA INNER JOIN #InsertedUserAddress IUA ON ZA.AddressId = IUA.AddressId 

		-- 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportData')
	drop proc Znode_ImportData
go
CREATE PROCEDURE [dbo].[Znode_ImportData](
	  @TableName varchar(200), @NewGUID nvarchar(max), @TemplateId nvarchar(200), @UserId int, @LocaleId int= 1, @DefaultFamilyId int= 0, @IsDebug bit= 0, @PriceListId int= 0,@CountryCode Nvarchar(100) = '',@PortalId int = 0 ,
	  @IsDoNotCreateJob bit = 0 , @IsDoNotStartJob bit = 0, @StepName nvarchar(50) = 'Import' , @StartStepName nvarchar(50) = 'Import' ,
	  @step_id int  = 1 ,@Nextstep_id  int = 1 , @ERPTaskSchedulerId int = 0, @IsAccountAddress bit = 0,@IsAutoPublish Bit = 0  ,@ImportProcessLogId  int = 0  )
AS
/*
    Summary :  Import Process call respective import method from @TemplateId 
    Process :  
	EXEC Znode_ImportValidatePimProductData @TableName = 'tempdb..[##SEODetails_61bbcb4c-5b83-49a0-8bb6-48eaf07f9ce0]',@NewGUID = '61bbcb4c-5b83-49a0-8bb6-48eaf07f9ce0' ,@TemplateId = 9,@UserId = 2,@PortalId = 0,@LocaleId = 1,@IsCategory= 1 ,@DefaultFamilyId = 0 ,@ImportHeadName = 'SEODetails', @ImportProcessLogId = 11, @PriceListId = 0, @CountryCode = ''
*/
BEGIN
BEGIN TRY 
	 DECLARE @ImportHeadName nvarchar(100), @SPScript nvarchar(max), @DatabaseName nvarchar(100), @ServerName nvarchar(100), @SPScript1 nvarchar(max),@UserName nvarchar(100);
	 DECLARE @GetDate datetime= dbo.Fn_GetDate();
	 DECLARE @SPName nvarchar(100)
	 
	 SELECT TOP 1 @ImportHeadName = Name
	 FROM ZnodeImportTemplate AS zit
		 INNER JOIN
		 ZnodeImportHead AS zih
		 ON zit.ImportHeadId = zih.ImportHeadId
	 WHERE zit.ImportTemplateId = @TemplateId;
	 SET @DatabaseName = DB_NAME();
	 SET @ServerName = @@serverName;
	 SET @UserName = SYSTEM_USER;
	 
	 If (@ImportHeadName = 'ProductUpdate')
	 Begin
		SET @SPName = 'Znode_ImportPartialValidatePimProductData'
	 End
	 ELSE
	 Begin
		SET @SPName = 'Znode_ImportValidatePimProductData'
	 End
	--Generate new process for current import 
	If @ImportProcessLogId   = 0 
	Begin
		If @ERPTaskSchedulerId = 0 
			INSERT INTO ZnodeImportProcessLog( ImportTemplateId, Status, ProcessStartedDate, ProcessCompletedDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT @TemplateId, dbo.Fn_GetImportStatus( 0 ), @GetDate, NULL, @UserId, @GetDate, @UserId, @GetDate;
		else 
			INSERT INTO ZnodeImportProcessLog( ImportTemplateId, Status, ProcessStartedDate, ProcessCompletedDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,ERPTaskSchedulerId)
			   SELECT @TemplateId, dbo.Fn_GetImportStatus( 0 ), @GetDate, NULL, @UserId, @GetDate, @UserId, @GetDate , @ERPTaskSchedulerId;
		SET @ImportProcessLogId = @@IDENTITY;
	
	End
	
	SET @SPScript1 = N' EXEC ' + @SPName + ' @TableName = '''+@TableName+''',@NewGUID = '''+@NewGUID+''' ,@TemplateId = '
					+CONVERT(varchar(100), @TemplateId)+',@UserId = '+CONVERT(varchar(100), @UserId)
					+',@PortalId = '+CONVERT(varchar(100), @PortalId)+
					+',@IsAccountAddress = '+CONVERT(varchar(100), @IsAccountAddress)
					+',@LocaleId = '+CONVERT(varchar(100), @LocaleId)+',@IsCategory= '+CASE
					WHEN @ImportHeadName IN( 'Pricing', 'Product', 'Inventory' ) THEN '0'
					ELSE '1'
					END+' ,@DefaultFamilyId = '+CONVERT(varchar(100), @DefaultFamilyId)+' ,@ImportHeadName = '''+@ImportHeadName+''', @ImportProcessLogId = '
					+CONVERT(varchar(100), @ImportProcessLogId)+', @PriceListId = '+CONVERT(varchar(100), @PriceListId)
					+ ', @CountryCode = ''' + @CountryCode  + '''';

	    
	  IF @IsAutoPublish = 1 
	  BEGIN 
	  
                 
		SET @SPScript1 = @SPScript1 + N' 
		   
			DECLARE @PimProductId Transferid 

			INSERT INTO  @PimProductId 
			SELECT DISTINCT  c.PimProductId 
			FROM ZnodeImportSuccessLog a 
			INNER JOIN ZnodePimAttributeValueLocale  b ON (b.AttributeValue = a.ImportedSku)
			INNER JOIN ZnodePimAttributeValue c ON (c.PimAttributeValueId = b.PimAttributeValueId)
			INNER JOIN ZnodePimAttribute d ON (d.PimAttributeId = c.PimAttributeId)
			WHERE d.AttributeCode = ''SKU''
			AND a.ImportedGuId = '''+@NewGUID+'''
			
			EXEC Znode_GetPublishProducts 	@PimProductId = @PimProductId  , @UserId = 2 ,  @TokenId = 	 '''+@NewGUID+'''
						
			UPDATE ZnodeImportSuccessLog 
			SET    IsProductPublish =  1 
			WHERE ImportedGuId = '''+@NewGUID+'''

		'
	  END 

	IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
	BEGIN
	      EXEC sys.sp_sqlexec @SPScript1;
	END;
	ELSE
	BEGIN 
		
		IF @IsDebug = 1
		          BEGIN
		              EXEC sys.sp_sqlexec
		                   @SPScript1;
		              RETURN 0;
		          END;
		--DECLARE @jobId binary(16)
		--SELECT @jobId = job_id FROM msdb.dbo.sysjobs WHERE (name = N'Name of Your Job')
		--IF (@jobId IS NOT NULL)
		--BEGIN
		--EXEC msdb.dbo.sp_delete_job @jobId
		--END
		--Add a job

		SET @SPScript1 = N' EXEC '+ @SPName + ' @TableName = '''''+@TableName+''''',@NewGUID = '''''+@NewGUID+''''' ,@TemplateId = '+CONVERT(varchar(100), @TemplateId)+',@UserId = '+CONVERT(varchar(100), @UserId)+',@PortalId = '+CONVERT(varchar(100), @PortalId)+',@LocaleId = '+CONVERT(varchar(100), @LocaleId)+',@IsCategory= '+CASE
																																																																										   WHEN @ImportHeadName IN( 'Pricing', 'Product', 'Inventory' ) THEN '0'
																																																																										   ELSE '1'
																																																																										   END
					+' ,@DefaultFamilyId = '+CONVERT(varchar(100), @DefaultFamilyId)+' ,@ImportHeadName = '''''+@ImportHeadName+''''', @ImportProcessLogId = '+CONVERT(varchar(100), @ImportProcessLogId)+', @PriceListId = '+CONVERT(varchar(100), @PriceListId)+',@IsAccountAddress = '+CONVERT(varchar(100), @IsAccountAddress)
																																																																										   + ', @CountryCode = ''''' + @CountryCode  +'''''';


		
		 IF @IsAutoPublish = 1 
	  BEGIN 
		SET @SPScript1 = @SPScript1 + N' 
		   
			DECLARE @PimProductId Transferid 

			INSERT INTO  @PimProductId 
			SELECT DISTINCT  b.PimProductId 
			FROM ZnodeImportSuccessLog a 
			INNER JOIN View_loadManageProductInternal b ON (b.AttributeValue = a.ImportedSku)
			WHERE b.AttributeCode = ''''SKU''''
			AND a.ImportedGuId = '''''+@NewGUID+'''''
			
			EXEC Znode_GetPublishProducts 	@PimProductId = @PimProductId  , @UserId = 2 ,  @TokenId = 	 '''''+@NewGUID+'''''
						
			UPDATE ZnodeImportSuccessLog 
			SET    IsProductPublish =  1 
			WHERE ImportedGuId = '''''+@NewGUID+'''''
			 '

	  END 

		DECLARE @jobId binary(16);
		
		SET @NewGUID = 'Import_'+REPLACE(@NewGUID, '''', '');
		

		IF @IsDoNotCreateJob =0 
		Begin
			SET @SPScript = N'EXEC msdb.dbo.sp_add_job
				  @job_name = '''+@NewGUID+''' ,
				  @enabled = 1,
				  @notify_level_eventlog = 2,
				  @notify_level_email = 2,
				  @notify_level_netsend = 2,
				  @notify_level_page = 2,
				  @delete_level = 3,
				  @category_name = N''[Uncategorized (Local)]'',
				  @owner_login_name = N'''+ @UserName +'''';
			--@job_id = '' + Convert(NVARCHAR(MAX),@jobId ) + '' OUTPUT; '

			EXEC sys.sp_sqlexec @SPScript;

			SET @SPScript = N' EXEC msdb.dbo.sp_add_jobserver
				  @job_name = '''+@NewGUID+''',
				  @server_name = '''+@ServerName+'''';

			EXEC sys.sp_sqlexec @SPScript;
		END

		SET @SPScript = N' EXEC msdb.dbo.sp_add_jobstep
              @job_name = '''+ @NewGUID +''',
              @step_name = N'''+ @StepName +''',
			  @step_id =  ' + Convert(nvarchar(10),@step_id ) +  ',
			  @cmdexec_success_code = 0,
              @on_success_action = ' + Convert(nvarchar(10),@Nextstep_id ) +  ',
              @on_fail_action = '    + Convert(nvarchar(10),@Nextstep_id ) +  ',
			  @retry_attempts = 0,
              @retry_interval = 0,
              @os_run_priority = 0,
              @subsystem = N''TSQL'',
              @command = N'''+ @SPScript1 +''',
              @database_name = '''+@DatabaseName+''',
              @flags = 0 ';
		PRINT  @SPScript
		EXEC sys.sp_sqlexec @SPScript;

		DECLARE @ReturnCode tinyint= 0; -- 0 (success) or 1 (failure)
		IF @IsDoNotStartJob = 0 
		Begin
			SET @SPScript = N'EXEC @ReturnCode = msdb.dbo.sp_start_job 
				  @job_name = '''+ @NewGUID +''',
				  @server_name = '''+ @ServerName +''',
				  @step_name = N''' + @StartStepName +'''';

			EXEC sys.SP_EXECUTESQL @SPScript, N'@ReturnCode TINYINT OUT', @ReturnCode = @ReturnCode OUT;
		END 
		--      select 3  , @SPScript
		
		--RETURN (@ReturnCode)
		IF @ReturnCode = 1
		BEGIN
			UPDATE ZnodeImportProcessLog
			  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId
		END;

		--EXEC msdb.dbo.sp_delete_job @job_id=N'4470113c-a592-41d8-951e-45d9982071da', @delete_unused_schedule=1
	END;
	END TRY 
	BEGIN CATCH 
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportData @TableName = '''+ISNULL(@TableName,'''''')+''',@NewGUID='''+ISNULL(CAST(@NewGUID AS
		VARCHAR(50)),'''''')+''',@TemplateId='''+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''''')+''',@CountryCode='''+ISNULL(@CountryCode,'''''')+''',
		@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')
            
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportData',
		@ErrorInProcedure = 'Znode_ImportData',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH 
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportGetDefaultFamilyAttribute')
	drop proc Znode_ImportGetDefaultFamilyAttribute
go

CREATE  PROCEDURE [dbo].[Znode_ImportGetDefaultFamilyAttribute]
(@ImportHeadId  INT =  0 ,
 @PimAttributeFamilyId  INT = 0 )

AS 
 /*Summary : - this procedure is ued to get the default family attribute used in import/emport ( to download sample format for import) 
  Unit Testing 
  EXEC Znode_ImportGetDefaultFamilyAttribute 1,1
 */
 BEGIN 
 BEGIN TRY
 SET NOCOUNT ON
  
    DECLARE @ImportHead NVARCHAR(100) = (SELECT TOP 1 Name FROM ZnodeImportHead WHERE ImportHeadId = @ImportHeadId  )
    DECLARE @DefaultFamilyId INT 
	DECLARE @Tlb_AttributeCode TABLE(AttributeCode varchar(300), GroupDisplayOrder int,DisplayOrder int)
	Declare @Tlb_OtherTemplateData Table  (AttributeCode nvarchar(300), DisplayOrder int ) 

	IF @ImportHead in ( 'Product')
	BEGIN 
	  	SET @DefaultFamilyId = dbo.Fn_GetDefaultPimProductFamilyId();
	    Insert into @Tlb_AttributeCode (AttributeCode,GroupDisplayOrder,DisplayOrder)	
	    SELECT Distinct AttributeCode ,ZPFM.GroupDisplayOrder,ZPA.DisplayOrder 
 		   FROM ZnodePimAttribute ZPA 
		   INNER JOIN ZnodeAttributeType ZAT ON (ZAT.AttributeTypeId = ZPA.AttributeTypeId)
		   INNER JOIN ZnodePimFamilyGroupMapper ZPFM ON (ZPFM.PimAttributeId = ZPA.PimAttributeId )
		   INNER JOIN ZnodePimAttributeGroup ZPAG ON ZPFM.PimAttributeGroupId = ZPAG.PimAttributeGroupId
		   Where ZPA.IsCategory = 0  AND PimAttributeFamilyId = @PimAttributeFamilyId 
		UNION 
		SELECT Distinct AttributeCode, ZPFM.GroupDisplayOrder,ZPA.DisplayOrder
		   FROM ZnodePimAttribute ZPA 
		   INNER JOIN ZnodeAttributeType ZAT ON (ZAT.AttributeTypeId = ZPA.AttributeTypeId)
		   INNER JOIN ZnodePimFamilyGroupMapper ZPFM ON (ZPFM.PimAttributeId = ZPA.PimAttributeId )
		   INNER JOIN ZnodePimAttributeGroup ZPAG ON ZPFM.PimAttributeGroupId = ZPAG.PimAttributeGroupId
		   Where ZPA.IsCategory = 0  AND PimAttributeFamilyId = @DefaultFamilyId
		
		SELECT AttributeCode TargetColumnName FROM  @Tlb_AttributeCode 
		ORDER BY 
		--ISNULL(GroupDisplayOrder,0) ,ISNULL(DisplayOrder,0)

		CASE when GroupDisplayOrder IS null then 1 else 0 end , GroupDisplayOrder ,
		CASE when DisplayOrder IS null then 1 else 0 end , DisplayOrder		
	END
	Else IF @ImportHead in ( 'Category')
	BEGIN
	SET @DefaultFamilyId = dbo.Fn_GetCategoryDefaultFamilyId(); 
	Insert into @Tlb_AttributeCode (AttributeCode,DisplayOrder,GroupDisplayOrder)	
		SELECT Distinct AttributeCode ,DisplayOrder ,ZPA.DisplayOrder
 		   FROM ZnodePimAttribute ZPA 
		   INNER JOIN ZnodeAttributeType ZAT ON (ZAT.AttributeTypeId = ZPA.AttributeTypeId)
		   INNER JOIN ZnodePimFamilyGroupMapper ZPFM ON (ZPFM.PimAttributeId = ZPA.PimAttributeId )
		   Where ZPA.IsCategory = 1  AND PimAttributeFamilyId = @PimAttributeFamilyId
		UNION 
		SELECT Distinct AttributeCode ,DisplayOrder ,ZPA.DisplayOrder
 		   FROM ZnodePimAttribute ZPA 
		   INNER JOIN ZnodeAttributeType ZAT ON (ZAT.AttributeTypeId = ZPA.AttributeTypeId)
		   INNER JOIN ZnodePimFamilyGroupMapper ZPFM ON (ZPFM.PimAttributeId = ZPA.PimAttributeId )
		   Where ZPA.IsCategory = 1  AND PimAttributeFamilyId = @DefaultFamilyId
		SELECT AttributeCode TargetColumnName FROM @Tlb_AttributeCode 
		ORDER BY 
		CASE when GroupDisplayOrder IS null then 1 else 0 end , GroupDisplayOrder ,
		CASE when DisplayOrder IS null then 1 else 0 end , DisplayOrder		
	END 
	Else
	   Begin
			INSERT INTO @Tlb_OtherTemplateData (AttributeCode,DisplayOrder)
			Select Distinct ZiA.AttributeCode,ZiA.SequenceNumber from ZnodeImportAttributeValidation ZiA where ZiA.importHeadId =@ImportHeadId 
			Select  AttributeCode TargetColumnName   from @Tlb_OtherTemplateData order by DisplayOrder
	   End
	   END TRY

	   BEGIN CATCH
			DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportGetDefaultFamilyAttribute @ImportHeadId = '+CAST(@ImportHeadId AS VARCHAR(max))+',@PimAttributeFamilyId='+CAST(@PimAttributeFamilyId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportGetDefaultFamilyAttribute',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	   END CATCH
 END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportInsertUpdatePimCategory')
	drop proc Znode_ImportInsertUpdatePimCategory
go
CREATE PROCEDURE [dbo].[Znode_ImportInsertUpdatePimCategory]
(   @InsertCategory PIMCATEGORYDETAIL READONLY,
	@Status         BIT OUT,
	@UserId         INT               = 0)
AS
   /* Summary :- This Procedure is used to get the converted category xml into table and call insert update category procedure 
     Unit Testing 
     EXEC Znode_ImportInsertUpdatePimCategory
	*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultCategoryfamily INT= Dbo.fn_GetDefaultvalue('CategoryFamily');
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_PimCategoryId TABLE (PimCategoryAttributeValueId INT,PimCategoryAttributeValueLocaleId INT ) 
             DECLARE @PimCategoryAttributeValueId TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              PimAttributeId              INT,
              PimAttributeFamilyId        INT
             );
             DECLARE @PimAttributeFamilyId INT;
             DECLARE @PimCategoryId INT;
            
			 SELECT TOP 1 @PimCategoryId = PimCategoryId
             FROM @InsertCategory;
             
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
             FROM @InsertCategory;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodePimcategory AS a
                      INNER JOIN @InsertCategory AS b ON(a.PimCategoryId = b.PimCategoryId)
             )
                 BEGIN
                     INSERT INTO ZnodePimcategory
                     (PimAttributeFamilyId,
                      IsActive,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT PimAttributeFamilyId,
                                   1,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertCategory
                            GROUP BY PimCategoryId,
                                     PimAttributeFamilyId;
                     SET @PimCategoryId = SCOPE_IDENTITY();
                 END;
             ELSE
			 BEGIN 
             UPDATE ZnodePimcategory
               SET
                   PimAttributeFamilyId = @PimAttributeFamilyId,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate,
				   IsCategoryPublish  = 
					-- IsCategoryPublish = 1 for status published
					-- IsCategoryPublish = 0 for status Draft
					-- IsCategoryPublish = NULL for status NOT published 
						   
					CASE 
					when IsCategoryPublish =1 then  0  -- IF status is publish then status should be draft
					when IsCategoryPublish =0 then 0   -- IF it is draft then it should be draft 
					else null END  -- if it is not publish then it will not publish
             WHERE PimCategoryId = @PimCategoryId;
			 
			  INSERT INTO @TBL_PimCategoryId(PimCategoryAttributeValueId,PimCategoryAttributeValueLocaleId)
                            SELECT ZPAV.PimCategoryAttributeValueId,ZPAVL.PimCategoryAttributeValueLocaleId
                            FROM ZnodePimCategoryAttributeValue ZPAV
                            INNER JOIN ZnodePimCategoryAttributeValueLocale ZPAVL ON (ZPAVL.PimCategoryAttributeValueId = ZPAV.PimCategoryAttributeValueId AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.LocaleId = ZPAVL.LocaleId
                                     -- AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )) 
							WHERE EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.PimCategoryId = ZPAV.PimCategoryId
                                      AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )
                                  AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPDI
                                WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                      AND TBPDI.PimCategoryId = ZPAV.PimCategoryId
                                      AND TBPDI.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )
                                  AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodePimAttribute ZPA
                                WHERE ZPA.PimAttributeId = ZPAV.PimAttributeId
                                      AND IsLocalizable = 1
                            );
					  INSERT INTO @TBL_PimCategoryId(PimCategoryAttributeValueId,PimCategoryAttributeValueLocaleId)
					SELECT ZPAV.PimCategoryAttributeValueId,PimCategoryAttributeValueLocaleId
					FROM ZnodePimCategoryAttributeValue ZPAV 
					INNER JOIN ZnodePimCategoryAttributeValueLocale ZPAVL ON (ZPAVL.PimCategoryAttributeValueId = ZPAV.PimCategoryAttributeValueId AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.LocaleId = ZPAVL.LocaleId
                                     -- AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )) 
					INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
					WHERE EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPD
                                WHERE TBPD.PimCategoryId = ZPAV.PimCategoryId 
                                     -- AND TBPD.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )
                                  AND NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @InsertCategory TBPDI
                                WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                      AND TBPDI.PimCategoryId = ZPAV.PimCategoryId
                                     -- AND TBPDI.PimAttributeFamilyId = ZPAV.PimAttributeFamilyId
                            )

                     DELETE FROM ZnodePimCategoryAttributeValueLocale
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimCategoryId TBPD
                         WHERE TBPD.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValueLocale.PimCategoryAttributeValueId AND TBPD.PimCategoryAttributeValueLocaleId = ZnodePimCategoryAttributeValueLocale.PimCategoryAttributeValueLocaleId
                     );

                     DELETE FROM ZnodePimCategoryAttributeValue
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimCategoryId TBPD
                         WHERE TBPD.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValue.PimCategoryAttributeValueId
                     )
					 AND  NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryAttributeValueLocale ZPCVL WHERE ZPCVL.PimCategoryAttributeValueId = ZnodePimCategoryAttributeValue.PimCategoryAttributeValueId)
                      
					 ;

		 END 
          
             UPDATE a
               SET
                   PimAttributeFamilyId = b.PimAttributeFamilyId,
                   --PimAttributeDefaultValueId = b.PimAttributeDefaultValueId,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
             FROM ZnodePimCategoryAttributeValue a
                  INNER JOIN @InsertCategory b ON(b.PimAttributeId = a.PimAttributeId
                                                  AND b.PimCategoryId = a.PimCategoryId);
             INSERT INTO ZnodePimCategoryAttributeValue
             (PimCategoryId,
              PimAttributeFamilyId,
              PimAttributeId,
              PimAttributeDefaultValueId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
             OUTPUT INSERTED.PimCategoryAttributeValueId,
                    INSERTED.PimCategoryId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimAttributeFamilyId
                    INTO @PimCategoryAttributeValueId
                    SELECT @PimCategoryId,
                           PimAttributeFamilyId,
                           PimAttributeId,
                           CASE
                               WHEN PimAttributeDefaultValueId = 0
                               THEN NULL
                               ELSE PimAttributeDefaultValueId
                           END,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValue AS b
                        WHERE b.PimAttributeId = a.PimAttributeId
                              AND b.PimCategoryId = a.PimCategoryId
                    );

             UPDATE a
               SET
                   CategoryValue = c.AttributeValue,
                   ModifiedBy = @UserId,
                   ModifiedDate = @GetDate
             FROM ZnodePimCategoryAttributeValueLocale a
                  INNER JOIN @PimCategoryAttributeValueId b ON(a.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId)
                  INNER JOIN @InsertCategory c ON(b.PimAttributeId = c.PimAttributeId
                                                  AND c.LocaleId = a.LocaleId);
             INSERT INTO ZnodePimCategoryAttributeValueLocale
             (LocaleId,
              PimCategoryAttributeValueId,
              CategoryValue,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT DISTINCT
                           LocaleId,
                           b.PimCategoryAttributeValueId,
                           a.AttributeValue,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM @InsertCategory AS a
                         INNER JOIN @PimCategoryAttributeValueId AS b ON(b.PimAttributeId = a.PimAttributeId
                                                                         AND b.PimAttributeFamilyId = a.PimAttributeFamilyId)
                    WHERE NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM ZnodePimCategoryAttributeValueLocale AS c
                        WHERE c.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
                              AND c.LocaleId = a.LocaleId
                    );
             SELECT @PimCategoryId AS ID,
                    CAST(1 AS BIT) AS Status;
         END TRY
         BEGIN CATCH
            
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdatePimCategory @UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportInsertUpdatePimCategory',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportInventory_Ver1')
	drop proc Znode_ImportInventory_Ver1
go
CREATE PROCEDURE [dbo].[Znode_ImportInventory_Ver1](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Inventory data 
	--		   Input data in XML format Validate data with all scenario 
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100), @MessageDisplayForFloat nvarchar(100);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 
		SELECT @RoundOffValue = FeatureValues
		FROM ZnodeGlobalSetting
		WHERE FeatureName = 'InventoryRoundOff';
		
		IF OBJECT_ID('tempdb.dbo.#InserInventoryForValidation', 'U') IS NOT NULL 
		DROP TABLE tempdb.dbo.#InserInventoryForValidation
		
		IF OBJECT_ID('tempdb.dbo.#InsertInventory ', 'U') IS NOT NULL 
		DROP TABLE tempdb.dbo.#InsertInventory 

		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 123.12345699 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 0.999999 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplayForFloat OUT;
		Create TABLE tempdb..#InserInventoryForValidation 
		( 
				RowNumber int, SKU varchar(max), Quantity varchar(max), ReOrderLevel varchar(max), WarehouseCode varchar(max), GUID nvarchar(400)
		);
		CREATE TABLE tempdb..#InsertInventory  
		( 
				InsertInventoryId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300) INDEX Ix CLUSTERED (SKU), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), WarehouseCode varchar(200), GUID nvarchar(400) 
		);
		--DECLARE tempdb..#InsertInventory  TABLE
		--( 
		--		InsertInventoryId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300) INDEX Ix CLUSTERED (SKU), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), WarehouseCode varchar(200), GUID nvarchar(400) 
		--);
	
		DECLARE @SKU TABLE
		( 
				SKU nvarchar(300)
		);
			
		INSERT INTO @SKU
			   SELECT b.AttributeValue
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @InventoryListId int;
		SET @SSQL = 'Select RowNumber,SKU,Quantity,ReOrderLevel,WarehouseCode ,GUID FROM '+@TableName;
		INSERT INTO tempdb..#InserInventoryForValidation( RowNumber, SKU, Quantity, ReOrderLevel, WarehouseCode, GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		
		--Required Validation 
		--UomName should not be null 
		--Data for this Inventory list is already available  
		-- 
		-- 1)  Validation for SKU is pending Proper data not found and 
		--Discussion still open for Publish version where we create SKU and use thi SKU code for validation 
		--Select * from ZnodePimAttributeValue  where PimAttributeId =248
		--select * from View_ZnodePimAttributeValue Vzpa Inner join ZnodePimAttribute Zpa on Vzpa.PimAttributeId=Zpa.PimAttributeId where Zpa.AttributeCode = 'SKU'
		--Select * from ZnodePimAttribute where AttributeCode = 'SKU'
		--2)  Start Data Type Validation for XML Data  
		--SELECT * FROM ZnodeInventory
		--SELECT * FROM ZNodeInventoryList
		UPDATE tempdb..#InserInventoryForValidation
		  SET ReOrderLevel = 0
		WHERE ReOrderLevel = '';

		DELETE FROM tempdb..#InserInventoryForValidation
		WHERE RowNumber IN
		(

			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);
	
		INSERT INTO tempdb..#InsertInventory ( RowNumber, SKU, Quantity, ReOrderLevel, WarehouseCode )
			   SELECT RowNumber, SKU, Quantity, ReOrderLevel, WarehouseCode
			   FROM tempdb..#InserInventoryForValidation;
					 
		-- start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM tempdb..#InsertInventory  AS ii
			   WHERE ii.SKU NOT IN
			   (
				   SELECT SKU
				   FROM @SKU
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'WarehouseCode', WarehouseCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM tempdb..#InsertInventory  AS ii
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodeWarehouse AS zw
				   WHERE zw.WarehouseCode = ii.WarehouseCode
			   );

		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM tempdb..#InsertInventory 
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);
		
		DECLARE @TBL_ReadyToInsertInventory TABLE
		( 
			RowNumber int, SKU varchar(300), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), WarehouseId int
		);

		INSERT INTO @TBL_ReadyToInsertInventory( RowNumber, SKU, Quantity, ReOrderLevel, WarehouseId )
			   SELECT ii.RowNumber, ii.SKU, ii.Quantity, ISNULL(ii.ReOrderLevel, 0), zw.WarehouseId
			   FROM tempdb..#InsertInventory  AS ii
					INNER JOIN
					ZnodeWarehouse AS zw
					ON ii.WarehouseCode = zw.WarehouseCode AND 
					   ii.RowNumber IN
			   (
				   SELECT MAX(ii1.RowNumber)
				   FROM tempdb..#InsertInventory  AS ii1
				   WHERE ii1.WarehouseCode = ii.WarehouseCode AND 
						 ii1.SKU = ii.SKU
			   );
				-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @TBL_ReadyToInsertInventory
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
		   	
		
		--select 'update started'  
		UPDATE zi
		  SET Quantity = rtii.Quantity, ReOrderLevel = ISNULL(rtii.ReOrderLevel, 0), ModifiedBy = @UserId, ModifiedDate = @GetDate
		FROM ZNodeInventory zi
			 INNER JOIN
			 @TBL_ReadyToInsertInventory rtii
			 ON( zi.WarehouseId = rtii.WarehouseId AND 
				 zi.SKU = rtii.SKU
			   );
			   
		--select 'update End'                
		INSERT INTO ZnodeInventory( WarehouseId, SKU, Quantity, ReOrderLevel, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT WarehouseId, SKU, Quantity, ISNULL(ReOrderLevel, 0), @UserId, @GetDate, @UserId, @GetDate
			   FROM @TBL_ReadyToInsertInventory AS rtii
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodeInventory AS zi
				   WHERE zi.WarehouseId = rtii.WarehouseId AND 
						 zi.SKU = rtii.SKU
			   ); 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportPimProductData')
	drop proc Znode_ImportPimProductData
go

CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             --BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 


			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                 END;  

            -- Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
				 	
					
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					   -- ELSE 
					   -- CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   -- AttributeDefaultValueCode  VARCHAR(100)
					   -- Index Ix_Default (PimAttributeId, AttributeDefaultValueCode));
					   --IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
					   --Begin
						  --Select 'Without Index'
					   --END
					   --Else
						  --Alter TABLE #DefaultAttributeValue ADD Index Ix_Default (PimAttributeId, AttributeDefaultValueCode);
					


					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
          
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
    --         DECLARE @PimProductDetail TABLE 
			 --(
			      
				-- PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				--  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				--  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				--  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  INDEX Ix CLUSTERED (RowNumber) 
    --            );

			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+@AttributeCode+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.'+@SourceColumnName+' ) PimAttributeDefaultValueId ,'
									+ @SourceColumnName+','+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
								, RowNumber FROM '+@TableName+' TN';
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 
			 Select * into #PimProductDetail from @PimProductDetail

			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail a 
			WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )
				
             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber) FROM #PimProductDetail
             );
             DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL;  --User define table type to pass multiple records of product in single step

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
					   	INSERT INTO @PimProductDetailToInsert(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
						PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
						SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
						PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds FROM #PimProductDetail
						WHERE [#PimProductDetail].RowNumber = @IncrementalId; --AND RTRIM(LTRIM(AttributeValue)) <> '';

						Delete from @PimProductDetailToInsert where RTRIM(LTRIM(AttributeValue)) = '';
	                    --ORDER BY [@PimProductDetail].RowNumber;
                        ----Call process to finally insert data into 
                        ----------------------------------------------------------
						--1. [dbo].[ZnodePimProduct]
						--2. [dbo].[ZnodePimAttributeValue]
						--3. [dbo].[ZnodePimAttributeValueLocale]
						if Exists (select TOP 1 1 from @PimProductDetailToInsert)
							EXEC [Znode_ImportInsertUpdatePimProduct] @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
						DELETE FROM @PimProductDetailToInsert;
						SET @IncrementalId = @IncrementalId + 1;
						
                 END;
             UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(2), ProcessCompletedDate =  Getdate()  WHERE ImportProcessLogId = @ImportProcessLogId;
            -- COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            -- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportPriceList')
	drop proc Znode_ImportPriceList
go
CREATE PROCEDURE [dbo].[Znode_ImportPriceList]
(
	@TableName nvarchar(100),
	@Status bit OUT, 
	@UserId int, 
	@ImportProcessLogId int,
	@NewGUId nvarchar(200),
	@PriceListId int )
AS 
	/*
	----Summary:  Import RetailPrice List 
	----		  Input XML data extracted in table format (table variable name:  #InsertPriceForValidation) by using  @xml.nodes 
	----		  Validate data column wise and store error log into @ErrorLogForInsertPrice table 
	----          Remove wrong data from table #InsertPriceForValidation and inserted correct data into @InsertPrice table for 
	----		  further processing (Importing to target database )
	---- Version 1 : Required Validation 
	---- UomName should not be null 
	---- Data for this RetailPrice list is already available  
	---- Version 2 : Required Validation 
	---- If UomName will be null then insert first record from UomTable and If UomName is wrong then raise error
	---- SKU with retailprice data is available with price list id will insert 
	---- multiple SKU with retail price is available then updated last sku details to price table and price tier table for respective price list
	----1. Import functionality should be provided only for single price list (Validate - Pending) 
	----  Tier price : TierStartQuantity should not between TierStartQuantity and TierEndQuantity for already existing SKU 
	----  In case of update details for SKU if any kind of price value will null then avoid it to update on existing value. 
	----2. From XML only SKU and RetailPrice is mandatory
	----3. SKUActivation date sholud be less than SKUExpriration date
	----4. Activation date sholud be less than Expiration date
	----5. If Tier RetailPrice has values and TierSartQuantity /TierEndQuantity or both has null value then it should not get updated/created.
	----6. ActivationDate and ExpirationDate value for tier price will be SKUActivationDate SKUExprirationDate 
	--- Change History : 
	--Remove column which is used to store range of qunatity by single column Quantity from table ZnodeTierProduct 
	--Manditory Retail price in Znodepricetable 
	-- SKUActivationfrom date and to date will used for tier price will store in single table ZnodePrice
	--Unit Testing   
	
*/
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		
		IF OBJECT_ID('#InsertPriceForValidation', 'U') IS NOT NULL 
			DROP TABLE #InsertPriceForValidation
		ELSE 
			CREATE TABLE #InsertPriceForValidation 
			(SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL, RowNumber varchar(300) NULL)
	
		--DECLARE #InsertPriceForValidation TABLE
		--( 
		--	SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL, RowNumber varchar(300) NULL
		--);
		IF OBJECT_ID('#InsertPrice', 'U') IS NOT NULL 
			DROP TABLE #InsertPrice
		ELSE 
			CREATE TABLE #InsertPrice 
			( 
				SKU varchar(300), TierStartQuantity numeric(28, 6) NULL, RetailPrice numeric(28, 6) NULL, SalesPrice numeric(28, 6) NULL, TierPrice numeric(28, 6) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL, RowNumber varchar(300)
			);
	


		DECLARE @SKU TABLE
		( 
				SKU nvarchar(300)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;


		--SET @CategoryXML =  REPLACE(@CategoryXML,'<?xml version="1.0" encoding="utf-16"?>','')

		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100); 
		-- Retrive RoundOff Value from global setting 

		SELECT @RoundOffValue = FeatureValues FROM ZnodeGlobalSetting WHERE FeatureName = 'PriceRoundOff';
	
		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 999999.000000000 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		
		SET @SSQL = 'Select SKU,TierStartQuantity ,RetailPrice,SalesPrice,TierPrice,SKUActivationDate ,SKUExpirationDate ,RowNumber FROM '+@TableName;
		INSERT INTO #InsertPriceForValidation( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate, RowNumber )
		EXEC sys.sp_sqlexec @SSQL;


		-- 1)  Validation for SKU is pending Proper data not found and 
		--Discussion still open for Publish version where we create SKU and use the SKU code for validation 
		--Select * from ZnodePimAttributeValue  where PimAttributeId =248
		--select * from View_ZnodePimAttributeValue Vzpa Inner join ZnodePimAttribute Zpa on Vzpa.PimAttributeId=Zpa.PimAttributeId where Zpa.AttributeCode = 'SKU'
		--Select * from ZnodePimAttribute where AttributeCode = 'SKU'
		--------------------------------------------------------------------------------------
		--2)  Start Data Type Validation for XML Data  
		--------------------------------------------------------------------------------------			
		---------------------------------------------------------------------------------------
		---------If UOM will blank then retrive top -- Finctionality pending 
		---Validate 
		
		
		INSERT INTO #InsertPrice( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate, RowNumber )
			   SELECT SKU,
					  CASE
					  WHEN CONVERT(Varchar(100),TierStartQuantity) = '' THEN 0
					  ELSE CONVERT(numeric(28, 6), TierStartQuantity)
					  END, CONVERT(numeric(28, 6), RetailPrice),
															  CASE
															  WHEN SalesPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), SalesPrice)
															  END,
															  CASE
															  WHEN TierPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), TierPrice)
															  END, SKUActivationDate, SKUExpirationDate, RowNumber
			   FROM #InsertPriceForValidation;
				
		--------------------------------------------------------------------------------------
		--- start Functional Validation 
		--------------------------------------------------------------------------------------
		--- Verify SKU is present or not 

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertPrice
		--	   WHERE SKU NOT IN
		--	   (
		--		   SELECT ZPAVL.AttributeValue
		--		   FROM ZnodePimAttribute AS ZPA
		--				INNER JOIN
		--				ZnodePimAttributeValue AS ZPAV
		--				ON ZPA.PimAttributeId = ZPAV.PimAttributeId
		--				INNER JOIN
		--				ZnodePimAttributeValueLocale AS ZPAVL
		--				ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		--		   WHERE ZPA.AttributeCode = 'SKU'
		--	   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '19', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertPrice AS ii
		WHERE ii.SKU NOT IN
		(
			SELECT SKU
			FROM @SKU
		);

			 
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '26', 'RetailPrice', RetailPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM #InsertPriceForValidation
		--	   WHERE ISNULL(CAST(RetailPrice AS numeric(28, 6)), 0) <= 0 AND 
		--			 RetailPrice <> '';
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '39', 'SKUActivationDate', SKUActivationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPrice AS IP
			   WHERE SKUActivationDate > SKUExpirationDate AND 
					 ISNULL(SKUExpirationDate, '') <> '';
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation
			   WHERE( TierPrice IS NULL OR TierPrice = '0') AND  TierStartQuantity = '';
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'TierPrice', TierPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation WHERE( TierPrice IS NULL OR  TierPrice = '') AND TierStartQuantity <> 0;
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation
			   WHERE ISNULL(CAST(TierStartQuantity AS numeric(28, 6)), 0) < 0 AND 
					 TierPrice <> '';
 
		-- End Function Validation 	
		---------------------------
		--- Delete Invalid Data after functional validation 
		DELETE FROM #InsertPrice
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  Guid = @NewGUId
		);
	
		-- Remove duplicate records 
		--insert into @RemoveDuplicateInsertPrice
		--(SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber )
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber FROM @InsertPrice 
		
		--Delete from @InsertPrice 

		--insert into @InsertPrice (SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber)
		--Select SKU,TierStartQuantity, RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate 
		--, SKUActivationDate , SKUExpirationDate , RowNumber from @RemoveDuplicateInsertPrice rdip WHERE rdip.RowNumber IN
		--(
		--	SELECT MAX(ipi.RowNumber) FROM @InsertPrice ipi WHERE rdip.PriceListCode = ipi.PriceListCode AND rdip.SKU = ipi.SKU
		--);

		--Validate StartQuantity and EndQuantity from PriceTier : This validation only for existing data 
		--INSERT INTO @ErrorLogForInsertPrice (RowNumber,SKU,TierStartQuantity ,RetailPrice ,SalesPrice,TierPrice,Uom ,UnitSize,PriceListCode,PriceListName,CurrencyId ,ActivationDate,ExpirationDate,SKUActivationDate,SKUExpirationDate,SequenceNumber,ErrorDescription) 
		--Select IP.RowNumber,IP.SKU,IP.TierStartQuantity ,IP.RetailPrice ,IP.SalesPrice,IP.TierPrice,IP.Uom ,IP.UnitSize,IP.PriceListCode,IP.PriceListName,IP.CurrencyId ,IP.ActivationDate,IP.ExpirationDate,IP.SKUActivationDate,IP.SKUExpirationDate,IP.SequenceNumber,
		--'TierStartQuantity already exists in PriceTier table for SKU '
		--From @InsertPrice IP  Inner join
		--ZnodePriceList Zpl ON Zpl.Listcode = IP.PriceListcode and Zpl.ListName = IP.PriceListName
		--INNER JOIN ZnodeUOM Zu ON ltrim(rtrim(IP.Uom)) = ltrim(rtrim(Zu.Uom)) 
		--INNER JOIN ZnodePriceTier ZPT  ON ZPT.PriceListId = Zpl.PriceListId 
		--AND ZPT.SKU = IP.SKU
		--Where IP.TierStartQuantity  = ZPT.Quantity  
		--- Delete Invalid Data after  Validate StartQuantity and EndQuantity from PriceTier
		
		--INSERT INTO ZnodeUOM (Uom,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		--Select distinct ltrim(rtrim(Uom)) , @UserId,@GetDate,@UserId,@GetDate  from @InsertPrice 
		--where ltrim(rtrim(Uom)) not in (Select ltrim(rtrim(UOM)) From ZnodeUOM where UOM  is not null )
		
		DECLARE @FailedRecordCount BIGINT, @SuccessRecordCount BIGINT 
	
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = COUNT(DISTINCT ROWNUMBER) FROM #InsertPrice WHERE 	ROWNUMBER IS NOT NULL ;

		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZP
				SET ZP.SalesPrice = IP.SalesPrice, ZP.RetailPrice = CASE
				WHEN CONVERT(varchar(100), ISNULL(IP.RetailPrice, '')) <> '' THEN IP.RetailPrice
				END, ZP.ActivationDate = CASE
				WHEN ISNULL(IP.SKUActivationDate, '') <> '' THEN IP.SKUActivationDate
				ELSE NULL
				END, ZP.ExpirationDate = CASE
				WHEN ISNULL(IP.SKUExpirationDate, '') <> '' THEN IP.SKUExpirationDate
				ELSE NULL
				END, ZP.ModifiedBy = @UserId, ZP.ModifiedDate = @GetDate
		FROM #InsertPrice IP INNER JOIN ZnodePrice ZP ON ZP.PriceListId = @PriceListId AND  ZP.SKU = IP.SKU  
			 --Retrive last record from prince list of specific SKU ListCode and Name 									
		WHERE IP.RowNumber IN
		(
			SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU 
		);
		INSERT INTO ZnodePrice( PriceListId, SKU, SalesPrice, RetailPrice, ActivationDate, ExpirationDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT @PriceListId, IP.SKU, IP.SalesPrice, IP.RetailPrice,
																						   CASE
																						   WHEN ISNULL(IP.SKUActivationDate, '') = '' THEN NULL
																						   ELSE IP.SKUActivationDate
																						   END,
																						   CASE
																						   WHEN ISNULL(IP.SKUExpirationDate, '') = '' THEN NULL
																						   ELSE IP.SKUExpirationDate
																						   END, @UserId, @GetDate, @UserId, @GetDate
			   FROM #InsertPrice AS IP
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodePrice
				   WHERE ZnodePrice.PriceListId = @PriceListId AND 
						 ZnodePrice.SKU = IP.SKU AND 
						 ISNULL(ZnodePrice.SalesPrice, 0) = ISNULL(IP.SalesPrice, 0) AND 
						 ZnodePrice.RetailPrice = IP.RetailPrice
			   ) AND 
					 IP.RowNumber IN
			   (
					SELECT MAX(IPI.RowNumber)
					FROM #InsertPrice AS IPI
					WHERE IPI.SKU = IP.SKU 
			   );
		IF EXISTS
		(
			SELECT TOP 1 1
			FROM #InsertPrice
			WHERE CONVERT(varchar(100), TierStartQuantity) <> '' AND 
				  (CONVERT(varchar(100), TierPrice) <> '')
		)
		BEGIN
			UPDATE ZPT
			  SET ZPT.Price = IP.TierPrice, ZPT.ModifiedBy = @UserId, ZPT.ModifiedDate = @GetDate
			FROM #InsertPrice IP INNER JOIN ZnodePriceTier ZPT ON ZPT.PriceListId = @PriceListId AND  ZPT.SKU = IP.SKU AND ZPT.Quantity = IP.TierStartQuantity 
		    --Retrive last record from prince list of specific SKU ListCode and Name 
			WHERE IP.RowNumber IN
			(
				SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU 
			);
			INSERT INTO ZnodePriceTier( PriceListId, SKU, Price, Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
				   SELECT @PriceListId, IP.SKU, IP.TierPrice, IP.TierStartQuantity,  @UserId, @GetDate, @UserId, @GetDate
				   FROM #InsertPrice AS IP 
				   WHERE NOT EXISTS
				   (
					   SELECT TOP 1 1 FROM ZnodePriceTier WHERE ZnodePriceTier.PriceListId = @PriceListId AND  ZnodePriceTier.SKU = IP.SKU AND 
							 ZnodePriceTier.Quantity = IP.TierStartQuantity
				   ) AND  IP.RowNumber IN
				   (
					   SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND  IPI.TierStartQuantity = IP.TierStartQuantity
				   );
		END;  
		--SELECT @PriceListId ID , cast(1 As Bit ) Status  
		--SELECT RowNumber , ErrorDescription , SKU , TierStartQuantity , RetailPrice , SalesPrice , TierPrice , Uom , UnitSize , PriceListCode , PriceListName , CurrencyId , ActivationDate , ExpirationDate
		--FROM @ErrorLogForInsertPrice;
		SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- COMMIT TRAN ImportProducts;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportSEODetails')
	drop proc Znode_ImportSEODetails
go
CREATE PROCEDURE [dbo].[Znode_ImportSEODetails](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertSEODetails TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max), 
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFProducts TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max),
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFCategory TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max),
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFBrand TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max), 
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		
		DECLARE @InsertedZnodeCMSSEODetail TABLE
		( 
			CMSSEODetailId int , SEOId int, CMSSEOTypeId int
		);
		
		--SET @SSQL = 'Select RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;
		SET @SSQL = 'Select RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;

		INSERT INTO @InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii 
			   where ii.SEOURL in (Select ISD.SEOURL from @InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 ) 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii 
			   where ii.RedirectFrom = ii.RedirectTo 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii
			   WHERE ltrim(rtrim(isnull(ii.SEOUrl,''))) like '% %' -----space not allowed



		DELETE FROM @InsertSEODetails
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Product'' ';
		INSERT INTO @InsertSEODetailsOFProducts(  RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation	,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Category'' ';
		INSERT INTO @InsertSEODetailsOFCategory( RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection	, GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Brand'' ';
		INSERT INTO @InsertSEODetailsOFBrand( RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation	,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection	, GUID )
		EXEC sys.sp_sqlexec @SSQL;

	    -- start Functional Validation 
		--1. Product
		--2. Category
		--3. Content Page
		--4. Brand
		-----------------------------------------------

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii
			   WHERE ii.ImportType NOT in 
			   (
				   Select NAME from ZnodeCMSSEOType where NAME <> 'Content Page'
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFProducts AS ii
			   WHERE ii.CODE NOT in 
			   (
				   Select SKU from ZnodePublishProductDetail ZPPD
					INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
					INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
					AND ZPC.PortalId  = @PortalId AND SKU is not null 
			   )  AND ImportType = 'Product';


		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFCategory AS ii
			   WHERE ii.CODE NOT in 
			   (
				   Select PublishCategoryName from ZnodePublishCategoryDetail ZPPD
				   	INNER JOIN ZnodePublishCategory ZPP ON ZPP.PublishCategoryId = ZPPD.PublishCategoryId
					INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
				   where ZPPD.PublishCategoryName is not null  AND   ZPC.PortalId = @PortalId
			   )  AND ImportType = 'Category';

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFBrand AS ii
			   WHERE ii.CODE NOT in 
			   (
				   Select BrandCode from ZnodeBrandDetails 
			   )  AND ImportType = 'Brand';
		
		
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertSEODetailsOFProducts
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		DELETE FROM @InsertSEODetailsOFCategory
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		DELETE FROM @InsertSEODetailsOFBrand
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		-- Insert Product Data 
		If Exists (Select top 1 1 from @InsertSEODetailsOFProducts)
		Begin
			Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,
						   ZCSD.MetaInformation =  ISD.MetaInformation,
						   ZCSD.SEOUrl=  ISD.SEOUrl
			FROM 
			@InsertSEODetailsOFProducts ISD  INNER JOIN ZnodePublishProductDetail ZPPD ON ISD.Code = ZPPD.SKU 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOId = ZPPD.PublishProductId
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId AND   ZPC.PortalId = ZCSD.PortalId
			where  ZCSD.PortalId  =@PortalId;
			
			Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle
							,ZCSDL.SEODescription = ISD.SEODescription
							,ZCSDL.SEOKeywords= ISD.SEOKeywords
 			FROM 
			@InsertSEODetailsOFProducts ISD  INNER JOIN ZnodePublishProductDetail ZPPD ON ISD.Code = ZPPD.SKU 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOId = ZPPD.PublishProductId
			INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId AND   ZPC.PortalId = ZCSD.PortalId
			where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId; 

			Delete from @InsertedZnodeCMSSEODetail
			INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
			OUTPUT Inserted.CMSSEODetailId,Inserted.SEOId,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail
		
			Select Distinct 1,ZPPD.PublishProductId , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertSEODetailsOFProducts ISD  INNER JOIN ZnodePublishProductDetail ZPPD ON ISD.Code = ZPPD.SKU 
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
			where  ZPC.PortalId  =@PortalId AND
			 NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOId  = ZPPD.PublishProductId
			 and  ZCSD .PortalId =@PortalId   );
		
        	insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertedZnodeCMSSEODetail IZCSD INNER JOIN ZnodePublishProductDetail ZPPD ON IZCSD.SEOId = ZPPD.PublishProductId AND IZCSD.CMSSEOTypeId =1  
											 INNER JOIN @InsertSEODetailsOFProducts ISD ON ZPPD.SKU = ISD.Code 
											 INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
											 INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
			where  ZPC.PortalId  =@PortalId 

	
			-----RedirectUrlInsert
			INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,getdate() as CreatedDate,2 as ModifiedBy,getdate() as ModifiedDate
			from @InsertSEODetailsOFProducts
			where IsRedirect = 1
		END

		-- Insert Category Data 
		
		If Exists (Select top 1 1 from @InsertSEODetailsOFCategory)
		Begin

			Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,
						   ZCSD.MetaInformation =  ISD.MetaInformation,
						   ZCSD.SEOUrl=  ISD.SEOUrl
			FROM 
			@InsertSEODetailsOFCategory ISD  INNER JOIN ZnodePublishCategoryDetail ZPPD ON ISD.Code = ZPPD.PublishCategoryName 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOId = ZPPD.PublishCategoryId
			where  ZCSD.PortalId  =@PortalId;
			
			Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle
							,ZCSDL.SEODescription = ISD.SEODescription
							,ZCSDL.SEOKeywords= ISD.SEOKeywords
 			FROM 
			@InsertSEODetailsOFCategory ISD  INNER JOIN ZnodePublishCategoryDetail ZPPD ON ISD.Code = ZPPD.PublishCategoryName 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOId = ZPPD.PublishCategoryId
			INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId
			where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId; 

			Delete from @InsertedZnodeCMSSEODetail
			INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
			OUTPUT Inserted.CMSSEODetailId,Inserted.SEOId,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail
		
			Select Distinct 2,ZPPD.PublishCategoryId , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertSEODetailsOFCategory ISD  INNER JOIN ZnodePublishCategoryDetail ZPPD ON ISD.Code = ZPPD.PublishCategoryName 
			INNER JOIN ZnodePublishCategory ZPP ON ZPP.PublishCategoryId = ZPPD.PublishCategoryId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId AND   ZPC.PortalId = @PortalId
			where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOId  = ZPPD.PublishCategoryId AND ZCSD.PortalId = @PortalId );
		


			insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertedZnodeCMSSEODetail IZCSD INNER JOIN ZnodePublishCategoryDetail ZPPD ON IZCSD.SEOId = ZPPD.PublishCategoryId AND IZCSD.CMSSEOTypeId =2  
											 INNER JOIN @InsertSEODetailsOFCategory ISD ON ZPPD.PublishCategoryName = ISD.Code 

			-----RedirectUrlInsert
			insert into ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,getdate() as CreatedDate,2 as ModifiedBy,getdate() as ModifiedDate
			from @InsertSEODetailsOFProducts SDP
			where IsRedirect = 1
		END
										 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportValidateManditoryText')
	drop proc Znode_ImportValidateManditoryText
go
CREATE PROCEDURE [dbo].[Znode_ImportValidateManditoryText]
	(@TableName          VARCHAR(200),
	@SourceColumnName   NVARCHAR(600),
	@CreateDateString   NVARCHAR(300),
	@ValidationName     VARCHAR(100),
	@ControlName        VARCHAR(300),
	@ValidationValue    VARCHAR(300),
	@NewGUID            NVARCHAR(200),
	@LocaleId           INT = 1 ,
	@DefaultLocaleId    INT,
	@AttributeId        INT,
	@ImportProcessLogId INT,
	@ImportHeadId     INT           = 0)
AS
     
 /*
	Summary:  Text 
             --------------------------
              Control   Validation Rule
             --------------------------
             1 Select	ValidationRule
             2 Text	RegularExpression
             3 Number	MaxCharacters
             4 Yes/No	UniqueValue

	Unit Testing:
	EXEC Znode_ImportValidateManditoryText
	 */
	 
	 BEGIN
        BEGIN TRY 
            SET NOCOUNT ON

             DECLARE @SQLQuery NVARCHAR(MAX), @ImportHeadName NVARCHAR(100);
             SET @ImportHeadName = DBO.Fn_GetDefaultImportHead(@ImportHeadId);
			 
			 IF @ControlName = 'Number' AND @ValidationName IN('MaxCharacters')  AND ISNULL(@ValidationValue, '') <> ''
                 BEGIN
                     SET @SQLQuery = @TableName+'  WHERE LEN('+@SourceColumnName+') > ' +   @ValidationValue + ' AND Isnull('+@SourceColumnName+','''') <> ''''';
                    

					IF @ValidationName = 'MaxCharacters'
                         EXEC Znode_ImportGenerateErrorLog
                              @ImportHeadName = @ImportHeadName,
                              @QueryCriteria = @SQLQuery,
                              @SourceColumnName = @SourceColumnName,
                              @CreateDateString = @CreateDateString,
                              @ErrorCode = '44',
                              @ValidationValue = @ValidationValue;
                  END;
             IF @ControlName = 'Yes/No' AND @ValidationName IN('UniqueValue') AND @ValidationValue = 'true'
                 BEGIN
					-- Check duplicate value exist in global temporary table 
					SET @SQLQuery = 'SELECT ''53'' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,RowNumber ,GUID,  '+@CreateDateString+' 
					FROM '+@TableName+'   WHERE RowNumber in (Select RowNumber from '+@TableName+' where '+@SourceColumnName+' in (Select '+@SourceColumnName+' from '+@TableName+' GROUP BY '+@SourceColumnName+' having COUNT(*) > 1) )';
                     
					INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
					EXEC sys.sp_sqlexec @SQLQuery;

					---- Check duplicate value exist in znode database
					--If (@ImportHeadName in  ('Product'))
					--BEGIN
					-- SET @SQLQuery = 'SELECT ''10 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
					--				  FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
					--				  (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId AND ZPAVL.LocaleId IN ('+CONVERT(VARCHAR(100), @LocaleId)+','+CONVERT(VARCHAR(100), @DefaultLocaleId)+')) 
					--				  INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = tlb.'+@SourceColumnName+' 
					--				  WHERE ZPAV.PimAttributeId = '+CONVERT(VARCHAR(100), @AttributeId)+' AND ZPAVL.AttributeValue <> ''''';

					-- INSERT INTO ZnodeImportLog
					-- (ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
					-- EXEC sys.sp_sqlexec @SQLQuery;

					-- --Remove wrong data from table 
					-- --SET @SQLQuery = 'DELETE FROM '+@TableName+' WHERE RowNumber in (Select Isnull(RowNumber,0) FROM ZnodeImportLog 
					--	--			  WHERE ErrorDescription =10 AND ImportProcessLogId  = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+');';
					-- --EXEC sys.sp_sqlexec @SQLQuery;
					--END

					If (@ImportHeadName in  ('Category'))
					BEGIN
						SET @SQLQuery = 'SELECT ''10 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
						FROM ZnodePimCategoryAttributeValue AS ZPAV INNER JOIN ZnodePimCategoryAttributeValueLocale AS ZPAVL ON 
						(ZPAVL.PimCategoryAttributeValueId = ZPAV.PimCategoryAttributeValueId AND ZPAVL.LocaleId IN ('+CONVERT(VARCHAR(100), @LocaleId)+','+CONVERT(VARCHAR(100), @DefaultLocaleId)+')) 
						INNER JOIN '+@TableName+' tlb ON ZPAVL.CategoryValue = tlb.'+@SourceColumnName+' 
						WHERE ZPAV.PimAttributeId = '+CONVERT(VARCHAR(100), @AttributeId)+' AND ZPAVL.CategoryValue <> ''''';

						INSERT INTO ZnodeImportLog
						(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
						EXEC sys.sp_sqlexec @SQLQuery;
					 END
					---- Check duplicate value exist in znode database
				
                 END;
         END TRY
         BEGIN CATCH
               DECLARE @Status BIT ;
		     SET @Status = 0;
			 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportValidateManditoryText @TableName = '+@TableName+',@SourceColumnName='+@SourceColumnName+',@CreateDateString='+@CreateDateString+',@ValidationName='+@ValidationName+',@ControlName = '+@ControlName+',@ValidationValue='+@ValidationValue+',@NewGUID='+@NewGUID+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@DefaultLocaleId='+CAST(@DefaultLocaleId AS VARCHAR(50))+',@AttributeId='+CAST(@AttributeId AS VARCHAR(50))+',@ImportHeadId='+CAST(@ImportHeadId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportValidateManditoryText',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ImportValidatePimProductData')
	drop proc Znode_ImportValidatePimProductData
go

CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0  )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max)
             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );
		
             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'Product'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;
				
             --Generate new process for current import 
             --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
             --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @DefaultFamilyId = 0
                AND @ImportHeadName IN('Product', 'Category')
                 BEGIN 
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;
                 END;
             ELSE
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     --Get all default attribute values in attribute 
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with source column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = @IsCategory,
                          @DefaultFamilyId = @DefaultFamilyId;
                 END;      
             -- Check attributes are manditory and not provided with source table
		   	 select * from @FamilyAttributeDetail
			if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
			Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )

			INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
			SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
			FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
			ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
			LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
			and ZIAV.AttributeCode = ZITM.TargetColumnName
			AND ZITM.ImportTemplateId  = @TemplateId
			WHERE ZIAV.ImportHeadId = @ImportHeadId --ORDER BY ZIAV.SequenceNumber

		    SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
             )
             EXEC sys.sp_sqlexec  @SQLQuery;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('Product', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @FamilyAttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''
                                          AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId;
                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             IF NOT EXISTS
                             (
                                 SELECT TOP 1 1
                                 FROM INFORMATION_SCHEMA.TABLES
                                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             )
                                 BEGIN
                                     CREATE TABLE #DefaultAttributeCode
                                     (AttributeTypeName          VARCHAR(300),
                                      PimAttributeDefaultValueId INT,
                                      PimAttributeId             INT,
                                      AttributeDefaultValueCode  VARCHAR(100)
                                     );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                                 END;
                             ELSE
                                 BEGIN
                                     DROP TABLE #DefaultAttributeCode;
                                 END;
                         END;
                     ELSE
                         BEGIN
					
					
                             --Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC [Znode_ImportGetOtherTemplateDetails]
                                  @TemplateId = @TemplateId,
                                  @ImportHeadId = @ImportHeadId;
						
                             --Check attributes are not mapped with any family of Pim Product
                             INSERT INTO ZnodeImportLog
                             (ErrorDescription,
                              ColumnName,
                              Data,
                              GUID,
                              CreatedBy,
                              CreatedDate,
                              ModifiedBy,
                              ModifiedDate,
                              ImportProcessLogId
                             )
                                    SELECT DISTINCT
                                           '14' AS ErrorDescription,
                                           AttributeCode,
                                           '',
                                           @NewGUID,
                                           @UserId,
                                           @GetDate,
                                           @UserId,
                                           @GetDate,
                                           @ImportProcessLogId
                                    FROM @AttributeDetail
                                    WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                         END;
						
                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
					
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             --Check Default data value is valid 
                             IF @ImportHeadName IN('Product', 'Category')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
            -- COMMIT TRAN TRN_ImportValidProductData;
			 
		
			 
  			 SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber in (Select Rownumber from ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber is not null)';
             EXEC sys.sp_sqlexec  @SQLQuery;
			 

			 --SET @SQLQuery = 'Select * FROM  '+@TableName
    --         EXEC sys.sp_sqlexec  @SQLQuery;
	  
             IF @ImportHeadName IN('Product', 'Category')
                 BEGIN
                     IF NOT EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @FamilyAttributeDetail
                         WHERE ISNULL(SourceColumnName, '') = ''
                               AND IsRequired = 1
                     ) AND NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
			
                                     EXEC Znode_ImportPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;

                                 END;
                             ELSE
                                 BEGIN
                                     EXEC Znode_ImportPimCategoryData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
                                 END;
                         END;
                 END;
				IF NOT EXISTS
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN(43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 )
             BEGIN
                 IF @ImportHeadName = 'Pricing'
                     BEGIN
                         EXEC [Znode_ImportPriceList]
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
                              @PriceListId = @PriceListId;
                     END;

                 IF @ImportHeadName = 'Inventory'
                     BEGIN
				
                         EXEC Znode_ImportInventory_Ver1
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID;
                     END;
                 IF @ImportHeadName = 'ZipCode'
                     BEGIN
						 EXEC Znode_ImportZipCode
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CountryCode = @CountryCode;
                     END;
					 IF @ImportHeadName = 'CategoryAssociation'
                     BEGIN
						 EXEC Znode_ImportCatalogCategory
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @PimCatalogId = @PimCatalogId;
                     END;
					 IF @ImportHeadName = 'ProductAssociation'
                     BEGIN
						 EXEC Znode_ImportAssociateProducts
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
                     END;
			
					 IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportSEODetails
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @LocaleId = @LocaleId,
							  @PortalId =@PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID,
							  @CsvColumnString = @CsvColumnString 

				
                     END;
				
					 IF @ImportHeadName = 'ProductAttribute' 
                     BEGIN
						 EXEC Znode_ImportAttributes
                              @TableName = @TableName,
                              @Status = @Status,
                              @UserId = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID = @NewGUID
				
                     END;

					 IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomer
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = @PortalId,
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
				
                     END;

					 IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;

					 IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                     BEGIN

						 EXEC Znode_ImportCustomerAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @LocaleId	 = @LocaleId,
							  @PortalId  = 1, -- not implemented from forntend 
                              @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString,
							  @IsAccountAddress = @IsAccountAddress
				
                     END;

					 IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                     BEGIN
						 EXEC Znode_ImportStoreLocatorAddress
                              @TableName = @TableName,
                              @Status	 = @Status,
                              @UserId	 = @UserId,
							  @ImportProcessLogId = @ImportProcessLogId,
                              @NewGUID	 = @NewGUID,
							  @CsvColumnString =@CsvColumnString
                     END;
 

				 
             END;

             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate = GETDATE()
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),
                    ERROR_LINE(),
                    ERROR_PROCEDURE();
             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID; 
             --Update process with failed status for current import 
             --UPDATE ZnodeImportProcessLog
             --  SET
             --      Status = dbo.Fn_GetImportStatus(3),
             --      ProcessCompletedDate = @GetDate
             --WHERE ImportProcessLogId = @ImportProcessLogId;
			 				 SET @SQLQuery = 'Drop Table ' + @TableName
                 EXEC sys.sp_sqlexec @SQLQuery;
             --ROLLBACK TRAN TRN_ImportValidProductData;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_InsertProcedureErrorLog')
	drop proc Znode_InsertProcedureErrorLog
go
/*
 Summary : - 
      This procedure is used to catch the error log of procedures 
	  'client_net_address' is Client Machine IPAddress on which error has occured
	  All ErrorLog Details is stored in ZnodeProceduresErrorLog table
*/

CREATE PROCEDURE [dbo].[Znode_InsertProcedureErrorLog]
( @ProcedureName    VARCHAR(1000),
  @ErrorInProcedure VARCHAR(1000),
  @ErrorMessage     NVARCHAR(MAX),
  @ErrorLine        VARCHAR(100),
  @ErrorCall        NVARCHAR(MAX))
AS 
   
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @ClientIPMachine NVARCHAR(100)= CONVERT(NVARCHAR(100), CONNECTIONPROPERTY('client_net_address'));

			 IF EXISTS (SELECT TOP 1 1 FROM ZnodeGlobalSetting ZGS WHERE FeatureName = 'IsDataBaseLoggingEnabled' AND FeatureValues = 'TRUE')
			 BEGIN
             INSERT INTO ZnodeProceduresErrorLog (ProcedureName,ErrorInProcedure,ErrorMessage,ErrorLine,ErrorCall,CreatedBy,CreatedDate)
                    SELECT @ProcedureName,@ErrorInProcedure,@ErrorMessage,@ErrorLine,@ErrorCall,@ClientIPMachine,@GetDate;
			 END
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_PROCEDURE();
                    
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_InsertPublishProductIds')
	drop proc Znode_InsertPublishProductIds
go

CREATE  PROCEDURE [dbo].[Znode_InsertPublishProductIds]
(
	 @PublishCatalogId           INT            = NULL,
     @UserId                     INT				  ,
	 @PimProductId               TransferId Readonly,
	 @IsCallAssociated           BIT           = 0,
	 @PimCategoryHierarchyId	 INT		   = 0  ,
	 @IsDebug					 INT		   = 0     
	)
AS
    
/*
  Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

     Unit Testing
    
     SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
     SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
     SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
	 SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
     select * from znodepublishcatalog
	 SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
     SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
	 SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 
     EXEC Znode_GetPublishProducts  @PublishCatalogId = 5 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = 117,@IsDebug= 1 
	 	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
     EXEC Znode_InsertPublishProductIds  @PublishCatalogId = 0,@UserId= 2  ,@PimProductId = @ttr  ,@IsDebug= 1 
     EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
	 SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
	 SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
    */ 

     BEGIN
      --  BEGIN TRAN InsertPublishProductIds;
         BEGIN TRY
			SET NOCOUNT ON;
		
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			 DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
			 DECLARE 
			  @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
			  @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),
			  @LocaleId INT = 0,
			  @SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId(), 
			  @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId(),
			  @ProductTypeAttributeId INT = dbo.Fn_GetProductTypeAttributeId()

			 DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			 INSERT INTO @TBL_LocaleId (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive = 1
			 
			 -- This variable used to carry the locale in loop 
			 -- This variable is used to carry the default locale which is globaly set
             DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
			 DECLARE @DeletePublishProductId VARCHAR(MAX)= '', @PimProductIds VARCHAR(MAX)= '', @PimAttributeId VARCHAR(MAX)= '';
             DECLARE @TBL_CategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			 DECLARE @TBL_PublishCategoryIds TABLE (PublishCategoryId  int ) 
		
			 -- This table will used to hold the all currently active locale ids  
			 
			IF Object_ID ('tempdb..#ActiveProduct') is not null
				drop table #ActiveProduct

			IF Object_ID ('tempdb..#TBL_PimProductIds') is not null
				drop table #TBL_PimProductIds

			 --this table holds all active product data
			-- CREATE TABLE #ActiveProduct ( PimProductId INT ) 
			 --
			 --INSERT INTO #ActiveProduct ( PimProductId )
				 --SELECT PAV.PimProductId FROM ZnodePimAttributeValue PAV
				 --INNER JOIN ZnodePimAttributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
				 --INNER JOIN ZnodePimAttribute PA  ON PAV.PimAttributeId = PA.PimAttributeId
				 --WHERE PA.AttributeCode = 'IsActive' AND PAVL.AttributeValue = 'true'

		     -- This table hold the complete xml of product with other information like category and catalog
             CREATE TABLE #TBL_PimProductIds(PimProductId INT  ,PimCategoryId INT,PimCatalogId INT,PublishCatalogId INT,IsParentProducts BIT ,DisplayOrder INT,ProductName NVARCHAR(MAX),SKU  NVARCHAR(MAX),
											 IsActive NVARCHAR(MAX),PimAttributeFamilyId INT ,ProfileId   VARCHAR(MAX),CategoryDisplayOrder INT ,ProductIndex INT,PimCategoryHierarchyId INT,PRIMARY KEY (PimCatalogId,PimCategoryId,PimCategoryHierarchyId,PimProductId)  )

			  -- This table is used to hold the product which publish in current process 
             DECLARE @TBL_PublishProductIds TABLE(PublishProductId  INT  ,PimProductId INT,PublishCatalogId  INT
													,PublishCategoryId VARCHAR(MAX),CategoryProfileIds VARCHAR(max),VersionId INT , PRIMARY KEY (PimProductId,PublishProductId,PublishCatalogId)); 
	 
			--Retrive category data : parent / client
			
				
			---------------
			-- this check is used when this procedure is call by internal procedure to publish only product and no need to return publish xml;    
			--Collected list of products for  publish 
       
			If @PimCategoryHierarchyId = 0 
			Begin

				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )

			END
			ELSE
			BEGIN
				
				INSERT INTO @TBL_CategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO  @TBL_PublishCategoryIds 
				select ZPC.PublishCategoryId from ZnodePublishCategory ZPC 
				Inner join  @TBL_CategoryHierarchyIds CT1 On 
				ZPC.PimCategoryId = CT1.CategoryId 
			
			
				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )
				AND (
						ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryHierarchyIds
							) 
					) 

					
			END
						
             --Collected list of link products for  publish
			 INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId , PublishCatalogId,PimCategoryHierarchyId)
				 SELECT ZPLPD.PimProductId, ZPCC.PimCategoryId, 0 AS IsParentProducts, NULL AS DisplayOrder, CTPP.PimCatalogId,CTPP.PublishCatalogId,isnull(ZPCC.PimCategoryHierarchyId,0)
				 FROM ZnodePimLinkProductDetail AS ZPLPD
				 INNER JOIN #TBL_PimProductIds AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId AND  IsParentProducts = 1 
				 INNER JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPLPD.PimProductId AND ZPCC.PimCatalogId = CTPP.PimCatalogId
				 WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTPPI WHERE CTPPI.PimProductId = ZPLPD.PimProductId) 
				-- AND EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPLPD.PimProductId ) 
				 AND ZPCC.PimProductId IS NOT NULL
				-- AND EXISTS (SELECT * FROM #ActiveProduct PAV WHERE ZPLPD.PimProductId = PAV.PimProductId )
				 GROUP BY ZPLPD.PimProductId, ZPCC.PimCategoryId,CTPP.PimCatalogId,CTPP.PublishCatalogId ,ZPCC.PimCategoryHierarchyId

				
             --Collected list of Addon products for  publish
  
		     INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
					 SELECT ZPAPD.PimChildProductId, ISNULL(ZPCC.PimCategoryId,0) AS PublishCategoryId, 0 AS IsParentProducts, null AS DisplayOrder,CTALP.PimCatalogId,CTALP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
					 FROM ZnodePimAddOnProductDetail AS ZPAPD 
					 INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
					 INNER JOIN #TBL_PimProductIds AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId AND  IsParentProducts = 1
					 LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPAPD.PimChildProductId AND ZPCC.PimCatalogId = CTALP.PimCatalogId
					 WHERE NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTALPI WHERE CTALPI.PimProductId = ZPAPD.PimChildProductId) 
				---	 AND EXISTS(SELECT TOP 1 1FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPAPD.PimChildProductId) 
					-- AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPAPD.PimChildProductId = PAV.PimProductId ) 
					 GROUP BY ZPAPD.PimChildProductId, ZPCC.PimCategoryId , CTALP.PimCatalogId,CTALP.PublishCatalogId,ZPCC.PimCategoryHierarchyId

					 				 	

             --Collected list of Bundle / Group / Config products for  publish
             INSERT INTO #TBL_PimProductIds(PimProductId,PimCategoryId,IsParentProducts,DisplayOrder,PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
                    SELECT ZPTA.PimProductId,ISNULL(ZPCC.PimCategoryId,0),0 AS IsParentProducts,NULL DisplayOrder,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
                    FROM ZnodePimProductTypeAssociation AS ZPTA INNER JOIN #TBL_PimProductIds AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId AND IsParentProducts = 1
                    LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPTA.PimProductId AND ZPCC.PimCatalogId = CTAAP.PimCatalogId
                    WHERE NOT EXISTS( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTAAPI WHERE CTAAPI.PimProductId = ZPTA.PimProductId)
					--AND EXISTS(SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPTA.PimProductId)
					--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPTA.PimProductId = PAV.PimProductId ) 
					GROUP BY ZPTA.PimProductId,ZPCC.PimCategoryId,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ZPCC.PimCategoryHierarchyId
        				

			   UPDATE TBPP
               SET PublishCatalogId = ZPC.PublishCatalogId 
			   FROM #TBL_PimProductIds TBPP 
			   INNER JOIN ZnodePublishCatalog ZPC ON ZpC.PimCatalogId = TBPP.PimCatalogId;
        
		DECLARE @PublishProductId TRANSFERId 


		IF @PublishCatalogId IS NOT NULL AND @PublishCatalogId <> 0 
			BEGIN
			If @PimCategoryHierarchyId = 0 
			BEGIN
			  -- SELECT * FROM @TBL_PimProductIds AS TBP
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				--INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0) )
				AND ZPP.PublishCatalogId = @PublishCatalogId
				--Remove extra products from catalog
			END
			ELSE 
			BEGIN
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPPC.PublishCatalogId  AND   ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0))
				AND ZPP.PublishCatalogId = @PublishCatalogId
				AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				)
			
			END
		END
		ELSE IF @IsCallAssociated = 0 
		BEGIN 
			DECLARE @TBL_ProductIdscollect TABLE(PublishProductId INT , PimproductId INT , PublishcatalogId  INT  , ProductType NVARCHAr(max))
			If @PimCategoryHierarchyId = 0 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				 WHERE  IsParentProducts = 1	
				 AND LocaleId =@DefaultLocaleId
			END 
			Else 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT TBPOCI.PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				INNER JOIN ZnodePublishCategoryProduct  ZPCP ON ZPCP.PublishCatalogId = TBPOCI.PublishCatalogId AND 
				ZPCP.PublishProductId = TBPOCI.PublishProductId
				INNER JOIN ZnodePublishCategory ZPC ON  (ZPC.PublishCatalogId = ZPCP.PublishCatalogId  AND ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE  IsParentProducts = 1	AND LocaleId =@DefaultLocaleId
				 AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				
				) 
			END 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_ProductIdscollect WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct','SimpleProduct') )
		 
			BEGIN 
	
			   DECLARE @TBL_DeleteTrackProduct TABLE (PublishProductId INT,AssociatedZnodeProductId INT  ,PublishCatalogId INT,PublishCatalogLogId INT ,IsDelete BIT , PublishCategoryId int  )

			   ;With Cte_PublishProduct AS
			   (
				 SELECT TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType ,MAx(PublishCatalogLogId) PublishCatalogLogId
				 FROM  @TBL_ProductIdscollect TBL 
				 INNER JOIN ZnodePublishCatalogLog TBLG ON (TBLG.PublishCatalogId = TBL.PublishcatalogId)
				 WHERE IsCatalogPublished = 1 
				 GROUP BY TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType

				 
		   
			   )
			   , Cte_ConfigData AS 
				 (
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'ConfigurableProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'GroupedProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'BundleProduct'
				 UNION ALL 
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND LocaleId = @DefaultLocaleId 
			
				 )

			--	 SELECT * FROM ZnodePublishCatalogLog WHERE PublishCatalogId = 8 

			INSERT INTO @TBL_DeleteTrackProduct (PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId)
			SELECT ZPP.PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId 
			FROM Cte_ConfigData ZPP	
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM  @TBL_PublishProductIds TBLP WHERE TBLP.PublishProductId = ZPP.AssociatedZnodeProductId)
		
	

			;With Cte_updateStatus AS
			(
		 
				 SELECT  PublishProductId,PublishcatalogId
				  FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT  PublishProductId,PublishcatalogId
				   FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 


				 UNION ALL 
				 SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 
		
			)

			UPDATE a 
			SET IsDelete = CASE WHEN TYR.PublishProductId IS NULL THEN 1 ELSE 0 END 
			FROM @TBL_DeleteTrackProduct a 
			LEFT JOIN Cte_updateStatus TYR ON (TYR.PublishProductId = a.PublishProductId AND TYR.PublishCatalogId = a.PublishCatalogId)

		
			INSERT INTO @PublishProductId 
			SELECT DISTINCT AssociatedZnodeProductId 
			FROM @TBL_DeleteTrackProduct
			WHERE IsDelete =1  
		--	AND 1=0

		END 

	
		INSERT INTO @PublishProductId
		SELECT distinct PublishProductid
		FROM ZnodePublishProduct ZPP
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId =  ZPP.PublishCatalogId )
        WHERE Not EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPPP WHERE (ZPPP.PimCatalogid = ZPc.PimCatalogId AND ZPPP.PimProductId = ZPP.PimProductId))  
		AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYR WHERE TYR.PimProductId = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @PublishProductId YTR WHERE YTR.Id = ZPP.PublishProductId  )
		--AND  1=0	
		END  
	
		EXEC dbo.Znode_DeletePublishCatalogProduct  @PublishProductIds = @PublishProductId,@PublishCatalogId = @PublishCatalogId ,
		@PimCategoryHierarchyId  =@PimCategoryHierarchyId  ,
		@PimCatalogId  = @PimCatalogId 

			   IF  @IsDebug = 1 
			   BEGIN 
			SELECT * FROM #TBL_PimProductIds
			 END 
			 -- This merge statement is used for crude oprtaion with publisgh product table
			MERGE INTO ZnodePublishProduct TARGET USING  (
				SELECT PimProductId, PublishCatalogId
				FROM #TBL_PimProductIds AS TBP
				GROUP BY PimProductId, PublishCatalogId
			 )  SOURCE
				ON --check for if already exists then just update otherwise insert the product  
				TARGET.PimProductId = SOURCE.PimProductId AND  TARGET.PublishCatalogId = SOURCE.PublishCataLogId 
				WHEN MATCHED      THEN UPDATE SET TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate	
				WHEN NOT MATCHED  THEN INSERT(PimProductId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
									   VALUES( SOURCE.PimProductId, SOURCE.PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate )
				OUTPUT INSERTED.PublishProductId, INSERTED.PimProductId, INSERTED.PublishCatalogId
				INTO @TBL_PublishProductIds(PublishProductId, PimProductId, PublishCatalogId); 
			
			-- Here used the ouput clause to catch what data inserted or updated into variable table
	    	
	
		
			
			-- This merge staetment is used for crude opration with  ZnodePublishCategoryProduct table
			 MERGE INTO ZnodePublishCategoryProduct TARGET USING  (
				 SELECT PublishProductId,
				 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
				 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId
				 FROM #TBL_PimProductIds AS TBP 
				 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
				 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
				 INNER JOIN @TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
				 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
				 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId
			  ) SOURCE
					ON  TARGET.PublishCatalogId = SOURCE.PublishCatalogId AND ISNULL(TARGET.PublishCategoryId, 0) = ISNULL(SOURCE.PublishCategoryId, 0) AND TARGET.PublishProductId = SOURCE.PublishProductId 
					
					WHEN MATCHED THEN UPDATE SET TARGET.PublishCategoryId = CASE WHEN SOURCE.PublishCategoryId = 0 THEN NULL ELSE SOURCE.PublishCategoryId END 
												 ,TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate,TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId				
					WHEN NOT MATCHED THEN INSERT(PublishProductId,PublishCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId) 
										  VALUES(SOURCE.PublishProductId,CASE WHEN SOURCE.PublishCategoryId =0 THEN NULL ELSE SOURCE.PublishCategoryId  END , SOURCE.PublishCatalogId,@UserId,@GetDate,@userId,@GetDate,SOURCE.PimCategoryHierarchyId);
   
    
   WHILE @Counter <= @maxCountId
   BEGIN 
    SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
   
     
	 SELECT VIR.PimProductId,PimAttributeId,AttributeValue,ZnodePimAttributeValueLocaleId,VIR.LocaleId ,COUNT(*)Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 AND (PimAttributeId = @ProductNamePimAttributeId  OR PimAttributeId = @SKUPimAttributeId OR PimAttributeId = @IsActivePimAttributeId  )
  
   

		
	          MERGE INTO ZnodePublishProductDetail   TARGET
			  USING  (SELECT   ZPP.PublishProductId ,TBLA.AttributeValue PRoductName,TBLAI.AttributeValue SKU ,ISNULL(TBLAII.AttributeValue,'0') IsActive --,TBLAIII.AttributeValue ProductType
						FROM  @TBL_PublishProductIds zpp
						INNER JOIN #TBL_AttributeVAlue TBLA ON (TBLA.PimAttributeId = @ProductNamePimAttributeId AND TBLA.PimProductId = ZPP.PimProductId AND TBLA.LocaleId  = CASE WHEN TBLA.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLA ON (TBLA.PimProductId = ZPP.PimProductId AND TBLA.PimAttributeId = @ProductNamePimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAI ON (TBLAI.PimAttributeId = @SKUPimAttributeId AND TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.LocaleId  = CASE WHEN TBLAI.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAI ON (TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.PimAttributeId = @SKUPimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAII ON (TBLAII.PimAttributeId = @IsActivePimAttributeId AND TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.LocaleId  = CASE WHEN TBLAII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
						--INNER JOIN #TBL_AttributeVAlue TBLAIII ON (TBLAIII.PimAttributeId = @ProductTypePimAttributeId AND TBLAIII.PimProductId = ZPP.PimProductId AND TBLAIII.LocaleId  = CASE WHEN TBLAIII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAIII ON (TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.PimAttributeId = @ProductTypeAttributeId)
						GROUP BY ZPP.PublishProductId,TBLA.AttributeValue,TBLAI.AttributeValue,TBLAII.AttributeValue --,TBLAIII.AttributeValue
						)   SOURCE
			ON (TARGET.PublishProductId = SOURCE.PublishProductId
				 AND TARGET.LocaleId = @LocaleId 
			) 
			WHEN MATCHED THEN 
			UPDATE 
			SET TARGET.ProductName   = SOURCE.ProductName
				,TARGET.SKU			 = SOURCE.SKU
				,TARGET.IsActive	= SOURCE.IsActive
				,TARGET.ModifiedBy	 = @userid
				,TARGET.ModifiedDate  = @GetDate
			WHEN NOT MATCHED THEN 
			INSERT (PublishProductId
					,ProductName
					,SKU
					,IsActive
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			VALUES ( SOURCE.PublishProductId
					,SOURCE.ProductName
					,SOURCE.SKU
					,SOURCE.IsActive
					,@LocaleId
					,@userId
					,@GetDate
					,@userId
					,@GetDate);

		 
         DROP TABLE #TBL_AttributeVAlue 
		
		 SET @Counter = @counter + 1 
			  END 

		IF @PublishCatalogId IS NULL OR @PublishCatalogId =0 
		BEGIN 
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		END 
		IF (ISnull(@PimCategoryHierarchyId ,0) <> 0 ) 
		Begin
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		End 

		--COMMIT TRAN InsertPublishProductIds;
		END TRY 
		BEGIN CATCH 
		 SELECT ERROR_MESSAGE()
	--	 ROLLBACK TRAN InsertPublishProductIds;
		END CATCH 
	END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_InsertUpdateCustomeFieldXML')
	drop proc Znode_InsertUpdateCustomeFieldXML
go
----DROP TABLE ZnodePimCustomeFieldXML

--CREATE TABLE ZnodePimCustomeFieldXML 
--(
--PimCustomeFieldXMLId INT IDENTITY(1,1) CONSTRAINT PK_ZnodePimCustomeFieldXML  PRIMARY KEY 
--,PimProductId INT 
--,CustomCode VARCHAR(300)
--,CustomeFiledXML NVARCHAR(max) 
--,LocaleId     INT 
--,CreatedBy    INT NOT NULL 
--,CreatedDate  DATETIME NOT NULL 
--,ModifiedBy   INT NOT NULL 
--,ModifiedDate DATETIME NOT NULL 
--)

-- EXEC [Znode_InsertUpdateCustomeFieldXML] 1

CREATE  Procedure [dbo].[Znode_InsertUpdateCustomeFieldXML] 
(
 @PimProductId VARCHAR(2000)
)
AS
BEGIN 
  BEGIN TRY 
    
	;With Cte_CustomeAttributeValue AS
	(

			SELECT PimProductId ,ZPCF.CustomCode,'<AttributeCode>'+ISNULL((SELECT ''+ZPCF.CustomCode FOR XML PATH('')),'') +'</AttributeCode>'+'<AttributeName>'+ISNULL((SELECT ''+ZPCFL.CustomKey FOR XML PATH('')),'')+'</AttributeName>'
			+'<AttributeValues>'+ISNULL((SELECT ''+ZPCFL.CustomKeyValue FOR XML PATH('')),'')+'</AttributeValues>'+'<IsUseInSearch>0</IsUseInSearch>
			<IsHtmlTags>0</IsHtmlTags>
			<IsComparable>0</IsComparable>
			<IsFacets>0</IsFacets>
			<AttributeTypeName>Text Area</AttributeTypeName>
			<IsPersonalizable>0</IsPersonalizable>
			<IsCustomeField>1</IsCustomeField>
			<IsConfigurable>0</IsConfigurable>
			<IsSwatch>0</IsSwatch>
			<DisplayOrder>'+Convert(nvarchar(100),Isnull(DisplayOrder,0))+'</DisplayOrder>
			' AttributeValue,ZPCFL.LocaleId 
			FROM ZnodePimCustomField ZPCF
			INNER JOIN ZnodePimCustomFieldLocale ZPCFL ON (ZPCFL.PimCustomFieldId = ZPCF.PimCustomFieldId) 
	)

  MERGE INTO ZnodePimCustomeFieldXML TARGET
  USING Cte_CustomeAttributeValue SOURCE 
  ON (TARGET.PimProductId = SOURCE.PimProductId
    AND  TARGET.LocaleId = SOURCE.LocaleId
	AND TARGET.CustomCode = SOURCE.CustomCode
  )
  WHEN MATCHED THEN 
  UPDATE 
   SET TARGET.CustomeFiledXML = SOURCE.AttributeValue
       ,TARGET.ModifiedBy      = 2 
	   ,TARGET.ModifiedDAte   = GETDATE()

  WHEN NOT MATCHED THEN 
  INSERT (PimProductId
				,CustomCode
				,CustomeFiledXML
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate)
				  VALUES (SOURCE.PimProductId
				  ,SOURCE.CustomCode
				,Source.AttributeValue
				,SOURCE.LocaleId
				,2
				,GETDATE()
				,2
				,GETDATE());

  END TRY 
  BEGIN CATCH 
  SELECT ERROR_MESSAGE()
  END CATCH 
END
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_InsertUpdateProfileCatalog')
	drop proc Znode_InsertUpdateProfileCatalog
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdateProfileCatalog]
(   @ProfileId        INT          = NULL,
	@PimCatalogId     VARCHAR(MAX) = '',
	@UserId           INT,
	@Status           BIT OUT,
	@PimCategoryId    VARCHAR(MAX) = '',
	@ProfileCatalogId INT          = NULL,
	@PimProductId     VARCHAR(MAX) = '',
	@PimCategoryHierarchyId INT =0 
	
	
	)
AS 
    /* Summary :- This Procedure is used to dump the catalog data with profile base catalog 
     Unit Testing 
     EXEC Znode_InsertUpdateProfileCatalog 
	*/
     BEGIN
         BEGIN TRAN InsertUpdateProfileCatalog;
         BEGIN TRY
             DECLARE @TBL_ProfileCatalogId TABLE
             (ProfileCatalogId INT,
              PimCatalogId     INT
             );
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @TBL_PimCatalogId TABLE(PimCatalogId INT);
             DECLARE @TBL_PimCategoryId TABLE(PimCategoryHierarchyId INT,PimCategoryId INT);
             DECLARE @TBL_PimProductId TABLE(PimProductId INT);
             DECLARE @PimCatalogIds INT;
             INSERT INTO @TBL_PimCatalogId(PimCatalogId)
                    SELECT Item
                    FROM dbo.split(@PimCatalogId, ',') SP;
					--SELECT @PimCategoryHierarchyId
					IF @PimCategoryHierarchyId >= 1 
					BEGIN 

             INSERT INTO @TBL_PimCategoryId(PimCategoryId,PimCategoryHierarchyId)
                    SELECT PimCategoryId,PimCategoryHierarchyId
                    FROM dbo.Fn_GetRecurciveCategoryIds_ForChild(@PimCategoryHierarchyId,@PimCatalogId ) SP
					WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimCategoryId,',') th WHERE th.item= Sp.PimCategoryId )
					UNION ALL
					SELECT PimCategoryId,PimCategoryHierarchyId
					FROM ZnodePimCategoryHierarchy  SP
					WHERE PimCategoryHierarchyId = @PimCategoryHierarchyId
					;
					END 
					ELSE 
					BEGIN 
					 INSERT INTO @TBL_PimCategoryId(PimCategoryId,PimCategoryHierarchyId)
					  SELECT PimCategoryId,PimCategoryHierarchyId
					  FROM ZnodePimCategoryHierarchy  SP
					  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimCategoryId,',') th WHERE th.item= Sp.PimCategoryId )
					  AND ParentPimCategoryHierarchyId IS nULL
					END 
             INSERT INTO @TBL_PimProductId(PimProductId)
                    SELECT ZPCC.PimProductId
                    FROM ZnodePimCatalogCategory ZPCC
                    WHERE(( EXISTS
                         (
                             SELECT TOP 1 1
                             FROM dbo.split(@PimProductId, ',') SP
                             WHERE SP.Item = ZPCC.PimProductId
                         )OR @PimProductId = '')
                    AND ( 

					EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId  )
                                  
                         ))
                    AND EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @TBL_PimCatalogId TBPC
                        WHERE TBPC.PimCatalogId = ZPCC.PimCatalogId
                    );
             IF @ProfileId IS NOT NULL
                AND @ProfileCatalogId IS NULL
                 BEGIN
                     MERGE INTO ZnodeProfileCatalog TARGET
                     USING @TBL_PimCatalogId SOURCE
                     ON(TARGET.PimCatalogId = SOURCE.PimCatalogId
                        AND TARGET.ProfileId = @ProfileId)
                         WHEN NOT MATCHED
                         THEN INSERT(ProfileId,
                                     PimCatalogId,
                                     CreatedBy,
                                     CreatedDate,
                                     ModifiedBy,
                                     ModifiedDate) VALUES
                     (@ProfileId,
                      SOURCE.PimCatalogId,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate
                     )
                     OUTPUT INSERTED.ProfileCatalogId,
                            Source.PimCatalogId
                            INTO @TBL_ProfileCatalogId;
                     INSERT INTO ZnodeProfileCategoryHierarchy
                     (ProfileCatalogId,
                      PimCategoryHierarchyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT TBPC.ProfileCatalogId,
                                   ZPCH.PimCategoryHierarchyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCategoryHierarchy ZPCH
                                 INNER JOIN @TBL_ProfileCatalogId TBPC ON(ZPCH.PimCatalogId = TBPC.PimCatalogId);
                     INSERT INTO ZnodeProfileCatalogCategory
                     (ProfileCatalogId,
                      PimCatalogCategoryId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT TBPC.ProfileCatalogId,
                                   PimCatalogCategoryId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCatalogCategory ZPCC
                                 INNER JOIN @TBL_ProfileCatalogId TBPC ON(ZPCC.PimCatalogId = TBPC.PimCatalogId);
                 END;
             ELSE
                 BEGIN
                     SET @PimCatalogIds = CAST(@PimCatalogId AS INT);
                     INSERT INTO ZnodeProfileCategoryHierarchy
                     (ProfileCatalogId,
                      PimCategoryHierarchyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @ProfileCatalogId,
                                   ZPCH.PimCategoryHierarchyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCategoryHierarchy ZPCH
                            WHERE 
							EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId )  
                            
                                  AND 
								  ZPCH.PimCatalogId = @PimCatalogIds;
                     INSERT INTO ZnodeProfileCatalogCategory
                     (ProfileCatalogId,
                      PimCatalogCategoryId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @ProfileCatalogId,
                                   PimCatalogCategoryId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCatalogCategory ZPCC
                            WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId  )  
                            
                                  AND ZPCC.PimCatalogId = @PimCatalogIds
                                  AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @TBL_PimProductId TBPP
                                WHERE TBPP.PimProductId = ZPCC.PimProductId
                            );
                 END;
             SET @Status = 1;
             COMMIT TRAN InsertUpdateProfileCatalog;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE()
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateProfileCatalog @ProfileId = '+CAST(@ProfileId AS VARCHAR(200))+',@PimCatalogId='+@PimCatalogId+',@UserId='+CAST(@UserId AS VARCHAR(200))+',@PimCategoryId='+@PimCategoryId+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(200))+',@PimProductId='+@PimProductId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN InsertUpdateProfileCatalog;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_InsertUpdateProfileCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_InsertUpdateSaveCartLineItem')
	drop proc Znode_InsertUpdateSaveCartLineItem
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItem](
	  @CartLineItemXML xml, @UserId int, @Status bit OUT)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
    <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
    </SavedCartLineItemModel>
    <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @SaveCartLineItemIdForGroup int= 0;
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int IDENTITY(1, 1), OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute varchar(max), 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails )
			   SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ) AS BundleProductIds, Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ) AS ConfigurableProductIds, Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, 
			          Tbl.Col.value( 'PersonaliseValuesList[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

		DECLARE @OmsSavedCartId int, @OmsSavedCartLineItemId int,@OmsOrderId int;

	 --SELECT * FROM @TBL_SavecartLineitems
		  
		DECLARE @TBL_bundleAddonRows TABLE
		( 
										   RowId int, SequenceId int IDENTITY(1, 1), ParentOmsSavedCartLineItemId int, SKU nvarchar(1000), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), CartAddOnDetails nvarchar(max), AutoAddon varchar(max), OmsOrderId int null ,IsFromAddon INT 
		);
		DECLARE @AddonProductSKU nvarchar(max)=
		(
			SELECT TOP 1 AddOnValueIds
			FROM @TBL_SavecartLineitems
		), @BundleProductSKU nvarchar(max)=
		(
			SELECT TOP 1 BundleProductIds
			FROM @TBL_SavecartLineitems
		);
		SET @OmsSavedCartId =
		(
			SELECT TOP 1 OmsSavedCartId
			FROM @TBL_SavecartLineitems
		);
		SET @OmsOrderId =
		(
			SELECT TOP 1 OmsOrderId
			FROM @TBL_SavecartLineitems
		);
		IF EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodeOmsSavedCartLineItem AS qa
			WHERE EXISTS
			(
				SELECT TOP 1 1
				FROM @TBL_SavecartLineitems AS ssds
				WHERE ssds.sku = qa.SKU
			)
		)
		BEGIN
			DELETE FROM ZnodeOmsPersonalizeCartItem
			WHERE EXISTS
			(
				SELECT TOP 1 1
				FROM ZnodeOmsSavedCartLineItem
				WHERE OmsSavedCartId = @OmsSavedCartId AND 
					  OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId
			);
		
			IF EXISTS (SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails is not null)
			BEGIN 
				DELETE ZnodeOmsSavedCartLineItemDetails
				WHERE EXISTS
				( 
					SELECT * FROM ZnodeOmsSavedCartLineItem SCLI
					WHERE ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND SCLI.OmsSavedCartId = @OmsSavedCartId AND SCLI.OmsOrderId = @OmsOrderId	
				)
		    END

			DELETE FROM ZnodeOmsSavedCartLineItem 
			WHERE OmsSavedCartId = @OmsSavedCartId AND OmsOrderId = @OmsOrderId									

		END;

		INSERT INTO @TBL_bundleAddonRows( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a
					CROSS APPLY
					dbo.Split( a.BundleProductIds, ',' ) AS q
			   WHERE a.BundleProductIds IS NOT NULL;

		INSERT INTO @TBL_bundleAddonRows( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a
					CROSS APPLY
					dbo.Split( a.ConfigurableProductIds, ',' ) AS q
			   WHERE a.ConfigurableProductIds IS NOT NULL;

		INSERT INTO @TBL_bundleAddonRows( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT RowID, NULL, SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS SKU, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a
					CROSS APPLY
					dbo.Split( a.GroupProductIds, ',' ) AS q
			   WHERE a.GroupProductIds IS NOT NULL;

		IF EXISTS
		(
			SELECT TOP 1 1
			FROM @TBL_SavecartLineitems
			WHERE GroupProductIds IS NOT NULL OR 
				  ConfigurableProductIds IS NOT NULL
		)
		BEGIN
			SET @AddOnQuantity =
			(
				SELECT MAX(Quantity)
				FROM @TBL_bundleAddonRows
			);
		END;


		INSERT INTO @TBL_bundleAddonRows( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT a.RowID, NULL, q.Item AS SKU,
											   CASE
											   WHEN @AddOnQuantity = 0 THEN a.Quantity
											   ELSE @AddOnQuantity
											   END, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a
					CROSS APPLY
					dbo.Split( a.AddOnValueIds, ',' ) AS q
			   WHERE a.AddOnValueIds IS NOT NULL; 
	
		DECLARE @Tbl_SAvecartIds TABLE
		( 
			OmsSavedCartLineItemId int, SKU nvarchar(max), RowId int,ParentOmsSavedCartLineItemId INT 
		);
	
		MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING @TBL_SavecartLineitems SOURCE
		ON 1 = 0
		WHEN NOT MATCHED
			  THEN INSERT(ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  VALUES( NULL, @OmsSavedCartId, Source.SKU, Source.Quantity,CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE OrderLineItemRelationshipTypeID
																		 END, 
					 Source.CustomText, Source.CartAddOnDetails, Source.Sequence, SOURCE.OmsOrderId, SOURCE.AutoAddon, @UserId, @GetDate, @UserId, @GetDate )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
		INTO @Tbl_SAvecartIds;

		--IF EXISTS ( SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails is not null )
		--BEGIN
			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SAvecartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_SavecartLineitems TSCLI ON TSCI.SKU = TSCLI.SKU AND TSCLI.RowID = TSCLI.RowID
			CROSS APPLY dbo.split ( ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
		--END

        MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING ( SELECT b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
																		CASE
																		WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
																		ELSE OrderLineItemRelationshipTypeID
																		END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon, @UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate,a.RowId
			   FROM @TBL_bundleAddonRows AS a
					INNER JOIN
					@Tbl_SAvecartIds AS b
					ON(a.RowId = b.RowId)
			   WHERE a.SKU IS NOT NULL AND 
					 a.SKU <> '') SOURCE
		ON 1 = 0
		WHEN NOT MATCHED
			  THEN INSERT ( ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, [Sequence], OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )

			  VALUES (SOURCE.OmsSavedCartLineItemId,SOURCE.OmsSavedCartId,SOURCE.SKU,SOURCE.Quantity,SOURCE.OrderLineItemRelationshipTypeID , SOURCE.CustomText,
			  SOURCE.CartAddOnDetails,SOURCE.SequenceId,SOURCE.OmsOrderId,SOURCE.AutoAddon,SOURCE.CreatedBy,SOURCE.CREATEDDATE,SOURCE.ModifiedBy, SOURCE.ModifiedDate
			  
			  )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
			   INTO @Tbl_SAvecartIds;
			   
		--IF EXISTS ( SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails IS NOT NULL )
		--BEGIN
			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SAvecartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_bundleAddonRows BAR ON ( TSCI.SKU = BAR.SKU AND BAR.RowID = TSCI.RowID )
			INNER JOIN @TBL_SavecartLineitems TSCLI ON (BAR.SKU = TSCLI.SKU AND BAR.RowID = TSCLI.RowID )
			CROSS APPLY dbo.split ( TSCLI.ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
		--END
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM @TBL_SavecartLineitems
		--	WHERE GroupProductIds IS NOT NULL OR 
		--		  ConfigurableProductIds IS NOT NULL
		--)
		--BEGIN
		 --SELECT * FROM @Tbl_SAvecartIds
		 --SELECT * FROM @TBL_bundleAddonRows
		 --SELECT * FROM @TBL_SavecartLineitems
			DECLARE @TBL_SaveCartConfigProduct TABLE (OmsSavedCartLineItemId INT, SKU VARCHAR(2000),RowId INT, PersonalisedAttribute NVARCHAr(max))
			    INSERT @TBL_SaveCartConfigProduct    
			    SELECT DISTINCT    ZOSCL.OmsSavedCartLineItemId   ,ZOSCL.SKU 
				,  ZOSCL.RowId , (SELECT TOP 1 PersonalisedAttribute FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID )  PersonalisedAttribute
				FROM @Tbl_SAvecartIds AS ZOSCL
				LEFT JOIN @TBL_bundleAddonRows AS TBBR ON (ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId  )
				WHERE ( EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
				OR   EXISTS (SELECT TOP 1 1 FROM @TBL_bundleAddonRows TRT WHERE SKU <> ''  AND IsFromAddon <> 1  AND TRT.RowID = ZOSCl.RowID   ) )
				AND ((ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId) OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_bundleAddonRows RTR WHERE SKU <> '' AND IsFromAddon <> 1   AND RTR.RowID = ZOSCl.RowID) 
				
				)
				
					
		INSERT INTO ZnodeOmsPersonalizeCartItem( OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT DISTINCT 
			   b.OmsSavedCartLineItemId 
			  , SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS Keyi, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Value, @UserId, @GetDate, @UserId, @GetDate
			   FROM @Tbl_SAvecartIds m  
			   LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			   CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			   WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			   ;
        
		
	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItem @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItem', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_InsertUpdateSearchProfile')
	drop proc Znode_InsertUpdateSearchProfile
go
CREATE  PROCEDURE [dbo].[Znode_InsertUpdateSearchProfile]
(   @SearchProfileId       int,
    @ProfileName           nvarchar(200),
	@SearchQueryTypeId     int,
	@SearchSubQueryTypeId  int,
    @SearchProfileFeatureList SearchProfileFeatureList readonly ,
    @SearchProfileAttributeList SearchProfileAttributeList readonly ,
    @UserId                INT,
	@PublishCatalogId      int,
	@Operator			   nvarchar(20),	
	@IsDefault             bit=0   
	--@SearchProfileFieldValue  SearchProfileFieldValueFactor  readonly
	 )
AS 
   /* 
    Summary: This Procedure is used to save and edit the quote line item      
    Unit Testing   
    Exec Znode_InsertUpdateQuoteLineItem 
	Unit Testing

	 GO 
	declare @p7 dbo.SearchProfileFetureList
	insert into @p7 values(N'0',1)

	declare @p8 dbo.SearchProfileAttributeList
	insert into @p8 values(N'ProductSpecification',0,0,1)
	insert into @p8 values(N'ShortDescription',0,0,3)
	insert into @p8 values(N'ProductName',0,0,2)
	insert into @p8 values(N'FeatureDescription',0,0,4)
	insert into @p8 values(N'SKU',0,0,5)

	exec sp_executesql N'Znode_InsertUpdateSearchProfile  @SearchProfileId,@ProfileName,@SearchQueryTypeId,@SearchSubQueryTypeId,@SearchProfileFeatureList,@SearchProfileAttributeList,@UserId,@PublishCatalogId,@Operator,@IsDefault',N'@SearchProfileId int,@Prof
ileName nvarchar(17),@SearchQueryTypeId int,@SearchSubQueryTypeId int,@SearchProfileFeatureList [dbo].[SearchProfileFetureList] READONLY,@SearchProfileAttributeList [dbo].[SearchProfileAttributeList] READONLY,@UserId int,@PublishCatalogId int,@Operator nva
rchar(2),@IsDefault bit',@SearchProfileId=0,@ProfileName=N'FineFoodsProfile1',@SearchQueryTypeId=2,@SearchSubQueryTypeId=0,@SearchProfileFeatureList=@p7,@SearchProfileAttributeList=@p8,@UserId=0,@PublishCatalogId=3,@Operator=N'OR',@IsDefault=0
   
	*/
	   BEGIN
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate(),@PublishCatalogSearchProfileId int ,@ReturnMessage  NVARCHAR(max)= ''
  
         BEGIN TRAN A;
         BEGIN TRY


	


		  If Isnull(@SearchProfileId,0)=0  
		  Begin
			IF EXISTS (SELECT TOP 1 1 from ZnodeSearchProfile ZSP WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile PCP WHERE PCP.PublishCatalogId =@PublishCatalogId AND PCP.SearchProfileId =ZSP.SearchProfileId   ) AND ProfileName = @ProfileName  )
			BEGIN 
				SELECT @SearchProfileId AS ID,'ProfileName Already Exists' As MessageDetails,CAST(0 AS BIT) AS Status;   	  
				Return ; 
			END 
			INSERT INTO [dbo].[ZnodeSearchProfile] ([ProfileName],[SearchQueryTypeId],[SearchSubQueryTypeId],[Operator],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
			Select @ProfileName,@SearchQueryTypeId,@SearchSubQueryTypeId,@Operator,@UserId,@GetDate,@UserId,@GetDate
			Set @SearchProfileId=SCOPE_IDENTITY()
		  End
		  else 
		  Begin
			IF EXISTS (SELECT TOP 1 1  FROM [ZnodeSearchProfile] ZSP WHERE [ProfileName] = @ProfileName AND 
			EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile PCP WHERE PCP.PublishCatalogId =@PublishCatalogId AND PCP.SearchProfileId =ZSP.SearchProfileId   ) AND 
			 ZSP.SearchProfileId <>  Isnull(@SearchProfileId,0)  )
			BEGIN 
				SELECT @SearchProfileId AS ID,'ProfileName Already Exists' As MessageDetails,CAST(0 AS BIT) AS Status;   	  
				Return ; 
			END 

		    Update a
			Set a.[ProfileName]=@ProfileName,
			a.SearchQueryTypeId=@SearchQueryTypeId,
			a.SearchSubQueryTypeId=@SearchSubQueryTypeId,
			a.Operator = @Operator,
			a.ModifiedBy=@UserId,
			a.ModifiedDate=@GetDate
			from [dbo].[ZnodeSearchProfile] a
			Where SearchProfileId=@SearchProfileId
		    
		  End 

		  delete f
		  from ZnodeSearchProfileAttributeMapping f
		  Where SearchProfileId=@SearchProfileId
		  and not exists(Select 1 from @SearchProfileAttributeList d
		  where f.AttributeCode=d.AttributeCode )
		  AND f.IsFacets = 0

		  INSERT INTO [dbo].ZnodeSearchProfileAttributeMapping([SearchProfileId],[AttributeCode],[IsFacets],[IsUseInSearch],[BoostValue],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
		  Select @SearchProfileId,[AttributeCode],[IsFacets],[IsUseInSearch],[BoostValue],@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
		   from @SearchProfileAttributeList d
		  where  not exists(Select 1 from ZnodeSearchProfileAttributeMapping f
		  where f.AttributeCode=d.AttributeCode 
		  and f.SearchProfileId=@SearchProfileId)

		  Update f
		  Set f.[IsFacets]=d.[IsFacets],f.[IsUseInSearch]=d.[IsUseInSearch],
		  f.[BoostValue]=d.[BoostValue]
		  From [dbo].ZnodeSearchProfileAttributeMapping f
		  inner join @SearchProfileAttributeList d
		  on f.AttributeCode=d.AttributeCode
		   and f.SearchProfileId=@SearchProfileId

		   delete f
		  from [ZnodeSearchProfileFeatureMapping] f
		  Where SearchProfileId=@SearchProfileId
		  and not exists(Select 1 from @SearchProfileFeatureList d
		  where f.SearchFeatureId=d.SearchProfileFeatureId )

		  INSERT INTO [dbo].[ZnodeSearchProfileFeatureMapping]([SearchProfileId],SearchFeatureId,[SearchFeatureValue],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
		  Select @SearchProfileId,d.SearchProfileFeatureId,[SearchFeatureValue]
		  ,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
		   from @SearchProfileFeatureList d
		  where  not exists(Select 1 from [ZnodeSearchProfileFeatureMapping] f
		  where f.SearchFeatureId=d.SearchProfileFeatureId 
		  and f.SearchProfileId=@SearchProfileId)

		  Update f
		  Set f.[SearchFeatureValue]=d.SearchFeatureValue,
		  f.ModifiedBy=@UserId,
		  f.ModifiedDate=@GetDate
		  From [dbo].[ZnodeSearchProfileFeatureMapping] f
		  inner join @SearchProfileFeatureList d
		  on f.SearchFeatureId=d.SearchProfileFeatureId  and f.SearchProfileId=@SearchProfileId
          
		   Select @PublishCatalogSearchProfileId=PublishCatalogSearchProfileId
		   From  [dbo].[ZnodePublishCatalogSearchProfile]
		   Where [PublishCatalogId]=@PublishCatalogId and  SearchProfileId = @SearchProfileId 


		   If @IsDefault=1
		      update [ZnodePublishCatalogSearchProfile]
			  set [IsDefault]=@IsDefault,
			  ModifiedBy=@UserId,
		      ModifiedDate=@GetDate
			  From  [ZnodePublishCatalogSearchProfile]
			  Where PublishCatalogSearchProfileId!=@PublishCatalogSearchProfileId
			  and [PublishCatalogId]=@PublishCatalogId

		   If Isnull(@PublishCatalogSearchProfileId,0)>0
		   Begin
		      update [ZnodePublishCatalogSearchProfile]
			  set [IsDefault]=@IsDefault,
			  ModifiedBy=@UserId,
		      ModifiedDate=@GetDate
			  From  [ZnodePublishCatalogSearchProfile]
			  Where PublishCatalogSearchProfileId=@PublishCatalogSearchProfileId
		   End
		   Else
		   INSERT INTO [dbo].[ZnodePublishCatalogSearchProfile] ([PublishCatalogId],[SearchProfileId],[IsDefault],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
		   Select @PublishCatalogId,@SearchProfileId,@IsDefault,@UserId,@GetDate,@UserId,@GetDate

		   --DELETE VF
		   --FROM ZnodeSearchProfileFieldValueFactor VF
		   --WHERE VF.SearchProfileId = @SearchProfileId
		   --AND NOT EXISTS (SELECT 1 FROM @SearchProfileFieldValue SFP WHERE SFP.FieldName = VF.FieldName)


		   --INSERT INTO ZnodeSearchProfileFieldValueFactor (SearchProfileId,FieldName,FieldValueFactor,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		   --SELECT @SearchProfileId,SPF.FieldName,SPF.FieldValueFactor,@UserId,@GetDate,@UserId,@GetDate
		   --FROM @SearchProfileFieldValue SPF
		   --WHERE NOT EXISTS (SELECT 1 FROM ZnodeSearchProfileFieldValueFactor pf WHERE pf.FieldName = SPF.FieldName AND pf.SearchProfileId = @SearchProfileId)

		   --UPDATE VF
		   --SET FieldValueFactor = SPF.FieldValueFactor
		   --FROM ZnodeSearchProfileFieldValueFactor VF
		   --INNER JOIN @SearchProfileFieldValue SPF ON (SPF.FieldName = VF.FieldName) AND VF.SearchProfileId = @SearchProfileId


		  SELECT @SearchProfileId AS ID,'Successfull' MessageDetails,CAST(1 AS BIT) AS Status;   			
			 COMMIT TRAN A;
         END TRY
         BEGIN CATCH
        
		    -- SET @Status = 0;
		  ----   DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 ----@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateQuoteLineItem @CartLineItemXML = '+CAST(@CartLineItemXML AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,'UnSuccessfull' MessageDetails,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
    --         EXEC Znode_InsertProcedureErrorLog
				--@ProcedureName = 'Znode_InsertUpdateQuoteLineItem',
				--@ErrorInProcedure = @Error_procedure,
				--@ErrorMessage = @ErrorMessage,
				--@ErrorLine = @ErrorLine,
				--@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ManageCategoryList_XML')
	drop proc Znode_ManageCategoryList_XML
go
--
CREATE PROCEDURE [dbo].[Znode_ManageCategoryList_XML](
      @WhereClause      XML ,
      @Rows             INT            = 100 ,
      @PageNo           INT            = 1 ,
      @Order_BY         NVARCHAR(1000) = '' ,
      @LocaleId         INT            = 1 ,
      @ProfileCatalogId INT            = 0)
AS
    /*
	   Summary: This Procedure is used to get all category list 
				The Result displays CategortName with PimCategoryId where CategoryName and CategoryImage are pivoted values
	   Unit Testing 	  
	   EXEC Znode_ManageCategoryList_XML '' ,@LocaleId= 1
	
    */
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @TBL_PimcategoryDetails TABLE (PimCategoryId INT,CountId INT,RowId INT);
             DECLARE @TBL_CategoryIds TABLE (PimCategoryId INT ,ParentPimcategoryId INT);
             DECLARE @TBL_AttributeValue TABLE (PimCategoryAttributeValueId INT,PimCategoryId INT,CategoryValue NVARCHAR(MAX), AttributeCode VARCHAR(300), PimAttributeId  INT);
             DECLARE @TBL_FamilyDetails TABLE (PimCategoryId INT , PimAttributeFamilyId INT , AttributeFamilyName  NVARCHAR(MAX));
             DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeId INT ,AttributeDefaultValueCode VARCHAR(600) , IsEditable BIT ,AttributeDefaultValue NVARCHAR(MAX),DisplayOrder int);
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
             DECLARE @TBL_ProfileCatalogCategory TABLE (ProfileCatalogId INT ,PimCategoryId INT);
             DECLARE @PimCategoryIds VARCHAR(MAX)= '' , @PimAttributeIds VARCHAR(MAX),@CategoryXML NVARCHAr(max);
			 DECLARE @RowsCount INT 

		 IF @ProfileCatalogId > 0
			 BEGIN
			 INSERT INTO @TBL_ProfileCatalogCategory (ProfileCatalogId , PimCategoryId)
			 SELECT ZPC.ProfileCatalogId , PimCategoryId
			 FROM ZnodePimCatalogCategory AS ZCC INNER JOIN ZnodeProfileCatalog AS ZPC ON ( ZPC.PimCatalogId = ZCC.PimCatalogId )
			 WHERE ZPC.ProfileCatalogId = @ProfileCatalogId AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeProfileCatalogCategory AS ZPCC WHERE ZPCC.PimCatalogCategoryId = ZCC.PimCatalogCategoryId);
                     
			 SET @PimCategoryIds = SUBSTRING( ( SELECT DISTINCT ','+CAST(PimCategoryId AS VARCHAR(20)) FROM @TBL_ProfileCatalogCategory FOR XML PATH('') ) , 2 , 4000);
			 END;

			 
			 --SELECT * FROM @TBL_PimcategoryDetails

              INSERT INTO @TBL_PimcategoryDetails ( PimCategoryId , CountId , RowId)
             EXEC Znode_GetCategoryIdForPaging @WhereClause , @Rows , @PageNo , @Order_BY , @RowsCount  , @LocaleId , '' , @PimCategoryIds , 1; 


             SET @PimCategoryIds =  SUBSTRING( ( SELECT ','+ CAST(PimCategoryId AS VARCHAR(100)) FROM @TBL_PimcategoryDetails FOR XML PATH('')) , 2 , 4000);
             SET @PimAttributeIds = SUBSTRING( ( SELECT ','+ CAST(PimAttributeId AS VARCHAR(100)) FROM [dbo].[Fn_GetCategoryGridAttributeDetails]() FOR XML PATH('')) , 2 , 4000);

			 INSERT INTO @TBL_AttributeValue ( PimCategoryAttributeValueId , PimCategoryId , CategoryValue , AttributeCode , PimAttributeId)
             EXEC [dbo].[Znode_GetCategoryAttributeValue] @PimCategoryIds , @PimAttributeIds , @LocaleId;

             INSERT INTO @TBL_FamilyDetails ( PimAttributeFamilyId , AttributeFamilyName , PimCategoryId)
             EXEC Znode_GetCategoryFamilyDetails @PimCategoryIds , @LocaleId;
             
		     INSERT INTO @TBL_DefaultAttributeValue ( PimAttributeId , AttributeDefaultValueCode , IsEditable , AttributeDefaultValue,DisplayOrder)
             EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @PimAttributeIds , @LocaleId;
             
			 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails ),0)
			 
			 INSERT INTO @TBL_MediaAttribute (Id,PimAttributeId,AttributeCode )
			 SELECT Id,PimAttributeId,AttributeCode 
			 FROM [dbo].[Fn_GetProductMediaAttributeId]()
			 		
		     ;WITH Cte_DefaultCategoryValue
              AS (SELECT PimCategoryId , PimAttributeId ,SUBSTRING( ( SELECT ','+AttributeDefaultValue FROM @TBL_DefaultAttributeValue AS TBDAV WHERE TBDAV.PimAttributeId = TBAV.PimAttributeId 
			     AND EXISTS ( SELECT TOP 1 1 FROM dbo.Split ( TBAV.CategoryValue , ',') AS SP WHERE sp.Item = TBDAV.AttributeDefaultValueCode)
                 FOR XML PATH('')) , 2 , 4000) AS AttributeValue FROM @TBL_AttributeValue AS TBAV							 
				 WHERE EXISTS ( SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryDefaultValueAttribute]() AS SP WHERE SP.PimAttributeId = TBAV.PimAttributeId))

             UPDATE TBAV SET TBAV.CategoryValue = CTDCV.AttributeValue
             FROM @TBL_AttributeValue TBAV 
			 INNER JOIN Cte_DefaultCategoryValue CTDCV ON ( CTDCV.PimCategoryId = TBAV.PimCategoryId AND CTDCV.PimAttributeId = TBAV.PimAttributeId );
                   
		    UPDATE  TBAV
			SET CategoryValue  = SUBSTRING ((SELECT ','+[dbo].FN_GetMediaThumbnailMediaPath(zm.Path) FROM ZnodeMedia ZM  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(TBAV.CategoryValue ,',') SP  WHERE SP.Item = CAST(ZM.MediaId AS VARCHAR(50)) ) FOR XML PATH('')),2,4000)
			FROM @TBL_AttributeValue TBAV 
			INNER JOIN @TBL_MediaAttribute TBMA ON (TBMA.PimAttributeId = TBAV.PimAttributeId)	   
			
			INSERT INTO @TBL_AttributeValue ( PimCategoryId , CategoryValue , AttributeCode )

            SELECT PimCategoryId,AttributeFamilyName , 'AttributeFamily'
			FROM @TBL_FamilyDetails 				                           
		    

			INSERT INTO @TBL_AttributeValue             ( PimCategoryId , CategoryValue , AttributeCode     )
			SELECT a.PimCategoryId  ,
			CASE WHEN IsCategoryPublish = 1 THEN   'Published' WHEN IsCategoryPublish = 0 
			THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus'
			FROM @TBL_PimcategoryDetails a 
			INNER JOIN ZnodePimCategory b ON (b.PimCategoryId = a.PimCategoryId)

			SET @CategoryXML =  '<MainCategory>'+ STUFF( (  SELECT '<Category>'+'<PimCategoryId>'+CAST(TBAD.PimCategoryId AS VARCHAR(50))+'</PimCategoryId>'+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST((SELECT ''+TBADI.CategoryValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeValue TBADI      
															 WHERE TBADI.PimCategoryId = TBAD.PimCategoryId 
															 ORDER BY TBADI.PimCategoryId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Category>'	   

			FROM @TBL_AttributeValue TBAD
			INNER JOIN @TBL_PimcategoryDetails TBPI ON (TBAD.PimCategoryId = TBPI.PimCategoryId )
			GROUP BY TBAD.PimCategoryId,TBPI.RowId 
			ORDER BY TBPI.RowId 
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainCategory>'


			SELECT  @CategoryXML  CategoryXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1 
			 AND IsCategory = 1  
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'
		    SELECT ISNULL(@RowsCount,0) AS RowsCount;



			
			 --SELECT  PIV.PimCategoryId , PIV.CategoryName , ZPC.IsActive AS [Status] , dbo.FN_GetMediaThumbnailMediaPath ( Zm.Path ) AS CategoryImage , @LocaleId AS LocaleId , ISNULL(TBFD.AttributeFamilyName , '') AS AttributeFamilyName
             
			 --FROM @TBL_PimcategoryDetails AS TBCD 
			 --INNER JOIN ( SELECT PimCategoryId , CategoryValue , AttributeCode  FROM @TBL_AttributeValue) AS TBAV PIVOT(MAX(CategoryValue)                                                             
			 --FOR AttributeCode IN([CategoryName] , [CategoryImage])) PIV ON ( PIV.PimCategoryId = TBCD.PimCategoryId )
			 --LEFT JOIN @TBL_FamilyDetails AS TBFD ON ( TBFD.PimCategoryId = PIV.PimCategoryId )
			 --LEFT JOIN ZnodeMedia AS ZM ON ( CAST(ZM.MediaId AS VARCHAR(50)) = PIV.[CategoryImage] )
			 --LEFT JOIN ZnodePimCategory AS ZPC ON ( ZPC.PimCategoryId = PIV.PimCategoryId ) 
			 --ORDER BY RowId;
             
             --SET @RowsCount = ISNULL( ( SELECT TOP 1 CountId FROM @TBL_PimcategoryDetails) , 0);
         END TRY
         BEGIN CATCH
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageCategoryList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageCategoryList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ManageProductAddonList')
	drop proc Znode_ManageProductAddonList
go
CREATE PROCEDURE [dbo].[Znode_ManageProductAddonList]
(    @PimProductId INT,
     @LocaleId     INT = 1)
AS  
   /*  Summary :- This Procedure is used to addon details of the product  
     Unit Testing
     EXEC Znode_ManageProductAddonList 61,1
    */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
             DECLARE @TBL_FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             DECLARE @TBL_AddOnGroupDetail TABLE
             (PimAddOnProductId INT,
              PimProductId      INT,
              PimAddonGroupId   INT,
              AddonGroupName    NVARCHAR(MAX),
              RequiredType      VARCHAR(50),
              DisplayType       NVARCHAR(400),
              DisplayOrder      INT
             );
             
			 DECLARE @PimProductIds TransferId, --VARCHAR(MAX), 
				     @PimAttributeId VARCHAR(MAX);

             DECLARE @TBL_AddOnGroupRelatedProductIds TABLE
             (RelatedProductId        INT,
              PimAddonGroupId         INT,
              PimProductId            INT,
              PimAddOnProductDetailId INT,
			  AddOnDisplayOrder INT,
			  IsDefault BIT
             );


             WITH Cte_AddonGroupListBothLocale
                  AS (SELECT ZPAOP.PimAddOnProductId,
                             PimProductId,
                             ZPAOP.PimAddonGroupId,
                             ZPAGL.AddonGroupName,
                             ZPAOP.RequiredType,
                             ZPAG.DisplayType,
                             ZPAOP.DisplayOrder,
                             ZPAGL.LocaleId
                      FROM ZnodePimAddOnProduct ZPAOP
                           LEFT JOIN ZnodePimAddonGroup ZPAG ON(ZPAG.PimAddonGroupId = ZPAOp.PimAddonGroupId)
                           LEFT JOIN ZnodePimAddonGroupLocale ZPAGL ON(ZPAGL.PimAddonGroupId = ZPAG.PimAddonGroupId)
                      WHERE PimProductId = @PimProductId
                            AND ZPAGL.LocaleId IN(@DefaultLocaleId, @LocaleId)),
                  Cte_AddOnGroupListFirstLocale
                  AS (SELECT PimAddOnProductId,
                             PimProductId,
                             PimAddonGroupId,
                             AddonGroupName,
                             RequiredType,
                             DisplayType,
                             DisplayOrder
                      FROM Cte_AddonGroupListBothLocale CTAGLBL
                      WHERE CTAGLBL.LocaleId = @LocaleId),
                  Cte_AddonGroupListDefaultLocale
                  AS (
                  SELECT PimAddOnProductId,
                         PimProductId,
                         PimAddonGroupId,
                         AddonGroupName,
                         RequiredType,
                         DisplayType,
                         DisplayOrder
                  FROM Cte_AddOnGroupListFirstLocale
                  UNION ALL
                  SELECT PimAddOnProductId,
                         PimProductId,
                         PimAddonGroupId,
                         AddonGroupName,
                         RequiredType,
                         DisplayType,
                         DisplayOrder
                  FROM Cte_AddonGroupListBothLocale CTAGLBL
                  WHERE CTAGLBL.LocaleId = @DefaultLocaleId
                        AND NOT EXISTS
                  (
                      SELECT TOP 1 1
                      FROM Cte_AddOnGroupListFirstLocale CTAOGLFL
                      WHERE CTAOGLFL.PimAddonGroupId = CTAGLBL.PimAddonGroupId
                  ))
                  INSERT INTO @TBL_AddOnGroupDetail
                  (PimAddOnProductId,
                   PimProductId,
                   PimAddonGroupId,
                   AddonGroupName,
                   RequiredType,
                   DisplayType,
                   DisplayOrder
                  )
                         SELECT PimAddOnProductId,
                                PimProductId,
                                PimAddonGroupId,
                                AddonGroupName,
                                RequiredType,
                                DisplayType,
                                DisplayOrder
                         FROM Cte_AddonGroupListDefaultLocale;
             INSERT INTO @TBL_AddOnGroupRelatedProductIds
             (RelatedProductId,
              PimAddonGroupId,
              PimProductId,
              PimAddOnProductDetailId,
			  AddOnDisplayOrder,
			  IsDefault
             )
                    SELECT ZPAP.PimProductId RelatedProductId,
                           ZPAP.PimAddonGroupId,
                           PimChildProductId PimProductId,
                           PimAddOnProductDetailId,
						   ZPAPD.DisplayOrder AddOnDisplayOrder, 
						  ZPAPD.IsDefault
                    FROM  ZnodePimAddOnProduct ZPAP  
                         INNER JOIN ZnodePimAddOnProductDetail ZPAPD ON(ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId)
                    WHERE ZPAP.PimProductId = @PimProductId;
             --SET @PimProductIds = SUBSTRING(
             --                              (
             --                                  SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                  FROM @TBL_AddOnGroupRelatedProductIds
             --                                  FOR XML PATH('')
             --                              ), 2, 4000);

			 INSERT INTO @PimProductIds ( Id )
			 SELECT DISTINCT PimProductId FROM @TBL_AddOnGroupRelatedProductIds

             SET @PimAttributeId = [dbo].[Fn_GetProductGridDefaultAttributeId]();
             INSERT INTO @TBL_AttributeDefaultValue
             (PimAttributeId,
              AttributeDefaultValueCode,
              IsEditable,
              AttributeDefaultValue,
			  DisplayOrder
             )
             EXEC Znode_GetAttributeDefaultValueLocale
                  @PimAttributeId,
                  @LocaleId;
             INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC [Znode_GetProductsAttributeValue]
                  @PimProductIds,
                  @PimAttributeId,
                  @LocaleId;
             WITH Cte_UpdateDefaultAttributeValue
                  AS (SELECT PimProductId,
                             AttributeCode,
                             AttributeValue,
                             SUBSTRING(
                                      (
                                          SELECT ','+TBADV.AttributeDefaultValue
                                          FROM @TBL_AttributeDefaultValue AS TBADV
                                               INNER JOIN ZnodePimAttribute AS TBAC ON(TBADV.PimAttributeId = TBAC.PimAttributeId)
                                          WHERE TBAC.AttributeCode = TBAD.AttributeCode
                                                AND EXISTS
                                          (
                                              SELECT TOP 1 1
                                              FROM dbo.split(TBAD.AttributeValue, ',') AS SP
                                              WHERE Sp.item = TBADV.AttributeDefaultValueCode
                                          )
                                          FOR XML PATH('')
                                      ), 2, 4000) AS AttributeDefaultValue
                      FROM @TBL_AttributeDetails AS TBAD)
                  UPDATE TBAD
                    SET
                        AttributeValue = CTUDAV.AttributeDefaultValue
                  FROM @TBL_AttributeDetails TBAD
                       INNER JOIN Cte_UpdateDefaultAttributeValue CTUDAV ON(CTUDAV.PimProductId = TBAD.PimProductId
                                                                            AND CTUDAV.AttributeCode = TBAD.AttributeCode)
                  WHERE AttributeDefaultValue IS NOT NULL;
             INSERT INTO @TBL_FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             UPDATE TBFD
               SET
                   FamilyName = ZPFL.AttributeFamilyName
             FROM @TBL_FamilyDetails TBFD
                  INNER JOIN ZnodePimFamilyLocale ZPFL ON(TBFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId
                                                          AND LocaleId = @LocaleId);
             UPDATE TBFD
               SET
                   FamilyName = ZPFL.AttributeFamilyName
             FROM @TBL_FamilyDetails TBFD
                  INNER JOIN ZnodePimFamilyLocale ZPFL ON(TBFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId
                                                          AND LocaleId = @DefaultLocaleId)
             WHERE TBFD.FamilyName IS NULL
                   OR TBFD.FamilyName = '';
             SELECT TBAGRP.PimProductId ProductId,
                    [ProductName],
                    ProductType,
                    ISNULL(TBFD.FamilyName, '') AttributeFamily,
                    [SKU],
                    [Price],
                    [Quantity],
                    [IsActive],
                    RelatedProductId,
                    Assortment,
                    TBAGD.PimAddonGroupId,
                    AddonGroupName,
                    DisplayOrder,
                    DisplayType,
                    RequiredType,
                    PimAddOnProductId,
                    PimAddOnProductDetailId,
					AddOnDisplayOrder,
					IsDefault
             FROM @TBL_AddOnGroupDetail TBAGD
                  LEFT JOIN @TBL_AddOnGroupRelatedProductIds TBAGRP ON(TBAGRP.PimAddonGroupId = TBAGD.PimAddonGroupId
                                                                       AND TBAGRP.RelatedProductId = TBAGD.PimProductId)
                  LEFT JOIN @TBL_FamilyDetails TBFD ON(TBFD.PimProductId = TBAGRP.PimProductId)
                  LEFT JOIN
             (
                 SELECT PimProductId,
                        AttributeValue,
                        AttributeCode
                 FROM @TBL_AttributeDetails
             ) TBAD PIVOT(MAX(AttributeValue) FOR AttributeCode IN([ProductName],
                                                                   [SKU],
                                                                   [Price],
                                                                   [Quantity],
                                                                   [IsActive],
                                                                   [ProductType],
                                                                   [ProductImage],
                                                                   [Assortment])) PIV ON(PIV.PimProductId = TBAGRP.PimProductId)
		    ORDER BY AddOnDisplayOrder ASC
			;
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductAddonList @PimProductId = '+CAST(@PimProductId AS VARCHAR(max))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductAddonList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ManageProductList_XML')
	drop proc Znode_ManageProductList_XML
go
CREATE  PROCEDURE [dbo].[Znode_ManageProductList_XML]
(   @WhereClause						 XML,
    @Rows								 INT           = 100,
    @PageNo								 INT           = 1,
    @Order_BY			 VARCHAR(1000) = '',
    @LocaleId			 INT           = 1,
    @PimProductId		 VARCHAR(2000) = 0,
    @IsProductNotIn	 BIT           = 0,
	@IsCallForAttribute BIT		   = 0,
	@AttributeCode      VARCHAR(max ) = '' ,
	@IsDebug            Bit		   = 0 )
AS
    
/*
		  Summary:-   This Procedure is used for get product List  
				    Procedure will pivot verticle table(ZnodePimattributeValues) into horizontal table with columns 
				    ProductId,ProductName,ProductType,AttributeFamily,SKU,Price,Quantity,IsActive,ImagePath,Assortment,LocaleId,DisplayOrder
        
		  Unit Testing
		  
exec Znode_ManageProductList_XML @WhereClause=N'',@Rows=50,@PageNo=1,@Order_By=N'',@LocaleId=1,@PimProductId=N'',@IsProductNotIn=1,@IsCallForAttribute=0,@AttributeCode=''
          select * from ZnodeAttributeType  WHERE AttributeValue LIKE '%&%'
		  UPDATE VieW_lOADMANAGEpRODUCT SET  AttributeValue = 'A & B'  WHERE AttributeValue LIKE '% and %' AND PimProductId = 158
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @PimProductIds TransferId, --VARCHAR(MAX), 
					 @FirstWhereClause NVARCHAR(MAX)= '', 
					 @SQL NVARCHAR(MAX)= '' ,
					 @OutPimProductIds VARCHAR(max),
					 @ProductXML NVARCHAR(max) ;

             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
					 ,@RowsCount INT =0 ;
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
			  ,PimAttributedefaultValueId INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			   DECLARE @TBL_AttributeDetailsLocale AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			 DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))
			
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )

			 DECLARE @TBL_ProductIds TABLE 
			 (
			  PimProductId INT,
			  ModifiedDate DATETIME  
			 )

			 DECLARE @FamilyDetails TABLE
             (
			  PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(Max)
             );
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
          		
             IF EXISTS ( SELECT TOP 1 1 FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
			 WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights') and @IsCallForAttribute=1
                 BEGIN
                DECLARE @AttributeCodeValue TABLE (AttributeValue NVARCHAr(max),AttributeCode NVARCHAR(max))

				INSERT INTO @AttributeCodeValue(AttributeValue,AttributeCode)
				SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
						 ,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeCode
				FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
				WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights'
				
				SET @SQL =   
				           ';WIth Cte_DefaultValue AS (
										  SELECT AttributeDefaultValueCode , ZPDF.PimAttributeId ,FNPA.AttributeCode
										  FROM ZnodePImAttributeDefaultValue ZPDF
										  INNER JOIN [dbo].[Fn_GetProductDefaultFilterAttributes] () FNPA ON ( FNPA.PimAttributeId = ZPDF.PimAttributeId) 
										)
										, Cte_productIds AS 
										(
										  SELECT a.PimProductId, c.AttributeCode , CTDV.AttributeDefaultValueCode AttributeValue,b.ModifiedDate 
										  FROM  ZnodePimAttributeValue a
										  LEFT JOIN ZnodePimAttribute c ON(c.PimAttributeId = a.PimAttributeId)
										  LEFT JOIN ZnodePimAttributeValueLocale b ON(b.PimAttributeValueId = a.PimAttributeValueId)  
										  INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode 
										  AND EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,'','') SP WHERE SP.Item = CTDV.AttributeDefaultValueCode) )
										  Union all 
										  
											SELECT a.PimProductId,c.AttributeCode,ZPADV.AttributeDefaultValueCode AttributeValue ,a.ModifiedDate 
											FROM ZnodePimProductAttributeDefaultValue ZPPADV
											INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
											LEFT JOIN ZnodePimAttributeValue a ON (a.PimAttributeValueId = ZPPADV.PimAttributeValueId )
											LEFT JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
											INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode )
										)										
										SELECT PimProductId ,ModifiedDate
										FROM Cte_productIds WHERE  AttributeCode '+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+' AND 
										AttributeValue '+(SELECT TOP 1 AttributeValue  FROM @AttributeCodeValue )+' GROUP BY PimProductId,ModifiedDate Order By ModifiedDate DESC ';

					 SET @Order_BY = CASE WHEN @Order_BY = '' THEN 'ModifiedDate DESC' ELSE @Order_BY END 
					 	
					 SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(max)),'<WhereClauseModel><attributecode>'+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+'</attributecode><attributevalue>'+(SELECT TOP 1 AttributeValue   FROM @AttributeCodeValue )+'</attributevalue></WhereClauseModel>','') AS XML )
					
				     INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					 EXEC (@SQL);

                     INSERT INTO @ProductIdTable( PimProductId )
                     SELECT PimProductId 
					 FROM @TBL_ProductIds

                     INSERT INTO @TransferPimProductId
					 SELECT PimProductId
                     FROM @ProductIdTable
                   
				   			  -- SELECT * FROM @TransferPimProductId
     DELETE FROM @ProductIdTable;
   --  SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(MAX)), @FirstWhereClause, ' 1 = 1') AS XML);
                 END
	            ELSE IF @PimProductId <> ''
			    BEGIN 
		
				 INSERT INTO @TransferPimProductId(id)
				 SELECT Item 
				 FROM dbo.split(@PimProductId,',')
			    END 


	 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 	IF @PimProductId <> ''  OR   @IsCallForAttribute=1 --OR (CAST(@WhereClause AS NVARCHAR(max))= N'' AND @Order_by <> N'' AND @AttributeCode = N'')
		BEGIN 
	 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
					 WHEN @IsProductNotIn = 1 THEN 0 END 
		END 
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsProductNotIn,@TransferPimProductId
	 
	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT Distinct PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
             


  			 INSERT INTO @PimProductIds ( Id  )
			 SELECT id FROM @TBL_MainList

			 DECLARE @TBL_PimProductIds transferId 
			 INSERT INTO @TBL_PimProductIds
			 SELECT id 
             FROM @PimProductIds
			 			 	
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			 INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue_newTesting
                  @TBL_PimProductIds,
                  @PimAttributeIds,
                  @localeId;
			
			UPDATE @TBL_AttributeDetails
			SET AttributeValue = ISNULL(AttributeValue,'')
			WHERE AttributeValue IS NULL 
			 INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             
		 UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
           	
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.ID PimProductId ,CASE WHEN IsProductPublish = 1 THEN   'Published' WHEN IsProductPublish = 0 THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus',NULL
			FROM @PimProductIds a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.ID)

	  INSERT INTO @TBL_AttributeDetailsLocale (PimProductId ,PimAttributeId,AttributeCode )
			SELECT  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			FROM @TBL_AttributeDetails TBLAD 
			GROUP BY  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 

					
	    UPDATE TBLPP 
		SET AttributeValue = CTDD.AttributeValue 
		FROM  @TBL_AttributeDetails CTDD 
		INNER JOIN @TBL_AttributeDetailsLocale TBLPP ON (TBLPP.PimProductId = CTDD.PimProductId AND TBLPP.AttributeCode  = CTDD.AttributeCode)
		WHERE TBLPP.AttributeValue IS NULL 

    	SET @ProductXML =  '<MainProduct>'+ STUFF( (  SELECT '<Product>'+'<PimProductId>'+CAST(TBAD.PimProductId AS VARCHAR(50))+'</PimProductId>'+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeDetailsLocale TBADI      
															 WHERE TBADI.PimProductId = TBAD.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

		FROM @TBL_AttributeDetailsLocale TBAD
		INNER JOIN @TBL_MainList TBPI ON (TBAD.PimProductid = TBPI.id )
		LEFT JOIN @TBL_ProductIds TPT ON TBAD.PimProductId = TPT.PimProductId
		GROUP BY TBAD.pimProductid, TPT.ModifiedDate,TBPI.RowId
		ORDER BY TBPI.RowId 
		FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
			--FOR XML PATH ('MainProduct'))


			SELECT  @ProductXML  ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'

     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END 
		;

             -- find the all locale values 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@IsCallForAttribute='+CAST(@IsCallForAttribute AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

         END CATCH;

     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ManageProductListByAttributes')
	drop proc Znode_ManageProductListByAttributes
go

CREATE PROCEDURE [dbo].[Znode_ManageProductListByAttributes]
(   @WhereClause      XML,
	@PimAttributeIds  VARCHAR(3000) = NULL,
	@Rows             INT           = 100,
	@PageNo           INT           = 0,
	@Order_BY         VARCHAR(1000) = '',
	@LocaleId         INT,
	@PimProductId     VARCHAR(max) = NULL,
	@IsProductNotIn   BIT           = 0,
	@RelatedProductId INT           = 0, 
	@IsDebug		    BIT = 0 
	)
AS
   /*  Summary:-  This Procedure is used for get product List with extra column attribute supllied to the procedure 
     Unit Testing 
     DECLARE @EDE INT = 0 
	 exec Znode_ManageProductListByAttributes @WhereClause='',@PimAttributeIds = '35,81',@Rows = 10,@PageNo=1,@Order_BY = '',@RelatedProductId = 53442,@PimProductId = '',@IsProductNotIn= 0 ,@LocaleId=1 --SELECT @EDE 
	
	*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		  --  SELECT '123112'
             DECLARE @SQL NVARCHAR(MAX), @AttributeCode_filter NVARCHAR(2000), @WhereClauseChanges NVARCHAR(MAX)= '',@OutPimProductIds varchar(max) ;
             SET @WhereClauseChanges = CONVERT(NVARCHAR(MAX), @WhereClause);
             DECLARE @PimAttributeFamilyId INT= Dbo.Fn_GetDefaultValue('PimFamily'), @RowsCount INT, @DefaultLocaleId INT= Dbo.Fn_GetDefaultlocaleId();
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()					 
			
	
			 DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT identity(1,1)
             );
             DECLARE @TBL_PimAttributeId TABLE
             (PimAttributeId INT,
              AttributeCode  VARCHAR(600)
             );
             INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
					
             SET @AttributeCode_filter = ISNULL(CAST((
                                                      SELECT CAST('<WhereClauseModel><attributecode>'+ '  = '+''''+TBPA.AttributeCode+''''+'</attributecode></WhereClauseModel>' AS XML )
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH(''),TYPE
                                                  ) AS NVARCHAR(max)),'');
          
		     SET @WhereClauseChanges = [dbo].[Fn_GetXmlWhereClauseForAttribute](@WhereClauseChanges,@AttributeCode_filter, @LocaleId);
             SET @WhereClause = CONVERT(XML, @WhereClauseChanges);	
	    
		  INSERT INTO @TransferPimProductId
		  SELECT ITEM
		  FROM DBO.SPLIT(@PIMPRODUCTID,',')
		  UNION ALL 
		  SELECT PimProductId 
		  FROM ZnodePimProductTypeAssociation  
		  WHERE PimParentProductId=  @RelatedProductId
		  AND @PIMPRODUCTID = '0'
		
		   DECLARE @AttributeCode NVARCHAR(max)
		   SET @AttributeCode = SUBSTRING ((SELECT ','+AttributeCode FROM [dbo].[Fn_GetProductGridAttributes]() qt WHERE (EXISTS (SELECT TOP 1 1 
				FROM dbo.split(@PimAttributeIds,',') TR WHERE tr.Item = qt.PimAttributeId)  OR AttributeCode = 'ProductType')
		   FOR XML PATH('')  ),2,4000)
		   
		   --EXEC Znode_GetProductIdForPaging
     --             @whereClauseXML = @WhereClause,
     --             @Rows = @Rows,
     --             @PageNo = @PageNo,
     --             @Order_BY = @Order_BY,
     --             @RowsCount = @RowsCount OUT,
     --             @LocaleId = @LocaleId,
     --             @AttributeCode = @AttributeCode,
     --             @PimProductId = @TransferPimProductId,
     --             @IsProductNotIn = @IsProductNotIn,
				 -- @OutProductId = @OutPimProductIds OUT
				 -- ;

 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 1 THEN 0 
	 WHEN @IsProductNotIn = 0 THEN 1  END
     DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE(Id INT , RowId INT )
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList @IsProductNotIn ,@TransferPimProductId

	

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	  
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))
	  --INSERT INTO @TAB 
	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb )OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	
	 END 
	 ELSE 
	 BEGIN
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 

			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 select id
			 from @TBL_MainList
		
             SET @AttributeCode_filter = SUBSTRING(
                                                  (
                                                      SELECT ','+TBPA.AttributeCode
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH('')
                                                  ), 1, 4000);
             --DECLARE @PimProductIds VARCHAR(MAX)= SUBSTRING(
             --                                              (
             --                                                  SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                                  FROM @ProductIdTable
             --                                                  FOR XML PATH('')
             --                                              ), 2, 4000);

			 DECLARE @PimProductIds TransferId

			 INSERT INTO @PimProductIds ( Id )
			 SELECT id FROM @TBL_MainList

			 --DECLARE @TBL_PimProductIds transferId 
			 --INSERT INTO @TBL_PimProductIds
			 --SELECT id 
    --         FROM @PimProductIds
			 			 	

														      		
             DECLARE @DefaultAttributeCode VARCHAR(MAX)= dbo.Fn_GetDefaultValue('AttributeCode');
             
			 INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@DefaultAttributeCode, ',') SP
                        WHERE SP.Item = ZPA.AttributeCode
                    );
			
			INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           'OR_'+AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
             
	
             SET @DefaultAttributeCode = @DefaultAttributeCode + @AttributeCode_filter;
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId                INT,
              AttributeValue              NVARCHAR(MAX),
              AttributeCode               VARCHAR(600),
              PimAttributeId              INT,
              PimProductTypeAssociationId INT,
              DisplayOrder                INT,
              IsNonEditableRow            BIT DEFAULT 0
             );
             DECLARE @TBL_AttributeCode TABLE
             (PimAttributeId INT,
              AttributeCode  VARCHAR(300)
             );
             INSERT INTO @TBL_AttributeCode
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.split(@DefaultAttributeCode, ',') SP
                        WHERE Sp.Item = ZPA.AttributeCode
                    );
             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT
             );
			  
             DECLARE @PimAttributeId VARCHAR(MAX);
             SET @PimAttributeId = SUBSTRING(
                                            (
                                                SELECT ','+CAST(TBAC.PimAttributeId AS VARCHAR(50))
                                                FROM @TBL_AttributeCode TBAC
                                                     INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON(ZPADV.PimAttributeId = TBAC.PimAttributeId)
                                                FOR XML PATH('')
                                            ), 2, 4000);

													
             INSERT INTO @TBL_AttributeDefaultValue
             (
			  PimAttributeId,
              AttributeDefaultValueCode,
              IsEditable,
              AttributeDefaultValue
			  ,DisplayOrder
             )
             EXEC Znode_GetAttributeDefaultValueLocale
                  @PimAttributeId,
                  @LocaleId;


             INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue
                  @PimProductIds,
                  @DefaultAttributeCode,
                  @localeId;

			  INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )

			 SELECT ZPAV.PimProductId ,ZPPAVD.PimAttributeDefaultValueId,'OR_'+ZPA.AttributeCode,ZPA.PimAttributeId
             FROM ZnodePimAttributeValue ZPAV 
			 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
			 INNER JOIN @ProductIdTable TBL ON (TBL.PimProductId = ZPAV.PimProductId )
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAVD ON (ZPPAVD.PimAttributeValueId = ZPAV.PimAttributeValueId  )
			WHERE ZPPAVD.LocaleId = @DefaultLocaleId
			AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@PimAttributeIds,',') SP WHERE Sp.Item = ZPA.PimAttributeId )

             --;WITH Cte_UpdateDefaultAttributeValue
             --     AS (SELECT PimProductId,
             --                AttributeCode,
             --                AttributeValue,
             --                SUBSTRING(
             --                         (
             --                             SELECT ','+TBADV.AttributeDefaultValue
             --                             FROM @TBL_AttributeDefaultValue TBADV
             --                                  INNER JOIN @TBL_AttributeCode TBAC ON(TBADV.PimAttributeId = TBAC.PimAttributeId)
             --                             WHERE TBAC.AttributeCode = TBAD.AttributeCode
             --                                   AND EXISTS
             --                             (
             --                                 SELECT TOP 1 1
             --                                 FROM dbo.split(TBAD.AttributeValue, ',') SP
             --                                 WHERE Sp.item = TBADV.AttributeDefaultValueCode
             --                             )
             --                             FOR XML PATH('')
             --                         ), 2, 4000) AttributeDefaultValue
             --         FROM @TBL_AttributeDetails TBAD)
                  --UPDATE TBAD
                  --  SET
                  --      AttributeValue = CTUDAV.AttributeDefaultValue
                  --FROM @TBL_AttributeDetails TBAD
                  --     INNER JOIN Cte_UpdateDefaultAttributeValue CTUDAV ON(CTUDAV.PimProductId = TBAD.PimProductId
                  --                                                          AND CTUDAV.AttributeCode = TBAD.AttributeCode)
                  --WHERE AttributeDefaultValue IS NOT NULL;

             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );

             INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
			
             --- Update the  product families name locale wise   


			 	;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+dbo.Fn_GetMediaThumbnailMediaPath (zm.PATH) 
			   FROM ZnodeMedia AS ZM
              
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;

		


             UPDATE TBAD
               SET
                   PimProductTypeAssociationId = ZPTA.PimProductTypeAssociationId,
                   DisplayOrder = ZPTA.DisplayOrder
             FROM @TBL_AttributeDetails TBAD
                  INNER JOIN ZnodePimproductTypeAssociation ZPTA ON(ZPTA.PimProductId = TBAD.PimProductId)
             WHERE ZPTA.PimParentProductId = @RelatedProductId;
            
			-- DECLARE @AttributeCode NVARCHAR(4000);
             SET @AttributeCode = SUBSTRING(
                                           (
                                               SELECT DISTINCT
                                                      ','+QUOTENAME(AttributeCode)
                                               FROM @TBL_PimAttributeId
                                               FOR XML PATH('')
                                           ), 2, 4000);
             DECLARE @AttributeCode_Duplicate NVARCHAR(4000)= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  ', Piv.'+QUOTENAME(AttributeCode)
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 1, 4000);
             DECLARE @AttributeCode_Duplicate_Data NVARCHAR(4000);
			 	 
			

			  SET  @AttributeCode_Duplicate_Data= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  'AND Piv.'+QUOTENAME('OR_'+AttributeCode) +'= Isa.'+QUOTENAME(AttributeCode)+' '
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 4, 4000) +' '

            -- SET @AttributeCode_Duplicate_Data = REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000), ',', '+'',''+');
             SELECT PimProductId,
                    AttributeValue,
                    AttributeCode,
                    PimProductTypeAssociationId,
                    DisplayOrder
             INTO #Temp_attribute
             FROM @Tbl_AttributeDetails
             ORDER BY DisplayOrder;
             SELECT *
             INTO #temp_Family
             FROM @FamilyDetails;
             
			 DECLARE @IsSelectedAttributeValue TABLE
             (ProductId      INT,
              AttributeValue NVARCHAR(500),
              AttributeCode  NVARCHAR(500),
              PimAttributeId INT,PimAttributeDefaultValueId INT 
             );

			  
		   DECLARE @IsSelectedAttributeValueLocale TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode NVARCHAR(600),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(max),
			  DisplayOrder   INT 
             );
          

		  -- select @PimProductId ,@AttributeCode ,@LocaleId 
		  ;With Cte_AttributeVAkuestest AS 
		  (
		    SELECT ZPAV.PimAttributeId , ZPPAD.PimAttributeDefaultValueId ,ZPAV.PimProductId
			FROM ZnodePimAttributeVAlue ZPAV 
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAD ON (ZPPAD.PimAttributeValueId = ZPAV.PimAttributeValueId)
			INNER JOIN ZnodePimproductTypeAssociation ZPPTA on ZPAV.PimProductId = ZPPTA.PimProductId and ZPPTA.PimParentProductId = @RelatedProductId 
			WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimAttributeIds,',') SP WHERE SP.Item = ZPAV.PimAttributeId )
			AND EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimProductId,',') SP WHERE SP.Item = ZPAV.PimProductId  or @PimProductId = '0')
		) ,Cte_PimAttributeDefaultValueLocale AS 
		(
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA  
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 
		  UNION 
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA 
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 	
		)
		,Cte_AttributeValueForCode 
		As
		(
		  SELECT AttributeDefaultValue AtributeValue , AttributeCode ,PimProductId ,a.PimAttributeDefaultValueId
		  FROM Cte_PimAttributeDefaultValueLocale a
		  INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = a.PimAttributeId )
		)
			 INSERT INTO @IsSelectedAttributeValue (ProductId,AttributeCode,AttributeValue,PimAttributeDefaultValueId)
             SELECT PimProductId,AttributeCode,AtributeValue,PimAttributeDefaultValueId
			 FROM Cte_AttributeValueForCode
             
			 --INSERT INTO @IsSelectedAttributeValueLocale
    --         EXEC Znode_GetAttributeDefaultValueLocale
    --              @PimAttributeIds,
    --              @LocaleId;
             
			 --UPDATE izav
    --           SET
    --               izav.AttributeValue = isval.AttributeDefaultValue
    --         FROM @IsSelectedAttributeValue izav
    --              INNER JOIN @IsSelectedAttributeValueLocale isval ON izav.AttributeValue = isval.AttributeDefaultValueCode AND izav.PimAttributeId = isval.PimAttributeId ;
             

			 SELECT * 
			 --SUBSTRING(
    --                         (
    --                             SELECT ','+isav.AttributeValue
    --                             FROM @IsSelectedAttributeValue isav
				--				 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ISAV.PimAttributeID )
    --                             WHERE isa.ProductId = isav.ProductId
    --                             ORDER BY ZPA.DisplayOrder DESC
    --                             FOR XML PATH('')
    --                         ), 2, 4000) AttributeValue,
							

             INTO #IsSelectedAttribute
             FROM @IsSelectedAttributeValue isa
			; 
				 
			 IF @IsDebug = 1 
			 BEGIN 
			 SELECT * FROM @IsSelectedAttributeValue izav

			 SELECT * FROM #IsSelectedAttribute

			 END 
             --select * from @IsSelectedAttributeValue
             --select @AttributeCode_Duplicate,@AttributeCode_Duplicate_data
             --select * from #IsSelectedAttribute
			 
             SET @AttributeCode = REPLACE(@AttributeCode, ',[DisplayOrder]', '');
             SET @SQL = '
			     
				 ;with Cte_Getvalue AS (
				 SELECT ProductId , '+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+'
				 FROM ( SELECT ProductId,AttributeCode,PimAttributeDefaultValueId FROM #IsSelectedAttribute gt ) dd 
				 PIVOT ( MAX (PimAttributeDefaultValueId) FOR AttributeCode IN ('+REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000),'Piv.','')+')  ) PIV 
				 )

				SELECT DISTINCT  piv.PimProductTypeAssociationId, zpp.PimProductid ProductId, [ProductName],ProductType ,ISNULL(zf.FamilyName,'''')  AttributeFamily , [SKU]
						  , CASE WHEN [IsActive] IS NULL THEN ''false'' ELSE   [IsActive]  END  [Status],  piv.[ProductImage] ImagePath,[Assortment],DisplayOrder  ,'+CAST(@LocaleId AS VARCHAR(50))+' LocaleId
						  ,DENSE_RANK()Over(Order By'+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+') CombinationId '+@AttributeCode_Duplicate+'
					, CASE When isa.ProductId Is Null then 0 ELSE 1 END IsNonEditableRow,'+ CAST(@RelatedProductId AS VARCHAR(50))+' RelatedProductId
				FROM ZNodePimProduct zpp 
				LEFT JOIN  #temp_Family zf ON (zf.PimProductId = zpp.PimProductId)
				INNER JOIN #Temp_attribute 
				PIVOT 
				(
				Max(AttributeValue) FOR AttributeCode  IN ( '+@AttributeCode+')
				)Piv  
				ON (Piv.PimProductId = zpp.PimProductid) 
				--LEFT JOIN ZnodeMedia zm ON (zm.MediaId = piv.[ProductImage])
				LEFT OUTER JOIN Cte_Getvalue isa ON ('+@AttributeCode_Duplicate_Data+')
				    '+' Order BY '+ISNULL(CASE
                                                  WHEN @Order_BY = ''
                                                  THEN 'DisplayOrder'
                                                  ELSE @Order_BY
                                              END, 'DisplayOrder');
		
	
             -- SELECT '''+SUBSTRINg(REPLACE(@AttributeCode_Duplicate,'Piv.',''),2,4000)+''' Ids
			 
             SELECT AttributeCode
             FROM ZnodePimAttribute ZPA
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM dbo.Split(@PimAttributeIds, ',') SP
                 WHERE SP.Item = ZPA.PimAttributeId
             );
             
			PRINT @SQL
             EXEC SP_executesql
                  @SQL;
        
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END ;

             DROP TABLE #Temp_attribute;
             DROP TABLE #temp_Family;
   
             -- find the all locale values 
         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductListByAttributes @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@PimAttributeIds='+@PimAttributeIds+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@RelatedProductId='+CAST(@RelatedProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductListByAttributes',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT * FROM sys.Procedures where name = 'Znode_ManageProductTypeAssociationList')
	drop proc Znode_ManageProductTypeAssociationList
go

CREATE PROCEDURE [dbo].[Znode_ManageProductTypeAssociationList]
(   @WhereClause      NVARCHAR(MAX) = '',
    @Rows             INT           = 10,
    @PageNo           INT           = 1,
    @Order_BY         VARCHAR(1000) = '',
    @RelatedProductId INT           = 0,
    @IsAssociated     BIT           = 0,
    @RowsCount        INT OUT,
    @LocaleId         INT           = 1)
AS
/*
Summary: This Procedure is used to manage Product association
Unit Testing :
 EXEC [Znode_ManageProductTypeAssociationList] '', @RowsCount = 0,@RelatedProductId = 44
*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @SQL NVARCHAR(MAX), @AlternetOrderBy NVARCHAR(2000),@OutPimProductIds VARCHAR(max);
             DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultValue('Locale');
             DECLARE @DefaultAttributeFamily INT= Dbo.Fn_GetDefaultValue('PimFamily');
			 DECLARE @ProductIdTable TABLE (  PimProductId int, CountId int, RowId int IDENTITY(1,1));
			 DECLARE @ProductAttributeDetials TABLE ( PimProductId int, AttributeCode nvarchar(600), AttributeValue nvarchar(max), LocaleId int);
			 DECLARE @OrderByDisplay INT= 0;
			 DECLARE @ProductFinalDetails TABLE( PimProductId int, ProductName nvarchar(max), SKU nvarchar(max));             
			 DECLARE @PimProductId VARCHAR(MAX)= '';
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

			 IF @Order_BY LIKE '%DisplayOrder%'
             BEGIN
                SET @OrderByDisplay = 1;
             END;

            INSERT INTO @TransferPimProductId  
			SELECT PimProductId
			FROM ZnodePimProductTypeAssociation 
			WHERE PimParentProductId = @RelatedProductId
            ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN DisplayOrder ELSE 1 END ELSE 1 END DESC,
                    CASE WHEN @Order_By LIKE '% ASC%'  THEN CASE WHEN @OrderByDisplay = 1 THEN DisplayOrder ELSE 1 END ELSE 1 END
					
	SET @IsAssociated = CASE WHEN @IsAssociated = 1 THEN 0 
	 WHEN @IsAssociated = 0 THEN 1  END


     DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE(id INT , RowId INT )
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList @IsAssociated ,@TransferPimProductId

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	  
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))
	  
	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 DECLARE @AttributeCode varchar(600)
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))

	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	
	 END 
	 ELSE 
	 BEGIN
	  SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	  	
		
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 	
	

	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			SELECT id FROM @TBL_MainList           
       
	

			 DECLARE @PimProductIds TransferId

			 INSERT INTO @PimProductIds ( Id ) 
			 SELECT PimProductId FROM @ProductIdTable

			 DECLARE @DefaultAttributeCode  TRANSFERID
			  INSERT INTO @DefaultAttributeCode
			  SELECT  PimAttributeId FROM [dbo].[Fn_GetProductGridAttributes]() 
            
             
			 DECLARE @TBL_AttributeDetails AS TABLE (PimProductId int, AttributeValue nvarchar(max), AttributeCode varchar(600), PimAttributeId int);

			 
             DECLARE @TBL_AttributeDefaultValue TABLE (PimAttributeId INT, AttributeDefaultValueCode VARCHAR(100), IsEditable BIT,AttributeDefaultValue NVARCHAR(MAX),DisplayOrder INT);
            
			 INSERT INTO @TBL_AttributeDetails( PimProductId, AttributeValue, AttributeCode, PimAttributeId )
			 EXEC Znode_GetProductsAttributeValue_newTesting @PimProductIds, @DefaultAttributeCode, @LocaleId;  
			
			 
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.PimProductId ,CASE WHEN IsProductPublish = 1 THEN   'Published' WHEN IsProductPublish = 0 THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus',NULL
			FROM @ProductIdTable a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.PimProductId)

             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1; 
             -- find the product families  
			 --;WITH Cte_ProductMedia
    --           AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			 --  , SUBSTRING( ( SELECT ','+URL+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			 --  FROM ZnodeMedia AS ZM
    --           INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			 --  INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			 --  INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)))
			 --  INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			 --  WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			 --  FOR XML PATH('')), 2 , 4000) AS AttributeValue 
			 --  FROM @TBL_AttributeDetails AS TBA 
			 --  INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		  --    UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			 -- FROM @TBL_AttributeDetails TBAV 
			 -- INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			 -- AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			  
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
				
		
             --- Update the  product families name locale wise   
        UPDATE  @TBL_AttributeDetails SET PimAttributeId = 0 WHERE PimAttributeId IS nULL 
	     DECLARE @ProductXML XML 



	   	 SET @ProductXML =   '<MainProduct>'+ STUFF( (  SELECT '<Product>'
		                                                    +'<PimProductTypeAssociationId>'+CAST(ISNULL(ZPTA.PimProductTypeAssociationId,'') AS VARCHAR(50))+'</PimProductTypeAssociationId>'
															+'<PimProductId>'+CAST(zpp.PimProductId AS VARCHAR(50))+'</PimProductId>'
															+'<RelatedProductId>'+CAST(ISNULL(ZPTA.PimParentProductId,'') AS VARCHAR(50))+'</RelatedProductId>'
															+'<DisplayOrder>'+CAST(ZPTA.[DisplayOrder] AS VARCHAR(50))+'</DisplayOrder>'

		 + STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeDetails TBADI      
															 WHERE TBADI.PimProductId = zpp.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

			 FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.id = zpp.PimProductId)
             LEFT JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimProductId = Zpp.PimProductId
                                                                    AND ZPTA.PimParentProductId = @RelatedProductId)
             ORDER BY CASE
                          WHEN @Order_By LIKE '% DESC%'
                          THEN CASE
                                   WHEN @OrderByDisplay = 1
                                   THEN ZPTA.DisplayOrder
								   ELSE 1
                               END
                          ELSE 1
                      END DESC,
                      CASE
                          WHEN @Order_By LIKE '% ASC%'
                          THEN CASE
                                   WHEN @OrderByDisplay = 1
                                   THEN ZPTA.DisplayOrder
                                   ELSE 1
                               END
                          ELSE 1
                      END,TMM.RowId
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
	
			SELECT  @ProductXML  ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'


			   IF EXISTS (SELECT Top 1 1 FROM @TAb )
				BEGIN 

					SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
				END 
				ELSE 
				BEGIN
	 					SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
				END 

         END TRY
         BEGIN CATCH
               DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductTypeAssociationList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@RelatedProductId='+CAST(@RelatedProductId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductTypeAssociationList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

-----------------------------New Added Objects

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeCMSSearchWidget')
begin
CREATE TABLE [dbo].[ZnodeCMSSearchWidget] (
    [CMSSearchWidgetId] INT            IDENTITY (1, 1) NOT NULL,
    [CMSWidgetsId]      INT            NOT NULL,
    [AttributeCode]     VARCHAR (300)  NULL,
    [SearchKeyword]     VARCHAR (300)  NOT NULL,
    [LocaleId]          INT            NOT NULL,
    [WidgetsKey]        NVARCHAR (128) NOT NULL,
    [CMSMappingId]      INT            NOT NULL,
    [TypeOFMapping]     NVARCHAR (50)  NOT NULL,
    [CreatedBy]         INT            NOT NULL,
    [CreatedDate]       DATETIME       NOT NULL,
    [ModifiedBy]        INT            NOT NULL,
    [ModifiedDate]      DATETIME       NOT NULL,
    CONSTRAINT [PK_ZnodeCMSSearchWidget] PRIMARY KEY CLUSTERED ([CMSSearchWidgetId] ASC)
);
end

go
IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeFormWidgetEmailConfiguration')
begin
CREATE TABLE [dbo].[ZnodeFormWidgetEmailConfiguration] (
    [FormWidgetEmailConfigurationId] INT           IDENTITY (1, 1) NOT NULL,
    [CMSContentPagesId]              INT           NOT NULL,
    [NotificationEmailId]            VARCHAR (500) NULL,
    [NotificationEmailTemplateId]    INT           NULL,
    [AcknowledgementEmailTemplateId] INT           NULL,
    [CreatedBy]                      INT           NOT NULL,
    [CreatedDate]                    DATETIME      NOT NULL,
    [ModifiedBy]                     INT           NOT NULL,
    [ModifiedDate]                   DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodeFormWidgetEmailConfiguration] PRIMARY KEY CLUSTERED ([FormWidgetEmailConfigurationId] ASC),
    CONSTRAINT [FK_ZnodeFormWidgetEmailConfiguration_ZnodeCMSContentPages] FOREIGN KEY ([CMSContentPagesId]) REFERENCES [dbo].[ZnodeCMSContentPages] ([CMSContentPagesId])
);
end
go

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeImportAccountDefaultTemplate')
begin
CREATE TABLE [dbo].[ZnodeImportAccountDefaultTemplate] (
    [ImportAccountDefaultTemplateId] INT            IDENTITY (1, 1) NOT NULL,
    [TemplateName]                   NVARCHAR (MAX) NULL,
    [ImportHeadId]                   INT            NOT NULL,
    [CreatedBy]                      INT            NOT NULL,
    [CreatedDate]                    DATETIME       NOT NULL,
    [ModifiedBy]                     INT            NOT NULL,
    [ModifiedDate]                   DATETIME       NOT NULL,
    CONSTRAINT [PK_ZnodeImportAccountDefaultTemplate] PRIMARY KEY CLUSTERED ([ImportAccountDefaultTemplateId] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_ZnodeImportAccountDefaultTemplate_ZnodeImportHead] FOREIGN KEY ([ImportHeadId]) REFERENCES [dbo].[ZnodeImportHead] ([ImportHeadId])
);
end
go

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeImportSuccessLog')
begin

CREATE TABLE [dbo].[ZnodeImportSuccessLog] (
    [ImportSuccessLogId] INT            IDENTITY (1, 1) NOT NULL,
    [ImportedSku]        NVARCHAR (300) NULL,
    [ImportedProductId]  INT            NULL,
    [ImportedGuId]       NVARCHAR (400) NOT NULL,
    [CreatedBy]          INT            NOT NULL,
    [CreatedDate]        DATETIME       NOT NULL,
    [ModifiedBy]         INT            NOT NULL,
    [ModifiedDate]       DATETIME       NOT NULL,
    [IsProductPublish]   BIT            NULL,
    CONSTRAINT [PK_ZnodeImportSuccessLog] PRIMARY KEY CLUSTERED ([ImportSuccessLogId] ASC)
);
end


GO
IF NOT EXISTS (SELECT * FROM sys.indexes where name = 'Ind_ZnodeImportSuccessLog')
begin
	CREATE NONCLUSTERED INDEX [Ind_ZnodeImportSuccessLog]
    ON [dbo].[ZnodeImportSuccessLog]([IsProductPublish] ASC, [ImportedGuId] ASC);

end
GO

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeImportUpdatableColumns')
begin

CREATE TABLE [dbo].[ZnodeImportUpdatableColumns] (
    [UpdatableColumnsId] INT           IDENTITY (1, 1) NOT NULL,
    [ImportHeadId]       INT           NULL,
    [ColumnName]         VARCHAR (500) NULL
);

end
GO

IF NOT EXISTS (SELECT * FROM sys.tables where name = 'ZnodeSearchProfileFieldValueFactor')
begin

CREATE TABLE [dbo].[ZnodeSearchProfileFieldValueFactor] (
    [SearchProfileFieldValueId] INT           IDENTITY (1, 1) NOT NULL,
    [SearchProfileId]           INT           NOT NULL,
    [FieldName]                 VARCHAR (200) NOT NULL,
    [FieldValueFactor]          INT           NOT NULL,
    [CreatedBy]                 INT           NOT NULL,
    [CreatedDate]               DATETIME      NOT NULL,
    [ModifiedBy]                INT           NOT NULL,
    [ModifiedDate]              DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodeSearchProfileFieldValueFactor] PRIMARY KEY CLUSTERED ([SearchProfileFieldValueId] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_ZnodeSearchProfileFieldValueFactor_ZnodeSearchProfile] FOREIGN KEY ([SearchProfileId]) REFERENCES [dbo].[ZnodeSearchProfile] ([SearchProfileId])
);

end
GO

IF EXISTS (SELECT * FROM sys.views where name = 'View_CustomerUserAddDetail')
	drop view View_CustomerUserAddDetail
go
CREATE   VIEW [dbo].[View_CustomerUserAddDetail]
AS
     SELECT a.userId,
            a.AspNetuserId,
            azu.UserName,
            a.FirstName,
            a.MiddleName,
            a.LastName,
            a.PhoneNumber,
            a.Email,
            a.EmailOptIn,
            a.CreatedBy,
            CONVERT( DATE, a.CreatedDate) CreatedDate,
            A.ModifiedBy,
            CONVERT( DATE, a.ModifiedDate) ModifiedDate,
            ur.RoleId,
            r.Name RoleName,
            CASE
                WHEN B.LockoutEndDateUtc IS NULL
                THEN CAST(1 AS    BIT)
                ELSE CAST(0 AS BIT)
            END IsActive,
            CAST(CASE WHEN ISNULL(LockoutEndDateUtc, 0) = 0 THEN  0 ELSE  1 END  AS    BIT) AS IsLock,
            (ISNULL(RTRIM(LTRIM(a.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(a.MiddleName)), '')+CASE
                                                                                                  WHEN ISNULL(RTRIM(LTRIM(a.MiddleName)), '') = ''
                                                                                                  THEN ''
                                                                                                  ELSE ' '
                                                                                              END+ISNULL(RTRIM(LTRIM(a.LastName)), '')) FullName,
            e.Name AccountName,
            h.PermissionsName,
            j.DepartmentName,
            i.DepartmentId,
            a.AccountId,
            f.AccountPermissionAccessId,
            a.ExternalId,
            CASE
                WHEN a.AccountId IS NULL
                THEN 0
                ELSE 1
            END IsAccountCustomer,
            a.BudgetAmount,
            ZAUOA.AccountUserOrderApprovalId,
            (ISNULL(RTRIM(LTRIM(ZU.FirstName)), '')+' '+ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '')+CASE
                                                                                                    WHEN ISNULL(RTRIM(LTRIM(ZU.MiddleName)), '') = ''
                                                                                                    THEN ''
                                                                                                    ELSE ' '
                                                                                                END+ISNULL(RTRIM(LTRIM(ZU.LastName)), '')) ApprovalName,
            ZAUOA.ApprovalUserId,
            h.PermissionCode,
            CASE
                WHEN a.AccountId IS NULL
                THEN up.PortalId
                ELSE ZPA.PortalId
            END PortalId
			,r.TypeOfRole,CASE WHEN a.AspNetuserId IS NULL THEN 1 ELSE 0 END IsGuestUser
			,a.CustomerPaymentGUID
			,CASE WHEN zp.StoreName IS NULL THEN 'ALL' ELSE zp.StoreName END StoreName
			,
			Case when a.AccountId  is not null then ZAA.CountryName else ZA.CountryName end CountryName ,
			Case when a.AccountId  is not null then ZAA.CityName else ZA.CityName end CityName ,
			Case when a.AccountId  is not null then ZAA.StateName else ZA.StateName end StateName ,
			Case when a.AccountId  is not null then ZAA.PostalCode else ZA.PostalCode end PostalCode ,
			Case when a.AccountId  is not null then ZAA.CompanyName else ZA.CompanyName end CompanyName 
     FROM ZnodeUser a
          left JOIN ASPNetUsers B ON(a.AspNetuserId = b.Id)
          LEFT JOIN ZnodeAccount e ON(e.AccountId = a.AccountId)
          LEFT JOIN AspNetUserRoles ur ON(ur.UserId = a.AspNetUserId)
          LEFT JOIN AspNetRoles r ON(r.Id = ur.RoleId)
          LEFT JOIN ZnodeDepartmentUser i ON(i.UserId = a.UserId)
          LEFT JOIN ZnodeDepartment j ON(j.DepartmentId = i.DepartmentId)
          LEFT JOIN ZnodeAccountUserPermission f ON(f.UserId = a.UserId)
          LEFT JOIN ZnodeAccountPermissionAccess g ON(g.AccountPermissionAccessId = f.AccountPermissionAccessId)
          LEFT JOIN ZnodeAccessPermission h ON(h.AccessPermissionId = g.AccessPermissionId)
          LEFT JOIN ZnodeAccountUserOrderApproval ZAUOA ON a.UserId = ZAUOA.UserID
          LEFT JOIN ZnodeUser ZU ON(ZU.UserId = ZAUOA.ApprovalUserId)
          LEFT JOIN ZnodeUserPortal up ON(up.UserId = a.UserId)
                                          
          LEFT JOIN ZnodePortalAccount ZPA ON(ZPA.AccountId = a.AccountId)
                                
          LEFT JOIN AspNetZnodeUser azu ON(azu.AspNetZnodeUserId = b.UserName)
	      LEFT JOIN ZnodePortal zp ON (up.PortalId = zp.PortalId)
		  LEFT JOIN ZnodeAddress ZA on ZA.AddressId 
				in (Select AddressId from  ZnodeUserAddress ZUA where a.UserId = ZUA.UserId)  and ZA.IsDefaultBilling =  1
		  LEFT JOIN ZnodeAddress ZAA on ZAA.AddressId 
				in (Select AddressId from  ZnodeAccountAddress ZUAA where a.AccountId = ZUAA.AccountId) and ZAA.IsDefaultBilling = 1 
	
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeUSer ZUQ WHERE ZUQ.UserId = a.UserId AND ZUQ.EmailOptIn = 1 AND ZUQ.AspNetUserId IS NULL )

GO
PRINT N'Creating [dbo].[SearchProfileFieldValueFactor]...';

go
if exists( select * from sys.types where is_user_defined = 1 and name ='SearchProfileFieldValueFactor' )
	drop type SearchProfileFieldValueFactor
GO
CREATE TYPE [dbo].[SearchProfileFieldValueFactor] AS TABLE (
    [FieldName]        NVARCHAR (MAX) NULL,
    [FieldValueFactor] NVARCHAR (MAX) NULL);

GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
 
IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetProductImageAttributeId')
BEGIN
DROP FUNCTION dbo.Fn_GetProductImageAttributeId
END
GO
Create FUNCTION [dbo].[Fn_GetProductImageAttributeId]()
RETURNS INT
AS
     BEGIN
         -- Declare the return variable here
         DECLARE @ProductImageAttributeId INT;
         
		 SET @ProductImageAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute ZPA WHERE ZPA.AttributeCode = 'ProductImage' AND ZPA.IsCategory = 0 )

                   
         RETURN @ProductImageAttributeId;
     END;
GO


GO
IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_RemoveSpecialChar')
BEGIN
DROP FUNCTION dbo.Fn_RemoveSpecialChar
END
GO
CREATE FUNCTION [dbo].[Fn_RemoveSpecialChar]
(
  @str VARCHAR(2000)
)
RETURNS VARCHAR(2000)
AS
BEGIN
	
    DECLARE @expres  VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!,^,{,},:,",<,>,|,\,?,/,;]%'
      WHILE PATINDEX( @expres, @str ) > 0
          SET @str = REPLACE(Replace(REPLACE( @str, SUBSTRING( @str, PATINDEX( @expres, @str ), 1 ),''),'-',' '),' ', '' )
 
      RETURN @str
END
GO
PRINT N'Creating [dbo].[Fn_GetCategoryMediaAttributeId]...';

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetCategoryMediaAttributeId')
BEGIN
DROP FUNCTION dbo.Fn_GetCategoryMediaAttributeId
END

GO
CREATE FUNCTION [dbo].[Fn_GetCategoryMediaAttributeId]()
	-- Summary :- This function is used to Get the category default attribute Id 
	-- Unit Testing 
	-- EXEC [dbo].[Fn_GetAttributeDefault] 

RETURNS @Items TABLE ( Id int Identity(1,1),PimAttributeId INT ,AttributeCode  VARCHAR(600) )

AS
BEGIN
	  
	   INSERT INTO @Items(PimAttributeId ,AttributeCode)
	   SELECT PimAttributeId ,AttributeCode 
	   FROM ZnodePimAttribute ZPA 
	   INNER JOIN ZnodeAttributeType ZAY ON (ZAY.AttributeTypeId = ZPA.AttributeTypeId )
	   WHERE AttributeTypeName IN ('File','Image','Audio','Video') AND IsCategory = 1
  
      

	
      RETURN

END -- End Function
GO
PRINT N'Creating [dbo].[Fn_GetGridPimCategoryAttributes]...';

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetGridPimCategoryAttributes')
BEGIN
DROP FUNCTION dbo.Fn_GetGridPimCategoryAttributes
END
GO
CREATE  FUNCTION [dbo].[Fn_GetGridPimCategoryAttributes]
(
)
-- Summary :- This function is used to     
-- Unit Testing 
-- EXEC [dbo].[Fn_GetAttributeDefault] 

RETURNS @Items TABLE
(Id             INT IDENTITY(1, 1),
 PimAttributeId INT,
 AttributeCode  VARCHAR(600)
)
AS
     BEGIN
    BEGIN
        INSERT INTO @Items
        (PimAttributeId,
         AttributeCode
        )
               SELECT PimAttributeId,
                      AttributeCode
               FROM ZnodePimAttribute ZPA
               WHERE IsShowOnGrid = 1 AND 
				     IsCategory = 1;
    END;
         RETURN;
     END; -- End Function
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePublishCatalogProduct')
BEGIN 
	DROP PROCEDURE Znode_DeletePublishCatalogProduct
END 

GO
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogProduct]
(   
   	@PublishProductIds	Transferid READONLY 
	,@PublishCatalogId   INT = 0 
	,@PimCategoryHierarchyId int = 0 
	,@PimCatalogId int = 0 
	
)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
	         DECLARE @TBL_DeleteIds TABLE (PublishCatalogId INT ,PublishCategoryId INT ,PublishProductId INT )  
			 DECLARE @TBL_DeleteCategoryProduct TABLE (PublishCategoryProductId INT )			 
			 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int )
			 
		
			If @PimCategoryHierarchyId <> 0 AND @PimCatalogId <>  0 
			Begin
				INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 AND ZPPC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )
				 
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 


				 AND a.PublishCatalogId = @PublishCatalogId
			END 
			Else 
			Begin
				 INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where a.PublishProductId = PX.PublishedId )
				 AND a.PublishCatalogId = @PublishCatalogId
			 END 
					
						
		     UPDATE 	TBL 
			 SET PublishCategoryId = NULL 
			 FROM @TBL_DeleteIds TBL 
			 WHERE  EXISTS  (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct ZPCC 
			 WHERE  TBL.PublishCatalogId = ZPCC.PublishCatalogId AND ZPCC.PublishCategoryId = TBL.PublishCategoryId   AND TBL.PublishProductId <> ZPCC.PublishProductId ) 			 

			 DELETE FROM [ZnodeCMSWidgetCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             )
			
			 ;
         
             DELETE FROM [ZnodeCMSWidgetProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             );
             DELETE FROM [ZnodeCMSCustomerReview]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             );
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEODetail]
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteIds AS qw
                     WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
                 )
                       AND EXISTS
                 (
                     SELECT TOP 1 1
                     FROM [ZnodeCMSSEOType] AS we
                     WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                           AND [Name] = 'Product'
                 )
                       AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM [ZnodeCMSSEODetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             )
                   AND EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEOType] AS we
                 WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                       AND [Name] = 'Product'
             );
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             )
			 OR 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCategoryProduct AS qw
                 WHERE qw.PublishCategoryProductId = [ZnodePublishCategoryProduct].PublishCategoryProductId
             )
			 ;
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
			  DELETE FROM dbo.ZnodeSearchGlobalProductBoost WHERE 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = ZnodeSearchGlobalProductBoost.[PublishProductId]
              );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
		
			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategoryDetail.[PublishCategoryId]
              );
			
			DELETE FROM ZnodeSearchGlobalProductCategoryBoost 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodeSearchGlobalProductCategoryBoost.[PublishCategoryId]
             
			 );
			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategory.[PublishCategoryId]
             
			 );

			 			 				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		      SELECT ERROR_MESSAGE() 
			 
         END CATCH;
     END;
GO
PRINT N'Altering [dbo].[Znode_InsertPublishProductIds]...';
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertPublishProductIds')
BEGIN 
	DROP PROCEDURE Znode_InsertPublishProductIds
END 

GO
CREATE  PROCEDURE [dbo].[Znode_InsertPublishProductIds]
(
	 @PublishCatalogId           INT            = NULL,
     @UserId                     INT				  ,
	 @PimProductId               TransferId Readonly,
	 @IsCallAssociated           BIT           = 0,
	 @PimCategoryHierarchyId	 INT		   = 0  ,
	 @IsDebug					 INT		   = 0     
	)
AS
    
/*
  Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

     Unit Testing
    
     SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
     SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
     SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
	 SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
     select * from znodepublishcatalog
	 SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
     SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
	 SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 
     EXEC Znode_GetPublishProducts  @PublishCatalogId = 5 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = 117,@IsDebug= 1 
	 	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
     EXEC Znode_InsertPublishProductIds  @PublishCatalogId = 0,@UserId= 2  ,@PimProductId = @ttr  ,@IsDebug= 1 
     EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
	 SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
	 SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
    */ 

     BEGIN
      --  BEGIN TRAN InsertPublishProductIds;
         BEGIN TRY
			SET NOCOUNT ON;
		
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			 DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
			 DECLARE 
			  @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),
			  @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),
			  @LocaleId INT = 0,
			  @SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId(), 
			  @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId(),
			  @ProductTypeAttributeId INT = dbo.Fn_GetProductTypeAttributeId()

			 DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			 INSERT INTO @TBL_LocaleId (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive = 1
			 
			 -- This variable used to carry the locale in loop 
			 -- This variable is used to carry the default locale which is globaly set
             DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
			 DECLARE @DeletePublishProductId VARCHAR(MAX)= '', @PimProductIds VARCHAR(MAX)= '', @PimAttributeId VARCHAR(MAX)= '';
             DECLARE @TBL_CategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			 DECLARE @TBL_PublishCategoryIds TABLE (PublishCategoryId  int ) 
		
			 -- This table will used to hold the all currently active locale ids  
			 
			IF Object_ID ('tempdb..#ActiveProduct') is not null
				drop table #ActiveProduct

			IF Object_ID ('tempdb..#TBL_PimProductIds') is not null
				drop table #TBL_PimProductIds

			 --this table holds all active product data
			-- CREATE TABLE #ActiveProduct ( PimProductId INT ) 
			 --
			 --INSERT INTO #ActiveProduct ( PimProductId )
				 --SELECT PAV.PimProductId FROM ZnodePimAttributeValue PAV
				 --INNER JOIN ZnodePimAttributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
				 --INNER JOIN ZnodePimAttribute PA  ON PAV.PimAttributeId = PA.PimAttributeId
				 --WHERE PA.AttributeCode = 'IsActive' AND PAVL.AttributeValue = 'true'

		     -- This table hold the complete xml of product with other information like category and catalog
             CREATE TABLE #TBL_PimProductIds(PimProductId INT  ,PimCategoryId INT,PimCatalogId INT,PublishCatalogId INT,IsParentProducts BIT ,DisplayOrder INT,ProductName NVARCHAR(MAX),SKU  NVARCHAR(MAX),
											 IsActive NVARCHAR(MAX),PimAttributeFamilyId INT ,ProfileId   VARCHAR(MAX),CategoryDisplayOrder INT ,ProductIndex INT,PimCategoryHierarchyId INT,PRIMARY KEY (PimCatalogId,PimCategoryId,PimCategoryHierarchyId,PimProductId)  )

			  -- This table is used to hold the product which publish in current process 
             DECLARE @TBL_PublishProductIds TABLE(PublishProductId  INT  ,PimProductId INT,PublishCatalogId  INT
													,PublishCategoryId VARCHAR(MAX),CategoryProfileIds VARCHAR(max),VersionId INT , PRIMARY KEY (PimProductId,PublishProductId,PublishCatalogId)); 
	 
			--Retrive category data : parent / client
			
				
			---------------
			-- this check is used when this procedure is call by internal procedure to publish only product and no need to return publish xml;    
			--Collected list of products for  publish 
       
			If @PimCategoryHierarchyId = 0 
			Begin

				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )

			END
			ELSE
			BEGIN
				
				INSERT INTO @TBL_CategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO  @TBL_PublishCategoryIds 
				select ZPC.PublishCategoryId from ZnodePublishCategory ZPC 
				Inner join  @TBL_CategoryHierarchyIds CT1 On 
				ZPC.PimCategoryId = CT1.CategoryId 
			
			
				INSERT INTO #TBL_PimProductIds ( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,CategoryDisplayOrder,PublishCatalogId,PimCategoryHierarchyId )
				SELECT DISTINCT ZPCC.PimProductId, ZPCC.PimCategoryId, 1 AS IsParentProducts, NULL AS DisplayOrder, ZPCC.PimCatalogId,ZPCC.DisplayOrder ,ZPC.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
				FROM ZnodePimCatalogCategory AS ZPCC
				INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCC.PimCatalogId
		    	WHERE  (ZPCC.PimCatalogId = @PimCatalogId OR EXISTS( SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPCC.PimProductId) ) AND ZPCC.PimProductId IS NOT NULL
				--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPCC.PimProductId = PAV.PimProductId )
				AND (
						ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryHierarchyIds
							) 
					) 

					
			END
						
             --Collected list of link products for  publish
			 INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId , PublishCatalogId,PimCategoryHierarchyId)
				 SELECT ZPLPD.PimProductId, ZPCC.PimCategoryId, 0 AS IsParentProducts, NULL AS DisplayOrder, CTPP.PimCatalogId,CTPP.PublishCatalogId,isnull(ZPCC.PimCategoryHierarchyId,0)
				 FROM ZnodePimLinkProductDetail AS ZPLPD
				 INNER JOIN #TBL_PimProductIds AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId AND  IsParentProducts = 1 
				 INNER JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPLPD.PimProductId AND ZPCC.PimCatalogId = CTPP.PimCatalogId
				 WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTPPI WHERE CTPPI.PimProductId = ZPLPD.PimProductId) 
				-- AND EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPLPD.PimProductId ) 
				 AND ZPCC.PimProductId IS NOT NULL
				-- AND EXISTS (SELECT * FROM #ActiveProduct PAV WHERE ZPLPD.PimProductId = PAV.PimProductId )
				 GROUP BY ZPLPD.PimProductId, ZPCC.PimCategoryId,CTPP.PimCatalogId,CTPP.PublishCatalogId ,ZPCC.PimCategoryHierarchyId

				
             --Collected list of Addon products for  publish
  
		     INSERT INTO #TBL_PimProductIds( PimProductId, PimCategoryId, IsParentProducts, DisplayOrder, PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
					 SELECT ZPAPD.PimChildProductId, ISNULL(ZPCC.PimCategoryId,0) AS PublishCategoryId, 0 AS IsParentProducts, null AS DisplayOrder,CTALP.PimCatalogId,CTALP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
					 FROM ZnodePimAddOnProductDetail AS ZPAPD 
					 INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
					 INNER JOIN #TBL_PimProductIds AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId AND  IsParentProducts = 1
					 LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPAPD.PimChildProductId AND ZPCC.PimCatalogId = CTALP.PimCatalogId
					 WHERE NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTALPI WHERE CTALPI.PimProductId = ZPAPD.PimChildProductId) 
				---	 AND EXISTS(SELECT TOP 1 1FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPAPD.PimChildProductId) 
					-- AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPAPD.PimChildProductId = PAV.PimProductId ) 
					 GROUP BY ZPAPD.PimChildProductId, ZPCC.PimCategoryId , CTALP.PimCatalogId,CTALP.PublishCatalogId,ZPCC.PimCategoryHierarchyId

					 				 	

             --Collected list of Bundle / Group / Config products for  publish
             INSERT INTO #TBL_PimProductIds(PimProductId,PimCategoryId,IsParentProducts,DisplayOrder,PimCatalogId,PublishCatalogId,PimCategoryHierarchyId)
                    SELECT ZPTA.PimProductId,ISNULL(ZPCC.PimCategoryId,0),0 AS IsParentProducts,NULL DisplayOrder,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ISNULL(ZPCC.PimCategoryHierarchyId,0)
                    FROM ZnodePimProductTypeAssociation AS ZPTA INNER JOIN #TBL_PimProductIds AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId AND IsParentProducts = 1
                    LEFT JOIN ZnodePimCatalogCategory AS ZPCC ON ZPCC.PimProductId = ZPTA.PimProductId AND ZPCC.PimCatalogId = CTAAP.PimCatalogId
                    WHERE NOT EXISTS( SELECT TOP 1 1 FROM #TBL_PimProductIds AS CTAAPI WHERE CTAAPI.PimProductId = ZPTA.PimProductId)
					--AND EXISTS(SELECT TOP 1 1 FROM ZnodePimAttributeValue AS VILMP WHERE VILMP.PimProductId = ZPTA.PimProductId)
					--AND EXISTS ( SELECT * FROM #ActiveProduct PAV WHERE ZPTA.PimProductId = PAV.PimProductId ) 
					GROUP BY ZPTA.PimProductId,ZPCC.PimCategoryId,CTAAP.PimCatalogId,CTAAP.PublishCatalogId,ZPCC.PimCategoryHierarchyId
        				

			   UPDATE TBPP
               SET PublishCatalogId = ZPC.PublishCatalogId 
			   FROM #TBL_PimProductIds TBPP 
			   INNER JOIN ZnodePublishCatalog ZPC ON ZpC.PimCatalogId = TBPP.PimCatalogId;
        
		DECLARE @PublishProductId TRANSFERId 


		IF @PublishCatalogId IS NOT NULL AND @PublishCatalogId <> 0 
			BEGIN
			If @PimCategoryHierarchyId = 0 
			BEGIN
			  -- SELECT * FROM @TBL_PimProductIds AS TBP
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				--INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0) )
				AND ZPP.PublishCatalogId = @PublishCatalogId
				--Remove extra products from catalog
			END
			ELSE 
			BEGIN
				INSERT INTO @PublishProductId
				SELECT DISTINCT ZPP.PublishProductId 
				FROM ZnodePublishProduct AS ZPP 
				INNER JOIN ZnodePublishCategoryProduct ZPPC ON (ZPPC.PublishProductId = ZPP.PublishProductId AND ZPPC.PublishCatalogId = ZPP.PublishCatalogId)
				INNER JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPPC.PublishCatalogId  AND   ZPC.PublishCategoryId = ZPPC.PublishCategoryId)
				WHERE NOT EXISTS
				(SELECT TOP 1 1 FROM #TBL_PimProductIds AS TBP WHERE ZPP.PimProductId = TBP.PimProductId 
				AND TBP.PublishCatalogId = ZPP.PublishCatalogId 
				AND ISNULL(TBP.PimCategoryHierarchyId,0) = ISNULL(ZPPC.PimCategoryHierarchyId,0))
				AND ZPP.PublishCatalogId = @PublishCatalogId
				AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				)
			
			END
		END
		ELSE IF @IsCallAssociated = 0 
		BEGIN 
			DECLARE @TBL_ProductIdscollect TABLE(PublishProductId INT , PimproductId INT , PublishcatalogId  INT  , ProductType NVARCHAr(max))
			If @PimCategoryHierarchyId = 0 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				 WHERE  IsParentProducts = 1	
				 AND LocaleId =@DefaultLocaleId
			END 
			Else 
			Begin
				INSERT INTO @TBL_ProductIdscollect (PublishProductId,PimproductId,PublishcatalogId,ProductType)
				SELECT TBPOCI.PublishProductId,ZPAV.PimproductId,TBPOCI.PublishcatalogId,ZPATF.AttributeDefaultValueCode
				FROM ZnodePimAttributeValue ZPAV 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId )
				INNER JOIN #TBL_PimProductIds TBLIDF ON (TBLIDF.PimProductId = ZPAV.PimProductId )
				INNER JOIN ZnodePublishProduct TBPOCI ON (TBPOCI.PimProductId = TBLIDF.PimProductId AND TBPOCI.PublishCatalogId = TBLIDF.PublishCatalogId 	)
				INNER JOIN ZnodePimAttributeDefaultValue ZPATF ON (ZPATF.PimAttributeId =  @ProductTypeAttributeId 
								AND ZPADV.PimAttributeDefaultValueId = ZPATF.PimAttributeDefaultValueId )
				INNER JOIN ZnodePublishCategoryProduct  ZPCP ON ZPCP.PublishCatalogId = TBPOCI.PublishCatalogId AND 
				ZPCP.PublishProductId = TBPOCI.PublishProductId
				INNER JOIN ZnodePublishCategory ZPC ON  (ZPC.PublishCatalogId = ZPCP.PublishCatalogId  AND ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE  IsParentProducts = 1	AND LocaleId =@DefaultLocaleId
				 AND ZPC.PimCategoryId  in 
				(
					Select CategoryId from @TBL_CategoryHierarchyIds
				
				) 
			END 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_ProductIdscollect WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct','SimpleProduct') )
		 
			BEGIN 
	
			   DECLARE @TBL_DeleteTrackProduct TABLE (PublishProductId INT,AssociatedZnodeProductId INT  ,PublishCatalogId INT,PublishCatalogLogId INT ,IsDelete BIT , PublishCategoryId int  )

			   ;With Cte_PublishProduct AS
			   (
				 SELECT TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType ,MAx(PublishCatalogLogId) PublishCatalogLogId
				 FROM  @TBL_ProductIdscollect TBL 
				 INNER JOIN ZnodePublishCatalogLog TBLG ON (TBLG.PublishCatalogId = TBL.PublishcatalogId)
				 WHERE IsCatalogPublished = 1 
				 GROUP BY TBL.PublishProductId,PimproductId,TBL.PublishcatalogId,ProductType

				 
		   
			   )
			   , Cte_ConfigData AS 
				 (
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'ConfigurableProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'GroupedProduct'
				 UNION ALL 
				  SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND ProductType = 'BundleProduct'
				 UNION ALL 
				 SELECT p.value('(./AssociatedZnodeProductId)[1]', 'INT')  AssociatedZnodeProductId,PublishProductId,PimproductId,PublishcatalogId,ProductType,CTR.PublishCatalogLogId
				 FROM ZnodePublishedXml ZPXML 
				 INNER JOIN Cte_PublishProduct CTR ON (CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId AND CTR.PublishProductId = ZPXML.PublishedId)
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 and 
				 (ZPXML.PublishCategoryId in (Select PublishCategoryId from @TBL_PublishCategoryIds) OR @PimCategoryHierarchyId = 0 ) 
				 AND LocaleId = @DefaultLocaleId 
			
				 )

			--	 SELECT * FROM ZnodePublishCatalogLog WHERE PublishCatalogId = 8 

			INSERT INTO @TBL_DeleteTrackProduct (PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId)
			SELECT ZPP.PublishProductId,AssociatedZnodeProductId,PublishcatalogId,PublishCatalogLogId 
			FROM Cte_ConfigData ZPP	
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM  @TBL_PublishProductIds TBLP WHERE TBLP.PublishProductId = ZPP.AssociatedZnodeProductId)
		
	

			;With Cte_updateStatus AS
			(
		 
				 SELECT  PublishProductId,PublishcatalogId
				  FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/ConfigurableProductEntity') t(p)
				 WHERE  IsConfigProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/GroupProductEntity') t(p)
				 WHERE  IsGroupProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 

				 UNION ALL 
				  SELECT  PublishProductId,PublishcatalogId
				   FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/BundleProductEntity') t(p)
				 WHERE  IsBundleProductXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 


				 UNION ALL 
				 SELECT PublishProductId,PublishcatalogId
				 FROM @TBL_DeleteTrackProduct CTR 
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishedXml ZPXML  
				 CROSS APPLY ZPXML.PublishedXML.nodes('/AddonEntity') t(p)
				 WHERE  IsAddOnXML = 1 
				 AND  CTR.PublishCatalogLogId = ZPXML.PublishCatalogLogId 
				 AND LocaleId = @DefaultLocaleId 
				 AND CTR.PublishProductId = p.value('(./AssociatedZnodeProductId)[1]', 'INT') 
				 AND CTR.PublishProductId = ZPXML.PublishedId ) 
		
			)

			UPDATE a 
			SET IsDelete = CASE WHEN TYR.PublishProductId IS NULL THEN 1 ELSE 0 END 
			FROM @TBL_DeleteTrackProduct a 
			LEFT JOIN Cte_updateStatus TYR ON (TYR.PublishProductId = a.PublishProductId AND TYR.PublishCatalogId = a.PublishCatalogId)

		
			INSERT INTO @PublishProductId 
			SELECT DISTINCT AssociatedZnodeProductId 
			FROM @TBL_DeleteTrackProduct
			WHERE IsDelete =1  
		--	AND 1=0

		END 

	
		INSERT INTO @PublishProductId
		SELECT distinct PublishProductid
		FROM ZnodePublishProduct ZPP
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId =  ZPP.PublishCatalogId )
        WHERE Not EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPPP WHERE (ZPPP.PimCatalogid = ZPc.PimCatalogId AND ZPPP.PimProductId = ZPP.PimProductId))  
		AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductIds TYR WHERE TYR.PimProductId = ZPP.PimProductId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @PublishProductId YTR WHERE YTR.Id = ZPP.PublishProductId  )
		--AND  1=0	
		END  
	
		EXEC dbo.Znode_DeletePublishCatalogProduct  @PublishProductIds = @PublishProductId,@PublishCatalogId = @PublishCatalogId ,
		@PimCategoryHierarchyId  =@PimCategoryHierarchyId  ,
		@PimCatalogId  = @PimCatalogId 

			   IF  @IsDebug = 1 
			   BEGIN 
			SELECT * FROM #TBL_PimProductIds
			 END 
			 -- This merge statement is used for crude oprtaion with publisgh product table
			MERGE INTO ZnodePublishProduct TARGET USING  (
				SELECT PimProductId, PublishCatalogId
				FROM #TBL_PimProductIds AS TBP
				GROUP BY PimProductId, PublishCatalogId
			 )  SOURCE
				ON --check for if already exists then just update otherwise insert the product  
				TARGET.PimProductId = SOURCE.PimProductId AND  TARGET.PublishCatalogId = SOURCE.PublishCataLogId 
				WHEN MATCHED      THEN UPDATE SET TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate	
				WHEN NOT MATCHED  THEN INSERT(PimProductId, PublishCatalogId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
									   VALUES( SOURCE.PimProductId, SOURCE.PublishCatalogId, @UserId, @GetDate, @UserId, @GetDate )
				OUTPUT INSERTED.PublishProductId, INSERTED.PimProductId, INSERTED.PublishCatalogId
				INTO @TBL_PublishProductIds(PublishProductId, PimProductId, PublishCatalogId); 
			
			-- Here used the ouput clause to catch what data inserted or updated into variable table
	    	
	
		
			
			-- This merge staetment is used for crude opration with  ZnodePublishCategoryProduct table
			 MERGE INTO ZnodePublishCategoryProduct TARGET USING  (
				 SELECT PublishProductId,
				 ISNULL(ZPC.PublishCategoryId,0)PublishCategoryId,
				 TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId
				 FROM #TBL_PimProductIds AS TBP 
				 LEFT JOIN ZnodePublishCategory AS ZPC ON (ISNULL(TBP.PimCategoryId, 0) = ISNULL(ZPC.PimCategoryId, -1) AND ZPC.PublishCatalogId = TBP.PublishCatalogId 
				 AND ISNULL(ZPC.PimCategoryHierarchyId, 0) = ISNULL(TBP.PimCategoryHierarchyId, -1))
				 INNER JOIN @TBL_PublishProductIds AS TBPP ON TBP.PimProductId = TBPP.PimProductId
				 AND TBP.PublishCatalogId = TBPP.PublishCatalogId
				 GROUP BY PublishProductId, ZPC.PublishCategoryId, TBP.PublishCatalogId,ZPC.PimCategoryHierarchyId
			  ) SOURCE
					ON  TARGET.PublishCatalogId = SOURCE.PublishCatalogId AND ISNULL(TARGET.PublishCategoryId, 0) = ISNULL(SOURCE.PublishCategoryId, 0) AND TARGET.PublishProductId = SOURCE.PublishProductId 
					
					WHEN MATCHED THEN UPDATE SET TARGET.PublishCategoryId = CASE WHEN SOURCE.PublishCategoryId = 0 THEN NULL ELSE SOURCE.PublishCategoryId END 
												 ,TARGET.CreatedBy = @UserId, TARGET.CreatedDate = @GetDate, TARGET.ModifiedBy = @UserId, TARGET.ModifiedDate = @GetDate,TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId				
					WHEN NOT MATCHED THEN INSERT(PublishProductId,PublishCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId) 
										  VALUES(SOURCE.PublishProductId,CASE WHEN SOURCE.PublishCategoryId =0 THEN NULL ELSE SOURCE.PublishCategoryId  END , SOURCE.PublishCatalogId,@UserId,@GetDate,@userId,@GetDate,SOURCE.PimCategoryHierarchyId);
   
    
   WHILE @Counter <= @maxCountId
   BEGIN 
    SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
   
     
	 SELECT VIR.PimProductId,PimAttributeId,AttributeValue,ZnodePimAttributeValueLocaleId,VIR.LocaleId ,COUNT(*)Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM @TBL_PublishProductIds ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	 AND (PimAttributeId = @ProductNamePimAttributeId  OR PimAttributeId = @SKUPimAttributeId OR PimAttributeId = @IsActivePimAttributeId  )
  
   

		
	          MERGE INTO ZnodePublishProductDetail   TARGET
			  USING  (SELECT   ZPP.PublishProductId ,TBLA.AttributeValue PRoductName,TBLAI.AttributeValue SKU ,ISNULL(TBLAII.AttributeValue,'0') IsActive --,TBLAIII.AttributeValue ProductType
						FROM  @TBL_PublishProductIds zpp
						INNER JOIN #TBL_AttributeVAlue TBLA ON (TBLA.PimAttributeId = @ProductNamePimAttributeId AND TBLA.PimProductId = ZPP.PimProductId AND TBLA.LocaleId  = CASE WHEN TBLA.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLA ON (TBLA.PimProductId = ZPP.PimProductId AND TBLA.PimAttributeId = @ProductNamePimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAI ON (TBLAI.PimAttributeId = @SKUPimAttributeId AND TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.LocaleId  = CASE WHEN TBLAI.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAI ON (TBLAI.PimProductId = ZPP.PimProductId AND TBLAI.PimAttributeId = @SKUPimAttributeId)
					    INNER JOIN #TBL_AttributeVAlue TBLAII ON (TBLAII.PimAttributeId = @IsActivePimAttributeId AND TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.LocaleId  = CASE WHEN TBLAII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
						--INNER JOIN #TBL_AttributeVAlue TBLAIII ON (TBLAIII.PimAttributeId = @ProductTypePimAttributeId AND TBLAIII.PimProductId = ZPP.PimProductId AND TBLAIII.LocaleId  = CASE WHEN TBLAIII.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
					--	INNER JOIN @TBL_AttributeVAlue  TBLAIII ON (TBLAII.PimProductId = ZPP.PimProductId AND TBLAII.PimAttributeId = @ProductTypeAttributeId)
						GROUP BY ZPP.PublishProductId,TBLA.AttributeValue,TBLAI.AttributeValue,TBLAII.AttributeValue --,TBLAIII.AttributeValue
						)   SOURCE
			ON (TARGET.PublishProductId = SOURCE.PublishProductId
				 AND TARGET.LocaleId = @LocaleId 
			) 
			WHEN MATCHED THEN 
			UPDATE 
			SET TARGET.ProductName   = SOURCE.ProductName
				,TARGET.SKU			 = SOURCE.SKU
				,TARGET.IsActive	= SOURCE.IsActive
				,TARGET.ModifiedBy	 = @userid
				,TARGET.ModifiedDate  = @GetDate
			WHEN NOT MATCHED THEN 
			INSERT (PublishProductId
					,ProductName
					,SKU
					,IsActive
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			VALUES ( SOURCE.PublishProductId
					,SOURCE.ProductName
					,SOURCE.SKU
					,SOURCE.IsActive
					,@LocaleId
					,@userId
					,@GetDate
					,@userId
					,@GetDate);

		 
         DROP TABLE #TBL_AttributeVAlue 
		
		 SET @Counter = @counter + 1 
			  END 

		IF @PublishCatalogId IS NULL OR @PublishCatalogId =0 
		BEGIN 
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		END 
		IF (ISnull(@PimCategoryHierarchyId ,0) <> 0 ) 
		Begin
			SELECT PublishProductId, PimProductId, PublishCatalogId 
			FROM @TBL_PublishProductIds
		End 

		--COMMIT TRAN InsertPublishProductIds;
		END TRY 
		BEGIN CATCH 
		 SELECT ERROR_MESSAGE()
	--	 ROLLBACK TRAN InsertPublishProductIds;
		END CATCH 
	END
GO
PRINT N'Altering [dbo].[Znode_InsertUpdateCustomeFieldXML]...';


GO
----DROP TABLE ZnodePimCustomeFieldXML

--CREATE TABLE ZnodePimCustomeFieldXML 
--(
--PimCustomeFieldXMLId INT IDENTITY(1,1) CONSTRAINT PK_ZnodePimCustomeFieldXML  PRIMARY KEY 
--,PimProductId INT 
--,CustomCode VARCHAR(300)
--,CustomeFiledXML NVARCHAR(max) 
--,LocaleId     INT 
--,CreatedBy    INT NOT NULL 
--,CreatedDate  DATETIME NOT NULL 
--,ModifiedBy   INT NOT NULL 
--,ModifiedDate DATETIME NOT NULL 
--)

-- EXEC [Znode_InsertUpdateCustomeFieldXML] 1

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateCustomeFieldXML')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateCustomeFieldXML
END 

GO
CREATE  Procedure [dbo].[Znode_InsertUpdateCustomeFieldXML] 
(
 @PimProductId VARCHAR(2000)
)
AS
BEGIN 
  BEGIN TRY 
    
	;With Cte_CustomeAttributeValue AS
	(

			SELECT PimProductId ,ZPCF.CustomCode,'<AttributeCode>'+ISNULL((SELECT ''+ZPCF.CustomCode FOR XML PATH('')),'') +'</AttributeCode>'+'<AttributeName>'+ISNULL((SELECT ''+ZPCFL.CustomKey FOR XML PATH('')),'')+'</AttributeName>'
			+'<AttributeValues>'+ISNULL((SELECT ''+ZPCFL.CustomKeyValue FOR XML PATH('')),'')+'</AttributeValues>'+'<IsUseInSearch>0</IsUseInSearch>
			<IsHtmlTags>0</IsHtmlTags>
			<IsComparable>0</IsComparable>
			<IsFacets>0</IsFacets>
			<AttributeTypeName>Text Area</AttributeTypeName>
			<IsPersonalizable>0</IsPersonalizable>
			<IsCustomeField>1</IsCustomeField>
			<IsConfigurable>0</IsConfigurable>
			<IsSwatch>0</IsSwatch>
			<DisplayOrder>'+Convert(nvarchar(100),Isnull(DisplayOrder,0))+'</DisplayOrder>
			' AttributeValue,ZPCFL.LocaleId 
			FROM ZnodePimCustomField ZPCF
			INNER JOIN ZnodePimCustomFieldLocale ZPCFL ON (ZPCFL.PimCustomFieldId = ZPCF.PimCustomFieldId) 
	)

  MERGE INTO ZnodePimCustomeFieldXML TARGET
  USING Cte_CustomeAttributeValue SOURCE 
  ON (TARGET.PimProductId = SOURCE.PimProductId
    AND  TARGET.LocaleId = SOURCE.LocaleId
	AND TARGET.CustomCode = SOURCE.CustomCode
  )
  WHEN MATCHED THEN 
  UPDATE 
   SET TARGET.CustomeFiledXML = SOURCE.AttributeValue
       ,TARGET.ModifiedBy      = 2 
	   ,TARGET.ModifiedDAte   = GETDATE()

  WHEN NOT MATCHED THEN 
  INSERT (PimProductId
				,CustomCode
				,CustomeFiledXML
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate)
				  VALUES (SOURCE.PimProductId
				  ,SOURCE.CustomCode
				,Source.AttributeValue
				,SOURCE.LocaleId
				,2
				,GETDATE()
				,2
				,GETDATE());

  END TRY 
  BEGIN CATCH 
  SELECT ERROR_MESSAGE()
  END CATCH 
END
GO
PRINT N'Altering [dbo].[Znode_GetPublishProductbulk]...';
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductbulk
END 

GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk 5, 0 , '' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

  --DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )

   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DELETE FROM #PimProductAttributeXML
   END

   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   Declare @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 
 --DECLARE #TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int  )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,@versionId ,ZPC.PublishCategoryId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and  
				 ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )
  END
  ELSE 
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
											MAX(PublishCatalogLogId) ELSE @versionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

WHILE @Counter <= @maxCountId
BEGIN
 
  SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO @PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       

	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) from #TBL_AttributeVAlue b where a.PimProductId=b.PimProductId and a.PimAttributeId = b.PimAttributeId )
	 from #TBL_AttributeVAlue a

	 --select * from #TBL_AttributeVAlue
	 --return
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 create table #Cte_GetData (PimProductId int,AttributeCode varchar(600),AttributeValue nvarchar(max))

 create index idx_#Cte_GetDataPimProductId on #Cte_GetData(PimProductId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
where a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
--INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId AND CTE.LocaleId  = CASE WHEN cte.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue                 
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

	 

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)


insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
where exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

--  --CREATE INDEX IND_ZnodePublishInline_0999 ON Cte_GetData(PimProductId ASC)

  DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId = @versionId AND IsProductXML = 1   AND LocaleId = @LocaleId 

--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		--IF OBJECT_ID('tempdb..#Index') is not null
		--BEGIN 
		--	DROP TABLE #Index
		--END 

		--Select PCI.PublishProductId into #Index from 
		--#TBL_PublishCatalogId PCI Inner join ZnodePublishCategoryProduct ZPC ON   
		--PCI.PublishProductId = ZPC.PublishProductId 
		--AND PCI.PublishCatalogId = ZPC.PublishCatalogId 

  		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								--+ CAST((select COUNT(*) +1  from #Index WHERE PublishProductId = zpp.PublishProductId) 
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
		AND ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )
  END
  ELSE
  BEGIN
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
END 
 


--DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
SET @Counter = @counter + 1 
END 

END
GO
PRINT N'Altering [dbo].[Znode_InsertProcedureErrorLog]...';


GO
/*
 Summary : - 
      This procedure is used to catch the error log of procedures 
	  'client_net_address' is Client Machine IPAddress on which error has occured
	  All ErrorLog Details is stored in ZnodeProceduresErrorLog table
*/
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertProcedureErrorLog')
BEGIN 
	DROP PROCEDURE Znode_InsertProcedureErrorLog
END 

GO

CREATE PROCEDURE [dbo].[Znode_InsertProcedureErrorLog]
( @ProcedureName    VARCHAR(1000),
  @ErrorInProcedure VARCHAR(1000),
  @ErrorMessage     NVARCHAR(MAX),
  @ErrorLine        VARCHAR(100),
  @ErrorCall        NVARCHAR(MAX))
AS 
   
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @ClientIPMachine NVARCHAR(100)= CONVERT(NVARCHAR(100), CONNECTIONPROPERTY('client_net_address'));

			 IF EXISTS (SELECT TOP 1 1 FROM ZnodeGlobalSetting ZGS WHERE FeatureName = 'IsDataBaseLoggingEnabled' AND FeatureValues = 'TRUE')
			 BEGIN
             INSERT INTO ZnodeProceduresErrorLog (ProcedureName,ErrorInProcedure,ErrorMessage,ErrorLine,ErrorCall,CreatedBy,CreatedDate)
                    SELECT @ProcedureName,@ErrorInProcedure,@ErrorMessage,@ErrorLine,@ErrorCall,@ClientIPMachine,@GetDate;
			 END
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_PROCEDURE();
                    
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_GetProcedureErrorLog]...';


GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProcedureErrorLog')
BEGIN 
	DROP PROCEDURE Znode_GetProcedureErrorLog
END 

GO

CREATE PROCEDURE [dbo].[Znode_GetProcedureErrorLog]
(   @WhereClause  NVARCHAR(MAX) = '',
	@Rows         INT           = 100,
	@PageNo       INT           = 1,
	@Order_BY     VARCHAR(100)  = '',
	@LogMessageId VARCHAR(100)  = '',										 
	@RowsCount    INT OUT)
AS 
/*
Summary: This procedure is used to fetch procedure error log details

EXEC Znode_GetProcedureErrorLog @WhereClause = 'LogMessageId = 74',@RowsCount = 0 , @LogMessageId =75
EXEC Znode_GetProcedureErrorLog @WhereClause = 'LogMessageId = 74',@RowsCount = 0
EXEC Znode_GetProcedureErrorLog @WhereClause = '',@RowsCount = 0 , @LogMessageId =75
EXEC Znode_GetProcedureErrorLog @WhereClause = '',@RowsCount = 0


*/


BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @LogId INT
			 DECLARE @TBL_ProcedureErrorLog TABLE (LogMessageId VARCHAR(100),LogMessage NVARCHAR(MAX),Component VARCHAR(1000),StackTraceMessage NVARCHAR(MAX),CreatedDate DATETIME,TraceLevel NVARCHAR(MAX),RowId INT,CountNo INT)


			 -- IF @LogMessageId is passed as parameter then only filter or else fetch all records
			 IF @LogMessageId <> 0 OR @LogMessageId <> '' 
			 BEGIN

			 --SET @WhereClause = ' LogMessageId = '+CAST(@LogMessageId AS nvarchar(100))
			 SET @WhereClause = CASE WHEN @WhereClause = '' THEN ' LogMessageId = '+@LogMessageId  ELSE @WhereClause + ' AND LogMessageId = '+@LogMessageId END
			 END
			 	 
			 SET @SQL = '


			 ;with Cte_GetProcedureErrorDetails AS 
				(

					SELECT PEL.ProcedureErrorLogId as LogMessageId,PEL.ErrorMessage as LogMessage,PEL.ProcedureName as Component,PEL.CreatedDate as CreatedDate,
					''Exception in  '' + ProcedureName + ''  ON  '' +ErrorCall + ''  IN  '' +ErrorInProcedure + ''  AT  '' +ErrorLine as StackTraceMessage,''DBError'' as TraceLevel
					FROM ZnodeProceduresErrorLog PEL
				  
				) 
			, Cte_GetProcedureError AS 
				(
					SELECT  LogMessageId,LogMessage,Component,CreatedDate,StackTraceMessage,TraceLevel ,'+dbo.Fn_GetPagingRowId(@Order_BY,'LogMessageId DESC')+',Count(*)Over() CountNo
					FROM Cte_GetProcedureErrorDetails
					WHERE 1=1 
					'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				)

				SELECT DISTINCT LogMessageId,LogMessage,Component,CreatedDate,StackTraceMessage,TraceLevel,RowId,CountNo
				FROM Cte_GetProcedureError
				'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
				print @sql

				INSERT INTO @TBL_ProcedureErrorLog(LogMessageId,LogMessage,Component,CreatedDate,StackTraceMessage,TraceLevel,RowId,CountNo)
				EXEC(@SQL)

				SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ProcedureErrorLog), 0);

				SELECT LogMessageId,LogMessage,Component,CreatedDate,StackTraceMessage,TraceLevel 
				FROM @TBL_ProcedureErrorLog
				

		 END TRY
         BEGIN CATCH
		 SELECT ERROR_MESSAGE();
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProcedureErrorLog @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS VARCHAR(50)),'''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
			 @Order_BY='''+ISNULL(@Order_BY,'''''')+''',@LogMessageId = '''+ISNULL(CAST(@LogMessageId AS VARCHAR(50)),'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@Status='+ISNULL(CAST(@Status AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProcedureErrorLog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
END;
GO
PRINT N'Creating [dbo].[Znode_GetPublishSingleCategory]...';

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleCategory')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleCategory
END 

GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleCategory]
(   @PimCategoryId    INT, 
    @UserId           INT,
    @Status           int = 0 OUT,
	@IsDebug          BIT = 0)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
	            During Catalog Publish Publish status should be updated 
				   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 

       EXEC [Znode_GetPublishSingleCategory @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @PublishCatalogLogId int , @PublishCataLogId int , @VersionId  int ,@PimCatalogId int 
			 
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
			 
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PimCatalogId  INT , VersionId INT )

			 INSERT INTO @TBL_PublishCatalogId  (PublishCatalogId,PimCatalogId,VersionId ) 
			 SELECT ZPCL.PublishCatalogId, ZPCL.PimCatalogId,ZPCL.PublishCatalogLogId
			 FROM ZnodePimCategoryHierarchy ZPCH INNER JOIN ZnodePublishCatalogLog  ZPCL 
			 ON ZPCH.PimCatalogId = ZPCL.PimCatalogId and ZPCH.PimCategoryId = @PimCategoryId 
			 where  PublishCatalogLogId in (Select MAX (PublishCatalogLogId) from ZnodePublishCatalogLog ZPCL where 
			 ZPCH.PimCatalogId = ZPCL.PimCatalogId)

			 IF NOT EXISTS (Select TOP 1 1 from @TBL_PublishCatalogId) OR NOT EXISTS (select TOP 1 1  from ZnodePimCatalogCategory where PimCategoryId = @PimCategoryId  )
			 Begin
				SET @Status = 1  -- Category not associated or catalog not publish
				ROLLBACK TRAN GetPublishCategory;
				Return 0 ;
			 END 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (
				  RowId     INT IDENTITY(1, 1),
				  LocaleId  INT,
				  IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (
				  PimCategoryId       INT,
				  PimParentCategoryId INT,
				  DisplayOrder        INT,
				  ActivationDate      DATETIME,
				  ExpirationDate      DATETIME,
				  CategoryName        NVARCHAR(MAX),
				  ProfileId           VARCHAR(MAX),
				  IsActive            BIT,
				  PimCategoryHierarchyId INT,
				  ParentPimCategoryHierarchyId INT,
				  PublishCatalogId INT,
				  PimCatalogId  INT,
				  VersionId INT             
			 );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId,
			 PublishCatalogId,PimCatalogId,VersionId)
			 --select @PimCategoryId, NULL , NULL , NULL , NULL ,NULL , NULL ,NULL 
			 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId,
			 PublishCatalogId,PCI.PimCatalogId,VersionId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 Inner join @TBL_PublishCatalogId PCI on ZPCH.PimCatalogId = PCI.PimCatalogId 
			 WHERE ZPCH.PimCategoryId = @PimCategoryId ; 

			 MERGE INTO ZnodePublishCategory TARGET USING 
			 ( Select PC.PimCategoryId,
					  PC.PimCategoryHierarchyId,
					  PC.PimParentCategoryId,
					  PC.ParentPimCategoryHierarchyId,
					  PC.PublishCatalogId
					  FROM @TBL_PimCategoryIds PC ) 
			 SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = SOURCE.PublishCatalogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
				TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,
			 PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             
			 WHEN NOT MATCHED THEN 
			 INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 ,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,SOURCE.PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)

				OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			     	    
			 -- here update the publish parent category id
            UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			FROM ZnodePublishCategory ZPC
            INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			WHERE ZPC.PublishCatalogId = TBPC.PublishCatalogId 
			AND TBPC.PublishCatalogId  in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL AND 
			ZPC.PimCategoryId = @PimCategoryId  ;

			UPDATE a
			SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId = b.PublishCatalogId AND b.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND a.PimCategoryId = @PimCategoryId 
			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
			 --INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;
			
		     SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId	 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
					   FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId in (Select PimCatalogId from @TBL_PublishCatalogId)
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT TBC.VersionId,TBPC.PublishCategoryId ZnodeCategoryId,TBC.PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId))
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId) )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),


                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+
					  ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;
	
			Select PublishCategoryId ,VersionId	, PimCatalogId	, LocaleId,PublishCatalogId
			into #OutPublish from @TBL_PublishCatalogId CLI CROSS JOIN @TBL_CategoryXml  
			--group by PimCatalogId,VersionId,PublishCategoryId

			Alter TABLE #OutPublish ADD Id int Identity 
			SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
			 --SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
			SET @Counter =1 
            WHILE @Counter <= @MaxId -- Loop on Locale id 
            BEGIN
				SELECT @VersionId = VersionId  ,
				@PublishCategoryId = PublishCategoryId 
				from #OutPublish where ID = @Counter

				SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
				where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 
	
				IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
				BEGIN
					SET @ExistingPublishCategoryId  = @ExistingPublishCategoryId + ',' +  Convert(nvarchar(100),@PublishCategoryId )
					UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
					ModifiedDate = @GetDate
					WHERE PublishCatalogLogId = @VersionId;
				END
				DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
				SET @Counter  = @Counter  + 1  
			END
           	Select distinct 
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCategoryId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PublishCategoryId,
			SUBSTRING(( SELECT Distinct ',' + CAST(VersionId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) VersionId,	
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCatalogId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PimCatalogId,
			SUBSTRING(( SELECT Distinct ',' + CAST(LocaleId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) LocaleId
			from #OutPublish
			--group by PimCatalogId,VersionId,PublishCategoryId

			--Select PublishCategoryId ,VersionId	, PimCatalogId, LocaleId  from #OutPublish 

			Select CategoryXml from @TBL_CategoryXml 
			UPDATE ZnodePimCategory	SET IsCategoryPublish = 1 WHERE PimCategoryId = @PimCategoryId 
			Commit TRAN GetPublishCategory;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0 -- Publish Falies 
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_GetSearchLocation]...';
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchLocation')
BEGIN 
	DROP PROCEDURE Znode_GetSearchLocation
END 
GO
Create PROCEDURE [dbo].[Znode_GetSearchLocation](@PortalId	int, @Keywords	nvarchar(max))
AS
	/*
	  Summary:  
	*/
BEGIN
	BEGIN TRY

	  SELECT ZA.*, 
	       Isnull(ZA.FirstName,'') + ' ' + Isnull(ZA.LastName,'') + ' ' + Isnull(	ZA.DisplayName	,'') + ' ' + Isnull(ZA.CompanyName	,'')
		+ ' ' + Isnull(ZA.Address1	,'') + ' ' + Isnull(ZA.Address2	,'') + ' '  + Isnull(ZA.Address3	,'') + ' ' + Isnull(ZA.CountryName	,'') 
		+ ' ' + Isnull(ZA.StateName	,'') + ' ' + Isnull(ZA.CityName	,'') + ' ' + Isnull(ZA.PostalCode	,'') 
		+ ' ' + Isnull(ZA.PhoneNumber	,'') + ' ' + Isnull(ZA.Mobilenumber	,'') + ' ' + Isnull(ZA.AlternateMobileNumber	,'') 
		+ ' ' + Isnull(ZA.FaxNumber,'') SeachColumn
	  INTO #PortalAddress1  
	  FROM ZnodeAddress ZA 
	  INNER JOIN ZnodePortalAddress ZPA ON ZA.AddressId = ZPA.AddressId
	  WHERE ZPA.PortalId = @PortalId 	

	 DECLARE @SeachText VARCHAR(MAX), @SQL VARCHAR(1000)
	 SELECT @SeachText = COALESCE(@SeachText + ' or ', '') +'SeachColumn like ''%'+item+'%''' FROM dbo.Split (replace(@Keywords,' ' ,','),',') WHERE Item <> ''
	 SET @sql = 'Select AddressId,	FirstName,	LastName,	DisplayName,	CompanyName,	Address1,	Address2,	Address3,	CountryName,	StateName,	CityName,	
					    PostalCode,	PhoneNumber,	Mobilenumber,	AlternateMobileNumber,	FaxNumber,	IsDefaultBilling,	IsDefaultShipping,	IsActive,	ExternalId 
				 FROM #PortalAddress1  ZA WHERE 1=1 '+ CASE WHEN isnull(@SeachText,'') = '' THEN '' ELSE 'AND '+@SeachText END

	 EXEC (@sql)

		
	END TRY
	BEGIN CATCH
		DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSearchLocation @PortalId = '+CAST(@PortalId AS VARCHAR(20))+',@Keywords='+CAST(@Keywords AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSearchLocation',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO
PRINT N'Creating [dbo].[Znode_GetSearchWidgetConfiguration]...';


GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchWidgetConfiguration')
BEGIN 
	DROP PROCEDURE Znode_GetSearchWidgetConfiguration
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetSearchWidgetConfiguration]
(
       @PortalId INT
	   ,@UserId INT =  0  	
	   ,@CMSMappingId INT =0 ,
	   @LocaleId INT = 0
)
AS
/*
Summary: This Procedure is used to get text widget configuration
Unit Testing :
 EXEC [dbo].[Znode_GetSearchWidgetConfiguration] 1,2,213,4
*/
     BEGIN
         BEGIN TRY
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId() , @IncrementValue INT= 1;
             DECLARE @LocaleAll TABLE (
                                      RowId    INT IDENTITY(1 , 1) ,
                                      LocaleId INT ,
                                      Code     VARCHAR(300)
                                      );
             INSERT INTO @LocaleAll ( LocaleId , Code
                                    )
                    SELECT LocaleId , Code
                    FROM ZnodeLocale AS a
                    WHERE a.IsActive = 1
					AND
					a.LocaleId IN (CASE WHEN  @LocaleId = 0  THEN LocaleId ELSE @LocaleId END);


             DECLARE @ReturnXML TABLE (
                                      ReturnXMl XML
                                      );
             WHILE @IncrementValue <= ( SELECT MAX(RowId)
                                        FROM @LocaleAll
                                      )
                 BEGIN
                     DECLARE @CMSWidgetData TABLE (
                                                  CMSSearchWidgetId INT ,
                                                  LocaleId                     INT ,
                                                  CMSWidgetsId                 INT ,
                                                  WidgetsKey                   NVARCHAR(256) ,
                                                  CMSMappingId                 INT ,
                                                  TypeOFMapping                NVARCHAR(100) ,
												  [AttributeCode]   varchar(300),
                                                  [SearchKeyword]             varchar(300)
                                                  );
                     DECLARE @CMSWidgetDataFinal TABLE (
                                                       CMSSearchWidgetId INT ,
                                                       LocaleId                     INT ,
                                                       CMSWidgetsId                 INT ,
                                                       WidgetsKey                   NVARCHAR(256) ,
                                                       CMSMappingId                 INT ,
                                                       TypeOFMapping                NVARCHAR(100) ,
                                                      [AttributeCode]   varchar(300),
                                                       [SearchKeyword]             varchar(300)
                                                       );
                     INSERT INTO @CMSWidgetDataFinal
                            SELECT CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
                            FROM ZnodeCMSSearchWidget AS a
                            WHERE ( a.TypeOFMapping = 'ContentPageMapping'
                                  AND EXISTS ( SELECT TOP 1 1
                                           FROM ZnodeCMSContentPages
                                           WHERE a.CMSMappingId = CMSContentPagesId
                                                 AND PortalId = @PortalId  )
                                              OR ( a.TypeOFMapping = 'PortalMapping'
													AND
													a.CMSMappingId = @PortalId )
												AND
                                  ( a.LocaleId IN ( ( SELECT LocaleId
                                                      FROM @LocaleAll
                                                      WHERE RowId = @IncrementValue
                                                    ) , @DefaultLocaleId
                                                  ) )	  )
							     AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0  );
							--	SELECT * fROM @CMSWidgetDataFinal
                     INSERT INTO @CMSWidgetData
                            SELECT CMSSearchWidgetId , ( SELECT LocaleId
                                                                    FROM @LocaleAll
                                                                    WHERE RowId = @IncrementValue
                                                                  ) AS LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping ,AttributeCode,SearchKeyword
                            FROM @CMSWidgetDataFinal
                            WHERE LocaleId = ( SELECT LocaleId
                                               FROM @LocaleAll
                                               WHERE RowId = @IncrementValue
                                             );
                     INSERT INTO @CMSWidgetData
                            SELECT CMSSearchWidgetId , ( SELECT LocaleId
                                                                    FROM @LocaleAll
                                                                    WHERE RowId = @IncrementValue
                                                                  ) AS LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
                            FROM @CMSWidgetDataFinal AS p
                            WHERE p.LocaleId = @DefaultLocaleId
                                  AND
                                  NOT EXISTS ( SELECT TOP 1 1
                                               FROM @CMSWidgetData AS q
                                               WHERE q.CMSWidgetsId = p.CMSWidgetsId
                                                     AND
                                                     q.WidgetsKey = p.WidgetsKey
                                                     AND
                                                     q.TypeOFMapping = p.TypeOFMapping
                                                     AND
                                                     q.CMSMappingId = p.CMSMappingId
                                             );

										

                     INSERT INTO @ReturnXML ( ReturnXMl
                                            )
                            SELECT ( SELECT CMSSearchWidgetId AS CMSSearchWidgetId , LocaleId , CMSWidgetsId AS WidgetsId , WidgetsKey , CMSMappingId AS MappingId , TypeOFMapping , ISNULL(AttributeCode,'') AttributeCode,SearchKeyword , @PortalId AS PortalId
                                     FROM @CMSWidgetData AS a
                                     WHERE a.CMSSearchWidgetId = w.CMSSearchWidgetId
                                     FOR XML PATH('SearchWidgetEntity')
                                   )
                            FROM @CMSWidgetData AS w
						
							;
                     SET @IncrementValue = @IncrementValue + 1;
                     DELETE FROM @CMSWidgetData;
                     DELETE FROM @CMSWidgetDataFinal;
                 END;
             SELECT *
             FROM @ReturnXML;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetTextWidgetConfiguration @PortalId = '+CAST(@PortalId AS VARCHAR(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSearchWidgetConfiguration',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_GetSeoDetailsForPublish]...';

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSeoDetailsForPublish')
BEGIN 
	DROP PROCEDURE Znode_GetSeoDetailsForPublish
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetSeoDetailsForPublish]
(   
	@PortalId INT=0,
	@IsBrand  Bit = 0  ,
	@SeoId    VARCHAR(MAX) = '',
	@SeoType  VARCHAR(100) = ''
)
AS 
   /*
     Summary:- This Procedure is used to get the Seo Detials on the bassis of Portal 
     Unit Testing 
	 Znode_GetSeoDetailsForPublish @PortalId=0, @IsBrand=0, @SeoId = '14',@SeoType = 'Product'
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_SeoId TABLE(SeoId INT);

			 INSERT INTO @TBL_SeoId(SeoId)
			 SELECT item FROM dbo.Split(@SeoId, ',') SP;

			 ;With Cte_SeoDetails AS
			 (
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.SEOId,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, Case When Isnull(ZCSD.IsPublish ,0 ) = 0 then 'Draft' ELSE 'Published' END AS PublishStatus 
				FROM ZnodeCMSSEODetail AS ZCSD 
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                 
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE (ZCSD.PortalId= @PortalId OR @PortalId = 0 ) AND ZCST.Name <> 'Brand'
				AND EXISTS ( SELECT * FROM ZnodeLocale ZL WHERE ZL.LocaleId = ZCSDL.LocaleId AND IsActive = 1 )
				AND( EXISTS (SELECT TOP 1 1 FROM @TBL_SeoId TBSD WHERE TBSD.SeoId = ZCSD.SEOId) OR @SeoId = '' )
				AND ( ZCST.Name = @SeoType OR @SeoType = '' ) 
				UNION ALL
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.SEOId,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, Case When Isnull(ZCSD.IsPublish ,0 ) = 0 then 'Draft' ELSE 'Published' END AS  PublishStatus
				FROM ZnodeCMSSEODetail AS ZCSD 
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                  
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE @IsBrand = 1 AND ZCST.Name = 'Brand'
				AND EXISTS ( SELECT * FROM ZnodeLocale ZL WHERE ZL.LocaleId = ZCSDL.LocaleId AND IsActive = 1 )
				AND( EXISTS (SELECT TOP 1 1 FROM @TBL_SeoId TBSD WHERE TBSD.SeoId = ZCSD.SEOId) OR @SeoId = '' )
				AND ( ZCST.Name = @SeoType OR @SeoType = '' ) 
			)
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, SEOId, IsRedirect, CMSSEODetailLocaleId, LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus   
			FROM Cte_SeoDetails 
			UNION ALL
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, SEOId, IsRedirect, CMSSEODetailLocaleId, ZL.LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus   
			FROM Cte_SeoDetails CSD
			LEFT JOIN ZnodeLocale ZL ON IsActive = 1 AND IsDefault = 0 --ZL.LocaleId = CSD.LocaleId
			WHERE 
			NOT EXISTS( SELECT * FROM Cte_SeoDetails CSD1 
			            INNER JOIN ZnodeLocale ZL1 ON CSD1.LocaleId = ZL1.LocaleId AND ZL1.IsActive = 1 AND ZL1.IsDefault = 0
						WHERE CSD.CMSSEOTypeId = CSD1.CMSSEOTypeId AND CSD.SEOId = CSD1.SEOId AND ZL.LocaleId = CSD1.LocaleId )
			AND EXISTS ( SELECT * FROM ZnodeLocale ZL WHERE ZL.LocaleId = CSD.LocaleId AND IsActive = 1 AND IsDefault = 1 )

			
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSeoDetailsForPublsh @PortalId = '+CAST(@PortalId AS VARCHAR(10))+',@IsBrand ='+CAST(@IsBrand AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSeoDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_ImportPartialInsertUpdatePimProduct]...';


GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialInsertUpdatePimProduct')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialInsertUpdatePimProduct
END 
GO
CREATE  PROCEDURE [dbo].[Znode_ImportPartialInsertUpdatePimProduct]
(
    @PimProductDetail  PIMPRODUCTDETAIL READONLY,
    @UserId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0,
	@CopyPimProductId  INT	  = 0 )
AS
   /*
     Summary : To Insert / Update single Product with multiple attribute values 
     Update Logic: 
*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
			 DECLARE @PimProductId INT;
			 DECLARE @TBL_PimProductId TABLE(PimAttributeValueId INT,ZnodePimAttributeValueLocaleId INT );
			 DECLARE @TBL_CopyPimProductId TABLE(PimAttributeValueId INT,OldPimAttributeValueId INT);
			 DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId()
			 DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
			 DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
			 DECLARE @TBL_MediaAttributeValue TABLE (PimAttributeValueId INT ,LocaleId INT ,AttributeValue VARCHAr(300),MediaId INT)
			 DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeValueId INT , LocaleId INT , AttributeValue INT)
			 DECLARE @ZnodePimAttributeValue TABLE (PimAttributeValueId  INT, PimAttributeFamilyId INT,PimAttributeId INT);

			 DECLARE @AssociatedProduct VARCHAR(4000);
			 DECLARE @ConfigureAttributeId VARCHAR(4000);
			 DECLARE @ConfigureFamilyId VARCHAR(4000);
			 DECLARE @PimAttributeFamilyId INT;
			 DECLARE @LocaleId INT 

			 DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
			 DECLARE @pimProductNameAttributeId VARCHAR(50) =[dbo].Fn_GetProductNameAttributeId ()
			 DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
			 Declare @SKU nvarchar(300),@ProductName nvarchar(300)
			 Select * into ##PimProductData from @PimProductDetail
			--DECLARE @PimAttributeFamily VARCHAR(50) =  [dbo].[Fn_GetAttributeFamilyId]()
			--Update ##PimProductData SET AttributeValue = 
			--(SELECT FamilyCode from ZnodePimAttributeFamily where PimAttributeFamilyId = @PimAttributeFamilyId)
			--where PimAttributeId = @PimAttributeFamily

			--DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]()
			 
			--insert into ##PimProductData ([PimAttributeId],[PimAttributeFamilyId],[ProductAttributeCode],[ProductAttributeDefaultValueId],
			--[PimAttributeValueId],	[LocaleId],[PimProductId],[AttributeValue],[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]) 
			 
			--SELECT TOP 1 @PimAttributeIsPublish,[PimAttributeFamilyId],'PublishStatus' ProductAttributeCode,NULL ProductAttributeDefaultValueId,
			--NULL PimAttributeValueId,	[LocaleId],[PimProductId],
			--CASE when isnull([PimProductId] ,0) > 1 then 'Draft' else 'Not Publish' END AttributeValue,
			--[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]
			--from @PimProductDetail  


			INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM  [dbo].[Fn_GetDefaultAttributeId] ()
			 
			 INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

			 INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
			 SELECT PimAttributeId, AttributeCode   FROM [dbo].[Fn_GetTextAreaAttributeId]()

			 
			 SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
                FROM ##PimProductData;
             
			 

			 
			 
			 SELECT TOP 1 @LocaleId = LocaleId
                FROM ##PimProductData;

             -- Retrive input productId from ##PimProductData table ( having multiple attribute values with common productId) 

             SELECT TOP 1 @PimProductId = PimProductId
             FROM ##PimProductData;
			
             IF ISNULL(@PimProductId, 0) = 0
                 BEGIN
                     INSERT INTO ZnodePimProduct
                     (PimAttributeFamilyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @PimAttributeFamilyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate;
                     SET @PimProductId = SCOPE_IDENTITY();
					 If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						
						Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId
						insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
					 End
		

                 END;
             ELSE 
                 BEGIN
                     UPDATE ZNodePimProduct
                       SET
                          -- PimAttributeFamilyId = @PimAttributeFamilyId,
						   IsProductPublish  = 
						   -- IsProductPublish = 1 for status published
						   -- IsProductPublish = 0 for status Draft
						   -- IsProductPublish = NULL for status NOT published 
						   
						   CASE 
								when IsProductPublish =1 then  0  -- IF status is publish then status should be draft
								when IsProductPublish =0 then 0   -- IF it is draft then it should be draft 
								else null END , -- if it is not publish then it will not publish
                           ModifiedBy = @UserId,
                           ModifiedDate = @GetDate
                     WHERE PimProductId = @PimProductId;
            									
					 INSERT INTO @TBL_PimProductId(PimAttributeValueId)
					 SELECT ZPAV.PimAttributeValueId
                     FROM ZnodePimAttributeValue ZPAV
					 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId AND ( @localeID = @DefaultLocaleId OR ZPA.IsLocalizable = 1 OR EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FN WHERE FN.PimAttributeId = ZPAV.PimAttributeId)))
					 --INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
					 WHERE ZPAV.PimProductId = @PimProductId
					 AND NOT EXISTS
                     (
                        SELECT TOP 1 1
                        FROM ##PimProductData TBPDI
                        WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                AND TBPDI.PimProductId = ZPAV.PimProductId
					 )
                     
				    --  SELECT * FROM @TBL_PimProductId

			
     --                DELETE FROM ZnodePimAttributeValueLocale
     --                WHERE EXISTS
     --                (
     --                    SELECT TOP 1 1
     --                    FROM @TBL_PimProductId TBPD
     --                    WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValueLocale.PimAttributeValueId 
								
     --                ) AND LocaleId = @LocaleId;
					-- DELETE  ZnodePimProductAttributeDefaultValue 
					--  WHERE EXISTS
     --                (
     --                    SELECT TOP 1 1
     --                    FROM @TBL_PimProductId TBPD
     --                    WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
								
     --                ) AND LocaleId = @LocaleId;
					-- DELETE FROM ZnodePimProductAttributeMedia 
					--  WHERE EXISTS
     --                (
     --                    SELECT TOP 1 1
     --                    FROM @TBL_PimProductId TBPD
     --                    WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeMedia.PimAttributeValueId 
								
     --                ) 
					-- AND LocaleId = @LocaleId;

					---- SELECT * FROM @TBL_PimProductId

					-- DELETE FROM ZnodePimProductAttributeTextAreaValue
					--   WHERE EXISTS
     --                (
     --                    SELECT TOP 1 1
     --                    FROM @TBL_PimProductId TBPD
     --                    WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeTextAreaValue.PimAttributeValueId 
								
     --                ) AND LocaleId = @LocaleId ;

     --                DELETE FROM ZnodePimAttributeValue
     --                WHERE EXISTS
     --                (
     --                    SELECT TOP 1 1
     --                    FROM @TBL_PimProductId TBPD
     --                    WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId
     --                )
					-- AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
					-- AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeTextAreaValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
					-- AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId );
				
					If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
					 Begin
						Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId
						Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId

						insert into ZnodePimDownloadableProduct(SKU,ProductName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
						Select TOP 1 PD.AttributeValue, @ProductName,@UserId , @GetDate, @UserId , @GetDate from  ##PimProductData PD where  PD.PimAttributeId = @pimSkuAttributeId 
						AND not exists (select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  =  PD.AttributeValue)
						IF NOT Exists (	select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  = @SKU)
							insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
							Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 

					 End
                 END;
		
		    MERGE INTO ZnodePimAttributeValue TARGET
              USING ##PimProductData SOURCE
              ON(
				TARGET.PimProductId = @PimProductId
                AND TARGET.PimAttributeId = SOURCE.PimAttributeId)
                --AND ISNULL(TARGET.PimAttributeFamilyId, 0) = ISNULL(SOURCE.PimAttributeFamilyId, 0))
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.PimAttributeFamilyId = CASE
                                                                   WHEN Source.PimAttributeFamilyId = 0
                                                                   THEN NULL
                                                                   ELSE Source.PimAttributeFamilyId
                                                               END,
                                 TARGET.PimAttributeDefaultValueId = CASE
                                                                         WHEN SOURCE.ProductAttributeDefaultValueId = 0
                                                                         THEN NULL
                                                                         ELSE SOURCE.ProductAttributeDefaultValueId
                                                                     END, 
                                 TARGET.AttributeValue					= SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeFamilyId,
                             PimProductId,
                             PimAttributeId,
                             PimAttributeDefaultValueId,
                             --,AttributeValue
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (CASE
                  WHEN Source.PimAttributeFamilyId = 0
                  THEN @PimDefaultFamily
                  ELSE Source.PimAttributeFamilyId
              END,
              @PimProductId,
              SOURCE.PimAttributeId,
              CASE
                  WHEN SOURCE.ProductAttributeDefaultValueId = 0
                  THEN NULL
                  ELSE SOURCE.ProductAttributeDefaultValueId
              END, 
              --,SOURCE.AttributeValue
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             )
             --WHEN NOT MATCHED BY SOURCE AND TARGET.PimProductId = @PimProductId
             --                               AND Target.PimAttributeFamilyId IS NOT NULL
             --THEN DELETE
             OUTPUT INSERTED.PimAttributeValueId,
                    INSERTED.PimAttributeFamilyId,
                    INSERTED.PimAttributeId
                    INTO @ZnodePimAttributeValue;
        		 
		INSERT INTO @TBL_MediaAttributeValue (PimAttributeValueId,LocaleId , AttributeValue,MediaId)
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                         zm.Path AttributeValue
						 ,ZM.MediaId
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_MediaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodeMedia ZM ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue ,',') SP WHERE sp.Item = ZM.MediaId ))
		
		DELETE FROM ZnodePimProductAttributeMedia 
		WHERE EXISTS 
		 (SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId 
		 AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId  AND ZnodePimProductAttributeMedia.Localeid = @LocaleId)



		MERGE INTO ZnodePimProductAttributeMedia TARGET 
		USING @TBL_MediaAttributeValue SOURCE 
		ON (        TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
		        AND TARGET.MediaPAth = SOURCE.AttributeValue
                  AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.MediaPath = SOURCE.AttributeValue,
						   TARGET.MediaId   = SOURCE.MediaId,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             MediaPath,
							 MediaId ,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
			  SOURCE.MediaId,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		 --WHEN NOT MATCHED BY SOURCE AND EXISTS 
		 --(SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE TARGET.PimAttributeValueId = TBLM.PimAttributeValueId AND TBLM.MediaId = TARGET.MediaId  AND TARGET.Localeid = @LocaleId)
		 --  THEN 
		 --DELETE  ;


	   ;With Cte_TextAreaAttributeValue AS 
		 (
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
        FROM @ZnodePimAttributeValue AS a
        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_TextAreaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		
		)
		
		MERGE INTO ZnodePimProductAttributeTextAreaValue TARGET 
		USING Cte_TextAreaAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
		-- SELECT a.PimAttributeValueId,
  --                      b.LocaleId,
  --                      d.PimAttributeDefaultValueId  AttributeValue,b.PimAttributeId
  --      FROM @ZnodePimAttributeValue AS a
  --        INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId
  --                                              AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		--INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		--INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	



        INSERT INTO @TBL_DefaultAttributeValue (PimAttributeValueId,LocaleId,AttributeValue)  
		SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        d.PimAttributeDefaultValueId  AttributeValue
        FROM @ZnodePimAttributeValue AS a
          INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	    
	     -- SELECT * FROM @TBL_DefaultAttributeValue

		--  SELECT * FROM Cte_DefaultAttributeValue
		DELETE FROM ZnodePimProductAttributeDefaultValue 
		WHERE  EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
												AND TBLAV.AttributeValue   <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId 
												 AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId )

		MERGE INTO ZnodePimProductAttributeDefaultValue TARGET 
		USING @TBL_DefaultAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
              AND TARGET.PimAttributeDefaultValueId =  SOURCE.AttributeValue
			    AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
                                 TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN 
		    INSERT(PimAttributeValueId,
                             LocaleId,
                             PimAttributeDefaultValueId,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) 
			VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
			 --WHEN NOT MATCHED BY SOURCE  AND EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = TARGET.PimAttributeValueId 
				--								AND TBLAV.AttributeValue   = TARGET.PimAttributeDefaultValueId  AND TARGET.LocaleId = @LocaleId )
			 --THEN 
			 --DELETE 
			 --;
		
		   MERGE INTO ZnodePimAttributeValueLocale TARGET
             USING
             (
                 SELECT a.PimAttributeValueId,
                        b.LocaleId,
                        AttributeValue
                 FROM @ZnodePimAttributeValue AS a
                      INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                             --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
                 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId  )
			     AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId  )
				 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId  )
			 ) SOURCE
             ON(TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
                AND TARGET.LocaleId = SOURCE.LocaleId)
                 WHEN MATCHED
                 THEN UPDATE SET
                                 TARGET.AttributeValue = SOURCE.AttributeValue,
                                 TARGET.CreatedBy = @UserId,
                                 TARGET.CreatedDate = @GetDate,
                                 TARGET.ModifiedBy = @UserId,
                                 TARGET.ModifiedDate = @GetDate
                 WHEN NOT MATCHED
                 THEN INSERT(PimAttributeValueId,
                             LocaleId,
                             AttributeValue,
                             CreatedBy,
                             CreatedDate,
                             ModifiedBy,
                             ModifiedDate) VALUES
             (SOURCE.PimAttributeValueId,
              SOURCE.LocaleId,
              SOURCE.AttributeValue,
              @UserId,
              @GetDate,
              @UserId,
              @GetDate
             );
             SET @AssociatedProduct =
             (
                 SELECT MAX(AssociatedProducts)
                 FROM ##PimProductData AS a
             );
             INSERT INTO ZnodePimProductTypeAssociation
             (PimParentProductId,
              PimProductId,
              DisplayOrder,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           Item,
                           ID AS RowId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@AssociatedProduct, ',') AS b
                         INNER JOIN ZNodePimProduct AS q ON(q.PimProductId = b.Item);
             SET @ConfigureAttributeId =
             (
                 SELECT MAX(ConfigureAttributeIds)
                 FROM ##PimProductData AS a
             );
             SET @ConfigureFamilyId =
             (
                 SELECT MAX(ConfigureFamilyIds)
                 FROM ##PimProductData AS a
             );
             INSERT INTO [ZnodePimConfigureProductAttribute]
             (PimProductId,
              PimFamilyId,
              PimAttributeId,
              CreatedBy,
              CreatedDate,
              ModifiedBy,
              ModifiedDate
             )
                    SELECT @PimProductId,
                           @ConfigureFamilyId,
                           q.PimAttributeId,
                           @UserId,
                           @GetDate,
                           @UserId,
                           @GetDate
                    FROM dbo.Split(@ConfigureAttributeId, ',') AS b
                         INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
					WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute RTR  WHERE  RTR.PimProductId = @PimProductId AND RTR.PimAttributeId = q.PimAttributeId);



             IF @IsNotReturnOutput = 0
                 SELECT @PimProductId AS Id,
                        CAST(1 AS BIT) AS Status;
             SET @status = 1;

			 IF @CopyPimProductId > 0 
			 BEGIN 
			   INSERT INTO ZnodePimAttributeValueLocale  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimAttributeValueLocale ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId

			    INSERT INTO ZnodePimProductAttributeDefaultValue  (PimAttributeValueId,LocaleId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.PimAttributeDefaultValueId,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeDefaultValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId


			   INSERT INTO ZnodePimProductAttributeTextAreaValue  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   			   
			   INSERT INTO ZnodePimProductAttributeMedia  (PimAttributeValueId,LocaleId,MediaPath,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			   SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.MediaPath,@UserId,@GetDate,@UserId,@GetDate
			   FROM ZnodePimProductAttributeMedia ZPAVL 
			   INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			   INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			   WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			   AND ZPAV.PimProductId = @CopyPimProductId
			   
			 END 
			 
			 If Object_id ('Tempdb..##PimProductData')  is not null 
				DROP TABLE Tempdb..##PimProductData

             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE()
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdatePimProduct @UserId = '+CAST(@UserId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@CopyPimProductId='+CAST(@CopyPimProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportInsertUpdatePimProduct',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_ImportPartialPimProductData]...';
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialPimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialPimProductData
END 
GO
CREATE  PROCEDURE [dbo].[Znode_ImportPartialPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             --BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 


			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
			 SET @DefaultFamilyId = 0 
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					--EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    --UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 

                 END;
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					   -- ELSE 
					   -- CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   -- AttributeDefaultValueCode  VARCHAR(100)
					   -- Index Ix_Default (PimAttributeId, AttributeDefaultValueCode));
					   --IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
					   --Begin
						  --Select 'Without Index'
					   --END
					   --Else
						  --Alter TABLE #DefaultAttributeValue ADD Index Ix_Default (PimAttributeId, AttributeDefaultValueCode);
					


					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
          
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
    --         DECLARE @PimProductDetail TABLE 
			 --(
			      
				-- PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				--  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				--  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				--  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  INDEX Ix CLUSTERED (RowNumber) 
    --            );

			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				
		SET @SQLQuery = ' insert into ZnodeImportSuccessLog (ImportedSku,ImportedProductId,ImportedGuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
		Select SKU, PimProductId , ''' + @NewGUID  + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''' from ' + @TableName ;
		EXEC	sp_executesql @SQLQuery

		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount
		
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.'+@SourceColumnName+' ) PimAttributeDefaultValueId ,'
									+ @SourceColumnName+','+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
									
									, RowNumber FROM '+@TableName+' TN';
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 Select * into #PimProductDetail from @PimProductDetail
			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail a 

             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'Yes','TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber) FROM #PimProductDetail
             );
             DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL;  --User define table type to pass multiple records of product in single step
		

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
					   	INSERT INTO @PimProductDetailToInsert(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
						PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
						SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
						PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds FROM #PimProductDetail
						WHERE [#PimProductDetail].RowNumber = @IncrementalId; --AND RTRIM(LTRIM(AttributeValue)) <> '';

						Delete from @PimProductDetailToInsert where RTRIM(LTRIM(AttributeValue)) = '';
	                    --ORDER BY [@PimProductDetail].RowNumber;
                        ----Call process to finally insert data into 
                        ----------------------------------------------------------
						--1. [dbo].[ZnodePimProduct]
						--2. [dbo].[ZnodePimAttributeValue]
						--3. [dbo].[ZnodePimAttributeValueLocale]
						if Exists (select TOP 1 1 from @PimProductDetailToInsert)
							EXEC [Znode_ImportPartialInsertUpdatePimProduct] @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
				
						DELETE FROM @PimProductDetailToInsert;
						SET @IncrementalId = @IncrementalId + 1;
					
                 END;
             UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(2), ProcessCompletedDate = Getdate() WHERE ImportProcessLogId = @ImportProcessLogId;
            -- COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            
			-- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_ImportStoreLocatorAddress]...';
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportStoreLocatorAddress')
BEGIN 
	DROP PROCEDURE Znode_ImportStoreLocatorAddress
END 
GO
CREATE PROCEDURE [dbo].[Znode_ImportStoreLocatorAddress](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive Value from global setting 
		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'
		-- Three type of import required three table varible for product , category and brand

		DECLARE @InsertCustomerAddress TABLE
		( 
			 RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,PortalCode	nvarchar(600),StoreLocatorName	nvarchar(600)
			,FirstName	varchar	(300),LastName	varchar	(300),DisplayName	nvarchar(1200),Address1	varchar	(300),Address2	varchar	(300)
			,CountryName	varchar	(3000),StateName	varchar	(3000),CityName	varchar	(3000),PostalCode	varchar	(50)
			,PhoneNumber	varchar	(50),
			IsDefaultBilling	bit 
			,IsDefaultShipping	bit	,IsActive	bit	,ExternalId	nvarchar(2000),CompanyName nvarchar(2000), GUID NVARCHAR(400),
			DisplayOrder int ,Latitude decimal, Longitude decimal
		);

		
						
		
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomerAddress( RowNumber,PortalCode,StoreLocatorName,FirstName,LastName,DisplayName,Address1,Address2,CountryName,
											StateName,CityName,PostalCode,PhoneNumber,
											IsDefaultBilling,IsActive,IsDefaultShipping,ExternalId,CompanyName,DisplayOrder,Latitude,Longitude,GUID )
		EXEC sys.sp_sqlexec @SSQL;

	
		-- start Functional Validation 
		-----------------------------------------------
		--,PortalCode	,StoreName,IsStoreActive

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '19', 'PortalCode', PortalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomerAddress AS ii
				WHERE ii.PortalCode NOT IN 
				(
					SELECT StoreName FROM ZnodePortal 
				);
			
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '8', 'StoreLocatorName', StoreLocatorName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM @InsertCustomerAddress AS ii
				WHERE ISnull(ltrim(rtrim(ii.StoreLocatorName)), '') = ''


		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--			   SELECT '35', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--			   FROM @InsertCustomerAddress IC where  exists (
		--			   Select TOP 1 1 from ZnodePortalAddress ZPA Inner join ZnodePortal ZP ON ZPA.PortalId = ZP.PortalId 
		--			   where  ZP.StoreName =IC.PortalCode and ZPA.StoreName = IC.StoreLocatorName AND ZPA. )


				--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				--	   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				--	   FROM @InsertCustomer AS ii
				--	   WHERE ii.UserName not like '%_@_%_.__%' 
		 
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		
		DELETE FROM @InsertCustomerAddress
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomerAddress
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End


		-- Insert Product Data 
				
				DECLARE @InsertedUserAddress TABLE (AddressId  nvarchar(256), PortalId nvarchar(max), PortalCode nvarchar(max)) 
				-- Pending for discussion include one identity column for modify address
				
				--UPDATE ANU SET 
				--ANU.PhoneNumber	= IC.PhoneNumber
				--from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				--INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				--INNER JOIN @InsertCustomerAddress IC ON ANZU.UserName = IC.UserName 
				--INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
				--INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
				 
				--where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)			
				Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
										StateName,CityName,PostalCode,PhoneNumber,
										IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
				OUTPUT INSERTED.AddressId , inserted.Address3 INTO  @InsertedUserAddress (AddressId,PortalCode) 			 
				SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2, IC.PortalCode +  '~' + IC.StoreLocatorName,IC.CountryName,
				IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
				isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, @UserId , @GetDate, @UserId , @GetDate
				FROM  @InsertCustomerAddress IC

				DECLARE @AccountId INT
				SELECT @AccountId = AccountId FROM ZnodeUser where UserId = @UserId


				INSERT INTO ZnodePortalAddress ( PortalId,AddressId,MediaId,StoreName,DisplayOrder,Latitude,Longitude
				,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
				Select ZP.PortalId ,IUA.AddressId,NULL,ICA.StoreLocatorName, ICA.DisplayOrder,ICA.Latitude,ICA.Longitude 
				, @UserId , @GetDate, @UserId , @GetDate  from @InsertCustomerAddress ICA INNER JOIN @InsertedUserAddress IUA ON 
				ICA.PortalCode + '~' + ICA.StoreLocatorName  = IUA.PortalCode
				Inner join ZnodePortal ZP on ICA.PortalCode = ZP.StoreName
				WHERE NOT EXISTS ( SELECT * FROM ZnodePortalAddress AA WHERE AA.PortalId = ZP.PortalId 
				AND AA.AddressId = IUA.AddressId 
				AND AA.StoreName = ICA.StoreLocatorName 
				AND AA.Latitude = ICA.Latitude
				AND AA.Longitude =  ICA.Longitude)
			
				UPDATE ZA SET ZA.Address3 = null 
				From ZnodeAddress ZA INNER JOIN @InsertedUserAddress IUA ON ZA.AddressId = IUA.AddressId 

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO
PRINT N'Creating [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity]...';
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemQuantity')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemQuantity
END 
GO
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@IsCallFromPDP BIT, @Status bit OUT)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem_aa @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
	1259
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @SaveCartLineItemIdForGroup int= 0;
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int IDENTITY(1, 1), OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute varchar(max), 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails )
			   SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ) AS BundleProductIds, Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ) AS ConfigurableProductIds, Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, 
			          Tbl.Col.value( 'PersonaliseValuesList[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

		DECLARE @OmsSavedCartId int, @OmsSavedCartLineItemId int,@OmsOrderId int;

	
		DECLARE @TBL_AllProductsTypeData TABLE
		( 
			 RowId int, SequenceId int IDENTITY(1, 1), ParentOmsSavedCartLineItemId int, SKU nvarchar(1000), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), CartAddOnDetails nvarchar(max), AutoAddon varchar(max), OmsOrderId int null ,IsFromAddon INT 
		);
		DECLARE @AddonProductSKU nvarchar(max)=	(SELECT TOP 1 AddOnValueIds	FROM @TBL_SavecartLineitems	), 
				@BundleProductSKU nvarchar(max)= (SELECT TOP 1 BundleProductIds	FROM @TBL_SavecartLineitems	);
		SET @OmsSavedCartId =( SELECT TOP 1 OmsSavedCartId FROM @TBL_SavecartLineitems);
		SET @OmsOrderId =( SELECT TOP 1 OmsOrderId FROM @TBL_SavecartLineitems );
		
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM ZnodeOmsSavedCartLineItem AS qa
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM @TBL_SavecartLineitems AS ssds
		--		WHERE ssds.sku = qa.SKU
		--	)
		--)
		--BEGIN
		--	DELETE FROM ZnodeOmsPersonalizeCartItem
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM ZnodeOmsSavedCartLineItem
		--		WHERE OmsSavedCartId = @OmsSavedCartId AND 
		--			  OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId
		--	);
		
		--	IF EXISTS (SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails is not null)
		--	BEGIN 
		--		DELETE ZnodeOmsSavedCartLineItemDetails
		--		WHERE EXISTS
		--		( 
		--			SELECT * FROM ZnodeOmsSavedCartLineItem SCLI
		--			WHERE ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND SCLI.OmsSavedCartId = @OmsSavedCartId AND SCLI.OmsOrderId = @OmsOrderId	
		--		)
		--    END

		--	DELETE FROM ZnodeOmsSavedCartLineItem 
		--	WHERE OmsSavedCartId = @OmsSavedCartId AND OmsOrderId = @OmsOrderId									

		--END;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.BundleProductIds, ',' ) AS q
			   WHERE a.BundleProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> '' ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.ConfigurableProductIds, ',' ) AS q
			   WHERE a.ConfigurableProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
			   ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT RowID, NULL, SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS SKU, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.GroupProductIds, ',' ) AS q
			   WHERE a.GroupProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))) <> ''
			   ;

		IF EXISTS
		(
			SELECT TOP 1 1	FROM @TBL_SavecartLineitems	WHERE GroupProductIds IS NOT NULL OR  ConfigurableProductIds IS NOT NULL
		)
		BEGIN
			SET @AddOnQuantity =(SELECT MAX(Quantity) FROM @TBL_AllProductsTypeData	);
		END;


		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT a.RowID, NULL, q.Item AS SKU,
											   CASE
											   WHEN @AddOnQuantity = 0 THEN a.Quantity
											   ELSE @AddOnQuantity
											   END, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.AddOnValueIds, ',' ) AS q   WHERE a.AddOnValueIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
	DECLARE @Tbl_SaveCartIds TABLE
		( 
			OmsSavedCartLineItemId int, SKU nvarchar(max), RowId int,ParentOmsSavedCartLineItemId INT 
		);

	DECLARE @IsCallForUpdate BIT = 0 
	DECLARE @saveCartLineItemId TABLE (OmsSavedCartLineItemId INT )
	INSERT INTO @saveCartLineItemId 
	SELECT DISTINCT CLI.OmsSavedCartLineItemId FROM ZnodeOmsSavedCartLineItem CLI 
																INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
																INNER JOIN ZnodeOmsSavedCartLineItem   YU ON (Yu.ParentOmsSavedCartLineItemId = CLI.OmsSavedCartLineItemId)
																INNER JOIN  @TBL_AllProductsTypeData tbad ON (tbad.SKU = YU.SKU )
	 WHERE CLI.ParentOmsSavedCartLineItemId IS null
	 INSERT INTO @saveCartLineItemId 
	SELECT DISTINCT CLI.OmsSavedCartLineItemId FROM ZnodeOmsSavedCartLineItem CLI 
												INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )														
	
	   --SELECT * FROM @saveCartLineItemId
	
	IF @IsCallFromPDP = 1
	BEGIN
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId)	THEN 0 ELSE 1 END
	END
		
	    UPDATE SI
		 SET  OmsSavedCartLineItemId = SL.OmsSavedCartLineItemId
		 FROM @TBL_SavecartLineitems SI
		LEFT JOIN ZnodeOmsSavedCartLineItem SL ON (SI.SKU = SL.SKU AND SI.OmsSavedCartId = SL.OmsSavedCartId AND SI.Sequence = SL.Sequence )
		
		MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING  (SELECT   ISNULL(SI.OmsSavedCartLineItemId,-1) AS OmsSavedCartLineItemId,SI.SKU,SI.Quantity,SI.OrderLineItemRelationshipTypeID,SI.CustomText,SI.CartAddOnDetails,SI.Sequence,SI.AutoAddon,SI.RowID,SI.OmsOrderId 
		FROM @TBL_SavecartLineitems SI 
		WHERE (EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY WHERE TY.OmsSavedCartLineItemId = SI.OmsSavedCartLineItemId ))
		 OR (@IsCallFromPDP = 1 AND NOT EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY ))) SOURCE 
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND SOURCE.OmsSavedCartLineItemId = TARGET.OmsSavedCartLineItemId AND @IsCallForUpdate = 0
		WHEN MATCHED   THEN
		UPDATE 
		SET   Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE Source.OrderLineItemRelationshipTypeID
																		 END, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.Sequence,OmsOrderId = @OmsOrderId,TARGET.AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
																		
		WHEN NOT MATCHED  
			  THEN INSERT(ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  VALUES( NULL, @OmsSavedCartId, Source.SKU, Source.Quantity,CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE OrderLineItemRelationshipTypeID
																		 END, 
					 Source.CustomText, Source.CartAddOnDetails, Source.Sequence, SOURCE.OmsOrderId, SOURCE.AutoAddon, @UserId, @GetDate, @UserId, @GetDate )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
		INTO @Tbl_SaveCartIds;

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_SavecartLineitems TSCLI ON TSCI.SKU = TSCLI.SKU AND TSCLI.RowID = TSCLI.RowID
			CROSS APPLY dbo.split ( ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )
		--END
		--	  SELECT * FROM @Tbl_SaveCartIds
		--SELECT b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
		--																CASE
		--																WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
		--																ELSE OrderLineItemRelationshipTypeID
		--																END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon, @UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate,a.RowId
		--	   FROM @TBL_AllProductsTypeData AS a
		--			INNER JOIN
		--			@Tbl_SaveCartIds AS b
		--			ON(a.RowId = b.RowId)
		--	   WHERE a.SKU IS NOT NULL AND 
		--			 a.SKU <> ''
		IF EXISTS (SELECT TOP 1  1  FROM @TBL_AllProductsTypeData )
		BEGIN 
        MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING ( SELECT b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
																		CASE
																		WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
																		ELSE OrderLineItemRelationshipTypeID
																		END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon, @UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate,a.RowId
			   FROM @TBL_AllProductsTypeData AS a
					INNER JOIN
					@Tbl_SaveCartIds AS b
					ON(a.RowId = b.RowId)
			   WHERE a.SKU IS NOT NULL AND 
					 a.SKU <> '') SOURCE
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND @IsCallForUpdate = 0 AND Target.ParentOmsSavedCartLineItemId = source.OmsSavedCartLineItemId
		WHEN MATCHED THEN
		UPDATE 
		SET ParentOmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId  , Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = 
																			 Source.OrderLineItemRelationshipTypeID, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.SequenceId,OmsOrderId = SOURCE.OmsOrderId,AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate


		WHEN NOT MATCHED
			  THEN INSERT ( ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, [Sequence], OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )

			  VALUES (SOURCE.OmsSavedCartLineItemId,SOURCE.OmsSavedCartId,SOURCE.SKU,SOURCE.Quantity,SOURCE.OrderLineItemRelationshipTypeID , SOURCE.CustomText,
			  SOURCE.CartAddOnDetails,SOURCE.SequenceId,SOURCE.OmsOrderId,SOURCE.AutoAddon,SOURCE.CreatedBy,SOURCE.CREATEDDATE,SOURCE.ModifiedBy, SOURCE.ModifiedDate
			  
			  )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
			   INTO @Tbl_SaveCartIds;
			   
		 END 

		--IF EXISTS ( SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails IS NOT NULL )
		--BEGIN
			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_AllProductsTypeData BAR ON ( TSCI.SKU = BAR.SKU AND BAR.RowID = TSCI.RowID )
			INNER JOIN @TBL_SavecartLineitems TSCLI ON (BAR.SKU = TSCLI.SKU AND BAR.RowID = TSCLI.RowID )
			CROSS APPLY dbo.split ( TSCLI.ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )
		--END
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM @TBL_SavecartLineitems
		--	WHERE GroupProductIds IS NOT NULL OR 
		--		  ConfigurableProductIds IS NOT NULL
		--)
		--BEGIN
		 --SELECT * FROM @Tbl_SaveCartIds
		 --SELECT * FROM @TBL_AllProductsTypeData
		 --SELECT * FROM @TBL_SavecartLineitems
			DECLARE @TBL_SaveCartConfigProduct TABLE (OmsSavedCartLineItemId INT, SKU VARCHAR(2000),RowId INT, PersonalisedAttribute NVARCHAr(max))
			    INSERT @TBL_SaveCartConfigProduct    
			    SELECT DISTINCT    ZOSCL.OmsSavedCartLineItemId   ,ZOSCL.SKU 
				,  ZOSCL.RowId , (SELECT TOP 1 PersonalisedAttribute FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID )  PersonalisedAttribute
				FROM @Tbl_SaveCartIds AS ZOSCL
				LEFT JOIN @TBL_AllProductsTypeData AS TBBR ON (ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId  )
				WHERE ( EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
				OR   EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData TRT WHERE SKU <> ''  AND IsFromAddon <> 1  AND TRT.RowID = ZOSCl.RowID   ) )
				AND ((ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId) OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData RTR WHERE SKU <> '' AND IsFromAddon <> 1   AND RTR.RowID = ZOSCl.RowID) 
				
				)
				
				--select * from @TBL_SavecartLineitems

			 --  select * from @Tbl_SaveCartIds
			  

			  --select * from @TBL_SaveCartConfigProduct
					
			UPDATE ZnodeOmsPersonalizeCartItem
			SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId,PersonalizeCode= SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1)  ,PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000),
			CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
			FROM @Tbl_SaveCartIds m  
			LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			--AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem ppp WHERE ppp.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId AND ppp.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))
			 AND ZnodeOmsPersonalizeCartItem.PersonalizeCode= SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AND ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
			 AND @IsCallForUpdate = 0
			;


		INSERT INTO ZnodeOmsPersonalizeCartItem( OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT DISTINCT 
			   b.OmsSavedCartLineItemId 
			  , SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS Keyi, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Value, @UserId, @GetDate, @UserId, @GetDate
			   FROM @Tbl_SaveCartIds m  
			   LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			   CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			   WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))
			   ;
        
		
	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItemQuantity @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItemQuantity', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

--go

--declare @p5 int
--set @p5=1
--exec sp_executesql N'Znode_InsertUpdateSaveCartLineItem_aa @CartLineItemXML, @UserId ,@IsCallFromPDP,@Status OUT',N'@CartLineItemXML nvarchar(640),@UserId int,@IsCallFromPDP bit,@Status int output',@CartLineItemXML=N'<ArrayOfSavedCartLineItemModel>
-- <SavedCartLineItemModel>
--   <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
--   <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
--   <OmsSavedCartId>1105</OmsSavedCartId>
--   <SKU>ch5115</SKU>
--   <Quantity>1</Quantity>
--   <OrderLineItemRelationshipTypeId p3:nil="true" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance" />
--   <Sequence>1</Sequence>
--   <AddonProducts />
--   <BundleProducts />
--   <ConfigurableProducts />
--   <OmsOrderId p3:nil="true" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance" />
-- </SavedCartLineItemModel>
--</ArrayOfSavedCartLineItemModel>',@UserId=0,@IsCallFromPDP = 1,@Status=@p5 output
--select @p5
GO
PRINT N'Altering [dbo].[Znode_DeletePublishCatalog]...';
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePublishCatalog')
BEGIN 
	DROP PROCEDURE Znode_DeletePublishCatalog
END 
GO
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalog]
(   @PublishCatalogIds  VARCHAR(1000),
	@PublishCategoryIds VARCHAR(1000) = NULL,
	@PublishProductIds  VARCHAR(1000) = NULL,
	@IsDeleteCatalogId  BIT           = 0)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
             DECLARE @TBL_DeletedCatalog TABLE(PublishCatalogId INT);
             DECLARE @TBL_DeletedCategory TABLE([PublishCategoryId] INT);
             DECLARE @TBL_DeleteProduct TABLE([PublishProductId] INT);
             INSERT INTO @TBL_DeletedCatalog
                    SELECT [item]
                    FROM [dbo].[Split](@PublishCatalogIds, ',');

             INSERT INTO @TBL_DeletedCategory
                    SELECT PublishCategoryId
                    FROM ZnodePublishCategory AS PC
                    WHERE( EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishCategoryIds, ',') AS m
                             WHERE m.Item = PC.PublishCategoryId
                         ));

             INSERT INTO @TBL_DeleteProduct
                    SELECT [PublishProductId]
                    FROM [ZNodePublishProduct] AS adf
                    WHERE(EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishProductIds, ',') AS de
                             WHERE de.[Item] = adf.[PublishProductId]
                         )
                   );
             DELETE FROM [ZnodeCMSWidgetCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             );
         
             DELETE FROM [ZnodeCMSWidgetProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             );
             DELETE FROM [ZnodeCMSCustomerReview]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             );
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEODetail]
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteProduct AS qw
                     WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
                 )
                       AND EXISTS
                 (
                     SELECT TOP 1 1
                     FROM [ZnodeCMSSEOType] AS we
                     WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                           AND [Name] = 'Product'
                 )
                       AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM [ZnodeCMSSEODetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             )
                   AND EXISTS
             (
                 SELECT TOP 1 1
                 FROM [ZnodeCMSSEOType] AS we
                 WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
                       AND [Name] = 'Product'
             );
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
			 DELETE FROM ZnodePublishCategoryProduct 
			 WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1

			 DELETE FROM ZnodePublishProductDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishProductDetail.PublishProductId = ZnodePublishProduct.PublishProductId  )
             DELETE FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishCategoryDetail.PublishCategoryId = ZnodePublishCategory.PublishCategoryId)
             DELETE FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishedXml WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCataLogLog 
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishedXml.PublishCatalogLogId = ZnodePublishCataLogLog.PublishCatalogLogId  )

			 DELETE FROM ZnodePublishCataLogLog WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1;

			 DELETE FROM znodeSearchIndexServerStatus 
					WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchIndexMonitor a WHERE EXISTS 
					(SELECT TOP 1 1 FROM ZnodeCatalogIndex b WHERE b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = a.catalogindexid) AND a.SearchIndexMonitorid = znodeSearchIndexServerStatus.SearchIndexMonitorid )

			 DELETE FROM ZnodeSearchIndexMonitor
					WHERE EXISTS (SELECT TOP 1 1  FROM ZnodeCatalogIndex b where b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = ZnodeSearchIndexMonitor.catalogindexid)


			 DELETE FROM ZnodeCatalogIndex
			 WHERE publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1

			
             DELETE FROM ZnodePublishCatalog
             WHERE [PublishCatalogId] = @PublishCatalogIds
                   AND @PublishCategoryIds IS NULL
                   AND @PublishProductIds IS NULL
                   AND @IsDeleteCatalogId = 1;
				  
				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		     
			  DECLARE @Status BIT ;
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			  @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePublishCatalog @PublishCatalogIds = '''+ISNULL(@PublishCatalogIds,'''')+''',@PublishCategoryIds='''+ISNULL(@PublishCategoryIds,'''')+''',@PublishProductIds='''+ISNULL(@PublishProductIds,'''')+''',@IsDeleteCatalogId='+ISNULL(CAST(@IsDeleteCatalogId AS VARCHAR(200)),'''')+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeletePublishCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Altering [dbo].[Znode_ImportData]...';


GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportData')
BEGIN 
	DROP PROCEDURE Znode_ImportData
END 
GO
CREATE PROCEDURE [dbo].[Znode_ImportData](
	  @TableName varchar(200), @NewGUID nvarchar(max), @TemplateId nvarchar(200), @UserId int, @LocaleId int= 1, @DefaultFamilyId int= 0, @IsDebug bit= 0, @PriceListId int= 0,@CountryCode Nvarchar(100) = '',@PortalId int = 0 ,
	  @IsDoNotCreateJob bit = 0 , @IsDoNotStartJob bit = 0, @StepName nvarchar(50) = 'Import' , @StartStepName nvarchar(50) = 'Import' ,
	  @step_id int  = 1 ,@Nextstep_id  int = 1 , @ERPTaskSchedulerId int = 0, @IsAccountAddress bit = 0,@IsAutoPublish Bit = 0  ,@ImportProcessLogId  int = 0  )
AS
/*
    Summary :  Import Process call respective import method from @TemplateId 
    Process :  
	EXEC Znode_ImportValidatePimProductData @TableName = 'tempdb..[##SEODetails_61bbcb4c-5b83-49a0-8bb6-48eaf07f9ce0]',@NewGUID = '61bbcb4c-5b83-49a0-8bb6-48eaf07f9ce0' ,@TemplateId = 9,@UserId = 2,@PortalId = 0,@LocaleId = 1,@IsCategory= 1 ,@DefaultFamilyId = 0 ,@ImportHeadName = 'SEODetails', @ImportProcessLogId = 11, @PriceListId = 0, @CountryCode = ''
*/
BEGIN
BEGIN TRY 
	 DECLARE @ImportHeadName nvarchar(100), @SPScript nvarchar(max), @DatabaseName nvarchar(100), @ServerName nvarchar(100), @SPScript1 nvarchar(max),@UserName nvarchar(100);
	 DECLARE @GetDate datetime= dbo.Fn_GetDate();
	 DECLARE @SPName nvarchar(100)
	 
	 SELECT TOP 1 @ImportHeadName = Name
	 FROM ZnodeImportTemplate AS zit
		 INNER JOIN
		 ZnodeImportHead AS zih
		 ON zit.ImportHeadId = zih.ImportHeadId
	 WHERE zit.ImportTemplateId = @TemplateId;
	 SET @DatabaseName = DB_NAME();
	 SET @ServerName = @@serverName;
	 SET @UserName = SYSTEM_USER;
	 
	 If (@ImportHeadName = 'ProductUpdate')
	 Begin
		SET @SPName = 'Znode_ImportPartialValidatePimProductData'
	 End
	 ELSE
	 Begin
		SET @SPName = 'Znode_ImportValidatePimProductData'
	 End
	--Generate new process for current import 
	If @ImportProcessLogId   = 0 
	Begin
		If @ERPTaskSchedulerId = 0 
			INSERT INTO ZnodeImportProcessLog( ImportTemplateId, Status, ProcessStartedDate, ProcessCompletedDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT @TemplateId, dbo.Fn_GetImportStatus( 0 ), @GetDate, NULL, @UserId, @GetDate, @UserId, @GetDate;
		else 
			INSERT INTO ZnodeImportProcessLog( ImportTemplateId, Status, ProcessStartedDate, ProcessCompletedDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,ERPTaskSchedulerId)
			   SELECT @TemplateId, dbo.Fn_GetImportStatus( 0 ), @GetDate, NULL, @UserId, @GetDate, @UserId, @GetDate , @ERPTaskSchedulerId;
		SET @ImportProcessLogId = @@IDENTITY;
	
	End
	
	SET @SPScript1 = N' EXEC ' + @SPName + ' @TableName = '''+@TableName+''',@NewGUID = '''+@NewGUID+''' ,@TemplateId = '
					+CONVERT(varchar(100), @TemplateId)+',@UserId = '+CONVERT(varchar(100), @UserId)
					+',@PortalId = '+CONVERT(varchar(100), @PortalId)+
					+',@IsAccountAddress = '+CONVERT(varchar(100), @IsAccountAddress)
					+',@LocaleId = '+CONVERT(varchar(100), @LocaleId)+',@IsCategory= '+CASE
					WHEN @ImportHeadName IN( 'Pricing', 'Product', 'Inventory' ) THEN '0'
					ELSE '1'
					END+' ,@DefaultFamilyId = '+CONVERT(varchar(100), @DefaultFamilyId)+' ,@ImportHeadName = '''+@ImportHeadName+''', @ImportProcessLogId = '
					+CONVERT(varchar(100), @ImportProcessLogId)+', @PriceListId = '+CONVERT(varchar(100), @PriceListId)
					+ ', @CountryCode = ''' + @CountryCode  + '''';

	    
	  IF @IsAutoPublish = 1 
	  BEGIN 
	  
                 
		SET @SPScript1 = @SPScript1 + N' 
		   
			DECLARE @PimProductId Transferid 

			INSERT INTO  @PimProductId 
			SELECT DISTINCT  c.PimProductId 
			FROM ZnodeImportSuccessLog a 
			INNER JOIN ZnodePimAttributeValueLocale  b ON (b.AttributeValue = a.ImportedSku)
			INNER JOIN ZnodePimAttributeValue c ON (c.PimAttributeValueId = b.PimAttributeValueId)
			INNER JOIN ZnodePimAttribute d ON (d.PimAttributeId = c.PimAttributeId)
			WHERE d.AttributeCode = ''SKU''
			AND a.ImportedGuId = '''+@NewGUID+'''
			
			EXEC Znode_GetPublishProducts 	@PimProductId = @PimProductId  , @UserId = 2 ,  @TokenId = 	 '''+@NewGUID+'''
						
			UPDATE ZnodeImportSuccessLog 
			SET    IsProductPublish =  1 
			WHERE ImportedGuId = '''+@NewGUID+'''

		'
	  END 

	IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
	BEGIN
	      EXEC sys.sp_sqlexec @SPScript1;
	END;
	ELSE
	BEGIN 
		
		IF @IsDebug = 1
		          BEGIN
		              EXEC sys.sp_sqlexec
		                   @SPScript1;
		              RETURN 0;
		          END;
		--DECLARE @jobId binary(16)
		--SELECT @jobId = job_id FROM msdb.dbo.sysjobs WHERE (name = N'Name of Your Job')
		--IF (@jobId IS NOT NULL)
		--BEGIN
		--EXEC msdb.dbo.sp_delete_job @jobId
		--END
		--Add a job

		SET @SPScript1 = N' EXEC '+ @SPName + ' @TableName = '''''+@TableName+''''',@NewGUID = '''''+@NewGUID+''''' ,@TemplateId = '+CONVERT(varchar(100), @TemplateId)+',@UserId = '+CONVERT(varchar(100), @UserId)+',@PortalId = '+CONVERT(varchar(100), @PortalId)+',@LocaleId = '+CONVERT(varchar(100), @LocaleId)+',@IsCategory= '+CASE
																																																																										   WHEN @ImportHeadName IN( 'Pricing', 'Product', 'Inventory' ) THEN '0'
																																																																										   ELSE '1'
																																																																										   END
					+' ,@DefaultFamilyId = '+CONVERT(varchar(100), @DefaultFamilyId)+' ,@ImportHeadName = '''''+@ImportHeadName+''''', @ImportProcessLogId = '+CONVERT(varchar(100), @ImportProcessLogId)+', @PriceListId = '+CONVERT(varchar(100), @PriceListId)+',@IsAccountAddress = '+CONVERT(varchar(100), @IsAccountAddress)
																																																																										   + ', @CountryCode = ''''' + @CountryCode  +'''''';


		
		 IF @IsAutoPublish = 1 
	  BEGIN 
		SET @SPScript1 = @SPScript1 + N' 
		   
			DECLARE @PimProductId Transferid 

			INSERT INTO  @PimProductId 
			SELECT DISTINCT  b.PimProductId 
			FROM ZnodeImportSuccessLog a 
			INNER JOIN View_loadManageProductInternal b ON (b.AttributeValue = a.ImportedSku)
			WHERE b.AttributeCode = ''''SKU''''
			AND a.ImportedGuId = '''''+@NewGUID+'''''
			
			EXEC Znode_GetPublishProducts 	@PimProductId = @PimProductId  , @UserId = 2 ,  @TokenId = 	 '''''+@NewGUID+'''''
						
			UPDATE ZnodeImportSuccessLog 
			SET    IsProductPublish =  1 
			WHERE ImportedGuId = '''''+@NewGUID+'''''
			 '

	  END 

		DECLARE @jobId binary(16);
		
		SET @NewGUID = 'Import_'+REPLACE(@NewGUID, '''', '');
		

		IF @IsDoNotCreateJob =0 
		Begin
			SET @SPScript = N'EXEC msdb.dbo.sp_add_job
				  @job_name = '''+@NewGUID+''' ,
				  @enabled = 1,
				  @notify_level_eventlog = 2,
				  @notify_level_email = 2,
				  @notify_level_netsend = 2,
				  @notify_level_page = 2,
				  @delete_level = 3,
				  @category_name = N''[Uncategorized (Local)]'',
				  @owner_login_name = N'''+ @UserName +'''';
			--@job_id = '' + Convert(NVARCHAR(MAX),@jobId ) + '' OUTPUT; '

			EXEC sys.sp_sqlexec @SPScript;

			SET @SPScript = N' EXEC msdb.dbo.sp_add_jobserver
				  @job_name = '''+@NewGUID+''',
				  @server_name = '''+@ServerName+'''';

			EXEC sys.sp_sqlexec @SPScript;
		END

		SET @SPScript = N' EXEC msdb.dbo.sp_add_jobstep
              @job_name = '''+ @NewGUID +''',
              @step_name = N'''+ @StepName +''',
			  @step_id =  ' + Convert(nvarchar(10),@step_id ) +  ',
			  @cmdexec_success_code = 0,
              @on_success_action = ' + Convert(nvarchar(10),@Nextstep_id ) +  ',
              @on_fail_action = '    + Convert(nvarchar(10),@Nextstep_id ) +  ',
			  @retry_attempts = 0,
              @retry_interval = 0,
              @os_run_priority = 0,
              @subsystem = N''TSQL'',
              @command = N'''+ @SPScript1 +''',
              @database_name = '''+@DatabaseName+''',
              @flags = 0 ';
		PRINT  @SPScript
		EXEC sys.sp_sqlexec @SPScript;

		DECLARE @ReturnCode tinyint= 0; -- 0 (success) or 1 (failure)
		IF @IsDoNotStartJob = 0 
		Begin
			SET @SPScript = N'EXEC @ReturnCode = msdb.dbo.sp_start_job 
				  @job_name = '''+ @NewGUID +''',
				  @server_name = '''+ @ServerName +''',
				  @step_name = N''' + @StartStepName +'''';

			EXEC sys.SP_EXECUTESQL @SPScript, N'@ReturnCode TINYINT OUT', @ReturnCode = @ReturnCode OUT;
		END 
		--      select 3  , @SPScript
		
		--RETURN (@ReturnCode)
		IF @ReturnCode = 1
		BEGIN
			UPDATE ZnodeImportProcessLog
			  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId
		END;

		--EXEC msdb.dbo.sp_delete_job @job_id=N'4470113c-a592-41d8-951e-45d9982071da', @delete_unused_schedule=1
	END;
	END TRY 
	BEGIN CATCH 
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportData @TableName = '''+ISNULL(@TableName,'''''')+''',@NewGUID='''+ISNULL(CAST(@NewGUID AS
		VARCHAR(50)),'''''')+''',@TemplateId='''+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''''')+''',@CountryCode='''+ISNULL(@CountryCode,'''''')+''',
		@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')
            
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportData',
		@ErrorInProcedure = 'Znode_ImportData',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH 
END;
GO
PRINT N'Altering [dbo].[Znode_ImportValidateManditoryText]...';


GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportValidateManditoryText')
BEGIN 
	DROP PROCEDURE Znode_ImportValidateManditoryText
END 
GO
CREATE PROCEDURE [dbo].[Znode_ImportValidateManditoryText]
	(@TableName          VARCHAR(200),
	@SourceColumnName   NVARCHAR(600),
	@CreateDateString   NVARCHAR(300),
	@ValidationName     VARCHAR(100),
	@ControlName        VARCHAR(300),
	@ValidationValue    VARCHAR(300),
	@NewGUID            NVARCHAR(200),
	@LocaleId           INT = 1 ,
	@DefaultLocaleId    INT,
	@AttributeId        INT,
	@ImportProcessLogId INT,
	@ImportHeadId     INT           = 0)
AS
     
 /*
	Summary:  Text 
             --------------------------
              Control   Validation Rule
             --------------------------
             1 Select	ValidationRule
             2 Text	RegularExpression
             3 Number	MaxCharacters
             4 Yes/No	UniqueValue

	Unit Testing:
	EXEC Znode_ImportValidateManditoryText
	 */
	 
	 BEGIN
        BEGIN TRY 
            SET NOCOUNT ON

             DECLARE @SQLQuery NVARCHAR(MAX), @ImportHeadName NVARCHAR(100);
             SET @ImportHeadName = DBO.Fn_GetDefaultImportHead(@ImportHeadId);
			 
			 IF @ControlName = 'Number' AND @ValidationName IN('MaxCharacters')  AND ISNULL(@ValidationValue, '') <> ''
                 BEGIN
                     SET @SQLQuery = @TableName+'  WHERE LEN('+@SourceColumnName+') > ' +   @ValidationValue + ' AND Isnull('+@SourceColumnName+','''') <> ''''';
                    

					IF @ValidationName = 'MaxCharacters'
                         EXEC Znode_ImportGenerateErrorLog
                              @ImportHeadName = @ImportHeadName,
                              @QueryCriteria = @SQLQuery,
                              @SourceColumnName = @SourceColumnName,
                              @CreateDateString = @CreateDateString,
                              @ErrorCode = '44',
                              @ValidationValue = @ValidationValue;
                  END;
             IF @ControlName = 'Yes/No' AND @ValidationName IN('UniqueValue') AND @ValidationValue = 'true'
                 BEGIN
					-- Check duplicate value exist in global temporary table 
					SET @SQLQuery = 'SELECT ''53'' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,RowNumber ,GUID,  '+@CreateDateString+' 
					FROM '+@TableName+'   WHERE RowNumber in (Select RowNumber from '+@TableName+' where '+@SourceColumnName+' in (Select '+@SourceColumnName+' from '+@TableName+' GROUP BY '+@SourceColumnName+' having COUNT(*) > 1) )';
                     
					INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
					EXEC sys.sp_sqlexec @SQLQuery;

					---- Check duplicate value exist in znode database
					--If (@ImportHeadName in  ('Product'))
					--BEGIN
					-- SET @SQLQuery = 'SELECT ''10 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
					--				  FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
					--				  (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId AND ZPAVL.LocaleId IN ('+CONVERT(VARCHAR(100), @LocaleId)+','+CONVERT(VARCHAR(100), @DefaultLocaleId)+')) 
					--				  INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = tlb.'+@SourceColumnName+' 
					--				  WHERE ZPAV.PimAttributeId = '+CONVERT(VARCHAR(100), @AttributeId)+' AND ZPAVL.AttributeValue <> ''''';

					-- INSERT INTO ZnodeImportLog
					-- (ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
					-- EXEC sys.sp_sqlexec @SQLQuery;

					-- --Remove wrong data from table 
					-- --SET @SQLQuery = 'DELETE FROM '+@TableName+' WHERE RowNumber in (Select Isnull(RowNumber,0) FROM ZnodeImportLog 
					--	--			  WHERE ErrorDescription =10 AND ImportProcessLogId  = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+');';
					-- --EXEC sys.sp_sqlexec @SQLQuery;
					--END

					If (@ImportHeadName in  ('Category'))
					BEGIN
						SET @SQLQuery = 'SELECT ''10 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,tlb.RowNumber ,GUID,  '+@CreateDateString+' 
						FROM ZnodePimCategoryAttributeValue AS ZPAV INNER JOIN ZnodePimCategoryAttributeValueLocale AS ZPAVL ON 
						(ZPAVL.PimCategoryAttributeValueId = ZPAV.PimCategoryAttributeValueId AND ZPAVL.LocaleId IN ('+CONVERT(VARCHAR(100), @LocaleId)+','+CONVERT(VARCHAR(100), @DefaultLocaleId)+')) 
						INNER JOIN '+@TableName+' tlb ON ZPAVL.CategoryValue = tlb.'+@SourceColumnName+' 
						WHERE ZPAV.PimAttributeId = '+CONVERT(VARCHAR(100), @AttributeId)+' AND ZPAVL.CategoryValue <> ''''';

						INSERT INTO ZnodeImportLog
						(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
						EXEC sys.sp_sqlexec @SQLQuery;
					 END
					---- Check duplicate value exist in znode database
				
                 END;
         END TRY
         BEGIN CATCH
               DECLARE @Status BIT ;
		     SET @Status = 0;
			 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportValidateManditoryText @TableName = '+@TableName+',@SourceColumnName='+@SourceColumnName+',@CreateDateString='+@CreateDateString+',@ValidationName='+@ValidationName+',@ControlName = '+@ControlName+',@ValidationValue='+@ValidationValue+',@NewGUID='+@NewGUID+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@DefaultLocaleId='+CAST(@DefaultLocaleId AS VARCHAR(50))+',@AttributeId='+CAST(@AttributeId AS VARCHAR(50))+',@ImportHeadId='+CAST(@ImportHeadId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ImportValidateManditoryText',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_GetPriceFromAssociateProducts]...';
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPriceFromAssociateProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPriceFromAssociateProducts
END 

GO
CREATE  PROCEDURE [dbo].[Znode_GetPriceFromAssociateProducts]
(   
	@PortalId         INT,
    @SKU			  NVARCHAR(300),
	@PimProductId	  INT,
	@UserId			  INT = 2,
	@ProductType	  VARCHAR(200),
	@LocaleId		  INT )
AS 
  /*  
    Summary: WebStore: Calculate price from associate product and assign to parent products
	EXEC [Znode_GetPriceFromAssociateProducts]
	@PortalId         = 1 ,
	@SKU	= 'gr990',
	@PimProductId	=  97 ,
	@UserId	= 2,
	@ProductType	= 'Configurable Product',
	@LocaleId	= 1 

 */
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             SET NOCOUNT ON;

			 DECLARE @TBL_ListOfAssociateProducts TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingListOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				

			DECLARE @PimAttributeId INT,@currentUtcDate   VARCHAR(200) = ''
			SET @currentUtcDate   = GETDATE ()
			SET @PimAttributeId =   DBO.Fn_GetProductSKUAttributeId()
						    Declare @ChildProductIds TABLE (Id int, AssociatedProductDisplayOrder int )
			INSERT INTO @ChildProductIds (ID,AssociatedProductDisplayOrder) 
			SELECT ZPPT.PimProductId , ZPPT.DisplayOrder  from ZnodePimProductTypeAssociation ZPPT 
			WHERE ZPPT.PimParentProductId= @PimProductId
			
			--Price logic for Associate products
			INSERT INTO @TBL_ListOfAssociateProducts
			(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct,AssociatedProductDisplayOrder)
			SELECT ZPAV.PimProductId,ZPAVL.AttributeValue,@SKU ,@PimProductId,NULL , NULL,@PimProductId,
			CPI.AssociatedProductDisplayOrder 
			FROM ZnodePimAttributeValue ZPAV INNER JOIN ZnodePimAttributeValueLocale ZPAVL 
			ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
			Inner join @ChildProductIds  CPI ON CPI.ID = ZPAV.PimProductId  
			where ZPAV.PimAttributeId  = @PimAttributeId 

			SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),ChildSKU) 
			FROM @TBL_ListOfAssociateProducts where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			INSERT INTO @tbl_PricingListOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 

			update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			PLC.SalesPrice = PLCA.SalesPrice 
			from @TBL_ListOfAssociateProducts PLC inner join @tbl_PricingListOfAssociatedProduct
			PLCA on PLC.ChildSKU = PLCA.sku
			
			If @ProductType = 'Configurable Product'
				select Min(RetailPrice)  RetailPrice  , Min(SalesPrice) SalesPrice  from @TBL_ListOfAssociateProducts
			ELSE If @ProductType = 'Group Product'
				select TOP 1 RetailPrice , SalesPrice from @TBL_ListOfAssociateProducts
				Order by AssociatedProductDisplayOrder
			 COMMIT TRAN A;
			
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore_ver1 @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductDataForWebStore_ver1',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_GetProductInfoForWebStore]...';

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductInfoForWebStore')
BEGIN 
	DROP PROCEDURE Znode_GetProductInfoForWebStore
END 

GO
CREATE  PROCEDURE [dbo].[Znode_GetProductInfoForWebStore]
(   
	@PortalId         INT,
    @LocaleId         INT,
	@UserId			  INT = 2,
	@ProductDetailsFromWebStore   DBO.ProductDetailsFromWebStore READONLY,
	@currentUtcDate    VARCHAR(200) = '')
AS 
  /*  
    Summary: WebStore: SP for getting products data 
    		 Get average rating of products 
    		 Get Price / Inventory / SEO details .
    Unit Testing
	begin tran   
   
	declare @p6 dbo.ProductDetailsFromWebStore
	insert into @p6 values(217,N'GroupedProduct',N'DontTrackInventory',N'C13-5038')
	insert into @p6 values(231,N'ConfigurableProduct',N'DisablePurchasing',N'gr990')
	insert into @p6 values(502,N'SimpleProduct',N'DontTrackInventory',N'grapes1234')
	insert into @p6 values(232,N'SimpleProduct',N'DisablePurchasing',N'st32477')
	insert into @p6 values(215,N'GroupedProduct',N'DontTrackInventory',N'D9-4911')
	insert into @p6 values(504,N'SimpleProduct',N'DisablePurchasing',N'Test')

	 exec sp_executesql N'Znode_GetProductInfoForWebStore  @PortalId,@LocaleId,@UserId,@ProductDetailsFromWebStore,@currentUtcDate',N'@PortalId int,@LocaleId int,@UserId int,@ProductDetailsFromWebStore [dbo].[ProductDetailsFromWebStore] READONLY,@currentUtcD

ate nvarchar(4000)',@PortalId=1,@LocaleId=1,@UserId=0,@ProductDetailsFromWebStore=@p6,@currentUtcDate=N'2/6/2018 12:00:00 AM'


   */
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             SET NOCOUNT ON;
			 
			 DECLARE @Tlb_SKU TABLE (SKU VARCHAR(100))
			 DECLARE @PublishProductIds  NVARCHAR(max) ,@SKU NVARCHAR(max) 
				
			 DECLARE @TBL_PricebyCatalogforAssociateProduct TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingSkuOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				
		

			--Create TABLE #Tlb_PromotionProductData 
   --          (
			--	  PromotionId      INT,
			--	  PromotionType	   INT, 
			--	  ExpirationDate   Datetime, 
			--	  ActivationDate   Datetime,
			--	  PublishProductId INT,
			--	  PromotionMessage Nvarchar(max)  
   --          );
			 Create TABLE #Tbl_PriceListWisePrice 
             (
				  SKU            VARCHAR(300),
				  RetailPrice    NUMERIC(28, 6),
				  SalesPrice     NUMERIC(28, 6),
				  TierPrice      NUMERIC(28, 6),
				  TierQuantity   NUMERIC(28, 6),
				  CurrencyCode   Varchar(100),
				  CurrencySuffix Varchar(1000),
				  ExternalId NVARCHAR(2000)
             );

			 CREATE TABLE #Tlb_ProductData 
             (
				  PublishProductId INT,
				  SKU              NVARCHAR(100),
				  SEOTitle         NVARCHAR(200),
				  SEODescription   NVARCHAR(MAX),
				  SEOKeywords      NVARCHAR(MAX),
				  SEOUrl           NVARCHAR(MAX),
				  Rating           Numeric(28,6),
				  TotalReviews     INT,
				  RetailPrice      NUMERIC(28, 6),
				  SalesPrice       NUMERIC(28, 6),
				  TierPrice        NUMERIC(28, 6),
				  TierQuantity     NUMERIC(28, 6),
				  CurrencyCode     Varchar(100),
				  CurrencySuffix   Varchar(1000),
				  ExternalId       NVARCHAR(2000),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6)

			   );


			 Create TABLE #Tbl_Inventory
             (
				  SKU            VARCHAR(300),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  PortalId      int
				
             );
            INSERT INTO #Tlb_ProductData (PublishProductId,SKU)
            SELECT id,SKU FROM @ProductDetailsFromWebStore
			  		
			SELECT @SKU = Substring((SELECT ',' + SKU FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 

			SELECT @PublishProductIds = Substring((SELECT ',' + CONVERT(NVARCHAR(100),id ) FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 
			 	
			--INSERT INTO  #Tlb_PromotionProductData(PromotionId,PromotionType, ExpirationDate,  ActivationDate, PublishProductId,PromotionMessage)
			--Exec [Znode_GetPromotionByPublishProductId] @PublishProductIds = @PublishProductIds ,@UserId  = @UserId	,@PortalId  = @PortalId  
			 
			INSERT INTO #Tbl_PriceListWisePrice( SKU, RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,ExternalId)
			EXEC Znode_GetPublishProductPricingBySku @SKU = @SKU ,@PortalId = @PortalId ,@currentUtcDate = @currentUtcDate,@UserId = @UserId 
			
			insert into #Tbl_Inventory (SKU,	Quantity,	ReOrderLevel,	PortalId)
			EXEC Znode_GetInventoryBySkus @SKUs=@SKU,@PortalId=@PortalId

			--Price logic for Associate products
			----INSERT INTO @TBL_PricebyCatalogforAssociateProduct(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct)
			----SELECT cl.Item, NULL , PR.SKU, PR.ID, null, null , PR.[ProductType]  FROM @ProductDetailsFromWebStore PR
			----Cross Apply dbo.split (AssociateProducts, ',') CL 

			----UPDATE PDI SET PDI.ChildSKU = ZPPD.SKU 
			----from @TBL_PricebyCatalogforAssociateProduct PDI inner join
			----ZnodePublishProductDetail ZPPD On PDI.AssociatedProductId = ZPPD.PublishProductId
			
			----SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),AssociatedProductId) 
			----FROM @TBL_PricebyCatalogforAssociateProduct where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			----INSERT INTO @tbl_PricingSkuOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			----EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 

			----update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			----PLC.SalesPrice = PLCA.SalesPrice 
			----from @TBL_PricebyCatalogforAssociateProduct PLC inner join @tbl_PricingSkuOfAssociatedProduct
			----PLCA on PLC.ChildSKU = PLCA.sku
			
			----Update PBC SET PBC.RetailPrice = 
			----	(Select TOP 1 Isnull(RetailPrice ,SalesPrice) from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU
			----		and PCBA.ParentSKU is not null and PCBA.ChildSKU is not null
			----	Order by AssociatedProductDisplayOrder)
			----	from #Tbl_PriceListWisePrice  PBC  where 
			----	Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA
			----	where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'ConfigurableProduct')
			----	and PBC.RetailPrice IS null 

			Update PD SET 
			 PD.SKU             = PLWP.SKU            
			,PD.RetailPrice     = PLWP.RetailPrice     
			,PD.SalesPrice      = PLWP.SalesPrice      
			,PD.TierPrice       = PLWP.TierPrice       
			,PD.TierQuantity    = PLWP.TierQuantity    
			,PD.CurrencyCode    = PLWP.CurrencyCode    
			,PD.CurrencySuffix  = PLWP.CurrencySuffix  
			,PD.ExternalId 	    = PLWP.ExternalId 	   
			FROM #Tlb_ProductData PD Inner join #Tbl_PriceListWisePrice PLWP on 
			PD.SKU = PLWP.SKU

			Update PD SET 
			 PD.Quantity = TLI.Quantity,
			 PD.ReOrderLevel= TLI.ReOrderLevel
			 FROM #Tlb_ProductData PD Inner join #Tbl_Inventory TLI on 
			PD.SKU = TLI.SKU

			 

			----Update PD SET 
			----	  PD.PromotionId      =PLWP.PromotionId,
			----	  PD.PromotionType	  =PLWP.PromotionType, 
			----	  PD.ExpirationDate   =PLWP.ExpirationDate, 
			----	  PD.ActivationDate   =PLWP.ActivationDate,
			----	  PD.PublishProductId =PLWP.PublishProductId,
			----	  PD.PromotionMessage  =PLWP.PromotionMessage   
			----from #Tlb_ProductData PD Inner join #Tlb_PromotionProductData PLWP on 
			----PD.PublishProductId = PLWP.PublishProductId


			 DECLARE @Tlb_CustomerAverageRatings TABLE
             (PublishProductId INT,
              Rating           NUMERIC(28,6),
              TotalReviews     INT
             ); 
             -- Calculate Average rating 
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId) 
			 FROM ZnodeCMSCustomerReview AS CCR
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A' 
			 AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )
			 GROUP BY CCR.PublishProductId    ;

             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews 
			 FROM @Tlb_CustomerAverageRatings CAR
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;

             UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl 
			 FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.PublishProductId = ZCSO.SEOId
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 WHERE ZCSO.PortalId = @PortalId
             
			 UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl 
			 FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.PublishProductId = ZCSO.SEOId
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 WHERE ZCSO.PortalId = @PortalId

             UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL
			  --AND ZCSO.PortalId = @PortalId
             SELECT PublishProductId,SKU,SEOTitle,SEODescription,SEOKeywords,SEOUrl,Rating,TotalReviews ,
			  RetailPrice,SalesPrice,TierPrice, TierQuantity,CurrencyCode,CurrencySuffix,ExternalId,
			   Quantity  ,ReOrderLevel FROM #Tlb_ProductData;             
			 			
			 --Select PDFW.ID PublishProductId ,PDFW.SKU,PromotionId,PromotionType,ExpirationDate,ActivationDate,PromotionMessage from #Tlb_PromotionProductData PPD Inner join 
			 --@ProductDetailsFromWebStore PDFW ON PPD.PublishProductId = PDFW.ID

			 --SELECT SKU,RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,ExternalId from #Tbl_PriceListWisePrice  


			 COMMIT TRAN A;
			
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductInfoForWebStore @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductInfoForWebStore',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_GetPublishCategoryGroup]...';

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END 

GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT             );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				 Select Distinct PimCategoryId , Null FROM (
				 SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryId in 
				 (SELECT CategoryId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
				 SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

				 INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId
				 AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds) ;
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,@VersionId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 
	
					IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
						SET @ExistingPublishCategoryId  = @ExistingPublishCategoryId + ',' +  Convert(nvarchar(100),@PublishCategoryId )
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 SELECT CategoryXml FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
PRINT N'Creating [dbo].[Znode_GetPublishCategoryProducts]...';
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryProducts
END 

GO
CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
(
	    @PimCatalogId int = 0 
	  , @PimCategoryHierarchyId int = 0 
	  , @UserId int
	  , @VersionId int= 0
	  , @Status           int = 0 OUT
	  ,	@IsDebug          BIT = 0

)

AS
 
/*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	EXEC [Znode_GetPublishCategoryProducts]   
	@PimCatalogId = 3 
	, @PimCategoryHierarchyId = 153 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	Select @Status  

 */

BEGIN

	
	BEGIN TRY
		SET NOCOUNT ON;
			DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			DECLARE @PublishCatalogId INT= ISNULL((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @PimCatalogId), 0),  @PublishCataloglogId INT= 0;
			DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			DECLARE @PimProductId TransferId 
			DECLARE @InsertPublishProductIds TABLE (PublishProductId int , PimProductId int , PublishCatalogId int )
			--DECLARE @TBL_CategoryXml TABLE ( CategoryXml XML);

			SELECT  @VersionId  = MAX(PublishCataloglogId)  from ZnodePublishCatalogLog where  PublishCatalogId =@PublishCatalogId

			INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  
				
			 IF (ISnull(@PublishCatalogId,0) = 0  )
			 Begin
				SET @Status = 1  -- Catalog Not Published 
				Return 0 ;
			 END
			
			 IF EXISTS (SELECT CategoryId FROM @TBL_CategoryCategoryHierarchyIds where CategoryId is not null AND CategoryId not in (select PimCategoryId  from ZnodePublishCategory
			 where PublishCatalogId = ISnull(@PublishCatalogId,0) and PimCategoryHierarchyId = @PimCategoryHierarchyId  ))
			 Begin
				SET @Status = 2  -- Category / subcategory Not Publish 
				--insert into @TBL_CategoryXml (CategoryXml) 
				EXEC [Znode_GetPublishCategoryGroup] @PublishCatalogId = @PublishCatalogId,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = @PimCategoryHierarchyId 
			 END 
			BEGIN 
			    INSERT INTO @InsertPublishProductIds
				EXEC [dbo].[Znode_InsertPublishProductIds] 
					@PublishCatalogId = @PublishCatalogId, 
					@userid = @userid,
					@PimProductId = @PimProductId,
					@PimCategoryHierarchyId = @PimCategoryHierarchyId  
	
				EXEC [dbo].[Znode_GetPublishProductbulk] 
					@PublishCatalogId = @PublishCatalogId,
					@VersionId = @VersionId,
					@PimProductId = @PimProductId,
					@userid = @userid ,
					@PimCategoryHierarchyId = @PimCategoryHierarchyId,
					@PimCatalogId = @PimCatalogId 
				
				UPDATE ZnodePimProduct SET IsProductPublish = 1 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP 
				WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
	
			DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PublishCategoryId INT,PimProductId  INT , VersionId INT );

			INSERT INTO @TBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId , VersionId  )

			SELECT Distinct ZPC.PublishCatalogId ,ZPX.PublishedId  PublishProductId , ZPX.PublishCategoryId ,ZPP.PimProductId ,ZPX.PublishCatalogLogId   
			FROM ZnodePublishCategory ZPC  INNER JOIN @TBL_CategoryCategoryHierarchyIds CTC ON ZPC.PimCategoryId = CTC .CategoryId
			INNER JOIN ZnodePublishedXml ZPX on ZPC.PublishCategoryId = ZPX.PublishCategoryId   
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId and ZPX.PublishedId = ZPP.PublishProductId 
			WHERE ZPC.PublishCatalogId = @PublishCatalogId  
			AND ZPX.PublishCatalogLogId = @VersionId  

			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			    ,PublishProductId = (SELECT  COUNT(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId  ) 
		    WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)
			--END
			if isnull(@Status,0) <>  2   
			Begin
				Select  NULL PublishCategoryId  where 1= 0 
				SELECT  NULL 'CategoryXml' where 1= 0 
			End
			Select PublishCatalogId,PublishProductId,PublishCategoryId,VersionId from @TBL_PublishCatalogId 
	

	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+CAST(@PimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@PimCategoryHierarchyId+',@UserId='+CAST(@UserId AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',@VersionId='+CAST(@VersionId AS Varchar(50))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishCategoryProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO
PRINT N'Creating [dbo].[Znode_ImportPartialProcessProductData]...';
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialProcessProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialProcessProductData
END 

GO
	--  [dbo].[Znode_ImportProcessProductData] '1928de37-30d3-4cc1-b5e3-0c498c0da183'
	CREATE PROCEDURE [dbo].[Znode_ImportPartialProcessProductData] (@TblGUID NVARCHAR(255), @UserId INT,@IsAutoPublish BIT=0 )
	AS
	BEGIN
	
	/*
	Summary :   Import PimProduct ( for partial attribute import ) 
	Process :   Read table ##ProductUpdate_GUID table, create import template with columns which is exists  in 
	ZnodePimAttribute table call import which is not dependent on family.
  	                  		  
	SourceColumnName: CSV file column headers
	Unit testing 
	drop table ##ProductUpdate_3 
  
	-- 	Create TABLE ##ProductUpdate_3 (SKU nvarchar(max), ProductName nvarchar(100),ProductType nvarchar(100))
	-- 	insert into ##ProductUpdate_3  Values ('apz231','sdsfd','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('gr990', 'test','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('ORRK3456','Test009','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('hhhhhhh','Test009','dsfsdfsdf')
	-- 	select * from ##ProductUpdate_3
	
	--EXEC [Znode_ImportPartialProcessProductData] @TblGUID = '3', @UserId =2 

	--Select * from View_ManageLinkProductList 
	--select * from ZnodeImportSuccessLog
	--select * from ZnodeImportLog
  
	*/
	BEGIN TRY 
		SET NOCOUNT ON;
		DECLARE @NewuGuId NVARCHAR(255),@SpId BIGINT ,@ImportHeadId INT
		SET @NewuGuId = @TblGUID-- NEWID()
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @DefaultFamilyId INT = dbo.Fn_GetDefaultPimProductFamilyId();
		DECLARE @LocaleId INT = dbo.Fn_GetDefaultLocaleId()
		DECLARE @TemplateId INT,@Sql NVARCHAR(MAX) = '',@GlobalTableName NVARCHAR(500) 
		DECLARE @ImportProcessLogId  int 
			SET @SpId = @@SPID 
		SET @GlobalTableName  = 'tempdb..[##PartialProductDetail' + Convert(nvarchar(500), @SpId) + ']'

	
		IF OBJECT_ID(@GlobalTableName, 'U') IS NOT NULL
		Begin
			
			SET @Sql = 'DROP TABLE ' + @GlobalTableName 
			EXEC sp_executesql @SQL
			
		End
		
		DECLARE @GlobalTemporaryTable NVARCHAR(255)
		DECLARE @CreateTableScriptSql NVARCHAR(MAX) = ''
		,@InsertColumnName NVARCHAR(MAX)
		,@UpdateTable2Column NVARCHAR(MAX)
		,@UpdateTable3Column NVARCHAR(MAX)
		,@UpdateTable4Column NVARCHAR(MAX)
		,@ImportTableColumnName NVARCHAR(MAX)
		,@ImportTableName VARCHAR(200)
		,@TableName NVARCHAR(255) = 'tempdb..[##ProductUpdate_' + @TblGUID + ']'
		
		,@Attribute NVARCHAR(MAX)
		


		DECLARE @Attributecode TABLE (Attrcode NVARCHAR(255))

		CREATE TABLE #Attributecode (Attrcode NVARCHAR(255))
		CREATE TABLE #ConfigurableAttributecode 
		(
			SKU NVARCHAR(255)
			,PimAttributeId INT
			,DefaultValue NVARCHAR(255)
			,AttributeCode NVARCHAR(255)
			,ParentSKU NVARCHAR(255)
		)

		SELECT	@ImportHeadId = ImportHeadId FROM dbo.ZnodeImportHead	WHERE Name = 'ProductUpdate'

		DELETE FROM ZnodeImportLog	WHERE ImportProcessLogId IN (SELECT	ImportProcessLogId	FROM ZnodeImportProcessLog ZIPL
		INNER JOIN ZnodeImportTemplate ZIT ON ZIPL.ImportTemplateId = ZIT.ImportTemplateId WHERE ZIT.TemplateName = 'ProductUpdate')

		DELETE FROM ZnodeImportProcessLog	WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate')

		DELETE FROM ZnodeImportTemplateMapping WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate')

		DELETE FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate'
		
		INSERT INTO ZnodeImportTemplate (ImportHeadId, TemplateName, TemplateVersion, PimAttributeFamilyId, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
		VALUES (@ImportHeadId, 'ProductUpdate', 1, NULL, 1, 2, GETDATE(), 2, GETDATE())

		SET @TemplateId = @@Identity

		SET @SQL = '
		INSERT INTO ZnodeImportTemplateMapping ( ImportTemplateId, SourceColumnName, TargetColumnName, DisplayOrder, IsActive, IsAllowNull, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		select ' + CONVERT(NVARCHAR(100), @TemplateId) + ', a.name, PA.AttributeCode,1,1,1,' + CONVERT(NVARCHAR(100), @UserId) + ' , ''' + CONVERT(NVARCHAR(100), @GetDate) + ''' , ' + CONVERT(NVARCHAR(100), @UserId) + ', ''' + CONVERT(NVARCHAR(100), @GetDate) + '''  
		from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		inner join ZnodePimAttribute PA on a.name = PA.AttributeCode AND PA.IsCategory =0  
		where b.name in (''##ProductUpdate_' + @TblGUID + ''') '

		EXEC (@SQL)
		--------------------------------------------
		DECLARE @SQLQuery nvarchar(max) 

		IF OBJECT_ID('#WrongData', 'U') IS NOT NULL
		Begin
			DROP TABLE #WrongData
		End

		CREATE TABLE #WrongData (ColumnName Nvarchar(100))
		SET @SQLQuery = ' INSERT INTO #WrongData (ColumnName )
		Select a.Name from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		where b.name in (''##ProductUpdate_' + @TblGUID +''') 
		and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name not in (''SKU'',''guid'') ' 

        EXEC sys.sp_sqlexec	@SQLQuery	

		SET @ImportProcessLogId = 0 
		If exists (Select TOP 1 1 from #WrongData  )
		Begin
				
		
			INSERT INTO ZnodeImportProcessLog( ImportTemplateId, Status, ProcessStartedDate, ProcessCompletedDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,ERPTaskSchedulerId)
	 	    SELECT @TemplateId, dbo.Fn_GetImportStatus( 3 ), @GetDate, NULL, @UserId, @GetDate, @UserId, @GetDate , NULL ;
			SET @ImportProcessLogId = @@IDENTITY

			SET @SQLQuery = '
			INSERT INTO ZnodeImportLog
					(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			Select 19 ,''Attribute '', ColumnName, '''+ @TblGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',' +
			' NULL  from #WrongData ' 
        	EXEC sys.sp_sqlexec	@SQLQuery	 	

			--SELECT	'Job create successfully.'
			--Return 0 
	
		End
		--------------------------------------------
		
		SELECT
		@InsertColumnName = SUBSTRING((SELECT
		',' + [TargetColumnName] + ''
		FROM [dbo].[ZnodeImportTemplateMapping]
		WHERE [ImportTemplateId] = @TemplateId
		FOR XML PATH (''))
		, 2, 4000)



		SELECT
		@CreateTableScriptSql = 'CREATE TABLE ' + @GlobalTableName + ' (' + SUBSTRING((SELECT
		',' + ISNULL([TargetColumnName], 'NULL') + ' nvarchar(max)'
		FROM [dbo].[ZnodeImportTemplateMapping]
		WHERE [ImportTemplateId] = @TemplateId
		FOR XML PATH (''))
		, 2, 4000) + ' , GUID nvarchar(255))'
		EXEC (@CreateTableScriptSql)

		IF (LEN(@InsertColumnName) > 0)
		BEGIN
		SET @SQL = 'INSERT INTO '+ @GlobalTableName +' ( ' + @InsertColumnName + ' )	SELECT ' + @InsertColumnName + ' FROM ' + @TableName
		EXEC sp_executesql @SQL
		END

		DECLARE @UpdateTableColumn VARCHAR(MAX)

		SET @Sql = 'UPDATE ' + @GlobalTableName +' SET GUID= ''' + @NewuGuId + ''''
		EXEC sp_executesql @SQL

		--SET @Sql = 'DELETE FROM ' + @GlobalTableName + '  WHERE ISNULL(SKU, '''') = ''''' 
		--EXEC sp_executesql @SQL
		
		SET @Sql = 'Update ' + @GlobalTableName +  ' SET SKU = Ltrim(Rtrim(SKU)) '
		EXEC sp_executesql @SQL
		

		

				

		---- Import product    
		EXEC Znode_ImportData @TableName = @GlobalTableName
		,@NewGUID = @TblGUID
		,@TemplateId = @TemplateId
		,@UserId = @UserId
		,@LocaleId = @LocaleId
		,@DefaultFamilyId = @DefaultFamilyId
		,@PriceListId = 0
		,@CountryCode = ''
		--,@IsDoNotCreateJob = 0
		--,@IsDoNotStartJob = 0
		--,@StepName = 'Import'-- 	,@IsDebug = 1 
		,@IsAutoPublish= @IsAutoPublish
		,@ImportProcessLogId = @ImportProcessLogId  
		SELECT
		'Job create successfully.'
	END TRY
	BEGIN CATCH 
	DECLARE @Status BIT ;
	select ERROR_MESSAGE ()
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialProcessProductData @TblGUID = '''+ISNULL(@TblGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS
	VARCHAR(50)),'''''')+',@IsAutoPublish='+ISNULL(CAST(@IsAutoPublish AS VARCHAR(50)),'''')
            
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_ImportPartialProcessProductData',
	@ErrorInProcedure = 'Znode_ImportPartialProcessProductData',
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
	END CATCH 

	END
GO
PRINT N'Creating [dbo].[Znode_ImportPartialValidatePimProductData]...';
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialValidatePimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialValidatePimProductData
END 

GO
CREATE PROCEDURE [dbo].[Znode_ImportPartialValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0  )
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct ( for partial attribute import ) 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max)
             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'ProductUpdate'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END;


			--Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
	
			SET @SQLQuery = 'Select 19 ,''SKU'', SKU, '''+ @newGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',RowNumber   from  '+ @TableName + ' where PimProductId Is null ';
			INSERT INTO ZnodeImportLog
                     (ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
        	EXEC sys.sp_sqlexec	@SQLQuery	 	


			--SET @SQLQuery = '
			--INSERT INTO ZnodeImportLog
			--		(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			--Select 19 ,''Attribute '', a.Name , '''+ @NewGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',' +
			--' NULL  from tempdb.sys.columns a
			--inner join tempdb.sys.tables b on a.object_id = b.object_id 
			--where b.name in (''##ProductUpdate_' + @NewGUID +''') 
			--and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name <> ''guid''' 

   --     	EXEC sys.sp_sqlexec	@SQLQuery	 	

			SET @SQLQuery = 'Delete from  '+@TableName+ ' where PimProductId Is null ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
			
			DECLARE @RecordCount Bigint 
			SET @SQLQuery = ' Select @RecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			EXEC sp_executesql @SQLQuery, N'@RecordCount BIGINT out' , @RecordCount=@RecordCount out


			--Generate new process for current import 
            --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
            --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
            --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @ImportHeadName IN('ProductUpdate') AND @RecordCount > 0  
                 BEGIN 
					SET @IsCategory = 0 
				    --Get all default attribute values in attribute 
                    INSERT INTO @FamilyAttributeDetail
                    (PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                    --Call Process to insert data of defeult family with source column name and target column name 
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 
	             END;
            -- Check attributes are manditory and not provided with source table
		   	if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
		 
     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId )
            EXEC sys.sp_sqlexec  @SQLQuery;
            IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )  AND @RecordCount > 0  
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('ProductUpdate', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             --INSERT INTO ZnodeImportLog
                             --(ErrorDescription,
                             -- ColumnName,
                             -- Data,
                             -- GUID,
                             -- CreatedBy,
                             -- CreatedDate,
                             -- ModifiedBy,
                             -- ModifiedDate,
                             -- ImportProcessLogId
                             --)
                             --       SELECT '14' AS ErrorDescription,
                             --              AttributeCode,
                             --              '',
                             --              @NewGUID,
                             --              @UserId,
                             --              @GetDate,
                             --              @UserId,
                             --              @GetDate,
                             --              @ImportProcessLogId
                             --       FROM @FamilyAttributeDetail
                             --       WHERE ISNULL(SourceColumnName, '') = ''
                             --             AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId;
                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             IF NOT EXISTS
                             (
                                 SELECT TOP 1 1
                                 FROM INFORMATION_SCHEMA.TABLES
                                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             )
                                 BEGIN
                                     CREATE TABLE #DefaultAttributeCode
                                     (AttributeTypeName          VARCHAR(300),
                                      PimAttributeDefaultValueId INT,
                                      PimAttributeId             INT,
                                      AttributeDefaultValueCode  VARCHAR(100)
                                     );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                                 END;
                             ELSE
                                 BEGIN
                                     DROP TABLE #DefaultAttributeCode;
                                 END;
                         END;

                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
						
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateManditoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;
                             --Check Default data value is valid 
                             IF @ImportHeadName IN('ProductUpdate', 'Category')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
            --COMMIT TRAN TRN_ImportValidProductData;
			 
						 	 

			 
  			 SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber in (Select Rownumber from ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber is not null)';
             EXEC sys.sp_sqlexec  @SQLQuery;
			
             IF @ImportHeadName IN('ProductUpdate')
                 BEGIN
                     IF NOT EXISTS
                
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN (43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 ) AND @RecordCount > 0 
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
                                     EXEC Znode_ImportPartialPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
	
                                 END;
                            
                         END;
                 END;


             EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             -- Finally call product insert process if error not found in error log table 
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE ImportProcessLogId = @ImportProcessLogId
                       AND Guid = @NewGUID
             )
                 BEGIN
                     --Update process with completed status for current import 
                     UPDATE ZnodeImportProcessLog
                       SET
                           Status = dbo.Fn_GetImportStatus(3),
                           ProcessCompletedDate =  Getdate() 
                       WHERE ImportProcessLogId = @ImportProcessLogId;
                 END;
		
				--SET @SQLQuery = 'select TOP 1 * from  ' + @TableName
				--EXEC sys.sp_sqlexec @SQLQuery;
        END TRY
      
		BEGIN CATCH 
			EXEC Znode_ImportReadErrorLog   @ImportProcessLogId = @ImportProcessLogId,  @NewGUID = @NewGUID; 
				--Update process with failed status for current import 
			--	UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3),ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;

			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialValidatePimProductData @ImportHeadName = '''+ISNULL(@ImportHeadName,'''''')+''',@TableName='''+ISNULL(CAST(@TableName AS
			VARCHAR(50)),'''''')+''',@TemplateId='+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''')+',@NewGUID='''+ISNULL(@NewGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@LocaleId='+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',
			@IsCategory='+ISNULL(CAST(@IsCategory AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@ImportProcessLogId='+ISNULL(CAST(@ImportProcessLogId AS VARCHAR(50)),'''')+',
			@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@CountryCode='''+ISNULL(CAST(@CountryCode AS VARCHAR(50)),'''''')+''',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',
			@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')+',@IsAccountAddress='+ISNULL(CAST(@IsAccountAddress AS VARCHAR(50)),'''')

			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

			EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialValidatePimProductData',
			@ErrorInProcedure = 'Znode_ImportPartialValidatePimProductData',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
		END CATCH 

     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePortalByStoreCode')
BEGIN 
	DROP PROCEDURE Znode_DeletePortalByStoreCode
END 
GO
CREATE  PROCEDURE [dbo].[Znode_DeletePortalByStoreCode]
(
	 @PortalId	varchar(2000)
	,@Status	bit OUT)
AS
	/*
	 Summary : This Procedure Is Used to delete the all records of portal if order is not place against portal  
	 --Unit Testing   
	 BEGIN TRANSACTION 
	 DECLARE @Status    BIT = 0
	 EXEC Znode_DeletePortalByPortalId @PortalId = 36, @Status   = @Status   OUT
	 SELECT @Status   
	 ROLLBACK TRANSACTION
	*/
BEGIN
	BEGIN TRAN DeletePortalByPortalId;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @TBL_PortalIds TABLE
		( 
								 PortalId int
		);
		DECLARE @TBL_Promotion TABLE
		( 
								 PromotionId int
		);
		DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		DECLARE @DeletedIds varchar(max)= '';
		-- inserting PortalIds which are not present in Order and Quote

		INSERT INTO @TBL_PortalIds 
		SELECT Item FROM dbo.Split( @PortalId, ',' ) AS SP 
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeOmsOrderDetails AS ZOD WHERE ZOD.PortalId = Sp.Item) 
		AND  NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsQuote AS ZOQ WHERE ZOQ.PortalId = Sp.Item );


	     DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
	     DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		--DELETE FROM ZnodeTaxRule WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRule.PortalId);
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		DELETE FROM ZnodePortalDisplaySetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalDisplaySetting.PortalId);
		DELETE FROM ZnodeUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGiftCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGiftCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);

		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);

		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);

		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId);

		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);

		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);
		   
		/* Remove Search index */
		--DELETE FROM ZnodeSearchIndexServerStatus WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId
		--		 INNER JOIN ZnodeSearchIndexMonitor AS zsim ON zpi.PortalIndexId = zsim.PortalIndexId WHERE zsim.SearchIndexMonitorId = ZnodeSearchIndexServerStatus.SearchIndexMonitorId);
		--DELETE FROM ZnodeSearchIndexMonitor WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId WHERE zpi.PortalIndexId = ZnodeSearchIndexMonitor.PortalIndexId );
		--DELETE FROM ZnodePortalIndex WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalIndex.PortalId);
		/* Remove Search index */
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);

		INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);

		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);

		
		DELETE FROM ZnodeBlogNewsLocale where exists (select top 1 1 from ZnodeBlogNews ZBN
													where EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )



		DELETE FROM ZnodeBlogNewsCommentLocale where exists (select top 1 1 from ZnodeBlogNewsComment ZBC
													where exists (select top 1 1 from ZnodeBlogNews ZBN
														where exists (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
													



		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )



		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)

		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);

		IF (SELECT Count(1) FROM @TBL_PortalIds) = (SELECT Count(1) FROM dbo.Split( @PortalId, ',' ) )
		BEGIN 
		SELECT 1 AS ID, CAST(1 AS bit) AS Status;
		SET @Status = 1;
		END 
		ELSE 
		BEGIN 
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		SET @Status = 0;

		END 
		COMMIT TRAN DeletePortalByPortalId;
	END TRY
	BEGIN CATCH
		 
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePortalByPortalId @PortalId = '+@PortalId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN DeletePortalByPortalId;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePortalByPortalId',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteProcedureErrorLog')
BEGIN 
	DROP PROCEDURE Znode_DeleteProcedureErrorLog
END 
GO
CREATE PROCEDURE [dbo].[Znode_DeleteProcedureErrorLog]
(   @ProcedureName  VARCHAR(1000) = '',
	@Status BIT OUT
)
AS
/*
EXEC Znode_DeleteProcedureErrorLog @ProcedureName = 'Znode_ManageProductList_XML',@Status =0

EXEC Znode_DeleteProcedureErrorLog @Status =0

EXEC Znode_DeleteProcedureErrorLog @ProcedureName = ''
*/
BEGIN
         
         BEGIN TRY
             SET NOCOUNT ON;

			 -- will delete all records
			 IF @ProcedureName = ''
				 BEGIN
				 TRUNCATE TABLE ZnodeProceduresErrorLog
				 END

			 ELSE
			 -- will delete records based on parameter (sp name)
				 BEGIN
				 DELETE FROM ZnodeProceduresErrorLog
				 WHERE ProcedureName = @ProcedureName
				 END

			 SELECT 1 AS ID,CAST(1 AS BIT) AS Status;
			  SET @Status = 1;
		 END TRY
         BEGIN CATCH
		    
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteProcedureErrorLog @ProcedureName = '''+ISNULL(@ProcedureName,'''''')+''',@Status = '+ISNULL(CAST(@Status AS varchar(10)),'''');
              			 
             --SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeleteProcedureErrorLog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
			 
         END CATCH;
 
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCategoryList')
BEGIN 
	DROP PROCEDURE Znode_GetCategoryList
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetCategoryList]  
(  
 @IsAssociated BIT = 0 ,@PimCategoryId Transferid Readonly   
)  
AS   
BEGIN   
  IF @IsAssociated = 0 AND NOT EXISTS (SELECT Max(id) FROM @PimCategoryId WHERE id = 0)  
  BEGIN   
   SELECT PimCategoryId FROM znodePimCategory ZPP WHERE NOT EXISTS (SELECT TOP 1  1 FROM @PimCategoryId WHERE id = ZPP.PimCategoryId ) AND PimCategoryId IS NOT NULL   
  END   
  ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @PimCategoryId HAVING max(id) = 0)  
  BEGIN  
   SELECT PimCategoryId FROM znodePimCategory ZPP WHERE  EXISTS (SELECT TOP 1  1 FROM @PimCategoryId WHERE id = ZPP.PimCategoryId ) AND PimCategoryId IS NOT NULL   
  END   
  ELSE   
  BEGIN   
   SELECT -1 PimCategoryId  
  END   
END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPimProductCategoryList')
BEGIN 
	DROP PROCEDURE Znode_GetPimProductCategoryList
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetPimProductCategoryList]      
(   @WhereClause   XML,      
    @Rows          INT           = 100,      
    @PageNo        INT           = 1,      
    @Order_BY      VARCHAR(1000) = '',      
    @RowsCount     INT OUT,      
    @LocaleId      INT           = 1,      
 @PimProductIdInput INT,      
    @IsAssociated  BIT           = 0      
 ,@AttributeCode VARCHAR(max) = ''      
 )      
AS       
/*      
     Summary :- This Procedure is used to get the product list for category products       
    The result is fetched order by DisplayOrder or status as per requirement in both asc and desc      
          
     Unit Testing       
  begin tran      
     EXEC Znode_GetPimCategoryProductList '',@RowsCount = 0, @PimCategoryId = 22,@Order_BY ='DisplayOrder asc'      
  rollback tran      
 */      
     BEGIN      
         BEGIN TRY      
             SET NOCOUNT ON;      
                 
		DECLARE @TransferPimCategoryId TransferId       
		DECLARE @TBL_AttributeDetails AS TABLE(PimCategoryAttributeValueId INT,PimCategoryId   INT,AttributeValue NVARCHAR(MAX),  
		AttributeCode  VARCHAR(600),PimAttributeId INT);      
                  
		DECLARE @OrderByDisplay INT= 0;      
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();      
                   
		DECLARE @TBL_ProductIdTable TABLE([PimProductId] INT,[CountId] INT,PimCategoryId  INT,RowId INT);      
      
		DECLARE   
		@PimAttributeId VARCHAR(MAX)      
		   
      
		DECLARE @PimProductIds TransferId      
      
             IF @Order_BY LIKE '%DisplayOrder%'      
                 BEGIN      
                     SET @OrderByDisplay = 1;      
                 END;      
             ELSE      
             IF @Order_BY LIKE '%Status%'      
                 BEGIN      
                     SET @OrderByDisplay = 2;      
                 END;      
    DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))      
    INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)      
    SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetCategoryMediaAttributeId()      
      
          
      
            INSERT INTO @TransferPimCategoryId      
   SELECT PimCategoryId FROM ZnodePimCategoryProduct ZCP WHERE ZCP.PimProductId = @PimProductIdInput       
   ORDER BY CASE WHEN @Order_By LIKE '% DESC%'      
            THEN       
   CASE WHEN @OrderByDisplay = 1       
     THEN ZCP.DisplayOrder       
     WHEN @OrderByDisplay = 2       
     THEN ZCP.Status      
     ELSE 1 END       
     ELSE 1 END DESC,      
            CASE WHEN @Order_By LIKE '% ASC%'       
    THEN      
     CASE WHEN @OrderByDisplay = 1       
     THEN ZCP.DisplayOrder       
      WHEN @OrderByDisplay = 2      
       THEN ZCP.Status      
        ELSE 1 END      
         ELSE 1 END 
		 
		       
          IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimCategoryId  )      
    BEGIN       
      INSERT INTO @TransferPimCategoryId      
      SELECT '0'      
      --SET @IsAssociated = 0       
             END       
        
      
  DECLARE @SQL NVARcHAR(max)= ''      
  DECLARE  @ProductListIdRTR TransferId      
  DECLARE @TAb Transferid       
  DECLARE @tBL_mainList TABLE (Id INT,CountId INT,RowId INT)      
       
  SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  WHEN @IsAssociated = 1 THEN 0 END       
       
		
  INSERT INTO @ProductListIdRTR      
  EXEC Znode_GetCategoryList  @IsAssociated,@TransferPimCategoryId      
        
 
  DECLARE @CategoryIDS NVARCHAR(2000) = SUBSTRING((SELECT ','+CAST(ID AS VARCHAR(200)) FROM @ProductListIdRTR FOR XML PATH('')), 2, 4000)      
 
       
  BEGIN      
        
		SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'PimCategoryId','CategoryName')      
		SET @order_by = REPLACE(@order_by,'PimCategoryId','CategoryName')      
      
		INSERT INTO @TBL_MainList(id,CountId,RowId)      
		EXEC Znode_GetCategoryIdForPaging @WhereClause , @Rows , @PageNo , @Order_BY , @RowsCount , @LocaleId , @AttributeCode , @CategoryIDS , @IsAssociated;      
       
		END       
		INSERT INTO @TBL_ProductIdTable(PimCategoryId,RowId)       
		SELECT ID ,RowId FROM @TBL_MainList SP       
      
		INSERT INTO @PimProductIds ( Id )      
		SELECT Id FROM @TBL_MainList SP      
      
		UPDATE @TBL_ProductIdTable SET PimProductId = @PimProductIdInput;      
		SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50))   
		FROM [dbo].[Fn_GetGridPimCategoryAttributes]() FOR XML PATH('')), 2, 4000);      
                   
		INSERT INTO @TBL_AttributeDetails(PimCategoryAttributeValueId,PimCategoryId, AttributeValue,AttributeCode,PimAttributeId)      
		EXEC Znode_GetCategoryAttributeValueId @PimProductIds,@PimAttributeId,@LocaleId;      
                 
      
		;WITH Cte_ProductMedia      
		AS (SELECT TBA.PimCategoryId , TBA.PimAttributeId       
		, SUBSTRING( ( SELECT ','+URL+ZMSM.ThumbnailFolderName+'/'+ zm.PATH       
		FROM ZnodeMedia AS ZM      
		INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)      
		INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)      
		INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )      
		INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)      
		WHERE TBAI.PimCategoryId = TBA.PimCategoryId AND TBAI.PimAttributeId = TBA.PimAttributeId       
		FOR XML PATH('') ), 2 , 4000) AS AttributeValue , SUBSTRING( ( SELECT ','+AttributeValue      
		FROM  @TBL_AttributeDetails AS TBAI      
		WHERE TBAI.PimCategoryId = TBA.PimCategoryId AND TBAI.PimAttributeId = TBA.PimAttributeId       
		FOR XML PATH('') ), 2 , 4000) MediaIds        
		FROM @TBL_AttributeDetails AS TBA       
		INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))      
                                
		UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue      
		FROM @TBL_AttributeDetails TBAV       
		INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimCategoryId = TBAV.PimCategoryId  AND CTPM.PimAttributeId = TBAV.PimAttributeId       
		AND CTPM.PimAttributeId = TBAV.PimAttributeId;      
          
      
		SELECT ISNULL(ZPCP.PimCategoryProductId,0) AS PimCategoryProductId, zpp.[PimCategoryId] AS [Categoryid],zpp.[PimCategoryId],ISNULL(ZPCP.[PimProductId],0) AS PimProductId,[CategoryName],      
		CASE WHEN ZPCP.Status IS NULL THEN CAST(0 AS BIT) ELSE CAST(ZPCP.Status AS BIT) END AS [Status],      
		piv.[CategoryImage] [ImagePath],ZPCP.DisplayOrder       
          
		FROM @TBL_ProductIdTable AS zpp      
		LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)      
		INNER JOIN (SELECT PimCategoryId,AttributeValue,AttributeCode FROM @TBL_AttributeDetails) TB      
		PIVOT(MAX([AttributeValue])       
		FOR [AttributeCode] IN([CategoryName],[IsActive],[CategoryImage])) AS Piv ON(Piv.[PimCategoryId] = zpp.[PimCategoryId])      
		ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder       
		WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END DESC,      
		CASE WHEN @Order_By LIKE '% ASC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder      
		WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END,zpp.RowId;      
        
     
		SELECT @RowsCount=ISNULL((SELECT top 1 countId FROM @TBL_MainList),0)     
    
      
      
         END TRY      
         BEGIN CATCH      
		SELECT ERROR_MESSAGE()      
		DECLARE @Status BIT ;      
		SET @Status = 0;      
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),      
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimProductCategoryList @WhereClause = '+  
		CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '  
		+CAST(@LocaleId AS    
		VARCHAR(50))+',@PimProductIdInput='+CAST(@PimProductIdInput AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+  
		CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));      
                        
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                          
          
		EXEC Znode_InsertProcedureErrorLog      
			@ProcedureName = 'Znode_GetPimProductCategoryList',      
			@ErrorInProcedure = @Error_procedure,      
			@ErrorMessage = @ErrorMessage,      
			@ErrorLine = @ErrorLine,      
			@ErrorCall = @ErrorCall;      
         END CATCH;      
     END;
GO


--------------data script

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeFormWidgetEmailTemplate',	'<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>EmailTemplateId</name><headertext>Email Template ID</headertext><width>40</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>TemplateName</name><headertext>Email Template Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>200</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>TemplateName</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>emailtemplatenamecolumn</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>',	'EmailTemplate',	'EmailTemplate',	'EmailTemplate',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeFormWidgetEmailTemplate')


update ZnodeApplicationSetting 
set  Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>FormBuilderSubmitId</name>
    <headertext>Form Builder Submit ID</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>FormBuilderId</name>
    <headertext>ID</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>FormCode</name>
    <headertext>Form Code</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>y</isallowlink>
    <islinkactionurl>/FormSubmission/View</islinkactionurl>
    <islinkparamfield>FormBuilderSubmitId</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>StoreName</name>
    <headertext>Store Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>UserName</name>
    <headertext>Username</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>FullName</name>
    <headertext>Full Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>View</format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>View</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/FormSubmission/View</manageactionurl>
    <manageparamfield>FormBuilderSubmitId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
where ItemName = 'ZnodeFormSubmissionList'

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeFormSubmissionList',	'<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>FormBuilderSubmitId</name>
    <headertext>Form Builder Submit ID</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>FormBuilderId</name>
    <headertext>ID</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>FormCode</name>
    <headertext>Form Code</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>y</isallowlink>
    <islinkactionurl>/FormSubmission/View</islinkactionurl>
    <islinkparamfield>FormBuilderSubmitId</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>StoreName</name>
    <headertext>Store Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>UserName</name>
    <headertext>Username</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>FullName</name>
    <headertext>Full Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>View</format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>View</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/FormSubmission/View</manageactionurl>
    <manageparamfield>FormBuilderSubmitId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>',	'ZnodeFormSubmissionList',	'ZnodeFormSubmissionList',	'ZnodeFormSubmissionList',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeFormSubmissionList')

go

----ZnodeMenu
insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'CMS'),	'Manage Forms',	8,	NULL,	'FormBuilder',	'List',	'z-form-builder',	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'CMS') and MenuName = 'Manage Forms' and ControllerName = 'FormBuilder') 

insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'OMS'),	'Form Submission',	9,	NULL,	'FormSubmission',	'List',	'z-form-submission',	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'OMS') and MenuName = 'Form Submission' and ControllerName = 'FormSubmission')

insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Admin'),	'Log Message',	14,	NULL,	'LogMessage',	'List',	null,	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'Admin') and MenuName = 'Log Message' and ControllerName = 'LogMessage')

-----ZnodeActions --- FormBuilder
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','List',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'List')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','Create',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'Create')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','Edit',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'Edit')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','Delete',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'Delete')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','IsFormCodeExist',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'IsFormCodeExist')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','GetTabStructure',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'GetTabStructure')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','AssignedAttributeGroupList',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'AssignedAttributeGroupList')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','GetUnAssignedAttributeGroups',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'GetUnAssignedAttributeGroups')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','GetUnAssignedAttribute',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'GetUnAssignedAttribute')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','AssignGroups',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'AssignGroups')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','AssignAttributes',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'AssignAttributes')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','UpdateAttributeDisplayOrder',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'UpdateAttributeDisplayOrder')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','UpdateGroupDisplayOrder',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'UpdateGroupDisplayOrder')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','UnAssignAttribute',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'UnAssignAttribute')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormBuilder','UnAssignGroup',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormBuilder' and ActionName = 'UnAssignGroup')

-----ZnodeActions --- FormSubmission
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormSubmission','List',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormSubmission' and ActionName = 'List')

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'FormSubmission','View',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'FormSubmission' and ActionName = 'View')


-----ZnodeActionMenu --- FormBuilder
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'List')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'List'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Create')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Create'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Edit')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Edit'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Delete')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Delete'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'IsFormCodeExist')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'IsFormCodeExist'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetTabStructure')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetTabStructure'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignedAttributeGroupList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignedAttributeGroupList'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttributeGroups')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttributeGroups'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttribute')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttribute'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignGroups')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignGroups'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignAttributes')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignAttributes'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateAttributeDisplayOrder')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateAttributeDisplayOrder'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateGroupDisplayOrder')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateGroupDisplayOrder'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignAttribute')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignAttribute'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignGroup')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignGroup'))

-----ZnodeActionMenu --- FormSubmission
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Form Submission')	,(select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'List')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Form Submission') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'List'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Form Submission')	,(select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'View')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Form Submission') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'View'))

-----ZnodeMenuActionsPermission --- FormBuilder
insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'List')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'List'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Create')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Create'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Edit')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Edit'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Delete'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'Delete'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'IsFormCodeExist'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'IsFormCodeExist'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetTabStructure')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetTabStructure'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignedAttributeGroupList'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignedAttributeGroupList'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttributeGroups'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttributeGroups'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttribute'),1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'GetUnAssignedAttribute'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignGroups'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignGroups'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignAttributes'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'AssignAttributes'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateAttributeDisplayOrder'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateAttributeDisplayOrder'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateGroupDisplayOrder')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UpdateGroupDisplayOrder'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignAttribute')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignAttribute'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Manage Forms')	,(select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignGroup'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormBuilder' and ActionName= 'UnAssignGroup'))

-----ZnodeMenuActionsPermission --- FormSubmission
insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Form Submission')	,(select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'List'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Form Submission') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'List'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId,AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Form Submission')	,(select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'View'),1	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Form Submission') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'FormSubmission' and ActionName= 'View'))

-----ZnodeCMSTemplate --- FormTemplate
insert into ZnodeCMSTemplate (Name,	FileName,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select 'Form Template','FormTemplate',2,GETDATE(),2,GETDATE()
where not exists (select * from ZnodeCMSTemplate where Name = 'Form Template' and FileName = 'FormTemplate' )

-----ZnodeCMSWidgets --- FormWidget
insert into ZnodeCMSWidgets (Code,	DisplayName,	IsConfigurable,	FileName,	CreatedBy,	CreatedDate,	ModifiedBy	,ModifiedDate)
select 'FormWidget','Form Widget',1,'Text_Editor.png',2,GETDATE(),2,GETDATE()
where not exists (select * from ZnodeCMSWidgets where Code = 'FormWidget' )

----------

insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'CMS'),	'Pages',	1,	NULL,	'Content',	'ContentPageList',	'z-contents',	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'CMS') and MenuName = 'Pages' and ControllerName = 'Content') 

insert into ZnodeMenu (ParentMenuId	,MenuName,	MenuSequence,	AreaName,	ControllerName	,ActionName	,CSSClassName,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'CMS'),	'Banner Sliders',	1,	NULL,	'WebSite',	'GetSliderList',	'z-slider-configuration',	1,	2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenu where ParentMenuId = (select MenuId from ZnodeMenu where MenuName = 'CMS') and MenuName = 'Banner Sliders' and ControllerName = 'WebSite') 

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'WebSite','ManageFormWidgetConfiguration',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'ManageFormWidgetConfiguration')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Pages')	,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageFormWidgetConfiguration')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageFormWidgetConfiguration'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Banner Sliders')	,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageFormWidgetConfiguration')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Banner Sliders') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageFormWidgetConfiguration'))

go

 UPDATE a
 SET  a.ParentPimCategoryHierarchyId = b.PimCategoryHierarchyId
 FROM ZnodePimCategoryHierarchy  a 
 INNER JOIN ZnodePimCategoryHierarchy  b ON (b.PimCategoryId  = a.ParentPimCategoryHierarchyId AND b.PimCatalogId = a.PimCatalogId)
 WHERE a.ParentPimCategoryHierarchyId IS NOT NULL 
 
 GO 

 UPDATE a 
 SET a.PimCategoryHierarchyId = b.PimCategoryHierarchyId
 FROM ZnodePimCatalogCategory a 
 INNER JOIN ZnodePimCategoryHierarchy b ON (b.PimCatalogId =  a.PimCatalogId AND b.PimCategoryId = a.PimCategoryId)

 GO 
  
If NOT exists (select TOP 1 1  from ZnodeMediaServerMaster where ServerName ='Network Drive' )
insert into ZnodeMediaServerMaster
(ServerName,	PartialViewName	,IsOtherServer	,ThumbnailFolderName	,ClassName	,CreatedBy	,CreatedDate	,ModifiedBy	,ModifiedDate)
Values ('Network Drive',	'NetworkDrive'	,0,	'Thumbnail'	,'NetworkDriveAgent',	2,	'2018-02-08 13:05:47.207'	,2,	'2018-02-08 13:05:47.207')

----------added code column in ZnodePortal

--update ZnodePortal set code = 'FineFoods' where StoreName = 'Fine Foods'
--update ZnodePortal set code = 'WineAndCheese' where StoreName = 'Wine & Cheese'
--update ZnodePortal set code = 'NutWholesaler' where StoreName = 'Nut Wholesaler'

--update ZnodePortal set Code = ltrim(rtrim(replace(replace(replace(StoreName,'@',''),'&','And'),' ',''))) where code is null

--go

If Not Exists (select TOP 1 1 from ZnodeApplicationSetting  where itemname  = 'SKUListForPrice')
Begin
	Insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency
	,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	Values ('Table',	'SKUListForPrice',	'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimProductId</name>      <headertext>ID</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>isDownloadable</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>Image</name>      <headertext>Product Image</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ProductImage,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>SKU</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>skucolumn</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>productType</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>AttributeFamily</name>      <headertext>Attribute Family</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>IsDownloadable</name>      <headertext>Is Downloadable</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>IsDownloadable</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>isDownloadable</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',	'SKUListForPrice',	'SKUListForPrice',	'SKUListForPrice'
	,0,	NULL,	NULL,	NULL,	NULL,	0,	Getdate(),	2,	Getdate())
End
Else 
Begin
	Update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimProductId</name>      <headertext>ID</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>isDownloadable</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>Image</name>      <headertext>Product Image</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ProductImage,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>SKU</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>skucolumn</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>productType</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>AttributeFamily</name>      <headertext>Attribute Family</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>IsDownloadable</name>      <headertext>Is Downloadable</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>IsDownloadable</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>isDownloadable</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'SKUListForPrice'
End  
GO 


insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Search','GetUnAssociatedCatalogAttributes',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'GetUnAssociatedCatalogAttributes')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetUnAssociatedCatalogAttributes'))



insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Search','GetAssociatedCatalogAttributes',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'GetAssociatedCatalogAttributes')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAssociatedCatalogAttributes'))



insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'WebSite','FormWidgetEmailConfiguration',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'FormWidgetEmailConfiguration')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Pages')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'FormWidgetEmailConfiguration')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'FormWidgetEmailConfiguration'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Pages'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'FormWidgetEmailConfiguration')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'FormWidgetEmailConfiguration'))


insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'WebSite','EmailTemplateList',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'EmailTemplateList')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Pages')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'EmailTemplateList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'EmailTemplateList'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Pages'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'EmailTemplateList')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'EmailTemplateList'))

update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ProductId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>Image</name>      <headertext>Product Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CategoryName</name>      <headertext>Category Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Catalog/UpdateCatalogCategoryProduct</manageactionurl>      <manageparamfield>ProductId,PimCatalogId,PimCategoryHierarchyId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'  where ItemName = 'ZnodeGetCatalogAssociatedProduct'

update ZnodeImportAttributeValidation set ValidationValue =1  where ImportHeadId in ( select ImportHeadId from ZnodeImportHead where  Name = 'ProductAttribute' ) 
and AttributeCode = 'DisplayOrder' and ValidationName = 'MinNumber'

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Price','GetPriceBySku',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Price' and ActionName = 'GetPriceBySku')
 
insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Pricing Engine'),
(select ActionId from ZnodeActions where ControllerName = 'Price' and ActionName= 'GetPriceBySku')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Pricing Engine') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Price' and ActionName= 'GetPriceBySku'))


insert into ZnodeImportHead (Name,IsUsedInImport,IsUsedInDynamicReport,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsCsvUploader)
Select 'ProductUpdate' ,1, 0 , 1, 2,getdate(), 2,getdate(),1 WHERE not EXISTS (Select top 1 1 from ZnodeImportHead where Name =  'ProductUpdate'  )


Update ZnodeApplicationSetting SET Setting =
'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>StackTraceMessage</name>      <headertext>StackTrace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName = 'ZnodeLogMessage'

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeLogMessage',	
'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>StackTraceMessage</name>      <headertext>StackTrace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
,	'ZnodeLogMessageList',	'ZnodeLogMessageList',	'ZnodeLogMessageList',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeLogMessage')
-----------------------------------------------------

--Action : List (MenuName = 'Log Message' ) 
---------------------------------------------------------------------------
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','List',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'List')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Log Message')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Log Message'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'List'))

--Action : GetLogMessage (MenuName = 'Log Message' ) 
-------------------------------------------------------------------
insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','GetLogMessage',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'GetLogMessage')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Log Message')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Log Message'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Log Message') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetLogMessage'))


IF NOT EXISTS (select top 1 1 from ZnodeMenu where MenuName = 'Application Logs')
BEGIN
Update ZnodeMenu SET MenuName = 'Application Logs'  where MenuName = 'Log Message'   
END

update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>CMSPortalMessageId</name>   <headertext>Checkbox</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>CMSMessageId</name>   <headertext>Checkbox</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>Location</name>   <headertext>Message Key</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>4</id>   <name>Message</name>   <headertext>Message</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>5</id>   <name>StoreName</name>   <headertext>Store Name</headertext>   <width>60</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>MessageTag</name>   <headertext>Message Tag</headertext>   <width>0</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>PublishStatus</name>   <headertext>Publish Status</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>IsPublished</name>   <headertext>Status</headertext>   <width>0</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>true</allowsorting>   <allowpaging>false</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Edit|Delete|Publish</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete|Publish</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/Content/UpdateManageMessage|/Content/DeleteManageMessage|/Content/PublishManageMessage</manageactionurl>   <manageparamfield>cmsMessageKeyId,portalId,localeId|cmsPortalMessageId|cmsMessageId,localeId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>'
where  ItemName = 'View_GetManageMessageList'

update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>UserId</name>      <headertext>Customer ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>UserName</name>      <headertext>Username</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Full Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Phone Number</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Accountname</name>      <headertext>Account</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Account</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>IsLock</name>      <headertext>Is Lock</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Is Lock</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>IsGuestUser</name>      <headertext>Guest User</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Guest User</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>Guest</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>     <column>      <id>15</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>18</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>19</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit|/User/CustomerEnableDisableAccount|/User/CustomerDelete</manageactionurl>      <manageparamfield>UserId|UserId,IsLock|UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where  ItemName = 'ZnodeCustomerAccount'

update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimCategoryId</name>      <headertext>ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimCategoryId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimCategoryId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>CategoryImage,CategoryName</imageparamfield>      <manageactionurl>/Pim/Category/Edit</manageactionurl>      <manageparamfield>PimCategoryId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CategoryName</name>      <headertext>Category Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/PIM/Category/Edit</islinkactionurl>      <islinkparamfield>PimCategoryId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CategoryTitle</name>      <headertext>Category Title</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>AttributeFamily</name>      <headertext>Attribute Family</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>PublishStatus</name>      <headertext>Publish Status</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete|Publish</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete|Publish</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/PIM/Category/Edit|/PIM/Category/Delete|PIM/Category/PublishCategory</manageactionurl>      <manageparamfield>PimCategoryId|PimCategoryId|PimCategoryId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where  ItemName = 'View_PimCategoryDetail'


update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>CMSContentPagesId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PageTitle</name>      <headertext>Page Title</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>/Content/EditContentPage</islinkactionurl>      <islinkparamfield>cmsContentPagesId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>PageName</name>      <headertext>Page Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>PageTemplateName</name>      <headertext>Template Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CMSContentPageGroupName</name>      <headertext>Folder</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>PortalName</name>      <headertext>Store Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>SEOTitle</name>      <headertext>SEO Title</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>SEODescription</name>      <headertext>SEO Description</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>SEOKeywords</name>      <headertext>SEO Keywords</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>MetaInformation</name>      <headertext>Meta Information</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>SEOUrl</name>      <headertext>SEO Friendly Url </headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>ActivationDate</name>      <headertext>Activation Date </headertext>      <width>60</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>ExpirationDate</name>      <headertext>Expiration Date </headertext>      <width>60</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>IsActive</name>      <headertext>Is Active</headertext>      <width>60</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>15</id>      <name>PublishStatus</name>      <headertext>Publish Status</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>IsPublished</name>      <headertext>Status</headertext>      <width>0</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete|Publish</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete|Publish</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Content/EditContentPage|/Content/DeleteContentPage|/Content/PublishContentPage</manageactionurl>      <manageparamfield>cmsContentPagesId|cmsContentPagesId|cmsContentPagesId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where  ItemName = 'StaticPageList'

------------------

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'WebSite','SaveFormWidgetConfiguration',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'SaveFormWidgetConfiguration')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Pages')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveFormWidgetConfiguration')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveFormWidgetConfiguration'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Pages'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveFormWidgetConfiguration')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveFormWidgetConfiguration'))

------------


insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Export','Export',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Export' and ActionName = 'Export')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' and  ControllerName = 'Products' )	
      ,(select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' and  ControllerName = 'Products' ) and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where  MenuName = 'Products' and  ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where  MenuName = 'Products' and  ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export'))



insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM'),
(select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Export' and ActionName= 'Export'))


If Not exists (Select TOP 1 1 from [ZnodeMessage] where MessageCode = '52' )
Begin
	INSERT [dbo].[ZnodeMessage] ([MessageCode], [MessageType], [MessageName],
	[CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate])
	VALUES (52, N'Other', N'Duplicate Entry Found', 2,
	CAST(N'2016-11-23 13:12:42.880' AS DateTime), 2, CAST(N'2016-11-23 13:12:42.880' AS DateTime))
End 

GO

Insert into ZnodeMessage 
(MessageCode,	MessageType	,MessageName	,CreatedBy	,CreatedDate	,ModifiedBy	,ModifiedDate) 
Select '52'	,'Other',	'Duplicate Entry Found',	2,	Getdate(),	2,	Getdate()
where NOT Exists (Select TOP 1 1 from ZnodeMessage where MessageCode = '52' )

GO 

update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>CMSSliderBannerId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>CMSSliderId</name>      <headertext>CMSSliderId</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>MediaPath,Title</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>MediaId</name>      <headertext>Media Id</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>FileName</name>      <headertext>Media File Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Title</name>      <headertext>Banner Title</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/WebSite/EditBanner</islinkactionurl>      <islinkparamfield>CMSSliderBannerId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>ButtonLink</name>      <headertext>Button Link</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>BannerSequence</name>      <headertext>Banner Sequence</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>ActivationDate</name>      <headertext>Activation Date</headertext>      <width>0</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>ExpirationDate</name>      <headertext>Expiration Date</headertext>      <width>0</width>      <datatype>Date</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/WebSite/EditBanner|/WebSite/DeleteBanner</manageactionurl>      <manageparamfield>CMSSliderBannerId|CMSSliderBannerId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'View_GetCMSSliderBannerPath'

GO 
update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>ItemId</name><headertext>ID</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>ID</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>Image</name><headertext>Image</headertext><width>40</width><datatype>String</datatype><columntype>Single</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>Image,ItemName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ItemName</name><headertext>Product Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>SKU</name><headertext>SKU</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>SEOUrl</name><headertext>SEO Url</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>SEOTitle</name><headertext>SEO Title</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>SEOKeywords</name><headertext>SEO Keywords</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>SEODescription</name><headertext>SEO Description</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>IsActive</name><headertext>Status</headertext><width>40</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>PublishStatus</name><headertext>Publish Status</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Publish</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Publish</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/SEO/SEODetailsOfProduct|/SEO/Publish</manageactionurl><manageparamfield>ItemId|ItemId,seoTypeId,localeId,portalId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>' where ItemName = 'SEOProductsDetails'

update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ItemId</name>      <headertext>ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>ID</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ItemName</name>      <headertext>Category</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>SEOUrl</name>      <headertext>SEO Url</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>SEOTitle</name>      <headertext>SEO Title</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>SEOKeywords</name>      <headertext>SEO Keywords</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>SEODescription</name>      <headertext>SEO Description</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Status</name>      <headertext>Status</headertext>      <width>0</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>PublishStatus</name>      <headertext>Publish Status</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Publish</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Publish</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/SEO/SEODetailsOfCategory|/SEO/Publish</manageactionurl>      <manageparamfield>ItemId|ItemId,seoTypeId,localeId,portalId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'SEOCategoryDetails'

update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>ItemId</name><headertext>ID</headertext><width>30</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PageTitle</name><headertext>Page Title</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/SEO/SEODetails</islinkactionurl><islinkparamfield>ItemId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ItemName</name><headertext>Page Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>PortalName</name><headertext>Store Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>PageTemplateName</name><headertext>Template Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>SEOUrl</name><headertext>SEO Url</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>SEOTitle</name><headertext>SEO Title</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>SEOKeywords</name><headertext>SEO Keywords</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>SEODescription</name><headertext>SEO Description</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>IsActive</name><headertext>Status</headertext><width>60</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>PublishStatus</name><headertext>Publish Status</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit|Publish</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Publish</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/SEO/SEODetails|/SEO/Publish</manageactionurl><manageparamfield>ItemId|ItemId,seoTypeId,localeId,portalId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>' where ItemName = 'SEOContentPages'

GO

Update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>UserId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>UserId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>UserId</name>      <headertext>Customer ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>UserName</name>      <headertext>Username</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/Customer/CustomerEdit</islinkactionurl>      <islinkparamfield>UserId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>FullName</name>      <headertext>Full Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Full Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>Email</name>      <headertext>Email ID</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Email Id</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>PhoneNumber</name>      <headertext>Phone Number</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Phone Number</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Accountname</name>      <headertext>Account</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Account</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>RoleName</name>      <headertext>Role Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>10</id>      <name>DepartmentName</name>      <headertext>Department Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>11</id>      <name>LastName</name>      <headertext>Last Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Last Name</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>12</id>      <name>IsLock</name>      <headertext>Is Lock</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Is Lock</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>13</id>      <name>IsGuestUser</name>      <headertext>Guest User</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Guest User</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>Guest</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>14</id>      <name>CompanyName</name>      <headertext>Company Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>     <column>      <id>15</id>      <name>CityName</name>      <headertext>City</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>16</id>      <name>StateName</name>      <headertext>State</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>17</id>      <name>PostalCode</name>      <headertext>Postal Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>18</id>      <name>CountryName</name>      <headertext>Country</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>19</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Manage|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>AccountId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>AccountId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Customer/CustomerEdit|/User/CustomerEnableDisableAccount|/User/CustomerDelete</manageactionurl>      <manageparamfield>UserId|UserId,IsLock|UserId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'  where ItemName = 'ZnodeCustomerAccount'

GO


insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Order','UpdateReturnShippingHistory',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Order' and ActionName = 'UpdateReturnShippingHistory')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Orders')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'UpdateReturnShippingHistory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Orders') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'UpdateReturnShippingHistory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Orders'),
(select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'UpdateReturnShippingHistory')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Orders') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'UpdateReturnShippingHistory'))


GO


if Not Exists ( Select TOP 1 1 from [ZnodeShipping] where  ShippingCode = N'FreeShipping' )
Begin
		INSERT [dbo].[ZnodeShipping] ( [ShippingTypeId], [CurrencyId], [ShippingCode], 
		[ShippingName], [HandlingCharge], [HandlingChargeBasedOn], [DestinationCountryCode], [StateCode],
		[CountyFIPS], [TrackingUrl], [Description], [IsActive], [DisplayOrder], [ZipCode], [CreatedBy],
		[CreatedDate], [ModifiedBy], [ModifiedDate])
		VALUES (4, 106, N'FreeShipping',
		N'Free Shipping', CAST(1.000000 AS Numeric(28, 6)), N'Amount', N'US', NULL
		, NULL, NULL, N'Free Shipping', 1, 1, NULL, 2, CAST(N'2016-06-07 09:43:20.777' AS DateTime), 2,
		CAST(N'2017-03-31 21:02:09.690' AS DateTime))
END


GO

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','PublishContentPage',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'PublishContentPage')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Pages')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishContentPage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Pages') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishContentPage'))

	   insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','UpdateAndPublishManageMessage',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'UpdateAndPublishManageMessage')
 
 GO 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Blocks')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Blocks') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Content Blocks'),
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Content Blocks') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage'))


GO

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','PublishManageMessage',0,2,Getdate(),2,Getdate() where not exists
 (select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'PublishManageMessage')
 
insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Blocks')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishManageMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Blocks') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishManageMessage'))

	   GO


	   Update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimCategoryId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimCategoryId</name>      <headertext>ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimCategoryId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>CategoryImage,CategoryName</imageparamfield>      <manageactionurl>/Pim/Category/Edit</manageactionurl>      <manageparamfield>PimCategoryId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CategoryName</name>      <headertext>Category Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>/PIM/Category/Edit</islinkactionurl>      <islinkparamfield>PimCategoryId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CategoryTitle</name>      <headertext>Category Title</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>AttributeFamily</name>      <headertext>Attribute Family</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>PublishStatus</name>      <headertext>Publish Status</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete|Publish</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete|Publish</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/PIM/Category/Edit|/PIM/Category/Delete|PIM/Category/PublishCategory</manageactionurl>      <manageparamfield>PimCategoryId|PimCategoryId|PimCategoryId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'   where ItemName = 'View_PimCategoryDetail' 

	   GO 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Products','UpdateProducts',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'UpdateProducts')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts'))


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Products','UpdateProducts',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'UpdateProducts')
 
 GO 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'UpdateProducts'))

GO 


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Order','AddCustomShippingAmount',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Order' and ActionName = 'AddCustomShippingAmount')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Orders' AND ControllerName = 'Order')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'AddCustomShippingAmount')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Orders' AND ControllerName = 'Order') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'AddCustomShippingAmount'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Orders' AND ControllerName = 'Order'),
(select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'AddCustomShippingAmount')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Orders' AND ControllerName = 'Order') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Order' and ActionName= 'AddCustomShippingAmount'))

------------
GO 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'SEO','Publish',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'Publish')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

GO 


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

GO 



insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

GO 


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

GO 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'Publish'))

GO 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'SEO','UpdateAndPublishSeo',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'UpdateAndPublishSeo')

GO 


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'SEO Setup' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

GO 


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Default SEO Settings' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

GO 



insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

GO 


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

GO 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = '301 URL Redirects' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'UpdateAndPublishSeo'))

GO 


update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ShippingId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ShippingName</name>      <headertext>Shipping Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ShippingCode</name>      <headertext>Shipping Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>HandlingCharge</name>      <headertext>Handling Charge</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>HandlingChargeBasedOn</name>      <headertext>Handling Charge Based On</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Promotion/UnAssociateShippings</manageactionurl>      <manageparamfield>ShippingId,PromotionId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'ZnodePromotionAssociatedShippingDetails'
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>ShippingId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>ShippingName</name>      <headertext>Shipping Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>ShippingCode</name>      <headertext>Shipping Code</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>HandlingCharge</name>      <headertext>Handling Charge</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>HandlingChargeBasedOn</name>      <headertext>Handling Charge Based On</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'ZnodePromotionShippingDetails'

GO 
	UPDATE ZnodeApplicationSetting 
	SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>CMSSliderId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>CMSSliderId</islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>Name</name>      <headertext>Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>500</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>y</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ModifiedDate</name>      <headertext>Modified Date</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>DateTime</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>PublishStatus</name>      <headertext>Publish Status</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>IsPublished</name>      <headertext>Status</headertext>      <width>0</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Manage|Edit|Delete|Publish</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>CMSSliderId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Manage|Edit|Delete|Publish</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/WebSite/GetBannerList|/WebSite/EditSlider|/WebSite/DeleteSlider|/WebSite/PublishSlider</manageactionurl>      <manageparamfield>CMSSliderId|CMSSliderId|CMSSliderId|CMSSliderId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
	WHERE ItemName = 'ZnodeCMSSlider'

	GO 
    UPDATE ZnodeApplicationSetting 
	SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>ItemId</name><headertext>ID</headertext><width>30</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PageTitle</name><headertext>Page Title</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/SEO/SEODetails</islinkactionurl><islinkparamfield>ItemId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ItemName</name><headertext>Page Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>PortalName</name><headertext>Store Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>PageTemplateName</name><headertext>Template Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>SEOUrl</name><headertext>SEO Url</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>SEOTitle</name><headertext>SEO Title</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>SEOKeywords</name><headertext>SEO Keywords</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>SEODescription</name><headertext>SEO Description</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>IsActive</name><headertext>Status</headertext><width>60</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>SEOPublishStatus</name><headertext>Publish Status</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit|Publish</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Publish</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/SEO/SEODetails|/SEO/Publish</manageactionurl><manageparamfield>ItemId|ItemId,seoTypeId,localeId,portalId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
	WHERE  ItemName = 'SEOContentPages'

	GO 
	-------------AssociateBrandPortal
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>DomainId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>DomainId</name>      <headertext>Domain ID</headertext>      <width>10</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>DomainName</name>      <headertext>Domain Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ApiKey</name>      <headertext>API Key</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ApplicationType</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Status</name>      <headertext>Is Active</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|clear-cache|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PortalId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|clear-cache|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/UrlManagement/EditUrl|/UrlManagement/ClearDemoWebsiteCache|/UrlManagement/EnableDisableDomain|/UrlManagement/DeleteUrl</manageactionurl>      <manageparamfield>portalId,domainId,ApiKey,Status|domainName,domainId|PortalId,DomainId,IsActive|domainId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' , ModifiedDate = GETDATE()
where  ItemName = 'ZnodeAdminAPIDomain'


insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeAdminAPIDomain',	'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>DomainId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>DomainId</name>      <headertext>Domain ID</headertext>      <width>10</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>DomainName</name>      <headertext>Domain Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ApiKey</name>      <headertext>API Key</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ApplicationType</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Status</name>      <headertext>Is Active</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|clear-cache|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PortalId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|clear-cache|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/UrlManagement/EditUrl|/UrlManagement/ClearDemoWebsiteCache|/UrlManagement/EnableDisableDomain|/UrlManagement/DeleteUrl</manageactionurl>      <manageparamfield>portalId,domainId,ApiKey,Status|domainName,domainId|PortalId,DomainId,IsActive|domainId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',	'Url',	'Url',	'Url',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeAdminAPIDomain')

Update ZnodeapplicationSetting  SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>CMSPortalMessageId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>CMSMessageId</name>      <headertext>CMSMessageId</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Location</name>      <headertext>Message Key</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>Message</name>      <headertext>Message</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>StoreName</name>      <headertext>Store Name</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>MessageTag</name>      <headertext>Message Tag</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>PublishStatus</name>      <headertext>Publish Status</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>IsPublished</name>      <headertext>Status</headertext>      <width>0</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Delete|Publish</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete|Publish</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Content/UpdateManageMessage|/Content/DeleteManageMessage|/Content/PublishManageMessage</manageactionurl>      <manageparamfield>cmsMessageKeyId,portalId,localeId|cmsPortalMessageId|cmsMessageId,localeId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'  where ItemName  = 'View_GetManageMessageList'

------------------------------------------------------------------------------------------------------------------------
-- ADD ApplicationSetting for ProductInventoryWarehouseAssociation

IF NOT EXISTS (select TOP 1 1 from ZnodeApplicationSetting WHERE ItemName ='ProductInventoryWarehouseAssociation')
 BEGIN

INSERT INTO ZnodeApplicationSetting (GroupName,	ItemName,	
	Setting, ViewOptions,
	FrontPageName,	FrontObjectName,
	IsCompressed,
	OrderByFields,	ItemNameWithoutCurrency,
	CreatedByName,	ModifiedByName,	CreatedBy,
	CreatedDate,	ModifiedBy,	ModifiedDate)
VALUES('View',
	'ProductInventoryWarehouseAssociation', 
	'<?xml version="1.0" encoding="utf-16"?>  <columns>      <column>          <id>1</id>          <name>WarehouseDisplayName</name>          <headertext>Warehouse</headertext>          <width>3000</width>          <datatype>String</datatype>          <columntype>String</columntype>          <allowsorting>false</allowsorting>          <allowpaging>false</allowpaging>          <format></format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>0</maxlength>          <isallowsearch>n</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>n</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>n</iscontrol>          <controltype>Label</controltype>          <controlparamfield></controlparamfield>          <displaytext></displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl></manageactionurl>          <manageparamfield></manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>y</isadvancesearch>          <Class></Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>      <column>          <id>2</id>          <name>Quantity</name>          <headertext>Quantity On Hand</headertext>          <width>50</width>          <datatype>String</datatype>          <columntype>Decimal</columntype>          <allowsorting>false</allowsorting>          <allowpaging>false</allowpaging>          <format></format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>20</maxlength>          <isallowsearch>n</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>n</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>y</iscontrol>          <controltype>Text</controltype>          <controlparamfield></controlparamfield>          <displaytext></displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl></manageactionurl>          <manageparamfield></manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>y</isadvancesearch>          <Class></Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>      <column>          <id>3</id>          <name>ReOrderLevel</name>          <headertext>Re-Order Level</headertext>          <width>50</width>          <datatype>String</datatype>          <columntype>Decimal</columntype>          <allowsorting>false</allowsorting>          <allowpaging>false</allowpaging>          <format></format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>20</maxlength>          <isallowsearch>n</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>n</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>y</iscontrol>          <controltype>Text</controltype>          <controlparamfield></controlparamfield>          <displaytext></displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl></manageactionurl>          <manageparamfield></manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>y</isadvancesearch>          <Class></Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>      <column>          <id>4</id>          <name>Manage</name>          <headertext>Action</headertext>          <width>30</width>          <datatype>String</datatype>          <columntype>String</columntype>          <allowsorting>false</allowsorting>          <allowpaging>false</allowpaging>          <format>Edit|Delete</format>          <isvisible>y</isvisible>          <mustshow>y</mustshow>          <musthide>n</musthide>          <maxlength>0</maxlength>          <isallowsearch>n</isallowsearch>          <isconditional>n</isconditional>          <isallowlink>n</isallowlink>          <islinkactionurl></islinkactionurl>          <islinkparamfield></islinkparamfield>          <ischeckbox>n</ischeckbox>          <checkboxparamfield></checkboxparamfield>          <iscontrol>n</iscontrol>          <controltype></controltype>          <controlparamfield></controlparamfield>          <displaytext>Edit|Delete</displaytext>          <editactionurl></editactionurl>          <editparamfield></editparamfield>          <deleteactionurl></deleteactionurl>          <deleteparamfield></deleteparamfield>          <viewactionurl></viewactionurl>          <viewparamfield></viewparamfield>          <imageactionurl></imageactionurl>          <imageparamfield></imageparamfield>          <manageactionurl>/Inventory/UpdateGridSKUPIMInventory|/Inventory/DeleteSKUInventory</manageactionurl>          <manageparamfield>InventoryId,Quantity,ReOrderLevel|InventoryId</manageparamfield>          <copyactionurl></copyactionurl>          <copyparamfield></copyparamfield>          <xaxis>n</xaxis>          <yaxis>n</yaxis>          <isadvancesearch>y</isadvancesearch>          <Class>grid-action</Class>          <SearchControlType>--Select--</SearchControlType>          <SearchControlParameters></SearchControlParameters>          <DbParamField></DbParamField>          <useMode>DataBase</useMode>          <IsGraph>n</IsGraph>          <allowdetailview>n</allowdetailview>      </column>  </columns>','ProductInventoryWarehouseAssociation',
	'ProductInventoryWarehouseAssociation',
	'ProductInventoryWarehouseAssociation',
	0,
	NULL, NULL, NULL, NULL, 2, GETDATE(), 2, GETDATE()
);

END
GO
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>DomainId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>DomainId</name>      <headertext>Domain ID</headertext>      <width>10</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>DomainName</name>      <headertext>Domain Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ApiKey</name>      <headertext>API Key</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ApplicationType</name>      <headertext>Application Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>DropDown</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>Status</name>      <headertext>Is Active</headertext>      <width>40</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>y</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>PortalId</islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/UrlManagement/EditUrl|/UrlManagement/EnableDisableDomain|/UrlManagement/DeleteUrl</manageactionurl>      <manageparamfield>portalId,domainId,ApiKey,Status|PortalId,DomainId,IsActive|domainId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' , ModifiedDate = GETDATE()
where  ItemName = 'ZnodeAdminAPIDomain'
GO 
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?> <columns>  <column>   <id>1</id>   <name>PimAttributeId</name>   <headertext>Checkbox</headertext>   <width>20</width>   <datatype>String</datatype>   <columntype>Int32</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>y</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>2</id>   <name>AttributeCode</name>   <headertext>Attribute Code</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>y</isallowlink>   <islinkactionurl>/PIM/ProductAttribute/Edit</islinkactionurl>   <islinkparamfield>PimAttributeId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>3</id>   <name>AttributeName</name>   <headertext>Attribute Label</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl>/Attributes/Attributes/Edit</islinkactionurl>   <islinkparamfield>MediaAttributeId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>y</allowdetailview>  </column>  <column>   <id>4</id>   <name>AttributeTypeName</name>   <headertext>Attribute Type</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl>/PIM/ProductAttribute/Edit</islinkactionurl>   <islinkparamfield>PimAttributeId</islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>y</allowdetailview>  </column>  <column>   <id>5</id>   <name>IsRequired</name>   <headertext>Is Required</headertext>   <width>10</width>   <datatype>Boolean</datatype>   <columntype>Boolean</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>6</id>   <name>IsLocalizable</name>   <headertext>Is Localizable</headertext>   <width>10</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>7</id>   <name>IsSystemDefined</name>   <headertext>Is System Defined</headertext>   <width>10</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>8</id>   <name>IsPersonalizable</name>   <headertext>Is Personalizable</headertext>   <width>10</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>y</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>9</id>   <name>IsComparable</name>   <headertext>Is Comparable</headertext>   <width>10</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>10</id>   <name>IsUseInSearch</name>   <headertext>Is Use In Search</headertext>   <width>10</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>11</id>   <name>IsFacets</name>   <headertext>Is Use In Facets</headertext>   <width>10</width>   <datatype>Boolean</datatype>   <columntype>String</columntype>   <allowsorting>true</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>n</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>n</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>12</id>   <name>UsedInProductsCount</name>   <headertext>Used In Products</headertext>   <width>40</width>   <datatype>String</datatype>   <columntype>Int32</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format></format>   <isvisible>y</isvisible>   <mustshow>n</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext></displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl></manageactionurl>   <manageparamfield></manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column>  <column>   <id>13</id>   <name>Manage</name>   <headertext>Action</headertext>   <width>30</width>   <datatype>String</datatype>   <columntype>String</columntype>   <allowsorting>false</allowsorting>   <allowpaging>true</allowpaging>   <format>Edit|Delete</format>   <isvisible>y</isvisible>   <mustshow>y</mustshow>   <musthide>n</musthide>   <maxlength>0</maxlength>   <isallowsearch>n</isallowsearch>   <isconditional>n</isconditional>   <isallowlink>n</isallowlink>   <islinkactionurl></islinkactionurl>   <islinkparamfield></islinkparamfield>   <ischeckbox>n</ischeckbox>   <checkboxparamfield></checkboxparamfield>   <iscontrol>n</iscontrol>   <controltype></controltype>   <controlparamfield></controlparamfield>   <displaytext>Edit|Delete</displaytext>   <editactionurl></editactionurl>   <editparamfield></editparamfield>   <deleteactionurl></deleteactionurl>   <deleteparamfield></deleteparamfield>   <viewactionurl></viewactionurl>   <viewparamfield></viewparamfield>   <imageactionurl></imageactionurl>   <imageparamfield></imageparamfield>   <manageactionurl>/PIM/ProductAttribute/Edit|/PIM/ProductAttribute/Delete</manageactionurl>   <manageparamfield>PimAttributeId|pimAttributeId</manageparamfield>   <copyactionurl></copyactionurl>   <copyparamfield></copyparamfield>   <xaxis>n</xaxis>   <yaxis>n</yaxis>   <isadvancesearch>y</isadvancesearch>   <Class></Class>   <SearchControlType>--Select--</SearchControlType>   <SearchControlParameters></SearchControlParameters>   <DbParamField></DbParamField>   <useMode>DataBase</useMode>   <IsGraph>n</IsGraph>   <allowdetailview>n</allowdetailview>  </column> </columns>' , ModifiedDate = GETDATE()
where  ItemName = 'ZnodePimAttribute'
GO

-- ADD ApplicationSetting for ItemName ='ZnodeIntegrationLogMessage'
IF NOT EXISTS (select TOP 1 1 from ZnodeApplicationSetting WHERE ItemName ='ZnodeIntegrationLogMessage')
 BEGIN
INSERT INTO ZnodeApplicationSetting (GroupName,	ItemName,	
	Setting, ViewOptions,
	FrontPageName,	FrontObjectName,
	IsCompressed,
	OrderByFields,	ItemNameWithoutCurrency,
	CreatedByName,	ModifiedByName,	CreatedBy,
	CreatedDate,	ModifiedBy,	ModifiedDate) VALUES ('Table', 'ZnodeIntegrationLogMessage','<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>LogMessageId</name>
		<headertext>Log Message Id</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>LogMessage</name>
		<headertext>Log Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>Component</name>
		<headertext>Component</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>TraceLevel</name>
		<headertext>Trace  Level</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>CreatedDate</name>
		<headertext>Created Date</headertext>
		<width>40</width>
		<datatype>DateTime</datatype>
		<columntype>DateTime</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format>View</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype>Button</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/LogMessage/GetIntegrationLogMessage</manageactionurl>
		<manageparamfield>logMessageId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>StackTraceMessage</name>
		<headertext>StackTrace Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>', 'ZnodeIntegrationLogMessageList','ZnodeIntegrationLogMessageList','ZnodeIntegrationLogMessageList',0,NULL,NULL,NULL,NULL,2,GETDATE(),2,GETDATE())

END

GO
-- Store Code 

UPDATE znodeApplicationsetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PortalId</name>
    <headertext>Checkbox</headertext>
    <width>40</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>StoreName</name>
    <headertext>Store Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>y</isallowlink>
    <islinkactionurl>/Store/EditStore</islinkactionurl>
    <islinkparamfield>StoreCode</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>PortalId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>CompanyName</name>
    <headertext>Brand</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>PortalId</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>PortalId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Brand</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>PublishStatus</name>
    <headertext>Publish Status</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>CatalogName</name>
    <headertext>Catalog Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>ThemeName</name>
    <headertext>Theme Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>CSSName</name>
    <headertext>CSS Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>8</id>
    <name>StoreCode</name>
    <headertext>Store Code</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>9</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>50</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>Manage|Preview|DisplaySettings|Copy|Publish|View|Delete</format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>y</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>y</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>StoreCode</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>Id</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Manage|Preview|Display Settings|Copy|Publish|Publish History|Delete</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/Store/UpdateStore||/Store/StoreSetting|/Store/CopyStore|/Store/PublishStoreSetting|/Store/GetPortalPublishStatus|/Store/DeleteStoreByStoreCode</manageactionurl>
    <manageparamfield>StoreCode|DomainUrl|PortalId|PortalId|PortalId|PortalId,UrlEncodedStoreName|StoreCode</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
where itemName ='ZnodeStore'

GO


-- modified setting for Znodestore

update ZnodeApplicationsetting
set Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PortalId</name>
    <headertext>Checkbox</headertext>
    <width>40</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>StoreName</name>
    <headertext>Store Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>y</isallowlink>
    <islinkactionurl>/Store/UpdateStore</islinkactionurl>
    <islinkparamfield>StoreCode</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>PortalId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>CompanyName</name>
    <headertext>Brand</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>PortalId</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>PortalId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Brand</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>PublishStatus</name>
    <headertext>Publish Status</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>CatalogName</name>
    <headertext>Catalog Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>ThemeName</name>
    <headertext>Theme Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>CSSName</name>
    <headertext>CSS Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>8</id>
    <name>StoreCode</name>
    <headertext>Store Code</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>500</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>y</iscontrol>
    <controltype>Text</controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>9</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>50</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>Manage|Preview|DisplaySettings|Copy|Publish|View|Delete</format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>y</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>y</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>StoreCode</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>Id</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Manage|Preview|Display Settings|Copy|Publish|Publish History|Delete</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/Store/UpdateStore||/Store/StoreSetting|/Store/CopyStore|/Store/PublishStoreSetting|/Store/GetPortalPublishStatus|/Store/DeleteStoreByStoreCode</manageactionurl>
    <manageparamfield>StoreCode|DomainUrl|PortalId|PortalId|PortalId|PortalId,UrlEncodedStoreName|StoreCode</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'

WHERE ItemName = 'Znodestore'

GO


UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>PimCategoryId</name>
		<headertext>Checkbox</headertext>
		<width>30</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>PimCategoryId</name>
		<headertext>ID</headertext>
		<width>40</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>Image</name>
		<headertext>Image</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format>Edit</format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>PimCategoryId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>CategoryImage,CategoryName</imageparamfield>
		<manageactionurl>/Pim/Category/Edit</manageactionurl>
		<manageparamfield>PimCategoryId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>CategoryName</name>
		<headertext>Category Name</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>y</isallowlink>
		<islinkactionurl>/PIM/Category/Edit</islinkactionurl>
		<islinkparamfield>PimCategoryId</islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>CategoryTitle</name>
		<headertext>Category Title</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>AttributeFamily</name>
		<headertext>Attribute Family</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>PublishStatus</name>
		<headertext>Publish Status</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit|Delete|Publish</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit|Delete|Publish</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/PIM/Category/Edit|/PIM/Category/Delete|/PIM/Category/PublishCategory</manageactionurl>
		<manageparamfield>PimCategoryId|PimCategoryId|PimCategoryId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
where ItemName = 'View_PimCategoryDetail'

GO

UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>SchedulerName</name>
    <headertext>Scheduler Name</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>SchedulerType</name>
    <headertext>Scheduler Type</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>TouchPointName</name>
    <headertext>Touch Point Name</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>ProcessStartedDate</name>
    <headertext>Process Started Date</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>ProcessCompletedDate</name>
    <headertext>Process Completed Date</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>ImportStatus</name>
    <headertext>Status</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>SuccessRecordCount</name>
    <headertext>Success Record Count</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>8</id>
    <name>FailedRecordcount</name>
    <headertext>Failed Record Count</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>9</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>View</format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Log Details</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/Import/ShowLogDetails</manageactionurl>
    <manageparamfield>ImportProcessLogId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
where ItemName = 'TouchPointSchedulerHistory'

GO

-- Application Setting for Associated and unassociated categoryproduct

IF NOT EXISTS (select TOP 1 1 from ZnodeApplicationSetting WHERE ItemName ='UnAssociatedCategoriesToProduct')
 BEGIN
 INSERT INTO ZnodeApplicationSetting (GroupName,	ItemName,	
	Setting, ViewOptions,
	FrontPageName,	FrontObjectName,
	IsCompressed,
	OrderByFields,	ItemNameWithoutCurrency,
	CreatedByName,	ModifiedByName,	CreatedBy,
	CreatedDate,	ModifiedBy,	ModifiedDate)
VALUES('Table',
	'UnAssociatedCategoriesToProduct', 
	'<?xml version="1.0" encoding="utf-16"?>
<columns>
    <column>
        <id>1</id>
        <name>PimCategoryId</name>
        <headertext>Checkbox</headertext>
        <width>30</width>
        <datatype>Int32</datatype>
        <columntype>Int32</columntype>
        <allowsorting>true</allowsorting>
        <allowpaging>true</allowpaging>
        <format></format>
        <isvisible>y</isvisible>
        <mustshow>y</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>n</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>y</ischeckbox>
        <checkboxparamfield></checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext></displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield></imageparamfield>
        <manageactionurl></manageactionurl>
        <manageparamfield></manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class></Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column>
    <column>
        <id>2</id>
        <name>PimCategoryId</name>
        <headertext>ID</headertext>
        <width>40</width>
        <datatype>Int32</datatype>
        <columntype>Int32</columntype>
        <allowsorting>true</allowsorting>
        <allowpaging>true</allowpaging>
        <format></format>
        <isvisible>y</isvisible>
        <mustshow>n</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>n</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>n</ischeckbox>
        <checkboxparamfield></checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext></displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield></imageparamfield>
        <manageactionurl></manageactionurl>
        <manageparamfield></manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class></Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column>
    <column>
        <id>3</id>
        <name>Image</name>
        <headertext>Image</headertext>
        <width>0</width>
        <datatype>String</datatype>
        <columntype>String</columntype>
        <allowsorting>false</allowsorting>
        <allowpaging>false</allowpaging>
        <format>Edit</format>
        <isvisible>y</isvisible>
        <mustshow>n</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>n</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>n</ischeckbox>
        <checkboxparamfield>PimCategoryId</checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext>Edit</displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield>CategoryImage,CategoryName</imageparamfield>
        <manageactionurl>/Pim/Category/Edit</manageactionurl>
        <manageparamfield>PimCategoryId</manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class>imageicon</Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column>
    <column>
        <id>4</id>
        <name>CategoryName</name>
        <headertext>Category</headertext>
        <width>40</width>
        <datatype>String</datatype>
        <columntype>String</columntype>
        <allowsorting>true</allowsorting>
        <allowpaging>true</allowpaging>
        <format></format>
        <isvisible>y</isvisible>
        <mustshow>y</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>y</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>n</ischeckbox>
        <checkboxparamfield></checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext></displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield></imageparamfield>
        <manageactionurl></manageactionurl>
        <manageparamfield></manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class></Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column> 
</columns>','UnAssociatedCategoriesToProduct',
	'UnAssociatedCategoriesToProduct',
	'UnAssociatedCategoriesToProduct',
	0,
	NULL, NULL, NULL, NULL, 2, GETDATE(), 2, GETDATE()
);

END

GO

IF NOT EXISTS (select TOP 1 1 from ZnodeApplicationSetting WHERE ItemName ='AssociatedCategoriesToProduct')
 BEGIN
 INSERT INTO ZnodeApplicationSetting (GroupName,	ItemName,	
	Setting, ViewOptions,
	FrontPageName,	FrontObjectName,
	IsCompressed,
	OrderByFields,	ItemNameWithoutCurrency,
	CreatedByName,	ModifiedByName,	CreatedBy,
	CreatedDate,	ModifiedBy,	ModifiedDate)
VALUES('View',
	'AssociatedCategoriesToProduct', 
	'<?xml version="1.0" encoding="utf-16"?>
<columns>
    <column>
        <id>1</id>
        <name>PimCategoryProductId</name>
        <headertext>Checkbox</headertext>
        <width>30</width>
        <datatype>Int32</datatype>
        <columntype>Int32</columntype>
        <allowsorting>true</allowsorting>
        <allowpaging>true</allowpaging>
        <format></format>
        <isvisible>y</isvisible>
        <mustshow>y</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>n</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>y</ischeckbox>
        <checkboxparamfield></checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext></displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield></imageparamfield>
        <manageactionurl></manageactionurl>
        <manageparamfield></manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class></Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column>
    <column>
        <id>2</id>
        <name>PimCategoryId</name>
        <headertext>ID</headertext>
        <width>40</width>
        <datatype>Int32</datatype>
        <columntype>Int32</columntype>
        <allowsorting>true</allowsorting>
        <allowpaging>true</allowpaging>
        <format></format>
        <isvisible>y</isvisible>
        <mustshow>n</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>n</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>n</ischeckbox>
        <checkboxparamfield></checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext></displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield></imageparamfield>
        <manageactionurl></manageactionurl>
        <manageparamfield></manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class></Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column>
    <column>
        <id>3</id>
        <name>Image</name>
        <headertext>Image</headertext>
        <width>0</width>
        <datatype>String</datatype>
        <columntype>String</columntype>
        <allowsorting>false</allowsorting>
        <allowpaging>false</allowpaging>
        <format>Edit</format>
        <isvisible>y</isvisible>
        <mustshow>n</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>n</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>n</ischeckbox>
        <checkboxparamfield>PimCategoryId</checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext>Edit</displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield>CategoryImage,CategoryName</imageparamfield>
        <manageactionurl>/Pim/Category/Edit</manageactionurl>
        <manageparamfield>PimCategoryId</manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class>imageicon</Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column>
    <column>
        <id>4</id>
        <name>CategoryName</name>
        <headertext>Category</headertext>
        <width>40</width>
        <datatype>String</datatype>
        <columntype>String</columntype>
        <allowsorting>true</allowsorting>
        <allowpaging>true</allowpaging>
        <format></format>
        <isvisible>y</isvisible>
        <mustshow>y</mustshow>
        <musthide>n</musthide>
        <maxlength>0</maxlength>
        <isallowsearch>y</isallowsearch>
        <isconditional>n</isconditional>
        <isallowlink>n</isallowlink>
        <islinkactionurl></islinkactionurl>
        <islinkparamfield></islinkparamfield>
        <ischeckbox>n</ischeckbox>
        <checkboxparamfield></checkboxparamfield>
        <iscontrol>n</iscontrol>
        <controltype></controltype>
        <controlparamfield></controlparamfield>
        <displaytext></displaytext>
        <editactionurl></editactionurl>
        <editparamfield></editparamfield>
        <deleteactionurl></deleteactionurl>
        <deleteparamfield></deleteparamfield>
        <viewactionurl></viewactionurl>
        <viewparamfield></viewparamfield>
        <imageactionurl></imageactionurl>
        <imageparamfield></imageparamfield>
        <manageactionurl></manageactionurl>
        <manageparamfield></manageparamfield>
        <copyactionurl></copyactionurl>
        <copyparamfield></copyparamfield>
        <xaxis>n</xaxis>
        <yaxis>n</yaxis>
        <isadvancesearch>y</isadvancesearch>
        <Class></Class>
        <SearchControlType>--Select--</SearchControlType>
        <SearchControlParameters></SearchControlParameters>
        <DbParamField></DbParamField>
        <useMode>DataBase</useMode>
        <IsGraph>n</IsGraph>
        <allowdetailview>n</allowdetailview>
    </column>
</columns>','AssociatedCategoriesToProduct',
	'AssociatedCategoriesToProduct',
	'AssociatedCategoriesToProduct',
	0,
	NULL, NULL, NULL, NULL, 2, GETDATE(), 2, GETDATE()
);

END

GO

-- Application setting for ZnodePortalAddress <<Dt: 05\04\2018>>

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodePortalAddress')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PortalAddressId</name><headertext>Checkbox</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>Image</name><headertext>Image</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>Mediapath,StoreName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>PortalName</name><headertext>Store Name</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>StoreLocationCode</name><headertext>Store Location Code</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>StoreName</name><headertext>Store Location Name</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/StoreLocator/Update</islinkactionurl><islinkparamfield>StoreLocationCode</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>CityName</name><headertext>City</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>StateName</name><headertext>State</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>CountryName</name><headertext>Country</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>PostalCode</name><headertext>Postal Code</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>PhoneNumber</name><headertext>Phone Number</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>IsActive</name><headertext>Is Active</headertext><width>30</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/StoreLocator/Update|/StoreLocator/DeleteByCode</manageactionurl><manageparamfield>StoreLocationCode|StoreLocationCode</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE itemName = 'ZnodePortalAddress'
END

GO
-- Logging model related changes 
insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeEventLogMessage',	'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetEventLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',	'ZnodeEventLogMessage',	'ZnodeEventLogMessage',	'ZnodeEventLogMessage',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeEventLogMessage')

Update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetEventLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'ZnodeEventLogMessage'

GO 

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeDatabaseLogMessage',	'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetDatabaseLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',	'ZnodeDatabaseLogMessage',	'ZnodeDatabaseLogMessage',	'ZnodeDatabaseLogMessage',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeDatabaseLogMessage')

Update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetDatabaseLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'ZnodeDatabaseLogMessage'

GO 

insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeLogMessage',	'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',	'ZnodeLogMessage',	'ZnodeLogMessage',	'ZnodeLogMessage',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeLogMessage')

Update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'ZnodeLogMessage'

GO
insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeIntegrationLogMessage',	'<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetIntegrationLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>',	'ZnodeIntegrationLogMessage',	'ZnodeIntegrationLogMessage',	'ZnodeIntegrationLogMessage',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeIntegrationLogMessage')

Update ZnodeApplicationSetting SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetIntegrationLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' where ItemName = 'ZnodeIntegrationLogMessage'

---- END -- Logging model related changes  

GO
-- start taskid -ZPD-212 dt: 11\04\2018

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeLogMessage')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>LogMessageId</name>
		<headertext>Log Message Id</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>LogMessage</name>
		<headertext>Log Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>Component</name>
		<headertext>Component</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>TraceLevel</name>
		<headertext>Trace  Level</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>CreatedDate</name>
		<headertext>Created Date</headertext>
		<width>40</width>
		<datatype>DateTime</datatype>
		<columntype>DateTime</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>StackTraceMessage</name>
		<headertext>Stack Trace Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>DomainName</name>
		<headertext>Domain Name</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>ApplicationType</name>
		<headertext>Application Type</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format>View</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype>Button</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/LogMessage/GetLogMessage</manageactionurl>
		<manageparamfield>logMessageId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
WHERE itemName = 'ZnodeLogMessage'
END

GO 
IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeIntegrationLogMessage')
BEGIN
UPDATE ZnodeApplicationSetting
SET setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>LogMessageId</name>
		<headertext>Log Message Id</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>LogMessage</name>
		<headertext>Log Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>Component</name>
		<headertext>Component</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>TraceLevel</name>
		<headertext>Trace  Level</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>CreatedDate</name>
		<headertext>Created Date</headertext>
		<width>40</width>
		<datatype>DateTime</datatype>
		<columntype>DateTime</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>StackTraceMessage</name>
		<headertext>Stack Trace Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>DomainName</name>
		<headertext>Domain Name</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>ApplicationType</name>
		<headertext>Application Type</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format>View</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype>Button</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/LogMessage/GetIntegrationLogMessage</manageactionurl>
		<manageparamfield>logMessageId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
where itemName = 'ZnodeIntegrationLogMessage'
END

GO

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeEventLogMessage')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>LogMessageId</name>
		<headertext>Log Message Id</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>LogMessage</name>
		<headertext>Log Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>Component</name>
		<headertext>Component</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>TraceLevel</name>
		<headertext>Trace  Level</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>100</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>CreatedDate</name>
		<headertext>Created Date</headertext>
		<width>40</width>
		<datatype>DateTime</datatype>
		<columntype>DateTime</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>StackTraceMessage</name>
		<headertext>Stack Trace Message</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>DomainName</name>
		<headertext>Domain Name</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>ApplicationType</name>
		<headertext>Application Type</headertext>
		<width>80</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format>View</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype>Button</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/LogMessage/GetEventLogMessage</manageactionurl>
		<manageparamfield>logMessageId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
where itemName = 'ZnodeEventLogMessage'
END

GO

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeDatabaseLogMessage')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>LogMessageId</name>      <headertext>Log Message Id</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>LogMessage</name>      <headertext>Log Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Component</name>      <headertext>Component</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>TraceLevel</name>      <headertext>Trace  Level</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>100</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>CreatedDate</name>      <headertext>Created Date</headertext>      <width>40</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>StackTraceMessage</name>      <headertext>Stack Trace Message</headertext>      <width>80</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>60</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>View</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>Button</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/LogMessage/GetDatabaseLogMessage</manageactionurl>      <manageparamfield>logMessageId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where itemName = 'ZnodeDatabaseLogMessage'
END

GO

-- start taskid -ZPD-1149


IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeStore')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PortalId</name><headertext>Checkbox</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>StoreCode</name><headertext>Store Code</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>StoreName</name><headertext>Store Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/Store/UpdateStore</islinkactionurl><islinkparamfield>StoreCode</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>PortalId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>CompanyName</name><headertext>Brand</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>PortalId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>PortalId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Brand</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>PublishStatus</name><headertext>Publish Status</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>CatalogName</name><headertext>Catalog Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>ThemeName</name><headertext>Theme Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>CSSName</name><headertext>CSS Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>500</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>Manage</name><headertext>Action</headertext><width>50</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Manage|Preview|DisplaySettings|Copy|Publish|View|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>y</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>StoreCode</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>Id</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Manage|Preview|Display Settings|Copy|Publish|Publish History|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Store/UpdateStore||/Store/StoreSetting|/Store/CopyStore|/Store/PublishStoreSetting|/Store/GetPortalPublishStatus|/Store/DeleteStoreByStoreCode</manageactionurl><manageparamfield>StoreCode|DomainUrl|PortalId|PortalId|PortalId|PortalId,UrlEncodedStoreName|StoreCode</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE itemName = 'ZnodeStore'
END

GO

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'View_PimCategoryDetail')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimCategoryId</name><headertext>Checkbox</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PimCategoryId</name><headertext>ID</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>Image</name><headertext>Image</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Edit</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>PimCategoryId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>CategoryImage,CategoryName</imageparamfield><manageactionurl>/Pim/Category/Edit</manageactionurl><manageparamfield>PimCategoryId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>CategoryCode</name><headertext>Category Code</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>CategoryName</name><headertext>Category Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/PIM/Category/Edit</islinkactionurl><islinkparamfield>PimCategoryId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>CategoryTitle</name><headertext>Category Title</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>AttributeFamily</name><headertext>Attribute Family</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>PublishStatus</name><headertext>Publish Status</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>Manage</name><headertext>Action</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete|Publish</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete|Publish</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Category/Edit|/PIM/Category/Delete|/PIM/Category/PublishCategory</manageactionurl><manageparamfield>PimCategoryId|PimCategoryId|PimCategoryId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
WHERE itemName = 'View_PimCategoryDetail'
END

GO

--taskid ZPD-1311

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeUserUnAssociatedProfiles')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>ProfileID</name>
    <headertext>Checkbox</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>ProfileId</islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>ProfileId</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>ProfileName</name>
    <headertext>Profile Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>ShowOnPartnerSignup</name>
    <headertext>Show On Partner Signup</headertext>
    <width>40</width>
    <datatype>Boolean</datatype>
    <columntype>Boolean</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>Weighting</name>
    <headertext>Weighting</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>Boolean</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>y</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>TaxExempt</name>
    <headertext>Tax Exempt</headertext>
    <width>40</width>
    <datatype>Boolean</datatype>
    <columntype>Boolean</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>DefaultExternalAccountNo</name>
    <headertext>Default External Account No</headertext>
    <width>40</width>
    <datatype>Boolean</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>y</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
WHERE itemName = 'ZnodeUserUnAssociatedProfiles'
END

GO

-- taskid - ZPD-1315

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeGetCatalogAssociatedProduct')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>ProductId</name>
		<headertext>Checkbox</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield>ProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>Image</name>
		<headertext>Product Image</headertext>
		<width>20</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>ProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>ImagePath,ProductName</imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>ProductName</name>
		<headertext>Product Name</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>SKU</name>
		<headertext>SKU</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>DisplayOrder</name>
		<headertext>Display Order</headertext>
		<width>30</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>3</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/Catalog/UpdateCatalogCategoryProduct</manageactionurl>
		<manageparamfield>ProductId,PimCatalogId,PimCategoryHierarchyId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
where ItemName = 'ZnodeGetCatalogAssociatedProduct'
END

GO

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeGetProfileCatalogAssociatedProduct')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>ProductId</name>
		<headertext>Checkbox</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield>ProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>Image</name>
		<headertext>Product Image</headertext>
		<width>20</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>ProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>ImagePath,ProductName</imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>ProductId</name>
		<headertext>Product ID</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>ProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>ProductName</name>
		<headertext>Product Name</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>SKU</name>
		<headertext>SKU</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>DisplayOrder</name>
		<headertext>Display Order</headertext>
		<width>40</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit</format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>y</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/Catalog/UpdateProfileCatalogCategoryProduct</manageactionurl>
		<manageparamfield>ProductId,PimCatalogId,PimCategoryId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
where ItemName = 'ZnodeGetProfileCatalogAssociatedProduct'
END

GO

-- taskid ZPD-403

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'AssociatedCategoriesToProduct')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PimCategoryProductId</name>
    <headertext>Checkbox</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>PimCategoryId</name>
    <headertext>ID</headertext>
    <width>40</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>Image</name>
    <headertext>Image</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>Edit</format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>PimCategoryId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Edit</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>ImagePath,CategoryName</imageparamfield>
    <manageactionurl>/Pim/Category/Edit</manageactionurl>
    <manageparamfield>PimCategoryId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>imageicon</Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>CategoryName</name>
    <headertext>Category</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>Delete</format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Delete</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/PIM/Category/DeleteAssociatedCategories</manageactionurl>
    <manageparamfield>PimCategoryProductId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
WHERE ItemName = 'AssociatedCategoriesToProduct'
END
GO

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'UnAssociatedCategoriesToProduct')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PimCategoryId</name>
    <headertext>Checkbox</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>PimCategoryId</name>
    <headertext>ID</headertext>
    <width>40</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>Image</name>
    <headertext>Image</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>Edit</format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>PimCategoryId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Edit</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>ImagePath,CategoryName</imageparamfield>
    <manageactionurl>/Pim/Category/Edit</manageactionurl>
    <manageparamfield>PimCategoryId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>imageicon</Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>CategoryName</name>
    <headertext>Category</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
WHERE ItemName = 'UnAssociatedCategoriesToProduct'

END

GO

--taskid -ZPD-1314  DT-18\04\2018

IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'ZnodeGetProfileCatalogAssociatedProduct')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>ProductId</name>
    <headertext>Checkbox</headertext>
    <width>20</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>Image</name>
    <headertext>Product Image</headertext>
    <width>20</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>ImagePath,ProductName</imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>imageicon</Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>ProductId</name>
    <headertext>Product ID</headertext>
    <width>20</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>ProductName</name>
    <headertext>Product Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>SKU</name>
    <headertext>SKU</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>SKU</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>DisplayOrder</name>
    <headertext>Display Order</headertext>
    <width>40</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>Edit</format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>y</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Edit</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/Catalog/UpdateProfileCatalogCategoryProduct</manageactionurl>
    <manageparamfield>ProductId,PimCatalogId,PimCategoryId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
WHERE itemName = 'ZnodeGetProfileCatalogAssociatedProduct'
END

GO


--dt\ 25_04_2018


IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'AssociatedProductsList')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PublishProductId</name>
    <headertext>Checkbox</headertext>
    <width>20</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>PublishProductId</name>
    <headertext>Publish Product ID</headertext>
    <width>20</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>Name</name>
    <headertext>Product Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>SKU</name>
    <headertext>SKU</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>CatalogName</name>
    <headertext>Catalog Name</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>40</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>Delete</format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Delete</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/Promotion/UnAssociateProducts</manageactionurl>
    <manageparamfield>PublishProductId,PromotionId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
WHERE ItemName = 'AssociatedProductsList'
END

GO

insert into ZnodeImportHead (Name,	IsUsedInImport,	IsUsedInDynamicReport,	IsActive,	CreatedBy	,CreatedDate,	ModifiedBy	,ModifiedDate )
select 'ShippingAddress',	1,	1,	1,	2,	GETDATE(),2,	GETDATE()
where not exists(select * from ZnodeImportHead where Name = 'ShippingAddress' )

INSERT INTO ZnodeImportAccountDefaultTemplate(TemplateName,ImportHeadId	,CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate)
SELECT 'ImportShippingAddress',	(select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ),	2,	GETDATE(),	2,	GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodeImportAccountDefaultTemplate WHERE TemplateName = 'ImportShippingAddress' AND ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ))

update ZnodeImportAccountDefaultTemplate set ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress')
where TemplateName = 'ImportShippingAddress'

update ZnodeImportTemplate set TemplateName = 'ShippingAddressTemplate' , ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) where TemplateName = 'CustomerShippingAddressTemplate'


--------ZnodeImportTemplate
insert into ZnodeImportTemplate (ImportHeadId,	TemplateName	,TemplateVersion,	PimAttributeFamilyId,	IsActive,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
select (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ),	'ShippingAddressTemplate',	NULL,	null,	1	,2,	GETDATE(),2,	GETDATE()
where not exists(select * from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )

---------ZnodeImportTemplateMapping
insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'FirstName',	'FirstName',	0,	1,	1	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'FirstName' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'LastName',	'LastName',	0,	1,	1	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'LastName' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'DisplayName',	'DisplayName',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'DisplayName' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'Address1',	'Address1',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'Address1' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'Address2',	'Address2',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'Address2' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'CountryName',	'CountryName',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'CountryName' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'StateName',	'StateName',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'StateName' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'CityName',	'CityName',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'CityName' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'PostalCode',	'PostalCode',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'PostalCode' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'PhoneNumber',	'PhoneNumber',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'PhoneNumber' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'IsDefaultBilling',	'IsDefaultBilling',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'IsDefaultBilling' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'IsDefaultShipping',	'IsDefaultShipping',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'IsDefaultShipping' )

insert into ZnodeImportTemplateMapping (ImportTemplateId,	SourceColumnName,	TargetColumnName,	DisplayOrder,	IsActive,	IsAllowNull,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) ),	
'CompanyName',	'CompanyName',	0,	0,	0	,2,	GETDATE(),2,	GETDATE()
where not exists( select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'ShippingAddressTemplate' and ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'ShippingAddress' ) )
and SourceColumnName = 'CompanyName' )

----------------------------- ZnodeImportAttributeValidation

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'FirstName',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),1
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'FirstName' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'LastName',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),2
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'LastName' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'DisplayName',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'DisplayName' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'Address1',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'Address1' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'Address2',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'Address2' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'CountryName',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'CountryName' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'StateName',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'StateName' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'CityName',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'CityName' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'PostalCode',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'PostalCode' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'PhoneNumber',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 1,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'PhoneNumber' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultBilling',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Yes/No',	'AllowNegative',	NULL,	'false','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultBilling' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'AllowNegative' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultBilling',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Yes/No',	'AllowDecimals',	NULL,	'false','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultBilling' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'AllowDecimals' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultBilling',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Yes/No',	'MinNumber',	NULL,	'0','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultBilling' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'MinNumber' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultBilling',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Number',	'MaxNumber',	NULL,	'999999','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultBilling' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'MaxNumber' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultShipping',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Number',	'AllowNegative',	NULL,	'false','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultShipping' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'AllowNegative' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultShipping',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Yes/No',	'AllowDecimals',	NULL,	'false','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultShipping' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'AllowDecimals' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultShipping',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Number',	'MinNumber',	NULL,	'0','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultShipping' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'MinNumber' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Number',	'IsDefaultBilling',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Number',	'MaxNumber',	NULL,	'999999','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Number' and AttributeCode = 'IsDefaultBilling' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'MaxNumber' )

insert into ZnodeImportAttributeValidation ( AttributeTypeName,	AttributeCode,	ImportHeadId,	IsRequired,	ControlName,	ValidationName,	SubValidationName,	ValidationValue,	RegExp,	DisplayOrder,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate	,SequenceNumber )
select 'Text',	'CompanyName',	(select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress'), 0,	'Text',	'RegularExpression',	NULL,	'','',		NULL,	2,	getdate(),	2	,getdate(),3
where not exists(select * from ZnodeImportAttributeValidation where AttributeTypeName = 'Text' and AttributeCode = 'CompanyName' and 
ImportHeadId = (select ImportHeadId from ZnodeImportHead  where Name = 'ShippingAddress') and ValidationName = 'RegularExpression' )


---------- update columns insert for import
insert into [ZnodeImportUpdatableColumns] ( ImportHeadId, ColumnName )
select c.ImportHeadId,a.SourceColumnName from ZnodeImportTemplateMapping a
inner join ZnodeImportTemplate b on a.ImportTemplateId = b.ImportTemplateId 
inner join ZnodeImportHead c on b.ImportHeadId = c.ImportHeadId
 where Name in ('ShippingAddress','CustomerAddress')
 AND NOT EXISTS(SELECT * FROM [ZnodeImportUpdatableColumns] D WHERE c.ImportHeadId = D.ImportHeadId AND a.SourceColumnName = d.ColumnName )

 GO

 
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Category','PublishCategory',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Category' and ActionName = 'PublishCategory')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'PublishCategory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'PublishCategory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'PublishCategory')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'PublishCategory'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Category','UpdateAndPublishCategory',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Category' and ActionName = 'UpdateAndPublishCategory')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'UpdateAndPublishCategory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'UpdateAndPublishCategory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'UpdateAndPublishCategory')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'UpdateAndPublishCategory'))

GO 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Catalog','PublishCatalogCategoryProducts',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'PublishCatalogCategoryProducts')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Catalogs')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'PublishCatalogCategoryProducts')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Catalogs') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'PublishCatalogCategoryProducts'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Catalogs'),
(select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'PublishCatalogCategoryProducts')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Catalogs') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'PublishCatalogCategoryProducts'))

GO 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'UrlManagement','List',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'UrlManagement' and ActionName = 'List')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Global Settings')	
      ,(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'List')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'List'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings'),
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'List')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'List'))

GO 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'UrlManagement','CreateUrl',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'UrlManagement' and ActionName = 'CreateUrl')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Global Settings')	
      ,(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'CreateUrl')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'CreateUrl'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings'),
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'CreateUrl')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'CreateUrl'))

GO 



Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'UrlManagement','EnableDisableDomain',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'UrlManagement' and ActionName = 'EnableDisableDomain')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Global Settings')	
      ,(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EnableDisableDomain')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EnableDisableDomain'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings'),
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EnableDisableDomain')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EnableDisableDomain'))

GO 


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'UrlManagement','ClearDemoWebsiteCache',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'UrlManagement' and ActionName = 'ClearDemoWebsiteCache')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Global Settings')	
      ,(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'ClearDemoWebsiteCache')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'ClearDemoWebsiteCache'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings'),
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'ClearDemoWebsiteCache')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'ClearDemoWebsiteCache'))



Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'UrlManagement','DeleteUrl',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'UrlManagement' and ActionName = 'DeleteUrl')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Global Settings')	
      ,(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'DeleteUrl')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'DeleteUrl'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings'),
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'DeleteUrl')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'DeleteUrl'))

GO 


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'UrlManagement','EditUrl',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'UrlManagement' and ActionName = 'EditUrl')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Global Settings')	
      ,(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EditUrl')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EditUrl'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings'),
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EditUrl')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Global Settings') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'UrlManagement' and ActionName= 'EditUrl'))

GO 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Customer','GetStates',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Customer' and ActionName = 'GetStates')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Users')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetStates')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Users') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetStates'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Users'),
(select ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetStates')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Users') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Customer' and ActionName= 'GetStates'))

GO 


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Products','DownloadProductTemplate',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'DownloadProductTemplate')
 

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'DownloadProductTemplate')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'DownloadProductTemplate'))

GO 
--<< START : For Area PIM : ControllerName =WebSite   ,ActionName = PublishSlider  and  UpdateAndPublishSlider 

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'WebSite','PublishSlider',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'PublishSlider')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'PublishSlider')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'PublishSlider'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'PublishSlider')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'PublishSlider'))


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL  ,'WebSite','UpdateAndPublishSlider',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'UpdateAndPublishSlider')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'UpdateAndPublishSlider')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'UpdateAndPublishSlider'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'UpdateAndPublishSlider')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Banner Sliders' AND ControllerName = 'WebSite') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'UpdateAndPublishSlider'))



-- End >> 

--<< START : For Area PIM and Action 
-- Action Method added a script
-- New Grid added
-- Script contains Action methods for Menu ('PIM', 'Products')

GO

insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Products','ProductInventory',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'ProductInventory')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'PIM')	,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'PIM')	,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory'))


insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Inventory','UpdateSKUInventoryProduct',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'UpdateSKUInventoryProduct')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'PIM')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'PIM')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct'))


insert into ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Inventory','UpdateGridSKUPIMInventory',0,2,Getdate(),2,Getdate() where not exists (select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'UpdateGridSKUPIMInventory')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'PIM')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'PIM')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'PIM') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory'))

------------------ -------------------------------------------------------------------------------------------------------------------------

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'ProductInventory'))


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateSKUInventoryProduct'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory')	,1,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeMenuActionsPermission where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'UpdateGridSKUPIMInventory'))

-- END >> 

-- << Start
-- Store code add into znodeportal tables ( respective changes in menu with their actions ) 


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','IsStoreCodeExists',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'IsStoreCodeExists')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'IsStoreCodeExists')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'IsStoreCodeExists'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'IsStoreCodeExists')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'IsStoreCodeExists'))


-------------------------------------------------------------------------------------------
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','DeleteStoreByStoreCode',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'DeleteStoreByStoreCode')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeleteStoreByStoreCode')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeleteStoreByStoreCode'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeleteStoreByStoreCode')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'DeleteStoreByStoreCode'))

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','UpdateStore',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'UpdateStore')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'UpdateStore')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'UpdateStore'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'UpdateStore')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'UpdateStore'))

----------------------------------------------------------------------------------------------------


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Store','CopyStoreByStoreCode',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Store' and ActionName = 'CopyStoreByStoreCode')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'CopyStoreByStoreCode')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'CopyStoreByStoreCode'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'CopyStoreByStoreCode')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Store' and ActionName= 'CopyStoreByStoreCode'))

-- END >>



--<< Start Action menu data for LogMessage


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','ConfigureLogs',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'ConfigureLogs')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ConfigureLogs')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ConfigureLogs'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ConfigureLogs')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'ConfigureLogs'))


GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','EventLogList',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'EventLogList')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'EventLogList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'EventLogList'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'EventLogList')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'EventLogList'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','IntegrationLogList',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'IntegrationLogList')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'IntegrationLogList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'IntegrationLogList'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'IntegrationLogList')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'IntegrationLogList'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','DatabaseLogList',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'DatabaseLogList')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'DatabaseLogList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'DatabaseLogList'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'DatabaseLogList')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'DatabaseLogList'))

GO


-- END >>

-- << Start  Action and actionPermission for SearchWidget

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'WebSite','ManageSearchWidgetConfiguration',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'ManageSearchWidgetConfiguration')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageSearchWidgetConfiguration')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageSearchWidgetConfiguration'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageSearchWidgetConfiguration')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'ManageSearchWidgetConfiguration'))


GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'WebSite','SaveSearchWidgetConfiguration',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'SaveSearchWidgetConfiguration')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveSearchWidgetConfiguration')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveSearchWidgetConfiguration'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveSearchWidgetConfiguration')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Pages' AND ControllerName = 'Content') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveSearchWidgetConfiguration'))


GO
-- ActionMenu for store 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveSearchWidgetConfiguration')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'SaveSearchWidgetConfiguration'))

	   GO


-- END >>

-- << Start  Action and actionPermission for StoreLocator DT: 05\04\2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'StoreLocator','DeleteByCode',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'StoreLocator' and ActionName = 'DeleteByCode')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator')	
      ,(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'DeleteByCode')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'DeleteByCode'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator'),
(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'DeleteByCode')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'DeleteByCode'))
GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'StoreLocator','Update',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'StoreLocator' and ActionName = 'Update')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator')	
      ,(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'Update')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'Update'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator'),
(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'Update')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'Update'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'StoreLocator','IsStoreLocatorCodeExists',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'StoreLocator' and ActionName = 'IsStoreLocatorCodeExists')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator')	
      ,(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'IsStoreLocatorCodeExists')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'IsStoreLocatorCodeExists'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator'),
(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'IsStoreLocatorCodeExists')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Store Locations' AND ControllerName = 'StoreLocator') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'StoreLocator' and ActionName= 'IsStoreLocatorCodeExists'))

GO

-->> END

--<< START ActionMenu data changes for ActionName = 'PurgeLogs' and ControllerName = 'LogMessage'  Dt:06\04\2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','PurgeLogs',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'PurgeLogs')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'PurgeLogs')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'PurgeLogs'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'PurgeLogs')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'PurgeLogs'))
GO


-- >> END

--<< START ActionMenu data changes for ActionName = 'GetIntegrationLogMessage' and ControllerName = 'LogMessage'  Dt:09\04\2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','GetIntegrationLogMessage',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'GetIntegrationLogMessage')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetIntegrationLogMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetIntegrationLogMessage'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetIntegrationLogMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetIntegrationLogMessage'))
GO


-- >> END

--<< START ActionMenu data changes for ActionName = 'GetEventLogMessage' and ControllerName = 'LogMessage'  Dt:09\04\2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','GetEventLogMessage',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'GetEventLogMessage')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetEventLogMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetEventLogMessage'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetEventLogMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetEventLogMessage'))
GO


-- >> END


--<< START ActionMenu data changes for ActionName = 'GetDatabaseLogMessage' and ControllerName = 'LogMessage'  Dt:09\04\2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'LogMessage','GetDatabaseLogMessage',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'LogMessage' and ActionName = 'GetDatabaseLogMessage')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	
      ,(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetDatabaseLogMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
          (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage')	 and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetDatabaseLogMessage'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetDatabaseLogMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'LogMessage' and ActionName= 'GetDatabaseLogMessage'))
GO


-- >> END

-- START changes related to task ZPD-403

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Inventory','ProductInventory',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'ProductInventory')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ProductInventory'))

GO
-----------------------------

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Inventory','AddUpdateSKUInventoryProduct',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'AddUpdateSKUInventoryProduct')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'AddUpdateSKUInventoryProduct'))

GO

-----------------------------------------------------------

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Category','GetAssociatedCategoriesToProduct',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Category' and ActionName = 'GetAssociatedCategoriesToProduct')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetAssociatedCategoriesToProduct'))

GO

-----------------------------------------------------------------

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Products','SEODetails',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'SEODetails')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'SEODetails'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Products','AddProductPriceBySku',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'AddProductPriceBySku')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'AddProductPriceBySku'))

-- END >>

GO

--taskid -ZPD-1266

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'AddonGroup','DeleteAddonGroupProducts',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'AddonGroup' and ActionName = 'DeleteAddonGroupProducts')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Add-On Groups' AND ControllerName = 'AddonGroup')	
      ,(select ActionId from ZnodeActions where ControllerName = 'AddonGroup' and ActionName= 'DeleteAddonGroupProducts')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Add-On Groups' AND ControllerName = 'AddonGroup') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'AddonGroup' and ActionName= 'DeleteAddonGroupProducts'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Add-On Groups' AND ControllerName = 'AddonGroup'),
(select ActionId from ZnodeActions where ControllerName = 'AddonGroup' and ActionName= 'DeleteAddonGroupProducts')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Add-On Groups' AND ControllerName = 'AddonGroup') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'AddonGroup' and ActionName= 'DeleteAddonGroupProducts'))

GO

-- taskid  ZPD-1326

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Price','DownloadTemplate',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Price' and ActionName = 'DownloadTemplate')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Pricing Engine' AND ControllerName = 'Price')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Price' and ActionName= 'DownloadTemplate')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Pricing Engine' AND ControllerName = 'Price') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Price' and ActionName= 'DownloadTemplate'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Pricing Engine' AND ControllerName = 'Price'),
(select ActionId from ZnodeActions where ControllerName = 'Price' and ActionName= 'DownloadTemplate')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Pricing Engine' AND ControllerName = 'Price') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Price' and ActionName= 'DownloadTemplate'))

GO

-- taskid - ZPD-403

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Category','AssociatCategoriesToProduct',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Category' and ActionName = 'AssociatCategoriesToProduct')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'AssociatCategoriesToProduct'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Inventory','InventoryBySKUAndWarehouseId',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'InventoryBySKUAndWarehouseId')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'InventoryBySKUAndWarehouseId'))

GO

--Taskid- ZPD-403

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'SEO','ProductSEODetails',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'ProductSEODetails')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'ProductSEODetails'))


GO

--taskid -403

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Category','DeleteAssociatedCategories',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Category' and ActionName = 'DeleteAssociatedCategories')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'DeleteAssociatedCategories'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Products','GetProductPriceBySku',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'GetProductPriceBySku')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetProductPriceBySku')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetProductPriceBySku'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetProductPriceBySku')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetProductPriceBySku'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Products','DeleteTierPrice',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'DeleteTierPrice')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'DeleteTierPrice')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'DeleteTierPrice'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'DeleteTierPrice')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'DeleteTierPrice'))

GO

--taskid -ZPD-476

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','PublishContentPage',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'PublishContentPage')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishContentPage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishContentPage'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishContentPage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishContentPage'))

GO




Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','UpdateAndPublishContentPage',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'UpdateAndPublishContentPage')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishContentPage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishContentPage'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishContentPage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishContentPage'))

GO

--taskid - 719  dt\24_04_2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','PublishManageMessage',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'PublishManageMessage')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishManageMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishManageMessage'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content'),
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishManageMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'PublishManageMessage'))


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Content','UpdateAndPublishManageMessage',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'UpdateAndPublishManageMessage')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content'),
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Content Blocks' AND ControllerName = 'Content') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'UpdateAndPublishManageMessage'))


GO

-- taskid ZPD-1577- dt\25_04_2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Promotion ','UnAssociateBrands',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Promotion' and ActionName = 'UnAssociateBrands')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateBrands')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateBrands'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion'),
(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateBrands')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateBrands'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Promotion ','GetAssociatedShippings',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Promotion' and ActionName = 'GetAssociatedShippings')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'GetAssociatedShippings')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'GetAssociatedShippings'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion'),
(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'GetAssociatedShippings')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'GetAssociatedShippings'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'Promotion ','UnAssociateShippings',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Promotion' and ActionName = 'UnAssociateShippings')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateShippings')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateShippings'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion'),
(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateShippings')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Promotions and Coupons' AND ControllerName = 'Promotion') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Promotion' and ActionName= 'UnAssociateShippings'))

GO



-- page template is added  10\04\2018

IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSTemplate WHERE Name = 'Simple Search')
INSERT INTO ZnodeCMSTemplate (Name,FileName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Simple Search','SimpleSearch',2,getdate(),2,getdate()

GO
-- page template related data  10\04\2018

INSERT INTO ZnodeCMSContentPages (PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublished)
SELECT 1,(select CMSTemplateId FROM ZnodeCMSTemplate WHERE Name = 'Simple Search'),'Simple Search Page',null,null,1,2,getdate(),2,getdate(),1
WHERE NOT EXISTS (SELECT * FROM  ZnodeCMSContentPages WHERE CMSTemplateId = (select CMSTemplateId FROM ZnodeCMSTemplate WHERE Name = 'Simple Search') and PageName = 'Simple Search Page')

INSERT INTO ZnodeCMSContentPagesLocale (CMSContentPagesId,LocaleId,PageTitle,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page'),1,'Simple Search Page',2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT * FROM ZnodeCMSContentPagesLocale WHERE CMSContentPagesId = (select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page')  and PageTitle = 'Simple Search Page')

INSERT INTO ZnodeCMSContentPagesProfile (ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,(select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page'),2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT * from ZnodeCMSContentPagesProfile where  CMSContentPagesId = (select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page'))

GO

-- Default data for SearchWidget

IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSWidgets WHERE Code = 'SearchWidget')
BEGIN
INSERT INTO ZnodeCMSWidgets VALUES ('SearchWidget','Search Widget',1,'Text_Editor.png',2,getdate(),2,getdate())
END

GO 

IF NOT exists (Select TOP 1 1 from [ZnodeGlobalSetting] where [FeatureName]   = 'GlobalAPIAuthorization')
INSERT [dbo].[ZnodeGlobalSetting] ([FeatureName], [FeatureValues], [FeatureSubValues], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) 
 VALUES ('GlobalAPIAuthorization', N'False', NULL, 2, GETDATE(), 2, GETDATE())

 GO

 -- To Identify database environment  ( Production / Dev / test ) 
 IF NOT EXISTS (Select TOP 1 1 from [ZnodeGlobalSetting] where [FeatureName]   = 'CurrentEnvironment')
 INSERT INTO ZnodeGlobalSetting(FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
 VALUES(	'CurrentEnvironment','DEV',NULL,2,getdate(),2,getdate())
 GO

 -- To Identify Logging Feature
 IF NOT EXISTS (Select TOP 1 1 FROM [ZnodeGlobalSetting] WHERE [FeatureName]   = 'IsDataBaseLoggingEnabled')
 INSERT INTO ZnodeGlobalSetting (FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) VALUES ('IsDataBaseLoggingEnabled','True',NULL,2,GETDATE(),2,GETDATE())
 GO

 IF NOT EXISTS (Select TOP 1 1 FROM [ZnodeGlobalSetting] WHERE [FeatureName]   = 'IsErrorLoggingEnabled')
INSERT INTO ZnodeGlobalSetting(FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  values ('IsErrorLoggingEnabled','True',NULL,2,GETDATE(),2,GETDATE())
GO

 IF NOT EXISTS (Select TOP 1 1 FROM [ZnodeGlobalSetting] WHERE [FeatureName]   = 'IsEventLoggingEnabled')
INSERT INTO ZnodeGlobalSetting(FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  values ('IsEventLoggingEnabled','True',NULL,2,GETDATE(),2,GETDATE())
GO

 IF NOT EXISTS (Select TOP 1 1 FROM [ZnodeGlobalSetting] WHERE [FeatureName]   = 'IsIntegrationLoggingEnabled')
INSERT INTO ZnodeGlobalSetting (FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) values ('IsIntegrationLoggingEnabled','True',NULL,2,GETDATE(),2,GETDATE())

GO

--taskid = 1585  dt\25_04_2018

 IF  EXISTS (Select TOP 1 1 from [ZnodeGlobalSetting] where [FeatureName]   = 'CurrentEnvironment')
 BEGIN
update ZnodeGlobalSetting
set FeatureValues = 'DEV'
where FeatureName = 'CurrentEnvironment'
 
 END

 GO 

 UPDATE ZnodeMenu
SET   CSSClassName = 'z-manage-forms'
WHERE MenuName = 'Manage Forms' AND ControllerName = 'FormBuilder'

GO
-- Update ZnodeMenu for Application Logs
UPDATE ZnodeMenu 
SET ActionName = 'ConfigureLogs' 
WHERE MenuName = 'Application Logs'

GO

update ZnodeMenu
set CSSClassName = 'z-application-logs'
where Menuname ='Application Logs'  and ControllerName = 'LogMessage' and ActionName = 'ConfigureLogs'

GO 
If not exists (Select MessageCode from ZnodeMessage where MessageCode = '53')
insert into ZnodeMessage (MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
Values ('53', 'Other', 'Duplicate Entry Found',2,Getdate(),2,Getdate())


If not exists (Select MessageCode from ZnodeMessage where MessageCode = '54')
insert into ZnodeMessage (MessageCode,MessageType,MessageName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
Values ('54', 'Other', 'Not Configured',2,Getdate(),2,Getdate())

GO 


-- TASKid -ZPD1149

	DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,AttributeTypeId int,AttributeCode nvarchar(300))
        INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
			,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
			CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT Inserted.PimAttributeId,Inserted.AttributeTypeId,Inserted.AttributeCode INTO @InsertedPimAttributeIds  
		
		SELECT (SELECT AttributeTypeId FROM ZnodeAttributeType WHERE AttributeTypeName = 'Text')
		,'CategoryCode',1,0,1,1,0,0,1,1,null,1,0,null,2,GETDATE(),2,GETDATE()
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute ZPA WHERE ZPA.AttributeCode = 'CategoryCode')
		
		INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT 1 ,IPAS.PimAttributeId, 'Category Code', null, 2,GETDATE(),2,GETDATE()   
		FROM @InsertedPimAttributeIds IPAS 
		


		IF OBJECT_ID('#AttributeValidation', 'U') IS NOT NULL
		BEGIN 
			DROP TABLE #AttributeValidation
		END
		if object_id('tempdb..#AttributeValidation') is not null
		 drop table #AttributeValidation
		CREATE TABLE #AttributeValidation (InputValidationId INT,InputValidationRuleId INT,RegExp NVARCHAR (1000))
		INSERT INTO #AttributeValidation VALUES (5,8,null)
		INSERT INTO #AttributeValidation VALUES(6,null,'^[a-zA-Z0-9][a-zA-Z0-9]*$')
		INSERT INTO #AttributeValidation VALUES(10,null,100)
		INSERT INTO #AttributeValidation VALUES(21,null,'true')
	
		
		INSERT INTO ZnodePimAttributeValidation
		(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT DISTINCT IPA.PimAttributeId,ZAIV.InputValidationId,ZAIVR.InputValidationRuleId,ZAIVR.RegExp , 2,GETDATE(),2,GETDATE()   
		FROM @InsertedPimAttributeIds IPA
		INNER JOIN ZnodeAttributeInputValidation ZAIV ON IPA.AttributeTypeId = ZAIV.AttributeTypeId
		INNER JOIN #AttributeValidation ZAIVR ON (ZAIVR.InputValidationId = ZAIV.InputValidationId) 
		WHERE NOT EXISTS  (SELECT TOP 1 1 FROM ZnodePimAttributeValidation pv WHERE pv.PimAttributeId = IPA.PimAttributeId
							AND pv.InputValidationId = ZAIV.InputValidationId)
	    AND IPA.AttributeTypeId  IN (SELECT AttributeTypeId FROM ZnodeAttributeType AT  WHERE  AT.AttributeTypeName IN ('Text'))
		
		
		insert into ZnodePimFrontendProperties 
	    (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select IPA.PimAttributeId,0 IsComparable, 0 IsUseInSearch, 0 IsHtmlTags,0 IsFacets,2,getdate(),2,getdate()
		from @InsertedPimAttributeIds IPA

		
			INSERT INTO ZnodePimAttributeGroupMapper
		(PimAttributeGroupId,PimAttributeId,AttributeDisplayOrder,IsSystemDefined,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		select (select PimAttributeGroupId from ZnodePimAttributeGroup where GroupCode = 'GeneralInfo'),(select PimAttributeId from znodePimattribute where AttributeCode = 'CategoryCode'),null,1,2,getdate(),2,getdate()
		WHERE NOT EXISTS (select * from ZnodePimAttributeGroupMapper where PimAttributeGroupId =(select PimAttributeGroupId from ZnodePimAttributeGroup where GroupCode = 'GeneralInfo') AND
		PimAttributeId = (select PimAttributeId from znodePimattribute where AttributeCode = 'CategoryCode') )
		


		insert into ZnodePimFamilyGroupMapper(PimAttributeFamilyId	,PimAttributeGroupId	,PimAttributeId	,GroupDisplayOrder	,IsSystemDefined	,CreatedBy	,
		CreatedDate	,ModifiedBy	,ModifiedDate)
		select (select PimAttributeFamilyId from ZnodePimAttributeFamily where FamilyCode = 'DefaultCategory'),(select PimAttributeGroupId from ZnodePimAttributeGroup where GroupCode = 'GeneralInfo'),
		(select PimAttributeId from znodePimattribute where AttributeCode = 'CategoryCode'),5.000000,1,2,getdate(),2,getdate()
		WHERE NOT EXISTS (select * from ZnodePimFamilyGroupMapper where PimAttributeFamilyId = (select PimAttributeFamilyId from ZnodePimAttributeFamily where FamilyCode = 'DefaultCategory') AND 
		PimAttributeGroupId = (select PimAttributeGroupId from ZnodePimAttributeGroup where GroupCode = 'GeneralInfo') and PimAttributeId=  (select PimAttributeId from znodePimattribute where AttributeCode = 'CategoryCode') )

		

DECLARE @tbl_attributevalue TABLE (PimAttributeValueId INT,PimCategoryId INT)

INSERT INTO ZnodePimCategoryAttributeValue(PimCategoryId,PimAttributeFamilyId,PimAttributeId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
OUTPUT inserted.PimCategoryAttributeValueId,inserted.PimCategoryId into @tbl_attributevalue
SELECT  distinct pc.PimCategoryId,pc.PimAttributeFamilyId,(select PimAttributeId from ZnodePimattribute where attributecode = 'CategoryCode'),null, 2 ,getdate(),2,getdate()
FROM ZnodePimCategory pc
INNER JOIN ZnodePimCategoryAttributeValue b on (pc.PimCategoryId = b.PimCategoryId)
INNER JOIN ZnodePimCategoryAttributeValuelocale c on (b.PimCategoryAttributeValueId = c.PimCategoryAttributeValueId)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryAttributeValuelocale pam 
INNER JOIN ZnodePimCategoryAttributeValue pav on  (pav.PimCategoryAttributeValueId = pam.PimCategoryAttributeValueId)
INNER JOIN ZnodePimCategory pp on (pp.PimCategoryId = pav.PimCategoryId)
WHERE pav.PimCategoryId = pc.PimCategoryId and pav.PimAttributeId = (select PimAttributeId from ZnodePimattribute where attributecode = 'CategoryCode')
)
AND b.PimAttributeId = (select PimAttributeId from ZnodePimattribute where attributecode = 'CategoryName')
AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryAttributeValue x WHERE x.PimCategoryId = pc.PimCategoryId AND x.PimAttributeId = (select PimAttributeId from ZnodePimattribute where attributecode = 'CategoryCode'))



INSERT INTO ZnodePimCategoryAttributeValuelocale (LocaleId,PimCategoryAttributeValueId,CategoryValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT distinct 1,PimAttributeValueId,'C'+cast(PimCategoryId as nvarchar(400)), 2,getdate(),2,getdate()
FROM @tbl_attributevalue a 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryAttributeValuelocale b WHERE b.PimCategoryAttributeValueId = a.PimAttributeValueId)


IF OBJECT_ID('#AttributeValidation', 'U') IS NOT NULL
		BEGIN 
			DROP TABLE #AttributeValidation
		END

GO


-- bugid-1495

INSERT INTO ZnodePimFrontendProperties(PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (Select PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'UOM'),0,0,1,0,2,getdate(),2,getdate()
WHERE NOT EXISTS (select top 1 1 FROM ZnodePimFrontendProperties WHERE PimAttributeId in (select PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'UOM') )


INSERT INTO ZnodePimFrontendProperties(PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (Select PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive'),0,0,1,0,2,getdate(),2,getdate()
WHERE NOT EXISTS (select top 1 1 FROM ZnodePimFrontendProperties WHERE PimAttributeId in (select PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive') )

GO 



--taskid-1489


INSERT INTO ZnodeProductFeedSiteMapType(ProductFeedSiteMapTypeCode,ProductFeedSiteMapTypeName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'ALL','ALL',2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT TOP  1 1 FROM ZnodeProductFeedSiteMapType WHERE ProductFeedSiteMapTypeCode = 'All')


GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPimProductCategoryList')
BEGIN 
	DROP PROCEDURE Znode_GetPimProductCategoryList
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetPimProductCategoryList]      
(   @WhereClause   XML,      
    @Rows          INT           = 100,      
    @PageNo        INT           = 1,      
    @Order_BY      VARCHAR(1000) = '',      
    @RowsCount     INT OUT,      
    @LocaleId      INT           = 1,      
 @PimProductIdInput INT,      
    @IsAssociated  BIT           = 0      
 ,@AttributeCode VARCHAR(max) = ''      
 )      
AS       
/*      
     Summary :- This Procedure is used to get the product list for category products       
    The result is fetched order by DisplayOrder or status as per requirement in both asc and desc      
          
     Unit Testing       
  begin tran      
     EXEC Znode_GetPimCategoryProductList '',@RowsCount = 0, @PimCategoryId = 22,@Order_BY ='DisplayOrder asc'      
  rollback tran      
 */      
     BEGIN      
         BEGIN TRY      
             SET NOCOUNT ON;      
                 
		DECLARE @TransferPimCategoryId TransferId       
		DECLARE @TBL_AttributeDetails AS TABLE(PimCategoryAttributeValueId INT,PimCategoryId   INT,AttributeValue NVARCHAR(MAX),  
		AttributeCode  VARCHAR(600),PimAttributeId INT);      
                  
		DECLARE @OrderByDisplay INT= 0;      
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();      
                   
		DECLARE @TBL_ProductIdTable TABLE([PimProductId] INT,[CountId] INT,PimCategoryId  INT,RowId INT);      
      
		DECLARE   
		@PimAttributeId VARCHAR(MAX)      
		   
      
		DECLARE @PimProductIds TransferId      
      
             IF @Order_BY LIKE '%DisplayOrder%'      
                 BEGIN      
                     SET @OrderByDisplay = 1;      
                 END;      
             ELSE      
             IF @Order_BY LIKE '%Status%'      
                 BEGIN      
                     SET @OrderByDisplay = 2;      
                 END;      
    DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))      
    INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)      
    SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetCategoryMediaAttributeId()      
      
          
      
            INSERT INTO @TransferPimCategoryId      
   SELECT PimCategoryId FROM ZnodePimCategoryProduct ZCP WHERE ZCP.PimProductId = @PimProductIdInput       
   ORDER BY CASE WHEN @Order_By LIKE '% DESC%'      
            THEN       
   CASE WHEN @OrderByDisplay = 1       
     THEN ZCP.DisplayOrder       
     WHEN @OrderByDisplay = 2       
     THEN ZCP.Status      
     ELSE 1 END       
     ELSE 1 END DESC,      
            CASE WHEN @Order_By LIKE '% ASC%'       
    THEN      
     CASE WHEN @OrderByDisplay = 1       
     THEN ZCP.DisplayOrder       
      WHEN @OrderByDisplay = 2      
       THEN ZCP.Status      
        ELSE 1 END      
         ELSE 1 END 
		 
		       
          IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimCategoryId  )      
    BEGIN       
      INSERT INTO @TransferPimCategoryId      
      SELECT '0'      
      --SET @IsAssociated = 0       
             END       
        
      
  DECLARE @SQL NVARcHAR(max)= ''      
  DECLARE  @ProductListIdRTR TransferId      
  DECLARE @TAb Transferid       
  DECLARE @tBL_mainList TABLE (Id INT,CountId INT,RowId INT)      
       
  SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1  WHEN @IsAssociated = 1 THEN 0 END       
       
		
  INSERT INTO @ProductListIdRTR      
  EXEC Znode_GetCategoryList  @IsAssociated,@TransferPimCategoryId      
        
 
  DECLARE @CategoryIDS NVARCHAR(2000) = SUBSTRING((SELECT ','+CAST(ID AS VARCHAR(200)) FROM @ProductListIdRTR FOR XML PATH('')), 2, 4000)      
 
       
  BEGIN      
        
		SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'PimCategoryId','CategoryName')      
		SET @order_by = REPLACE(@order_by,'PimCategoryId','CategoryName')      
      
		INSERT INTO @TBL_MainList(id,CountId,RowId)      
		EXEC Znode_GetCategoryIdForPaging @WhereClause , @Rows , @PageNo , @Order_BY , @RowsCount , @LocaleId , @AttributeCode , @CategoryIDS , @IsAssociated;      
       
		END       
		INSERT INTO @TBL_ProductIdTable(PimCategoryId,RowId)       
		SELECT ID ,RowId FROM @TBL_MainList SP       
      
		INSERT INTO @PimProductIds ( Id )      
		SELECT Id FROM @TBL_MainList SP      
      
		UPDATE @TBL_ProductIdTable SET PimProductId = @PimProductIdInput;      
		SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50))   
		FROM [dbo].[Fn_GetGridPimCategoryAttributes]() FOR XML PATH('')), 2, 4000);      
                   
		INSERT INTO @TBL_AttributeDetails(PimCategoryAttributeValueId,PimCategoryId, AttributeValue,AttributeCode,PimAttributeId)      
		EXEC Znode_GetCategoryAttributeValueId @PimProductIds,@PimAttributeId,@LocaleId;      
                 
      
		;WITH Cte_ProductMedia      
		AS (SELECT TBA.PimCategoryId , TBA.PimAttributeId       
		, SUBSTRING( ( SELECT ','+URL+ZMSM.ThumbnailFolderName+'/'+ zm.PATH       
		FROM ZnodeMedia AS ZM      
		INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)      
		INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)      
		INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )      
		INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)      
		WHERE TBAI.PimCategoryId = TBA.PimCategoryId AND TBAI.PimAttributeId = TBA.PimAttributeId       
		FOR XML PATH('') ), 2 , 4000) AS AttributeValue , SUBSTRING( ( SELECT ','+AttributeValue      
		FROM  @TBL_AttributeDetails AS TBAI      
		WHERE TBAI.PimCategoryId = TBA.PimCategoryId AND TBAI.PimAttributeId = TBA.PimAttributeId       
		FOR XML PATH('') ), 2 , 4000) MediaIds        
		FROM @TBL_AttributeDetails AS TBA       
		INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))      
                                
		UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue      
		FROM @TBL_AttributeDetails TBAV       
		INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimCategoryId = TBAV.PimCategoryId  AND CTPM.PimAttributeId = TBAV.PimAttributeId       
		AND CTPM.PimAttributeId = TBAV.PimAttributeId;      
          
      
		SELECT ISNULL(ZPCP.PimCategoryProductId,0) AS PimCategoryProductId, zpp.[PimCategoryId] AS [Categoryid],zpp.[PimCategoryId],ISNULL(ZPCP.[PimProductId],0) AS PimProductId,[CategoryName],      
		CASE WHEN ZPCP.Status IS NULL THEN CAST(0 AS BIT) ELSE CAST(ZPCP.Status AS BIT) END AS [Status],      
		piv.[CategoryImage] [ImagePath],ZPCP.DisplayOrder       
          
		FROM @TBL_ProductIdTable AS zpp      
		LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)      
		INNER JOIN (SELECT PimCategoryId,AttributeValue,AttributeCode FROM @TBL_AttributeDetails) TB      
		PIVOT(MAX([AttributeValue])       
		FOR [AttributeCode] IN([CategoryName],[IsActive],[CategoryImage])) AS Piv ON(Piv.[PimCategoryId] = zpp.[PimCategoryId])      
		ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder       
		WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END DESC,      
		CASE WHEN @Order_By LIKE '% ASC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder      
		WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END,zpp.RowId;      
        
     
		SELECT @RowsCount=ISNULL((SELECT top 1 countId FROM @TBL_MainList),0)     
    
      
      
         END TRY      
         BEGIN CATCH      
		SELECT ERROR_MESSAGE()      
		DECLARE @Status BIT ;      
		SET @Status = 0;      
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),      
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimProductCategoryList @WhereClause = '+  
		CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '  
		+CAST(@LocaleId AS    
		VARCHAR(50))+',@PimProductIdInput='+CAST(@PimProductIdInput AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+  
		CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));      
                        
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                          
          
		EXEC Znode_InsertProcedureErrorLog      
			@ProcedureName = 'Znode_GetPimProductCategoryList',      
			@ErrorInProcedure = @Error_procedure,      
			@ErrorMessage = @ErrorMessage,      
			@ErrorLine = @ErrorLine,      
			@ErrorCall = @ErrorCall;      
         END CATCH;      
     END;
GO
if exists(select * from sys.procedures where name = 'Znode_InsertUpdateSaveCartLineItemQuantity' )
	drop proc Znode_InsertUpdateSaveCartLineItemQuantity
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@IsCallFromPDP BIT, @Status bit OUT)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem_aa @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
	1259
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @SaveCartLineItemIdForGroup int= 0;
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int IDENTITY(1, 1), OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute varchar(max), 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails )
			   SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ) AS BundleProductIds, Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ) AS ConfigurableProductIds, Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, 
			          Tbl.Col.value( 'PersonaliseValuesList[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

		DECLARE @OmsSavedCartId int, @OmsSavedCartLineItemId int,@OmsOrderId int;

	
		DECLARE @TBL_AllProductsTypeData TABLE
		( 
			 RowId int, SequenceId int IDENTITY(1, 1), ParentOmsSavedCartLineItemId int, SKU nvarchar(1000), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), CartAddOnDetails nvarchar(max), AutoAddon varchar(max), OmsOrderId int null ,IsFromAddon INT 
		);
		DECLARE @AddonProductSKU nvarchar(max)=	(SELECT TOP 1 AddOnValueIds	FROM @TBL_SavecartLineitems	), 
				@BundleProductSKU nvarchar(max)= (SELECT TOP 1 BundleProductIds	FROM @TBL_SavecartLineitems	);
		SET @OmsSavedCartId =( SELECT TOP 1 OmsSavedCartId FROM @TBL_SavecartLineitems);
		SET @OmsOrderId =( SELECT TOP 1 OmsOrderId FROM @TBL_SavecartLineitems );
		
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM ZnodeOmsSavedCartLineItem AS qa
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM @TBL_SavecartLineitems AS ssds
		--		WHERE ssds.sku = qa.SKU
		--	)
		--)
		--BEGIN
		--	DELETE FROM ZnodeOmsPersonalizeCartItem
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM ZnodeOmsSavedCartLineItem
		--		WHERE OmsSavedCartId = @OmsSavedCartId AND 
		--			  OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId
		--	);
		
		--	IF EXISTS (SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails is not null)
		--	BEGIN 
		--		DELETE ZnodeOmsSavedCartLineItemDetails
		--		WHERE EXISTS
		--		( 
		--			SELECT * FROM ZnodeOmsSavedCartLineItem SCLI
		--			WHERE ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND SCLI.OmsSavedCartId = @OmsSavedCartId AND SCLI.OmsOrderId = @OmsOrderId	
		--		)
		--    END

		--	DELETE FROM ZnodeOmsSavedCartLineItem 
		--	WHERE OmsSavedCartId = @OmsSavedCartId AND OmsOrderId = @OmsOrderId									

		--END;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.BundleProductIds, ',' ) AS q
			   WHERE a.BundleProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> '' ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.ConfigurableProductIds, ',' ) AS q
			   WHERE a.ConfigurableProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
			   ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT RowID, NULL, SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS SKU, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.GroupProductIds, ',' ) AS q
			   WHERE a.GroupProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))) <> ''
			   ;

		IF EXISTS
		(
			SELECT TOP 1 1	FROM @TBL_SavecartLineitems	WHERE GroupProductIds IS NOT NULL OR  ConfigurableProductIds IS NOT NULL
		)
		BEGIN
			SET @AddOnQuantity =(SELECT MAX(Quantity) FROM @TBL_AllProductsTypeData	);
		END;


		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT a.RowID, NULL, q.Item AS SKU,
											   CASE
											   WHEN @AddOnQuantity = 0 THEN a.Quantity
											   ELSE @AddOnQuantity
											   END, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.AddOnValueIds, ',' ) AS q   WHERE a.AddOnValueIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
	DECLARE @Tbl_SaveCartIds TABLE
		( 
			OmsSavedCartLineItemId int, SKU nvarchar(max), RowId int,ParentOmsSavedCartLineItemId INT 
		);

	DECLARE @IsCallForUpdate BIT = 0 
	DECLARE @saveCartLineItemId TABLE (OmsSavedCartLineItemId INT,SKU NVARCHAR(2000),OmsSavedCartId INT  )
	INSERT INTO @saveCartLineItemId 
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId  FROM ZnodeOmsSavedCartLineItem CLI 
																INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
																INNER JOIN ZnodeOmsSavedCartLineItem   YU ON (Yu.ParentOmsSavedCartLineItemId = CLI.OmsSavedCartLineItemId)
																INNER JOIN  @TBL_AllProductsTypeData tbad ON (tbad.SKU = YU.SKU )
	 WHERE CLI.ParentOmsSavedCartLineItemId IS NULL
	 INSERT INTO @saveCartLineItemId 
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId FROM ZnodeOmsSavedCartLineItem CLI 
												INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )														
	

	
	IF @IsCallFromPDP = 1
	BEGIN
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId)	THEN 0 ELSE 1 END
	END
		
	    UPDATE SI
		 SET  OmsSavedCartLineItemId = CASE WHEN HJRHRH.OmsSavedCartLineItemId IS NULL THEN  SL.OmsSavedCartLineItemId ELSE HJRHRH.OmsSavedCartLineItemId END 
		 FROM @TBL_SavecartLineitems SI
		 LEFT JOIN ZnodeOmsSavedCartLineItem SL ON (SI.SKU = SL.SKU AND SI.OmsSavedCartId = SL.OmsSavedCartId AND SI.Sequence = SL.Sequence )
		 LEFT JOIN 	@saveCartLineItemId HJRHRH ON (SI.SKU = HJRHRH.SKU AND SI.OmsSavedCartId = HJRHRH.OmsSavedCartId )
		

		MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING  (SELECT   ISNULL(SI.OmsSavedCartLineItemId,-1) AS OmsSavedCartLineItemId,SI.SKU,SI.Quantity,SI.OrderLineItemRelationshipTypeID,SI.CustomText,SI.CartAddOnDetails,SI.Sequence,SI.AutoAddon,SI.RowID,SI.OmsOrderId 
		FROM @TBL_SavecartLineitems SI 
		WHERE (EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY WHERE TY.OmsSavedCartLineItemId = SI.OmsSavedCartLineItemId ))
		 OR (@IsCallFromPDP = 1 AND NOT EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY ))) SOURCE 
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND SOURCE.OmsSavedCartLineItemId = TARGET.OmsSavedCartLineItemId AND @IsCallForUpdate = 0
		WHEN MATCHED   THEN
		UPDATE 
		SET   Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = CASE	 WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE Source.OrderLineItemRelationshipTypeID
																		 END, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.Sequence,OmsOrderId = @OmsOrderId,TARGET.AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
																		
		WHEN NOT MATCHED  
			  THEN INSERT(ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  VALUES( NULL, @OmsSavedCartId, Source.SKU, Source.Quantity,CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE OrderLineItemRelationshipTypeID
																		 END, 
					 Source.CustomText, Source.CartAddOnDetails, Source.Sequence, SOURCE.OmsOrderId, SOURCE.AutoAddon, @UserId, @GetDate, @UserId, @GetDate )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
		INTO @Tbl_SaveCartIds;

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_SavecartLineitems TSCLI ON TSCI.SKU = TSCLI.SKU AND TSCLI.RowID = TSCLI.RowID
			CROSS APPLY dbo.split ( ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )

		IF EXISTS (SELECT TOP 1  1  FROM @TBL_AllProductsTypeData )
		BEGIN 
        MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING ( SELECT b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
																		CASE
																		WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
																		ELSE OrderLineItemRelationshipTypeID
																		END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon, @UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate,a.RowId
			   FROM @TBL_AllProductsTypeData AS a
					INNER JOIN
					@Tbl_SaveCartIds AS b
					ON(a.RowId = b.RowId)
			   WHERE a.SKU IS NOT NULL AND 
					 a.SKU <> '') SOURCE
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND @IsCallForUpdate = 0 AND Target.ParentOmsSavedCartLineItemId = source.OmsSavedCartLineItemId
		WHEN MATCHED THEN
		UPDATE 
		SET ParentOmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId  , Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = 
																			 Source.OrderLineItemRelationshipTypeID, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.SequenceId,OmsOrderId = SOURCE.OmsOrderId,AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate


		WHEN NOT MATCHED
			  THEN INSERT ( ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, [Sequence], OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )

			  VALUES (SOURCE.OmsSavedCartLineItemId,SOURCE.OmsSavedCartId,SOURCE.SKU,SOURCE.Quantity,SOURCE.OrderLineItemRelationshipTypeID , SOURCE.CustomText,
			  SOURCE.CartAddOnDetails,SOURCE.SequenceId,SOURCE.OmsOrderId,SOURCE.AutoAddon,SOURCE.CreatedBy,SOURCE.CREATEDDATE,SOURCE.ModifiedBy, SOURCE.ModifiedDate
			  
			  )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
			   INTO @Tbl_SaveCartIds;
			   
		 END 

		--IF EXISTS ( SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails IS NOT NULL )
		--BEGIN
			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_AllProductsTypeData BAR ON ( TSCI.SKU = BAR.SKU AND BAR.RowID = TSCI.RowID )
			INNER JOIN @TBL_SavecartLineitems TSCLI ON (BAR.SKU = TSCLI.SKU AND BAR.RowID = TSCLI.RowID )
			CROSS APPLY dbo.split ( TSCLI.ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )
		--END
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM @TBL_SavecartLineitems
		--	WHERE GroupProductIds IS NOT NULL OR 
		--		  ConfigurableProductIds IS NOT NULL
		--)
		--BEGIN
		 --SELECT * FROM @Tbl_SaveCartIds
		 --SELECT * FROM @TBL_AllProductsTypeData
		 --SELECT * FROM @TBL_SavecartLineitems
			DECLARE @TBL_SaveCartConfigProduct TABLE (OmsSavedCartLineItemId INT, SKU VARCHAR(2000),RowId INT, PersonalisedAttribute NVARCHAr(max))
			    INSERT @TBL_SaveCartConfigProduct    
			    SELECT DISTINCT    ZOSCL.OmsSavedCartLineItemId   ,ZOSCL.SKU 
				,  ZOSCL.RowId , (SELECT TOP 1 PersonalisedAttribute FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID )  PersonalisedAttribute
				FROM @Tbl_SaveCartIds AS ZOSCL
				LEFT JOIN @TBL_AllProductsTypeData AS TBBR ON (ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId  )
				WHERE ( EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
				OR   EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData TRT WHERE SKU <> ''  AND IsFromAddon <> 1  AND TRT.RowID = ZOSCl.RowID   ) )
				AND ((ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId) OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData RTR WHERE SKU <> '' AND IsFromAddon <> 1   AND RTR.RowID = ZOSCl.RowID) 
				
				)
				
				--select * from @TBL_SavecartLineitems

			 --  select * from @Tbl_SaveCartIds
			  

			  --select * from @TBL_SaveCartConfigProduct
					
			UPDATE ZnodeOmsPersonalizeCartItem
			SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId,PersonalizeCode= SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1)  ,PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000),
			CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
			FROM @Tbl_SaveCartIds m  
			LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			--AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem ppp WHERE ppp.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId AND ppp.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))
			 AND ZnodeOmsPersonalizeCartItem.PersonalizeCode= SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AND ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
			 AND @IsCallForUpdate = 0
			;


		INSERT INTO ZnodeOmsPersonalizeCartItem( OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT DISTINCT 
			   b.OmsSavedCartLineItemId 
			  , SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS Keyi, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Value, @UserId, @GetDate, @UserId, @GetDate
			   FROM @Tbl_SaveCartIds m  
			   LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			   CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			   WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))
			   ;
        
		
	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItemQuantity @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItemQuantity', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

go

SET  IDENTITY_INSERT ZnodePaymentGateway ON
INSERT INTO ZnodePaymentGateway (PaymentGatewayId,	GatewayName,	WebsiteURL	,CreatedBy	,CreatedDate	,ModifiedBy	,ModifiedDate )
SELECT 3,	'CyberSource',	'http://www.cybersource.com',	2,	'2018-03-28 11:58:47.773',	2,	'2018-03-28 11:58:47.773'
WHERE NOT EXISTS(SELECT * FROM ZnodePaymentGateway WHERE PaymentGatewayId = 3)
SET  IDENTITY_INSERT ZnodePaymentGateway OFF

go


if exists(select * from sys.procedures where name = 'Znode_GetMediaFolderDetails')
	drop proc Znode_GetMediaFolderDetails
go

CREATE PROCEDURE [dbo].[Znode_GetMediaFolderDetails]
( @WhereClause VARCHAR(1000),
  @MediaPathId INT,
  @Rows        INT           = 1000,
  @PageNo      INT           = 0,
  @Order_BY    VARCHAR(1000) = '',
  @RowsCount   INT OUT,
  @LocaleId    INT           = 1)
AS
/*
  Summary: This Procedure is Used to Get Details of Media Folder
  Unit Testing:
  begin tran
	DECLARE @RowsCount BIGINT  
	EXEC Znode_GetMediaFolderDetails @MediaPathId = -1 , @WhereClause='',@Rows=2147483647,@PageNo=1 ,@Order_By='', @RowsCount = @RowsCount OUT  
  rollback tran
  begin tran
	DECLARE @RowsCount BIGINT  
	EXEC Znode_GetMediaFolderDetails @MediaPathId = 1 , @WhereClause='' ,@Rows=10,@PageNo=1 ,@RowsCount =@RowsCount 
  rollback tran
*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @Rows_start VARCHAR(1000), @Rows_end VARCHAR(1000);
             SET @MediaPathId =  CASE WHEN @MediaPathId = -1 THEN 1 ELSE @MediaPathId END
			 
			 SET @Rows_start = CASE
                                   WHEN @Rows >= 1000000
                                   THEN 0
                                   ELSE(@Rows * (@PageNo - 1)) + 1
                               END;
             SET @Rows_end = CASE
                                 WHEN @Rows >= 1000000
                                 THEN @Rows
                                 ELSE @Rows * (@PageNo)
                             END;
             DECLARE @SQL NVARCHAR(MAX);
		

             SET @Order_BY = REPLACE(@Order_BY, 'MediaPathId', 'Convert(numeric,MediaPathId)');
             SET @Order_BY = REPLACE(@Order_BY, 'Size', 'Convert(numeric,Size)');
             SET @Order_BY = REPLACE(@Order_BY, 'MediaId', 'Convert(numeric,MediaId)');
             SET @Order_BY = REPLACE(@Order_BY, 'CreatedBy', 'Convert(numeric,CreatedBy)');
             SET @Order_BY = REPLACE(@Order_BY, 'MediaCategoryId', 'Convert(numeric,MediaCategoryId)');

             SET @SQL = ' DECLARE @V_MediaServerPath  VARCHAR(max) , @V_MediaServerThumbnailPath  VARCHAR(MAx)  


			 SELECT RANK()OVER(ORDER BY '+CASE
                                                 WHEN @Order_BY IS NULL
                                                      OR @Order_BY = ''
                                                 THEN ''
                                                 ELSE @Order_BY+' ,'
                                          END+'MediaId ) RowId, [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
			 [MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath,
			  ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,[FamilyCode],[CreatedBy],[ShortDescription],[DisplayName] 
			 INTO #MediaPathDetail FROM '+CASE
                                                 WHEN @MediaPathId = -1
                                                 THEN ' View_GetAllMediaInRoot '
                                                 ELSE ' View_GetMediaPathDetail ZMC '
                                          END+' WHERE 1=1 '+CASE
                                                                   WHEN @WhereClause = ''
                                                                        OR @WhereClause IS NULL
                                                                        OR @WhereClause = '-1' 
                                                                   THEN 'AND exists (select top 1 1 from DBO.FN_GetMediaPathHierarchy('+CAST( @MediaPathId  AS VARCHAR(1000))+') Q 
			 where Q.MediaPathId = ZMC.MediaPathId )'
                                                                   ELSE CASE
                                                                            WHEN @MediaPathId = -1
                                                                            THEN ' AND '+@WhereClause
                                                                            ELSE ' AND exists (select top 1 1 from DBO.FN_GetMediaPathHierarchy('+CAST( @MediaPathId AS VARCHAR(1000))+') Q 
			 where Q.MediaPathId = ZMC.MediaPathId ) and  '+@WhereClause
                                                                        END
                                                               END+' Order BY '+CASE
                                                                                    WHEN @Order_BY IS NULL
                                                                                         OR @Order_BY = ''
                                                                                    THEN ' MediaCategoryId DESC'
                                                                                    ELSE @Order_BY
                                                                                END+' SELECT  @Count=ISNULL(Count(1),0) FROM  #MediaPathDetail  SELECT [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
			 [MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath, ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,
			 [FamilyCode],[CreatedBy],[ShortDescription],[DisplayName] FROM #MediaPathDetail 
			 WHERE RowId BETWEEN '+@Rows_start+' AND '+@Rows_end+' Order BY '+CASE
                                                                                   WHEN @Order_BY IS NULL
                                                                                        OR @Order_BY = ''
                                                                                   THEN ' MediaCategoryId DESC '
                                                                                   ELSE @Order_BY
                                                                              END;
           PRINT @SQL 
             EXEC SP_executesql
                  @SQL,
                  N'@Count INT OUT',
                  @Count = @RowsCount OUT;
				 
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetMediaFolderDetails @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@MediaPathId='+ISNULL(CAST(@WhereClause AS VARCHAR(100)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetMediaFolderDetails',
				@ErrorInProcedure = 'Znode_GetMediaFolderDetails',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;                                
         END CATCH;
     END;
GO

if exists(select * from sys.procedures where name = 'Znode_GetPortalSearchProfile')
	drop proc Znode_GetPortalSearchProfile
go

CREATE  PROCEDURE [dbo].[Znode_GetPortalSearchProfile]
(   @WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
	

)
AS 
   /* 
   SUMMARY : Stored Procedure to Get list of PortalsearchProfileid 
   Unit Testing:

   -- EXEC Znode_GetPortalSearchProfile @WhereClause = 'searchprofileid = 2',@RowsCount = 0,@UserId=2
   
   
   	*/

     BEGIN
         BEGIN TRY

		 SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		
			DECLARE @TBL_PortalSearchProfile TABLE (PortalSearchProfileId INT,PublishCatalogId INT,SearchProfileId INT,PortalName nvarchar(400),PortalId INT,ProfileName NVARCHAR(400), CatalogName nvarchar(400), RowId INT, CountNo INT)


		SET @SQL = '

		;With Cte_GetPortalSearchProfileList 
		 AS     (

				SELECT  ZPSP.PortalSearchProfileId,ZPSP.PublishCatalogId,ZPSP.SearchProfileId,ZP.StoreName as PortalName,ZP.PortalId,ZSP.ProfileName,ZPC.CatalogName
				FROM ZnodePortalSearchProfile ZPSP 
				INNER JOIN ZnodePortal ZP ON (ZP.PortalId = ZPSP.PortalId)
				INNER JOIN ZnodeSearchProfile ZSP ON (ZSP.SearchProfileId = ZPSP.SearchProfileId)
				INNER JOIN ZnodePublishCatalogSearchProfile ZSCP ON (ZSCP.PublishCatalogId = ZPSP.PublishCatalogId AND ZSP.SearchProfileId = ZSCP.SearchProfileId)
				INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZSCP.PublishCatalogId)
			
				
				)


				,Cte_GetFilterPortalSearchProfile
				AS (
				SELECT PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName,
				'+dbo.Fn_GetPagingRowId(@Order_BY,'PortalSearchProfileId DESC')+',Count(*)Over() CountNo 
				FROM  Cte_GetPortalSearchProfileList CGPTL 
				WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
						
				)
																								
				SELECT PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName,RowId,CountNo
				FROM Cte_GetFilterPortalSearchProfile
				'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						
				INSERT INTO @TBL_PortalSearchProfile(PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName,RowId,CountNo)
				EXEC(@SQL)

				SET @RowsCount =ISNULL((SELECT TOP 1 CountNo FROM @TBL_PortalSearchProfile ),0)
			
				SELECT PortalSearchProfileId,PublishCatalogId,SearchProfileId,PortalName,PortalId,ProfileName,CatalogName
				FROM @TBL_PortalSearchProfile
				
		 END TRY
		 BEGIN CATCH
			 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPortalSearchProfile @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetPortalSearchProfile',
				@ErrorInProcedure = 'Znode_GetPortalSearchProfile',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		 END CATCH
     END
GO

if exists(select * from sys.procedures where name = 'Znode_GetPublishCategoryGroup')
	drop proc Znode_GetPublishCategoryGroup
go
CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT             );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				 Select Distinct PimCategoryId , Null FROM (
				 SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryId in 
				 (SELECT CategoryId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
				 SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

				 INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId
				 AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds) ;
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,@VersionId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 
	
					IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
						SET @ExistingPublishCategoryId  = @ExistingPublishCategoryId + ',' +  Convert(nvarchar(100),@PublishCategoryId )
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 SELECT CategoryXml FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


if exists(select * from sys.procedures where name = 'Znode_GetPublishCategoryProducts')
	drop proc Znode_GetPublishCategoryProducts
go
CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
(
	    @PimCatalogId int = 0 
	  , @PimCategoryHierarchyId int = 0 
	  , @UserId int
	  , @VersionId int= 0
	  , @Status           int = 0 OUT
	  ,	@IsDebug          BIT = 0

)

AS
 
/*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	EXEC [Znode_GetPublishCategoryProducts]   
	@PimCatalogId = 3 
	, @PimCategoryHierarchyId = 153 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	Select @Status  

 */

BEGIN

	
	BEGIN TRY
		SET NOCOUNT ON;
			DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			DECLARE @PublishCatalogId INT= ISNULL((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @PimCatalogId), 0),  @PublishCataloglogId INT= 0;
			DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
			DECLARE @PimProductId TransferId 
			DECLARE @InsertPublishProductIds TABLE (PublishProductId int , PimProductId int , PublishCatalogId int )
			--DECLARE @TBL_CategoryXml TABLE ( CategoryXml XML);

			SELECT  @VersionId  = MAX(PublishCataloglogId)  from ZnodePublishCatalogLog where  PublishCatalogId =@PublishCatalogId

			INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  
				
			 IF (ISnull(@PublishCatalogId,0) = 0  )
			 Begin
				SET @Status = 1  -- Catalog Not Published 
				Return 0 ;
			 END
			
			 --IF EXISTS (SELECT CategoryId FROM @TBL_CategoryCategoryHierarchyIds where CategoryId is not null AND CategoryId not in (select PimCategoryId  from ZnodePublishCategory
			 --where PublishCatalogId = ISnull(@PublishCatalogId,0) and PimCategoryHierarchyId = @PimCategoryHierarchyId  ))
			 --Begin
				--SET @Status = 2  -- Category / subcategory Not Publish 
				--insert into @TBL_CategoryXml (CategoryXml) 
			EXEC [Znode_GetPublishCategoryGroup] @PublishCatalogId = @PublishCatalogId,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = @PimCategoryHierarchyId 
			 --END 
			BEGIN 
			    INSERT INTO @InsertPublishProductIds
				EXEC [dbo].[Znode_InsertPublishProductIds] 
					@PublishCatalogId = @PublishCatalogId, 
					@userid = @userid,
					@PimProductId = @PimProductId,
					@PimCategoryHierarchyId = @PimCategoryHierarchyId  
	
				EXEC [dbo].[Znode_GetPublishProductbulk] 
					@PublishCatalogId = @PublishCatalogId,
					@VersionId = @VersionId,
					@PimProductId = @PimProductId,
					@userid = @userid ,
					@PimCategoryHierarchyId = @PimCategoryHierarchyId,
					@PimCatalogId = @PimCatalogId 
				
				UPDATE ZnodePimProduct SET IsProductPublish = 1 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP 
				WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
	
			DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PublishCategoryId INT,PimProductId  INT , VersionId INT );

			INSERT INTO @TBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId , VersionId  )

			SELECT Distinct ZPC.PublishCatalogId ,ZPX.PublishedId  PublishProductId , ZPX.PublishCategoryId ,ZPP.PimProductId ,ZPX.PublishCatalogLogId   
			FROM ZnodePublishCategory ZPC  INNER JOIN @TBL_CategoryCategoryHierarchyIds CTC ON ZPC.PimCategoryId = CTC .CategoryId
			INNER JOIN ZnodePublishedXml ZPX on ZPC.PublishCategoryId = ZPX.PublishCategoryId   
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId and ZPX.PublishedId = ZPP.PublishProductId 
			WHERE ZPC.PublishCatalogId = @PublishCatalogId  
			AND ZPX.PublishCatalogLogId = @VersionId  

			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			    ,PublishProductId = (SELECT  COUNT(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId  ) 
		    WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)
			--END
			--if isnull(@Status,0) <>  2   
			--Begin
			--	Select  NULL PublishCategoryId  where 1= 0 
			--	SELECT  NULL 'CategoryXml' where 1= 0 
			--End
			Select PublishCatalogId,PublishProductId,PublishCategoryId,VersionId from @TBL_PublishCatalogId 
	

	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+CAST(@PimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@PimCategoryHierarchyId+',@UserId='+CAST(@UserId AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',@VersionId='+CAST(@VersionId AS Varchar(50))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishCategoryProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO



if exists(select * from sys.procedures where name = 'Znode_GetPublishProductbulk')
	drop proc Znode_GetPublishProductbulk
go

CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk 5, 0 , '' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

  --DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )

   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DELETE FROM #PimProductAttributeXML
   END

   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   Declare @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 
 --DECLARE #TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int  )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,@versionId ,ZPC.PublishCategoryId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and  
				 ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )
  END
  ELSE 
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
											MAX(PublishCatalogLogId) ELSE @versionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

WHILE @Counter <= @maxCountId
BEGIN
 
  SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO @PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       

	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) from #TBL_AttributeVAlue b where a.PimProductId=b.PimProductId and a.PimAttributeId = b.PimAttributeId )
	 from #TBL_AttributeVAlue a

	 --select * from #TBL_AttributeVAlue
	 --return
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 create table #Cte_GetData (PimProductId int,AttributeCode varchar(600),AttributeValue nvarchar(max))

 create index idx_#Cte_GetDataPimProductId on #Cte_GetData(PimProductId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
where a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
--INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId AND CTE.LocaleId  = CASE WHEN cte.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue                 
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

	 

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)


insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
where exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

--  --CREATE INDEX IND_Znode

  DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId = @versionId AND IsProductXML = 1   AND LocaleId = @LocaleId 

--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		IF OBJECT_ID('tempdb..#Index') is not null
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		insert into  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		Select CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc ) +1  AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
  		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST((select Max(RowIndex) from #Index WHERE PublishProductId = zpp.PublishProductId) 
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
		AND ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )
  END
  ELSE
  BEGIN
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
END 
 


--DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
SET @Counter = @counter + 1 
END 

END
GO


if exists(select * from sys.procedures where name = 'Znode_GetPublishProducts')
	drop proc Znode_GetPublishProducts
go

CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 0 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
	
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			   
	         IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@userid	,@TokenId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId,@VersionId,@PimProductId,@userid
				 UPDATE ZnodePimProduct SET IsProductPublish = 1 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
										MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 AND IsCatalogPublished =1 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				;

				SELECT PublishProductId AS ProductXml
				FROM @TBL_PublishCatalogId
				GROUP BY PublishProductId;
			END
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1 
			    ,PublishProductId = (SELECT DISTINCT COUNT(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId  ) 
		    WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0

			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 
			
			--UPDATE ZnodePimattributeValueLocale SET AttributeValue = 'Published' 
			--FROM ZnodePimattributeValue PAV
			--INNER JOIN ZnodePimattributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
			--WHERE PimAttributeId = @PimAttributeIsPublish
			--AND EXISTS ( SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = PAV.PimProductId )

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)
			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

		--@PimProductId='+CAST(@PimProductId AS Varchar(50))+',
GO



if exists(select * from sys.procedures where name = 'Znode_GetTaxClassPortal')
	drop proc Znode_GetTaxClassPortal
go
CREATE PROCEDURE [dbo].[Znode_GetTaxClassPortal](
      @WhereClause  NVARCHAR(MAX) = '' ,
      @Rows         INT           = 100 ,
      @PageNo       INT           = 1 ,
      @Order_BY     VARCHAR(1000) = '' ,
      @RowsCount    INT OUT ,
      @PortalId     INT           = 0 ,
      @IsAssociated INT           = 0)
AS

/*
  Summary: This Procedure is used to get TaxClass details According to associated portal.
		   
  Unit Testing: 
	EXEC [Znode_GetTaxClassPortal]  @PortalId = 0,@IsAssociated= 1, @RowsCount = 0
  
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
             DECLARE @TBL_TaxClassTable TABLE (PortalId INT ,StoreName NVARCHAR(MAX) ,TaxClassId INT,Name NVARCHAR(200),IsActive BIT,DisplayOrder INT ,
             IsDefault BIT,ExternalId VARCHAR(50),CreatedDate  DATETIME ,ModifiedDate DATETIME ,RowId INT,CountNo INT);
             IF ( ISNULL(@PortalId , 0) = 0 )
                 BEGIN
                     SET @SQL = ' ;With Cte_GetTaxClassDetails AS 
				(
				 SELECT NULL PortalId,NULL StoreName,ZTC.TaxClassId,ZTC.Name,IsActive,DisplayOrder,0 IsDefault,ExternalId,ZTC.CreatedDate,ZTC.ModifiedDate  
						,'+dbo.Fn_GetPagingRowId ( @Order_BY , ' ZTC.TaxClassId '
                                                       ) +',Count(*)Over() CountNo
				 FROM ZnodeTaxClass ZTC 
				 LEFT JOIN ZnodeTaxClassSKU ZTCS ON (ZTCS.TaxClassId = ZTC.TaxClassId)
				 WHERE  1=1
				 '+dbo.Fn_GetFilterWhereClause ( @WhereClause
                                                   ) +'
				 GROUP BY ZTC.TaxClassId,ZTC.Name,IsActive,DisplayOrder,ExternalId,ZTC.CreatedDate,ZTC.ModifiedDate 
				 ) ';
                 END;
             ELSE
                 BEGIN
                     SET @SQL = '
		           ;With Cte_GetAssociatedTaxClass  AS 
				   (
					SELECT ZP.PortalId,ZP.StoreName,ZTC.TaxClassId,ZTC.Name,IsActive,ZTC.DisplayOrder DisplayOrder ,ISNULL(ZPTC.IsDefault,0) IsDefault,ZTC.ExternalId,ZTC.CreatedDate,ZTC.ModifiedDate, 
							 CASE WHEN ZPTC.TaxClassId IS NULL THEN 0 ELSE 1 END IsAssociated	
							
					FROM ZnodePortal ZP 
					CROSS APPLY ZnodeTaxClass ZTC 
					LEFT JOIN ZnodePortalTaxClass ZPTC ON(ZP.PortalId = ZPTC.PortalId AND ZTC.TaxClassId = ZPTC.TaxClassId)
					)
					, Cte_GetTaxClassDetails AS
					(
					   SELECT PortalId,StoreName,TaxClassId,Name,IsActive,DisplayOrder,IsDefault,ExternalId,CreatedDate,ModifiedDate	
							,'+dbo.Fn_GetPagingRowId ( @Order_BY , 'PortalId ,TaxClassId '
                                                            ) +',Count(*)Over() CountNo
					   FROM Cte_GetAssociatedTaxClass
					   WHERE PortalId = '+CAST(@PortalId AS VARCHAR(50))+'
					   AND IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+'
					  '+dbo.Fn_GetFilterWhereClause ( @WhereClause
                                                         ) +'
					) ';
                 END;
             SET @SQL = @SQL+'	SELECT PortalId,StoreName,TaxClassId,Name,IsActive,DisplayOrder,IsDefault,ExternalId,CreatedDate,ModifiedDate,RowId,CountNo
			      FROM Cte_GetTaxClassDetails
				'+dbo.Fn_GetPaginationWhereClause ( @PageNo , @Rows);
                                                      
			
             INSERT INTO @TBL_TaxClassTable ( PortalId , StoreName , TaxClassId , Name , IsActive , DisplayOrder , IsDefault , ExternalId , CreatedDate , ModifiedDate , RowId , CountNo
                                            )
             EXEC (@SQL);
             SET @RowsCount = ISNULL( ( SELECT TOP 1 CountNo FROM @TBL_TaxClassTable) , 0);
             SELECT PortalId , StoreName , TaxClassId , Name , IsActive , DisplayOrder , IsDefault , ExternalId , CreatedDate , ModifiedDate
             FROM @TBL_TaxClassTable;
			
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetTaxClassPortal @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@PortalId = '+CAST(@PortalId AS VARCHAR(50))+',@IsAssociated = '+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetTaxClassPortal',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


if exists(select * from sys.procedures where name = 'Znode_InsertUpdateProfileCatalog')
	drop proc Znode_InsertUpdateProfileCatalog
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdateProfileCatalog]
(   @ProfileId        INT          = NULL,
	@PimCatalogId     VARCHAR(MAX) = '',
	@UserId           INT,
	@Status           BIT OUT,
	@PimCategoryId    VARCHAR(MAX) = '',
	@ProfileCatalogId INT          = NULL,
	@PimProductId     VARCHAR(MAX) = '',
	@PimCategoryHierarchyId INT =0 
	
	
	)
AS 
    /* Summary :- This Procedure is used to dump the catalog data with profile base catalog 
     Unit Testing 
     EXEC Znode_InsertUpdateProfileCatalog 
	*/
     BEGIN
         BEGIN TRAN InsertUpdateProfileCatalog;
         BEGIN TRY
             DECLARE @TBL_ProfileCatalogId TABLE
             (ProfileCatalogId INT,
              PimCatalogId     INT
             );
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @TBL_PimCatalogId TABLE(PimCatalogId INT);
             DECLARE @TBL_PimCategoryId TABLE(PimCategoryHierarchyId INT,PimCategoryId INT);
             DECLARE @TBL_PimProductId TABLE(PimProductId INT);
             DECLARE @PimCatalogIds INT;
             INSERT INTO @TBL_PimCatalogId(PimCatalogId)
                    SELECT Item
                    FROM dbo.split(@PimCatalogId, ',') SP;
					--SELECT @PimCategoryHierarchyId
					IF @PimCategoryHierarchyId >= 1 
					BEGIN 

             INSERT INTO @TBL_PimCategoryId(PimCategoryId,PimCategoryHierarchyId)
                    SELECT PimCategoryId,PimCategoryHierarchyId
                    FROM dbo.Fn_GetRecurciveCategoryIds_ForChild(@PimCategoryHierarchyId,@PimCatalogId ) SP
					WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimCategoryId,',') th WHERE th.item= Sp.PimCategoryId )
					UNION ALL
					SELECT PimCategoryId,PimCategoryHierarchyId
					FROM ZnodePimCategoryHierarchy  SP
					WHERE PimCategoryHierarchyId = @PimCategoryHierarchyId
					;
					END 
					ELSE 
					BEGIN 
					 INSERT INTO @TBL_PimCategoryId(PimCategoryId,PimCategoryHierarchyId)
					  SELECT PimCategoryId,PimCategoryHierarchyId
					  FROM ZnodePimCategoryHierarchy  SP
					  WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimCategoryId,',') th WHERE th.item= Sp.PimCategoryId )
					  AND ParentPimCategoryHierarchyId IS nULL
					END 
             INSERT INTO @TBL_PimProductId(PimProductId)
                    SELECT ZPCC.PimProductId
                    FROM ZnodePimCatalogCategory ZPCC
                    WHERE(( EXISTS
                         (
                             SELECT TOP 1 1
                             FROM dbo.split(@PimProductId, ',') SP
                             WHERE SP.Item = ZPCC.PimProductId
                         )OR @PimProductId = '')
                    AND ( 

					EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId  )
                                  
                         ))
                    AND EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @TBL_PimCatalogId TBPC
                        WHERE TBPC.PimCatalogId = ZPCC.PimCatalogId
                    );
             IF @ProfileId IS NOT NULL
                AND @ProfileCatalogId IS NULL
                 BEGIN
                     MERGE INTO ZnodeProfileCatalog TARGET
                     USING @TBL_PimCatalogId SOURCE
                     ON(TARGET.PimCatalogId = SOURCE.PimCatalogId
                        AND TARGET.ProfileId = @ProfileId)
                         WHEN NOT MATCHED
                         THEN INSERT(ProfileId,
                                     PimCatalogId,
                                     CreatedBy,
                                     CreatedDate,
                                     ModifiedBy,
                                     ModifiedDate) VALUES
                     (@ProfileId,
                      SOURCE.PimCatalogId,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate
                     )
                     OUTPUT INSERTED.ProfileCatalogId,
                            Source.PimCatalogId
                            INTO @TBL_ProfileCatalogId;
                     INSERT INTO ZnodeProfileCategoryHierarchy
                     (ProfileCatalogId,
                      PimCategoryHierarchyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT TBPC.ProfileCatalogId,
                                   ZPCH.PimCategoryHierarchyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCategoryHierarchy ZPCH
                                 INNER JOIN @TBL_ProfileCatalogId TBPC ON(ZPCH.PimCatalogId = TBPC.PimCatalogId);
                     INSERT INTO ZnodeProfileCatalogCategory
                     (ProfileCatalogId,
                      PimCatalogCategoryId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT TBPC.ProfileCatalogId,
                                   PimCatalogCategoryId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCatalogCategory ZPCC
                                 INNER JOIN @TBL_ProfileCatalogId TBPC ON(ZPCC.PimCatalogId = TBPC.PimCatalogId);
                 END;
             ELSE
                 BEGIN
                     SET @PimCatalogIds = CAST(@PimCatalogId AS INT);
                     INSERT INTO ZnodeProfileCategoryHierarchy
                     (ProfileCatalogId,
                      PimCategoryHierarchyId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @ProfileCatalogId,
                                   ZPCH.PimCategoryHierarchyId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCategoryHierarchy ZPCH
                            WHERE 
							EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId )  
                            
                                  AND 
								  ZPCH.PimCatalogId = @PimCatalogIds;
                     INSERT INTO ZnodeProfileCatalogCategory
                     (ProfileCatalogId,
                      PimCatalogCategoryId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @ProfileCatalogId,
                                   PimCatalogCategoryId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodePimCatalogCategory ZPCC
                            WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PimCategoryId  ty WHERE
                             ty.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId  )  
                            
                                  AND ZPCC.PimCatalogId = @PimCatalogIds
                                  AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM @TBL_PimProductId TBPP
                                WHERE TBPP.PimProductId = ZPCC.PimProductId
                            );
                 END;
             SET @Status = 1;
             COMMIT TRAN InsertUpdateProfileCatalog;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE()
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateProfileCatalog @ProfileId = '+CAST(@ProfileId AS VARCHAR(200))+',@PimCatalogId='+@PimCatalogId+',@UserId='+CAST(@UserId AS VARCHAR(200))+',@PimCategoryId='+@PimCategoryId+',@ProfileCatalogId='+CAST(@ProfileCatalogId AS VARCHAR(200))+',@PimProductId='+@PimProductId+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN InsertUpdateProfileCatalog;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_InsertUpdateProfileCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


if exists(select * from sys.procedures where name = 'Znode_InsertUpdateSaveCartLineItemQuantity')
	drop proc Znode_InsertUpdateSaveCartLineItemQuantity
go
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@IsCallFromPDP BIT, @Status bit OUT)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem_aa @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
	1259
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @SaveCartLineItemIdForGroup int= 0;
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int IDENTITY(1, 1), OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute varchar(max), 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails )
			   SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ) AS BundleProductIds, Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ) AS ConfigurableProductIds, Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, 
			          Tbl.Col.value( 'PersonaliseValuesList[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

		DECLARE @OmsSavedCartId int, @OmsSavedCartLineItemId int,@OmsOrderId int;

	
		DECLARE @TBL_AllProductsTypeData TABLE
		( 
			 RowId int, SequenceId int IDENTITY(1, 1), ParentOmsSavedCartLineItemId int, SKU nvarchar(1000), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), CartAddOnDetails nvarchar(max), AutoAddon varchar(max), OmsOrderId int null ,IsFromAddon INT 
		);
		DECLARE @AddonProductSKU nvarchar(max)=	(SELECT TOP 1 AddOnValueIds	FROM @TBL_SavecartLineitems	), 
				@BundleProductSKU nvarchar(max)= (SELECT TOP 1 BundleProductIds	FROM @TBL_SavecartLineitems	);
		SET @OmsSavedCartId =( SELECT TOP 1 OmsSavedCartId FROM @TBL_SavecartLineitems);
		SET @OmsOrderId =( SELECT TOP 1 OmsOrderId FROM @TBL_SavecartLineitems );
		
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM ZnodeOmsSavedCartLineItem AS qa
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM @TBL_SavecartLineitems AS ssds
		--		WHERE ssds.sku = qa.SKU
		--	)
		--)
		--BEGIN
		--	DELETE FROM ZnodeOmsPersonalizeCartItem
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM ZnodeOmsSavedCartLineItem
		--		WHERE OmsSavedCartId = @OmsSavedCartId AND 
		--			  OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId
		--	);
		
		--	IF EXISTS (SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails is not null)
		--	BEGIN 
		--		DELETE ZnodeOmsSavedCartLineItemDetails
		--		WHERE EXISTS
		--		( 
		--			SELECT * FROM ZnodeOmsSavedCartLineItem SCLI
		--			WHERE ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND SCLI.OmsSavedCartId = @OmsSavedCartId AND SCLI.OmsOrderId = @OmsOrderId	
		--		)
		--    END

		--	DELETE FROM ZnodeOmsSavedCartLineItem 
		--	WHERE OmsSavedCartId = @OmsSavedCartId AND OmsOrderId = @OmsOrderId									

		--END;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.BundleProductIds, ',' ) AS q
			   WHERE a.BundleProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> '' ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.ConfigurableProductIds, ',' ) AS q
			   WHERE a.ConfigurableProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
			   ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT RowID, NULL, SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS SKU, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.GroupProductIds, ',' ) AS q
			   WHERE a.GroupProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))) <> ''
			   ;

		IF EXISTS
		(
			SELECT TOP 1 1	FROM @TBL_SavecartLineitems	WHERE GroupProductIds IS NOT NULL OR  ConfigurableProductIds IS NOT NULL
		)
		BEGIN
			SET @AddOnQuantity =(SELECT MAX(Quantity) FROM @TBL_AllProductsTypeData	);
		END;


		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT a.RowID, NULL, q.Item AS SKU,
											   CASE
											   WHEN @AddOnQuantity = 0 THEN a.Quantity
											   ELSE @AddOnQuantity
											   END, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.AddOnValueIds, ',' ) AS q   WHERE a.AddOnValueIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
	DECLARE @Tbl_SaveCartIds TABLE
		( 
			OmsSavedCartLineItemId int, SKU nvarchar(max), RowId int,ParentOmsSavedCartLineItemId INT 
		);

	DECLARE @IsCallForUpdate BIT = 0 
	DECLARE @saveCartLineItemId TABLE (OmsSavedCartLineItemId INT,SKU NVARCHAR(2000),OmsSavedCartId INT,ChaildSKU NVARCHAR(max), Sequence INT ,RowId INT Identity(1,1) )
	INSERT INTO @saveCartLineItemId (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChaildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,YU.SKU ,YU.Sequence 
	FROM ZnodeOmsSavedCartLineItem CLI 
																INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
																INNER JOIN ZnodeOmsSavedCartLineItem   YU ON (Yu.ParentOmsSavedCartLineItemId = CLI.OmsSavedCartLineItemId)
																INNER JOIN  @TBL_AllProductsTypeData tbad ON (tbad.SKU = YU.SKU )
	 WHERE CLI.ParentOmsSavedCartLineItemId IS NULL
	
	INSERT INTO @SaveCartLineItemId  (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChaildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,NULL ,CLI.Sequence  
	FROM ZnodeOmsSavedCartLineItem CLI 
	INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId AND CLI.Sequence  = s.Sequence )
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )														
	
	IF @IsCallFromPDP = 1
	BEGIN
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId)	THEN 0 ELSE 1 END
	END
	  

	   UPDATE SI
		 SET  OmsSavedCartLineItemId = CASE WHEN HJRHRH.OmsSavedCartLineItemId IS NULL THEN  SL.OmsSavedCartLineItemId ELSE HJRHRH.OmsSavedCartLineItemId END 
		      ,Sequence = CASE WHEN HJRHRH.Sequence IS NULL THEN  SI.Sequence ELSE HJRHRH.Sequence END 
		 FROM @TBL_SavecartLineitems SI
		 LEFT JOIN ZnodeOmsSavedCartLineItem SL ON (SI.SKU = SL.SKU AND SI.OmsSavedCartId = SL.OmsSavedCartId AND SI.Sequence = SL.Sequence )
		 LEFT JOIN 	@saveCartLineItemId HJRHRH ON (SI.SKU = HJRHRH.SKU AND SI.OmsSavedCartId = HJRHRH.OmsSavedCartId  AND SI.Sequence = HJRHRH.RowId )
		
		   --SELECT * FROM   @TBL_SavecartLineitems 
		   --SELECT * 	 FROM @saveCartLineItemId
		--   SELECT  DISTINCT  ISNULL(SI.OmsSavedCartLineItemId,-1) AS OmsSavedCartLineItemId,SI.SKU,SI.Quantity,SI.OrderLineItemRelationshipTypeID,SI.CustomText,SI.CartAddOnDetails,SI.Sequence,SI.AutoAddon,SI.RowID,SI.OmsOrderId 
		--FROM @TBL_SavecartLineitems SI 
		--WHERE (EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY WHERE TY.OmsSavedCartLineItemId = SI.OmsSavedCartLineItemId ))
		-- OR (@IsCallFromPDP = 1 AND NOT EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY ))
		   
		MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING  (SELECT  DISTINCT  ISNULL(SI.OmsSavedCartLineItemId,-1) AS OmsSavedCartLineItemId,SI.SKU,SI.Quantity,SI.OrderLineItemRelationshipTypeID,SI.CustomText,SI.CartAddOnDetails,SI.Sequence,SI.AutoAddon,SI.RowID,SI.OmsOrderId 
		FROM @TBL_SavecartLineitems SI 
		WHERE (EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY WHERE TY.OmsSavedCartLineItemId = SI.OmsSavedCartLineItemId ))
		 OR (@IsCallFromPDP = 1 AND NOT EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY ))) SOURCE 
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND SOURCE.OmsSavedCartLineItemId = TARGET.OmsSavedCartLineItemId AND @IsCallForUpdate = 0
		WHEN MATCHED   THEN
		UPDATE 
		SET   Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = CASE	 WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE Source.OrderLineItemRelationshipTypeID
																		 END, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.Sequence,OmsOrderId = @OmsOrderId,TARGET.AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
																		
		WHEN NOT MATCHED  
			  THEN INSERT(ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  VALUES( NULL, @OmsSavedCartId, Source.SKU, Source.Quantity,CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE OrderLineItemRelationshipTypeID
																		 END, 
					 Source.CustomText, Source.CartAddOnDetails, Source.Sequence, SOURCE.OmsOrderId, SOURCE.AutoAddon, @UserId, @GetDate, @UserId, @GetDate )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
		INTO @Tbl_SaveCartIds;
		 	
		--	SELECT* FROM @Tbl_SaveCartIds
		--SELECT * FROM @saveCartLineItemId

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_SavecartLineitems TSCLI ON TSCI.SKU = TSCLI.SKU AND TSCLI.RowID = TSCLI.RowID
			CROSS APPLY dbo.split ( ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )

		

		

		IF EXISTS (SELECT TOP 1  1  FROM @TBL_AllProductsTypeData )
		BEGIN 
        MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING ( SELECT b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
																		CASE
																		WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
																		ELSE OrderLineItemRelationshipTypeID
																		END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon, @UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate,a.RowId
			   FROM @TBL_AllProductsTypeData AS a
					INNER JOIN
					@Tbl_SaveCartIds AS b
					ON(a.RowId = b.RowId)
			   WHERE a.SKU IS NOT NULL AND 
					 a.SKU <> '') SOURCE
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND @IsCallForUpdate = 0 AND Target.ParentOmsSavedCartLineItemId = source.OmsSavedCartLineItemId
		WHEN MATCHED THEN
		UPDATE 
		SET ParentOmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId  , Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = 	Source.OrderLineItemRelationshipTypeID, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.SequenceId,OmsOrderId = SOURCE.OmsOrderId,AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate


		WHEN NOT MATCHED
			  THEN INSERT ( ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, [Sequence], OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )

			  VALUES (SOURCE.OmsSavedCartLineItemId,SOURCE.OmsSavedCartId,SOURCE.SKU,SOURCE.Quantity,SOURCE.OrderLineItemRelationshipTypeID , SOURCE.CustomText,
			  SOURCE.CartAddOnDetails,SOURCE.SequenceId,SOURCE.OmsOrderId,SOURCE.AutoAddon,SOURCE.CreatedBy,SOURCE.CREATEDDATE,SOURCE.ModifiedBy, SOURCE.ModifiedDate
			  
			  )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
			   INTO @Tbl_SaveCartIds;
			   
		 END 

		--IF EXISTS ( SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails IS NOT NULL )
		--BEGIN
			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_AllProductsTypeData BAR ON ( TSCI.SKU = BAR.SKU AND BAR.RowID = TSCI.RowID )
			INNER JOIN @TBL_SavecartLineitems TSCLI ON (BAR.SKU = TSCLI.SKU AND BAR.RowID = TSCLI.RowID )
			CROSS APPLY dbo.split ( TSCLI.ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )
		--END
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM @TBL_SavecartLineitems
		--	WHERE GroupProductIds IS NOT NULL OR 
		--		  ConfigurableProductIds IS NOT NULL
		--)
		--BEGIN
		 --SELECT * FROM @Tbl_SaveCartIds
		 --SELECT * FROM @TBL_AllProductsTypeData
		 --SELECT * FROM @TBL_SavecartLineitems
			DECLARE @TBL_SaveCartConfigProduct TABLE (OmsSavedCartLineItemId INT, SKU VARCHAR(2000),RowId INT, PersonalisedAttribute NVARCHAr(max))
			    INSERT @TBL_SaveCartConfigProduct    
			    SELECT DISTINCT    ZOSCL.OmsSavedCartLineItemId   ,ZOSCL.SKU 
				,  ZOSCL.RowId , (SELECT TOP 1 PersonalisedAttribute FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID )  PersonalisedAttribute
				FROM @Tbl_SaveCartIds AS ZOSCL
				LEFT JOIN @TBL_AllProductsTypeData AS TBBR ON (ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId  )
				WHERE ( EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
				OR   EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData TRT WHERE SKU <> ''  AND IsFromAddon <> 1  AND TRT.RowID = ZOSCl.RowID   ) )
				AND ((ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId) OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData RTR WHERE SKU <> '' AND IsFromAddon <> 1   AND RTR.RowID = ZOSCl.RowID) 
				
				)
				
				--select * from @TBL_SavecartLineitems

			 --  select * from @Tbl_SaveCartIds
			  

			  --select * from @TBL_SaveCartConfigProduct
					
			UPDATE ZnodeOmsPersonalizeCartItem
			SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId,PersonalizeCode= SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1)  ,PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000),
			CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
			FROM @Tbl_SaveCartIds m  
			LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			--AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem ppp WHERE ppp.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId AND ppp.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))
			 AND ZnodeOmsPersonalizeCartItem.PersonalizeCode= SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AND ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
			 AND @IsCallForUpdate = 0
			;


		INSERT INTO ZnodeOmsPersonalizeCartItem( OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT DISTINCT 
			   b.OmsSavedCartLineItemId 
			  , SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS Keyi, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Value, @UserId, @GetDate, @UserId, @GetDate
			   FROM @Tbl_SaveCartIds m  
			   LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			   CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			   WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))
			   ;
        
		
	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItemQuantity @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItemQuantity', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

if exists(select * from sys.procedures where name = 'Znode_ManageProductListByAttributes')
	drop proc Znode_ManageProductListByAttributes
go

CREATE PROCEDURE [dbo].[Znode_ManageProductListByAttributes]
(   @WhereClause      XML,
	@PimAttributeIds  VARCHAR(3000) = NULL,
	@Rows             INT           = 100,
	@PageNo           INT           = 0,
	@Order_BY         VARCHAR(1000) = '',
	@LocaleId         INT,
	@PimProductId     VARCHAR(max) = NULL,
	@IsProductNotIn   BIT           = 0,
	@RelatedProductId INT           = 0, 
	@IsDebug		    BIT = 0 
	)
AS
   /*  Summary:-  This Procedure is used for get product List with extra column attribute supllied to the procedure 
     Unit Testing 
     DECLARE @EDE INT = 0 
	 exec Znode_ManageProductListByAttributes @WhereClause='',@PimAttributeIds = '35,81',@Rows = 10,@PageNo=1,@Order_BY = '',@RelatedProductId = 53442,@PimProductId = '',@IsProductNotIn= 0 ,@LocaleId=1 --SELECT @EDE 
	
	*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		  --  SELECT '123112'
             DECLARE @SQL NVARCHAR(MAX), @AttributeCode_filter NVARCHAR(2000), @WhereClauseChanges NVARCHAR(MAX)= '',@OutPimProductIds varchar(max) ;
             SET @WhereClauseChanges = CONVERT(NVARCHAR(MAX), @WhereClause);
             DECLARE @PimAttributeFamilyId INT= Dbo.Fn_GetDefaultValue('PimFamily'), @RowsCount INT, @DefaultLocaleId INT= Dbo.Fn_GetDefaultlocaleId();
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()					 
			
	
			 DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT identity(1,1)
             );
             DECLARE @TBL_PimAttributeId TABLE
             (PimAttributeId INT,
              AttributeCode  VARCHAR(600)
             );
             INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
					
             SET @AttributeCode_filter = ISNULL(CAST((
                                                      SELECT CAST('<WhereClauseModel><attributecode>'+ '  = '+''''+TBPA.AttributeCode+''''+'</attributecode></WhereClauseModel>' AS XML )
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH(''),TYPE
                                                  ) AS NVARCHAR(max)),'');
          
		     SET @WhereClauseChanges = [dbo].[Fn_GetXmlWhereClauseForAttribute](@WhereClauseChanges,@AttributeCode_filter, @LocaleId);
             SET @WhereClause = CONVERT(XML, @WhereClauseChanges);	
	    
		  INSERT INTO @TransferPimProductId
		  SELECT ITEM
		  FROM DBO.SPLIT(@PIMPRODUCTID,',')
		  UNION ALL 
		  SELECT PimProductId 
		  FROM ZnodePimProductTypeAssociation  
		  WHERE PimParentProductId=  @RelatedProductId
		  AND @PIMPRODUCTID = '0'
		
		   DECLARE @AttributeCode NVARCHAR(max)
		   SET @AttributeCode = SUBSTRING ((SELECT ','+AttributeCode FROM [dbo].[Fn_GetProductGridAttributes]() qt WHERE (EXISTS (SELECT TOP 1 1 
				FROM dbo.split(@PimAttributeIds,',') TR WHERE tr.Item = qt.PimAttributeId)  OR AttributeCode = 'ProductType')
		   FOR XML PATH('')  ),2,4000)
		   
		   --EXEC Znode_GetProductIdForPaging
     --             @whereClauseXML = @WhereClause,
     --             @Rows = @Rows,
     --             @PageNo = @PageNo,
     --             @Order_BY = @Order_BY,
     --             @RowsCount = @RowsCount OUT,
     --             @LocaleId = @LocaleId,
     --             @AttributeCode = @AttributeCode,
     --             @PimProductId = @TransferPimProductId,
     --             @IsProductNotIn = @IsProductNotIn,
				 -- @OutProductId = @OutPimProductIds OUT
				 -- ;

 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 1 THEN 0 
	 WHEN @IsProductNotIn = 0 THEN 1  END
     DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE(Id INT , RowId INT )
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList @IsProductNotIn ,@TransferPimProductId

	

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	  
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))
	  --INSERT INTO @TAB 
	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb )OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	
	 END 
	 ELSE 
	 BEGIN
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 

			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 select id
			 from @TBL_MainList
		
             SET @AttributeCode_filter = SUBSTRING(
                                                  (
                                                      SELECT ','+TBPA.AttributeCode
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH('')
                                                  ), 1, 4000);
             --DECLARE @PimProductIds VARCHAR(MAX)= SUBSTRING(
             --                                              (
             --                                                  SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                                  FROM @ProductIdTable
             --                                                  FOR XML PATH('')
             --                                              ), 2, 4000);

			 DECLARE @PimProductIds TransferId

			 INSERT INTO @PimProductIds ( Id )
			 SELECT id FROM @TBL_MainList

			 --DECLARE @TBL_PimProductIds transferId 
			 --INSERT INTO @TBL_PimProductIds
			 --SELECT id 
    --         FROM @PimProductIds
			 			 	

														      		
             DECLARE @DefaultAttributeCode VARCHAR(MAX)= dbo.Fn_GetDefaultValue('AttributeCode');
             
			 INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@DefaultAttributeCode, ',') SP
                        WHERE SP.Item = ZPA.AttributeCode
                    );
			
			INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           'OR_'+AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
             
	
             SET @DefaultAttributeCode = @DefaultAttributeCode + @AttributeCode_filter;
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId                INT,
              AttributeValue              NVARCHAR(MAX),
              AttributeCode               VARCHAR(600),
              PimAttributeId              INT,
              PimProductTypeAssociationId INT,
              DisplayOrder                INT,
              IsNonEditableRow            BIT DEFAULT 0
             );
             DECLARE @TBL_AttributeCode TABLE
             (PimAttributeId INT,
              AttributeCode  VARCHAR(300)
             );
             INSERT INTO @TBL_AttributeCode
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.split(@DefaultAttributeCode, ',') SP
                        WHERE Sp.Item = ZPA.AttributeCode
                    );
             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT
             );
			  
             DECLARE @PimAttributeId VARCHAR(MAX);
             SET @PimAttributeId = SUBSTRING(
                                            (
                                                SELECT ','+CAST(TBAC.PimAttributeId AS VARCHAR(50))
                                                FROM @TBL_AttributeCode TBAC
                                                     INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON(ZPADV.PimAttributeId = TBAC.PimAttributeId)
                                                FOR XML PATH('')
                                            ), 2, 4000);

													
             INSERT INTO @TBL_AttributeDefaultValue
             (
			  PimAttributeId,
              AttributeDefaultValueCode,
              IsEditable,
              AttributeDefaultValue
			  ,DisplayOrder
             )
             EXEC Znode_GetAttributeDefaultValueLocale
                  @PimAttributeId,
                  @LocaleId;


             INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue
                  @PimProductIds,
                  @DefaultAttributeCode,
                  @localeId;

			  INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )

			 SELECT ZPAV.PimProductId ,ZPPAVD.PimAttributeDefaultValueId,'OR_'+ZPA.AttributeCode,ZPA.PimAttributeId
             FROM ZnodePimAttributeValue ZPAV 
			 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
			 INNER JOIN @ProductIdTable TBL ON (TBL.PimProductId = ZPAV.PimProductId )
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAVD ON (ZPPAVD.PimAttributeValueId = ZPAV.PimAttributeValueId  )
			WHERE ZPPAVD.LocaleId = @DefaultLocaleId
			AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@PimAttributeIds,',') SP WHERE Sp.Item = ZPA.PimAttributeId )

             --;WITH Cte_UpdateDefaultAttributeValue
             --     AS (SELECT PimProductId,
             --                AttributeCode,
             --                AttributeValue,
             --                SUBSTRING(
             --                         (
             --                             SELECT ','+TBADV.AttributeDefaultValue
             --                             FROM @TBL_AttributeDefaultValue TBADV
             --                                  INNER JOIN @TBL_AttributeCode TBAC ON(TBADV.PimAttributeId = TBAC.PimAttributeId)
             --                             WHERE TBAC.AttributeCode = TBAD.AttributeCode
             --                                   AND EXISTS
             --                             (
             --                                 SELECT TOP 1 1
             --                                 FROM dbo.split(TBAD.AttributeValue, ',') SP
             --                                 WHERE Sp.item = TBADV.AttributeDefaultValueCode
             --                             )
             --                             FOR XML PATH('')
             --                         ), 2, 4000) AttributeDefaultValue
             --         FROM @TBL_AttributeDetails TBAD)
                  --UPDATE TBAD
                  --  SET
                  --      AttributeValue = CTUDAV.AttributeDefaultValue
                  --FROM @TBL_AttributeDetails TBAD
                  --     INNER JOIN Cte_UpdateDefaultAttributeValue CTUDAV ON(CTUDAV.PimProductId = TBAD.PimProductId
                  --                                                          AND CTUDAV.AttributeCode = TBAD.AttributeCode)
                  --WHERE AttributeDefaultValue IS NOT NULL;

             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );

             INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
			
             --- Update the  product families name locale wise   


			 	;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+dbo.Fn_GetMediaThumbnailMediaPath (zm.PATH) 
			   FROM ZnodeMedia AS ZM
              
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;

		


             UPDATE TBAD
               SET
                   PimProductTypeAssociationId = ZPTA.PimProductTypeAssociationId,
                   DisplayOrder = ZPTA.DisplayOrder
             FROM @TBL_AttributeDetails TBAD
                  INNER JOIN ZnodePimproductTypeAssociation ZPTA ON(ZPTA.PimProductId = TBAD.PimProductId)
             WHERE ZPTA.PimParentProductId = @RelatedProductId;
            
			-- DECLARE @AttributeCode NVARCHAR(4000);
             SET @AttributeCode = SUBSTRING(
                                           (
                                               SELECT DISTINCT
                                                      ','+QUOTENAME(AttributeCode)
                                               FROM @TBL_PimAttributeId
                                               FOR XML PATH('')
                                           ), 2, 4000);
             DECLARE @AttributeCode_Duplicate NVARCHAR(4000)= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  ', Piv.'+QUOTENAME(AttributeCode)
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 1, 4000);
             DECLARE @AttributeCode_Duplicate_Data NVARCHAR(4000);
			 	 
			

			  SET  @AttributeCode_Duplicate_Data= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  'AND Piv.'+QUOTENAME('OR_'+AttributeCode) +'= Isa.'+QUOTENAME(AttributeCode)+' '
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 4, 4000) +' '

            -- SET @AttributeCode_Duplicate_Data = REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000), ',', '+'',''+');
             SELECT PimProductId,
                    AttributeValue,
                    AttributeCode,
                    PimProductTypeAssociationId,
                    DisplayOrder
             INTO #Temp_attribute
             FROM @Tbl_AttributeDetails
             ORDER BY DisplayOrder;
             SELECT *
             INTO #temp_Family
             FROM @FamilyDetails;
             
			 DECLARE @IsSelectedAttributeValue TABLE
             (ProductId      INT,
              AttributeValue NVARCHAR(500),
              AttributeCode  NVARCHAR(500),
              PimAttributeId INT,PimAttributeDefaultValueId INT 
             );

			  
		   DECLARE @IsSelectedAttributeValueLocale TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode NVARCHAR(600),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(max),
			  DisplayOrder   INT 
             );
          

		  -- select @PimProductId ,@AttributeCode ,@LocaleId 
		  ;With Cte_AttributeVAkuestest AS 
		  (
		    SELECT ZPAV.PimAttributeId , ZPPAD.PimAttributeDefaultValueId ,ZPAV.PimProductId
			FROM ZnodePimAttributeVAlue ZPAV 
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAD ON (ZPPAD.PimAttributeValueId = ZPAV.PimAttributeValueId)
			INNER JOIN ZnodePimproductTypeAssociation ZPPTA on ZPAV.PimProductId = ZPPTA.PimProductId and ZPPTA.PimParentProductId = @RelatedProductId 
			WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimAttributeIds,',') SP WHERE SP.Item = ZPAV.PimAttributeId )
			AND EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimProductId,',') SP WHERE SP.Item = ZPAV.PimProductId  or @PimProductId = '0')
		) ,Cte_PimAttributeDefaultValueLocale AS 
		(
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA  
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 
		  UNION 
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA 
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 	
		)
		,Cte_AttributeValueForCode 
		As
		(
		  SELECT AttributeDefaultValue AtributeValue , AttributeCode ,PimProductId ,a.PimAttributeDefaultValueId
		  FROM Cte_PimAttributeDefaultValueLocale a
		  INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = a.PimAttributeId )
		)
			 INSERT INTO @IsSelectedAttributeValue (ProductId,AttributeCode,AttributeValue,PimAttributeDefaultValueId)
             SELECT PimProductId,AttributeCode,AtributeValue,PimAttributeDefaultValueId
			 FROM Cte_AttributeValueForCode
             
			 --INSERT INTO @IsSelectedAttributeValueLocale
    --         EXEC Znode_GetAttributeDefaultValueLocale
    --              @PimAttributeIds,
    --              @LocaleId;
             
			 --UPDATE izav
    --           SET
    --               izav.AttributeValue = isval.AttributeDefaultValue
    --         FROM @IsSelectedAttributeValue izav
    --              INNER JOIN @IsSelectedAttributeValueLocale isval ON izav.AttributeValue = isval.AttributeDefaultValueCode AND izav.PimAttributeId = isval.PimAttributeId ;
             

			 SELECT * 
			 --SUBSTRING(
    --                         (
    --                             SELECT ','+isav.AttributeValue
    --                             FROM @IsSelectedAttributeValue isav
				--				 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ISAV.PimAttributeID )
    --                             WHERE isa.ProductId = isav.ProductId
    --                             ORDER BY ZPA.DisplayOrder DESC
    --                             FOR XML PATH('')
    --                         ), 2, 4000) AttributeValue,
							

             INTO #IsSelectedAttribute
             FROM @IsSelectedAttributeValue isa
			; 
				 
			 IF @IsDebug = 1 
			 BEGIN 
			 SELECT * FROM @IsSelectedAttributeValue izav

			 SELECT * FROM #IsSelectedAttribute

			 END 
             --select * from @IsSelectedAttributeValue
             --select @AttributeCode_Duplicate,@AttributeCode_Duplicate_data
             --select * from #IsSelectedAttribute
			 
             SET @AttributeCode = REPLACE(@AttributeCode, ',[DisplayOrder]', '');
             SET @SQL = '
			     
				 ;with Cte_Getvalue AS (
				 SELECT ProductId , '+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+'
				 FROM ( SELECT ProductId,AttributeCode,PimAttributeDefaultValueId FROM #IsSelectedAttribute gt ) dd 
				 PIVOT ( MAX (PimAttributeDefaultValueId) FOR AttributeCode IN ('+REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000),'Piv.','')+')  ) PIV 
				 )

				SELECT DISTINCT  piv.PimProductTypeAssociationId, zpp.PimProductid ProductId, [ProductName],ProductType ,ISNULL(zf.FamilyName,'''')  AttributeFamily , [SKU]
						  , CASE WHEN [IsActive] IS NULL THEN ''false'' ELSE   [IsActive]  END  [Status],  piv.[ProductImage] ImagePath,[Assortment],DisplayOrder  ,'+CAST(@LocaleId AS VARCHAR(50))+' LocaleId
						  ,DENSE_RANK()Over(Order By'+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+') CombinationId '+@AttributeCode_Duplicate+'
					, CASE When isa.ProductId Is Null then 0 ELSE 1 END IsNonEditableRow,'+ CAST(@RelatedProductId AS VARCHAR(50))+' RelatedProductId
				FROM ZNodePimProduct zpp 
				LEFT JOIN  #temp_Family zf ON (zf.PimProductId = zpp.PimProductId)
				INNER JOIN #Temp_attribute 
				PIVOT 
				(
				Max(AttributeValue) FOR AttributeCode  IN ( '+@AttributeCode+')
				)Piv  
				ON (Piv.PimProductId = zpp.PimProductid) 
				--LEFT JOIN ZnodeMedia zm ON (zm.MediaId = piv.[ProductImage])
				LEFT OUTER JOIN Cte_Getvalue isa ON ('+@AttributeCode_Duplicate_Data+')
				    '+' Order BY '+ISNULL(CASE
                                                  WHEN @Order_BY = ''
                                                  THEN 'DisplayOrder'
                                                  ELSE @Order_BY
                                              END, 'DisplayOrder');
		
	
             -- SELECT '''+SUBSTRINg(REPLACE(@AttributeCode_Duplicate,'Piv.',''),2,4000)+''' Ids
			 
             SELECT AttributeCode
             FROM ZnodePimAttribute ZPA
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM dbo.Split(@PimAttributeIds, ',') SP
                 WHERE SP.Item = ZPA.PimAttributeId
             );
             
			PRINT @SQL
             EXEC SP_executesql
                  @SQL;
        
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END ;

             DROP TABLE #Temp_attribute;
             DROP TABLE #temp_Family;
   
             -- find the all locale values 
         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductListByAttributes @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@PimAttributeIds='+@PimAttributeIds+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@RelatedProductId='+CAST(@RelatedProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductListByAttributes',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


if exists(select * from sys.procedures where name = 'Znode_SaveSeoDetails')
	drop proc Znode_SaveSeoDetails
go


CREATE PROCEDURE Znode_SaveSeoDetails
(
	@CMSSEODetailId INT = 0,
	@CMSSEOTypeId INT = 0,
	@IsAllStore BIT = 0,
	@LocaleId INT = 0,
	@PimProductId INT = 0,
	@PortalId INT = 0,
	@SEODescription NVARCHAR(max) = null,
	@SEOId INT = 0,
	@SEOKeywords NVARCHAR(MAX) = NULL,
	@SEOTitle NVARCHAR(MAX) = NULL,
	@SEOUrl NVARCHAR(MAX)= NULL,
	@IsRedirect BIT = NULL,
	@IsPublish BIT = NULL,
	@CreatedBy NVARCHAR(200)=null,
	@ModifiedBy NVARCHAR(200) = null
)
AS 
BEGIN
IF(@IsAllStore = 'false')
BEGIN
IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetail WHERE CMSSEODetailId =@CMSSEODetailId)
BEGIN
	INSERT INTO ZnodeCMSSEODetail(
									CMSSEOTypeId,
									SEOId,
									IsRedirect,
									PortalId,
									SEOUrl,
									CreatedBy,
									CreatedDate,
									IsPublish
								)
					VALUES
								(
									@CMSSEOTypeId,
									@SEOId,
									@IsRedirect,
									@PortalId,
									@SEOUrl,
									@CreatedBy,
									GETDATE(),
									@IsPublish
								)
							SET @CMSSEODetailId	=(SELECT SCOPE_IDENTITY())
END
ELSE
BEGIN
			UPDATE ZnodeCMSSEODetail SET
									CMSSEOTypeId=@CMSSEOTypeId,
									SEOId=@SEOId,
									IsRedirect=@IsRedirect,
									PortalId=@PortalId,
									SEOUrl=@SEOUrl,
									ModifiedBy=@ModifiedBy,
									ModifiedDate=GETDATE(),
									IsPublish= @IsPublish
				WHERE CMSSEODetailId= @CMSSEODetailId
									
END
IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetailLocale WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId =@LocaleId)
BEGIN
	INSERT INTO [dbo].[ZnodeCMSSEODetailLocale]
           ([CMSSEODetailId]
           ,[LocaleId]
           ,[SEOTitle]
           ,[SEODescription]
           ,[SEOKeywords]
           ,[CreatedBy]
           ,[CreatedDate])
     VALUES
           (
			@CMSSEODetailId
           ,@LocaleId
           ,@SEOTitle
           ,@SEODescription
           ,@SEOKeywords
           ,@CreatedBy
           ,GETDATE())
END
ELSE
begin
	UPDATE [dbo].[ZnodeCMSSEODetailLocale]
   SET [CMSSEODetailId] = @CMSSEODetailId
      ,[LocaleId] = @LocaleId
      ,[SEOTitle] = @SEOTitle
      ,[SEODescription] = @SEODescription
      ,[SEOKeywords] = @SEOKeywords
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedDate] = GETDATE()
 WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId=@LocaleId
END
END
ELSE
BEGIN
DECLARE @PortalIds table
(
    RowId				INT IDENTITY(1,1), 
    PortalId			INT
)

INSERT INTO @PortalIds (PortalId) SELECT PortalId FROM ZnodePortal
--*/

DECLARE @maxRowPortalId INT= (SELECT MAX(RowId) FROM @PortalIds)
DECLARE @RowPortalId int = 1

WHILE @RowPortalId <= @maxRowPortalId
BEGIN

    SET @PortalId = (SELECT PortalId FROM @PortalIds WHERE RowId = @RowPortalId)

	DECLARE @CMSSEODetailIds table
	(
		RowId				INT IDENTITY(1,1), 
		CMSSEODetailId			INT
	)
	INSERT INTO @CMSSEODetailIds (CMSSEODetailId) SELECT CMSSEODetailId FROM ZnodeCMSSEODetail where PortalId=@PortalId and SEOId =@SEOId
	DECLARE @maxRowSEODetailId INT= (SELECT MAX(RowId) FROM @CMSSEODetailIds)
	DECLARE @RowSEODetailId int = 1
	WHILE @RowSEODetailId <= @maxRowSEODetailId
	BEGIN
		SET @CMSSEODetailId  =(SELECT CMSSEODetailId FROM @CMSSEODetailIds WHERE RowId = @RowSEODetailId)
		IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetail WHERE CMSSEODetailId =@CMSSEODetailId)
BEGIN
	INSERT INTO ZnodeCMSSEODetail(
									CMSSEOTypeId,
									SEOId,
									IsRedirect,
									PortalId,
									SEOUrl,
									CreatedBy,
									CreatedDate,
									IsPublish
								)
					VALUES
								(
									@CMSSEOTypeId,
									@SEOId,
									@IsRedirect,
									@PortalId,
									@SEOUrl,
									@CreatedBy,
									GETDATE(),
									@IsPublish
								)
							SET @CMSSEODetailId	=(SELECT SCOPE_IDENTITY())
END
ELSE
BEGIN
			UPDATE ZnodeCMSSEODetail SET
									CMSSEOTypeId=@CMSSEOTypeId,
									SEOId=@SEOId,
									IsRedirect=@IsRedirect,
									PortalId=@PortalId,
									SEOUrl=@SEOUrl,
									ModifiedBy=@ModifiedBy,
									ModifiedDate=GETDATE(),
									IsPublish= @IsPublish
				WHERE CMSSEODetailId= @CMSSEODetailId
									
END
		IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetailLocale WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId =@LocaleId)
BEGIN
	INSERT INTO [dbo].[ZnodeCMSSEODetailLocale]
           ([CMSSEODetailId]
           ,[LocaleId]
           ,[SEOTitle]
           ,[SEODescription]
           ,[SEOKeywords]
           ,[CreatedBy]
           ,[CreatedDate])
     VALUES
           (
			@CMSSEODetailId
           ,@LocaleId
           ,@SEOTitle
           ,@SEODescription
           ,@SEOKeywords
           ,@CreatedBy
           ,GETDATE())
END
ELSE
begin
	UPDATE [dbo].[ZnodeCMSSEODetailLocale]
   SET [CMSSEODetailId] = @CMSSEODetailId
      ,[LocaleId] = @LocaleId
      ,[SEOTitle] = @SEOTitle
      ,[SEODescription] = @SEODescription
      ,[SEOKeywords] = @SEOKeywords
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedDate] = GETDATE()
 WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId=@LocaleId
END
		SET @RowSEODetailId =@RowSEODetailId +1
	END

    SELECT @RowPortalId = @RowPortalId + 1
End
END
END
GO

insert into ZnodeMediaConfiguration 
(Server,AccessKey,SecretKey,URL,BucketName,Custom1,Custom2,Custom3,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Network Drive','',	'' ,'','Data/Media',NULL,NULL,NULL,0,2,GETDATE(),2 ,GETDATE()
where not exists(select * from ZnodeMediaConfiguration where Server = 'Network Drive' )

go




IF  EXISTS (SELECT TOP 1  1 FROM sys.procedures WHERE name = 'Znode_GetPublishCategoryProducts' )
 drop proc Znode_GetPublishCategoryProducts
 GO

CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
( @pimCatalogId int = 0,@pimCategoryHierarchyId int = 0,@userId int,@versionId int= 0,@status int = 0 OUT,@isDebug bit = 0  )  AS  /*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	EXEC [Znode_GetPublishCategoryProducts]   
	@PimCatalogId = 3 
	, @PimCategoryHierarchyId = 153 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	Select @Status  

 */
	BEGIN   
		BEGIN TRY
			SET NOCOUNT ON;
			DECLARE @tBL_PublishIds table (PublishProductId int,PimProductId int,PublishCatalogId int)
			DECLARE @publishCatalogId int= isnull((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @pimCatalogId),0),@publishCataloglogId int= 0;
			DECLARE @tBL_CategoryCategoryHierarchyIds table (CategoryId int,ParentCategoryId int )
			DECLARE @pimProductId TransferId
			DECLARE @insertPublishProductIds table (PublishProductId int,PimProductId int,PublishCatalogId int )
			--DECLARE @TBL_CategoryXml TABLE ( CategoryXml XML);
				SELECT @versionId = max(PublishCataloglogId)
			FROM ZnodePublishCatalogLog 
			WHERE PublishCatalogId =@publishCatalogId
			INSERT INTO @tBL_CategoryCategoryHierarchyIds(CategoryId,ParentCategoryId ) SELECT DISTINCT PimCategoryId,NULL FROM ( SELECT PimCategoryId,ParentPimCategoryId FROM DBO.[Fn_GetRecurciveCategoryIds](@pimCategoryHierarchyId,@pimCatalogId) UNION SELECT PimCategoryId,NULL FROM ZnodePimCategoryHierarchy WHERE PimCategoryHierarchyId = @pimCategoryHierarchyId UNION SELECT PimCategoryId,NULL FROM [Fn_GetRecurciveCategoryIds_new] (@pimCategoryHierarchyId,@pimCatalogId) ) Category
			IF (isnull(@publishCatalogId,0) = 0 ) 
				BEGIN 
					SET @status = 1
					-- Catalog Not Published 
					RETURN 0;
				END

			-- Any other catalog was in process dont intitiate category publish	
			If Exists ( SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL  )
			Begin
					SET @status = 2
					RETURN 0;
			End

			--IF EXISTS (SELECT CategoryId FROM @TBL_CategoryCategoryHierarchyIds where CategoryId is not null AND CategoryId not in (select PimCategoryId  from ZnodePublishCategory
				--where PublishCatalogId = ISnull(@PublishCatalogId,0) and PimCategoryHierarchyId = @PimCategoryHierarchyId  ))
				--Begin
				--SET @Status = 2  -- Category / subcategory Not Publish 
				--insert into @TBL_CategoryXml (CategoryXml) 
				EXEC [Znode_GetPublishCategoryGroup] @publishCatalogId = @publishCatalogId,@versionId = 0,@userId =2,@isDebug = 1,@pimCategoryHierarchyId = @pimCategoryHierarchyId
			--END 
			BEGIN 
				INSERT INTO @insertPublishProductIds EXEC [Dbo].[Znode_InsertPublishProductIds] @publishCatalogId = @publishCatalogId,@userid = @userid,@pimProductId = @pimProductId,@pimCategoryHierarchyId = @pimCategoryHierarchyId
				INSERT INTO @pimProductId SELECT PimProductId FROM @insertPublishProductIds

				EXEC [Dbo].[Znode_GetPublishProductbulk] @publishCatalogId = @publishCatalogId,@versionId = @versionId,@pimProductId = @pimProductId,@userid = @userid,@pimCategoryHierarchyId = @pimCategoryHierarchyId,@pimCatalogId = @pimCatalogId
				UPDATE ZnodePimProduct 		SET IsProductPublish = 1 			WHERE EXISTS (SELECT TOP 1 1 
					FROM ZnodePublishProduct ZPP
					WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
						AND ZPP.PublishCatalogId = @publishCatalogId
					)
			END
			DECLARE @tBL_PublishCatalogId table(PublishCatalogId int,PublishProductId int,PublishCategoryId int,PimProductId int,VersionId int );
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId )  
			SELECT DISTINCT ZPC.PublishCatalogId,ZPX.PublishedId PublishProductId,ZPX.PublishCategoryId,ZPP.PimProductId,ZPX.PublishCatalogLogId FROM ZnodePublishCategory ZPC INNER JOIN @tBL_CategoryCategoryHierarchyIds CTC ON ZPC.PimCategoryId = CTC .CategoryId INNER JOIN ZnodePublishedXml ZPX ON ZPC.PublishCategoryId = ZPX.PublishCategoryId INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId AND ZPX.PublishedId = ZPP.PublishProductId WHERE ZPC.PublishCatalogId = @publishCatalogId AND ZPX.PublishCatalogLogId = @versionId
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId ) 
			SELECT IPP.PublishCatalogId,IPP.PublishProductId,0,IPP.PimProductId,@versionId FROM @insertPublishProductIds IPP 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @tBL_PublishCatalogId PCI WHERE IPP.PublishProductId = PCI.PublishProductId)
			
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1,PublishProductId = (SELECT count(PublishProductId) FROM ZnodePublishProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId ) 
			WHERE PublishCatalogLogId = @versionId 
				AND @versionId <> 0
			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 
				FROM @tBL_PublishCatalogId ZPP
				WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId
				)
			--END
				--if isnull(@Status,0) <>  2   
				--Begin
				--	Select  NULL PublishCategoryId  where 1= 0 
				--	SELECT  NULL 'CategoryXml' where 1= 0 
				--End
				SELECT PublishCatalogId
					,PublishProductId
					,PublishCategoryId
					,VersionId
			FROM @tBL_PublishCatalogId
		END TRY
		BEGIN CATCH
			SELECT error_message()
				,error_procedure();
			UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			WHERE PublishCatalogLogId = @versionId
			SET @status = 0;
			DECLARE @error_procedure varchar(1000)= error_procedure(),@errorMessage nvarchar(max)= error_message(),@errorLine varchar(100)= error_line(),@errorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+cast(@pimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@pimCategoryHierarchyId+',@UserId='+cast(@userId AS varchar(50))+',@UserId = '+cast(@userId AS varchar(50))+',@VersionId='+cast(@versionId AS varchar(50))+',@Status='+cast(@status AS varchar(10));
			SELECT 0 AS ID
				,cast(0 AS bit) AS Status;
			ROLLBACK TRAN GetPublishProducts;
			EXEC Znode_InsertProcedureErrorLog @procedureName = 'Znode_GetPublishCategoryProducts',@errorInProcedure = @error_procedure,@errorMessage = @errorMessage,@errorLine = @errorLine,@errorCall = @errorCall;
		END CATCH;
		END;
GO


IF  EXISTS (SELECT TOP 1  1 FROM sys.procedures WHERE name = 'Znode_GetPublishProductbulk' )
 drop proc Znode_GetPublishProductbulk
 GO
 CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk 5, 0 , '' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

  --DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )

   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DELETE FROM #PimProductAttributeXML
   END

   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   Declare @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 
 --DECLARE #TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int  )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,@versionId ,ZPC.PublishCategoryId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and  
				 ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )
			SELECT DISTINCT @publishCatalogId,ZPP.PublishProductId,PimProductId,@versionId,NULL 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) WHERE
				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)


  END
  ELSE 
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
											MAX(PublishCatalogLogId) ELSE @versionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

WHILE @Counter <= @maxCountId
BEGIN
 
  SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO @PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       

	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) from #TBL_AttributeVAlue b where a.PimProductId=b.PimProductId and a.PimAttributeId = b.PimAttributeId )
	 from #TBL_AttributeVAlue a

	 --select * from #TBL_AttributeVAlue
	 --return
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 create table #Cte_GetData (PimProductId int,AttributeCode varchar(600),AttributeValue nvarchar(max))

 create index idx_#Cte_GetDataPimProductId on #Cte_GetData(PimProductId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
where a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
--INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId AND CTE.LocaleId  = CASE WHEN cte.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )

--insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
--SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue                 
--FROM ZnodePimAttributeValue  a 
--INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
--INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
--INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
--WHERE ZPA.IsPersonalizable = 1 
--AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
--and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

	 

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)


insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
where exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

--  --CREATE INDEX IND_Znode

  DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId = @versionId AND IsProductXML = 1   AND LocaleId = @LocaleId 

--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		IF OBJECT_ID('tempdb..#Index') is not null
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		insert into  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		Select CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
  		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST(Isnull((select RowIndex from #Index WHERE PublishProductId = zpp.PublishProductId
								AND PublishCategoryId = ZPCP.PublishCategoryId ) ,0)
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
	--	AND ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )
  END
  ELSE
  BEGIN
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
END 
 


--DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
SET @Counter = @counter + 1 
END 

END
GO

IF  EXISTS (SELECT TOP 1  1 FROM sys.procedures WHERE name = 'Znode_GetPublishSingleProduct' )
 drop proc Znode_GetPublishSingleProduct
 GO

CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	

)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
			 MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )



	

WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO @TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO @TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_AttributeValue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  @TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM @TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId



 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  @TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1


 

  
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT zpp.PublishProductId,zpp.VersionId ,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					FROM ZnodeProfileCatalog ZPFC 
					INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
					WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
FROM  @TBL_PublishCatalogId zpp
INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
WHERE ZPPDFG.LocaleId = @LocaleId
) SOURCE 
ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

DELETE FROM @TBL_ZnodeTempPublish

DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
DELETE FROM @TBL_AttributeValue 

SET @Counter = @counter + 1 
END 

END
GO

update ZA SET ZA.StateName  =  ZS.StateCode from ZnodeAddress ZA Inner join ZnodeState ZS ON ZA.StateName  = ZS.StateName 


GO
 IF EXISTS (SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeFormBuilder' AND COLUMN_NAME = 'IsShowCaptcha')
 BEGIN 
  IF EXISTS (select TOP 1 1 from sys.default_constraints a
	inner join INFORMATION_SCHEMA.columns b on a.parent_column_id = b.ORDINAL_POSITION and object_name(parent_object_id) = b.TABLE_NAME
	where object_name(parent_object_id) = 'ZnodeFormBuilder' and b.COLUMN_NAME = 'IsShowCaptcha')
	BEGIN 

	DECLARE @DefaultContraintZnodeFormBuilder varchar(500) ,@SQLZnodeFormBuilder VARCHAR(1000)

	select @DefaultContraintZnodeFormBuilder = a.name from sys.default_constraints a
	inner join INFORMATION_SCHEMA.columns b on a.parent_column_id = b.ORDINAL_POSITION and object_name(parent_object_id) = b.TABLE_NAME
	where object_name(parent_object_id) = 'ZnodeFormBuilder' and b.COLUMN_NAME = 'IsShowCaptcha'


	SET @SQLZnodeFormBuilder ='
	ALTER TABLE ZnodeFormBuilder DROP CONSTRAINT '+ @DefaultContraintZnodeFormBuilder 

	EXEC (@SQLZnodeFormBuilder)

	END

	ALTER TABLE ZnodeFormBuilder DROP COLUMN  IsShowCaptcha
 end

 go

 update ZnodeSearchQueryType set DisplayOrder = 1 where QueryTypeName = 'Match Phrase Prefix'

update ZnodeSearchQueryType set DisplayOrder = 2 where QueryTypeName = 'Match'

update ZnodeSearchQueryType set DisplayOrder = 3 where QueryTypeName = 'Match Phrase'

update ZnodeSearchQueryType set DisplayOrder = 4 where QueryTypeName = 'Match Phrase'

update ZnodeSearchQueryType set DisplayOrder = 5 where QueryTypeName = 'Best'

update ZnodeSearchQueryType set DisplayOrder = 6 where QueryTypeName = 'Cross'

go

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null ,'WebSite','RemoveAssociatedBrands',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'RemoveAssociatedBrands')


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null ,'Content','IsContentPageNameExist',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Content' and ActionName = 'IsContentPageNameExist')

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName = 'IsContentPageNameExist')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName = 'IsContentPageNameExist'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
 (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName= 'IsContentPageNameExist')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
 (select MenuId from ZnodeMenu where MenuName = 'Content Pages' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Content' and ActionName = 'IsContentPageNameExist'))


GO


IF EXISTS (SELECT TOP 1 1 FROM ZnodeApplicationSetting WHERE itemName = 'View_GetManageMessageList')
BEGIN
UPDATE ZnodeApplicationSetting
SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>CMSPortalMessageId</name>
		<headertext>Checkbox</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>Int32</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>CMSMessageId</name>
		<headertext>CMSMessageId</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>y</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>Location</name>
		<headertext>Message Key</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>Message</name>
		<headertext>Message</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>StoreName</name>
		<headertext>Store Name</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>MessageTag</name>
		<headertext>Message Tag</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>PublishStatus</name>
		<headertext>Publish Status</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>IsPublished</name>
		<headertext>Status</headertext>
		<width>0</width>
		<datatype>Boolean</datatype>
		<columntype>Boolean</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>y</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit|Delete|Publish</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit|Delete|Publish</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/Content/UpdateManageMessage|/Content/DeleteManageMessage|/Content/PublishManageMessage</manageactionurl>
		<manageparamfield>cmsMessageKeyId,portalId,localeId|cmsPortalMessageId|cmsMessageId,localeId,portalId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>' 
where itemname = 'View_GetManageMessageList'
END

GO


IF EXISTS ( SELECT count(Domainid) as dup_count,Domainname from ZnodeDomain group by Domainname having count(Domainid) > 1 )
BEGIN 

DECLARE @ZnodeDomainDuplicate TABLE ( DuplicateDomainname  nvarchar(200) )

INSERT INTO @ZnodeDomainDuplicate ( DuplicateDomainname )
select DISTINCT Domainname from ZnodeDomain group by Domainname having count(Domainid) > 1

SELECT 'Duplicate entry' as DuplicateEntry, * FROM @ZnodeDomainDuplicate

END
ELSE IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeDomain' AND COLUMN_NAME = 'DomainName')
BEGIN 
	declare @sql3 varchar(1000)
	set @sql3 = N' 
	ALTER TABLE ZnodeDomain ADD CONSTRAINT [UC_ZnodeDomain_DomainName] UNIQUE NONCLUSTERED ([DomainName] ASC)'
	exec (@sql3)
end

GO
IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeAddress' AND COLUMN_NAME = 'StateName')
BEGIN
ALTER TABLE ZnodeAddress Alter column StateName VARCHAR(3000) NULL
END

------------------------------------------------------------------------------------------------------for 18th may upgrade latest changes --------------------------------------------------------------------------------

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemQuantity')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemQuantity
END 
GO 
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@IsCallFromPDP BIT, @Status bit OUT)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem_aa @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
	1259
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @SaveCartLineItemIdForGroup int= 0;
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int IDENTITY(1, 1), OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute varchar(max), 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails )
			   SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ) AS BundleProductIds, Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ) AS ConfigurableProductIds, Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, 
			          Tbl.Col.value( 'PersonaliseValuesList[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

		DECLARE @OmsSavedCartId int, @OmsSavedCartLineItemId int,@OmsOrderId int;

	
		DECLARE @TBL_AllProductsTypeData TABLE
		( 
			 RowId int, SequenceId int IDENTITY(1, 1), ParentOmsSavedCartLineItemId int, SKU nvarchar(1000), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), CartAddOnDetails nvarchar(max), AutoAddon varchar(max), OmsOrderId int null ,IsFromAddon INT 
		);
		DECLARE @AddonProductSKU nvarchar(max)=	(SELECT TOP 1 AddOnValueIds	FROM @TBL_SavecartLineitems	), 
				@BundleProductSKU nvarchar(max)= (SELECT TOP 1 BundleProductIds	FROM @TBL_SavecartLineitems	);
		SET @OmsSavedCartId =( SELECT TOP 1 OmsSavedCartId FROM @TBL_SavecartLineitems);
		SET @OmsOrderId =( SELECT TOP 1 OmsOrderId FROM @TBL_SavecartLineitems );
		
		--IF EXISTS
		--(
		--	SELECT TOP 1 1
		--	FROM ZnodeOmsSavedCartLineItem AS qa
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM @TBL_SavecartLineitems AS ssds
		--		WHERE ssds.sku = qa.SKU
		--	)
		--)
		--BEGIN
		--	DELETE FROM ZnodeOmsPersonalizeCartItem
		--	WHERE EXISTS
		--	(
		--		SELECT TOP 1 1
		--		FROM ZnodeOmsSavedCartLineItem
		--		WHERE OmsSavedCartId = @OmsSavedCartId AND 
		--			  OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId
		--	);
		
		--	IF EXISTS (SELECT * FROM @TBL_SavecartLineitems WHERE ItemDetails is not null)
		--	BEGIN 
		--		DELETE ZnodeOmsSavedCartLineItemDetails
		--		WHERE EXISTS
		--		( 
		--			SELECT * FROM ZnodeOmsSavedCartLineItem SCLI
		--			WHERE ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND SCLI.OmsSavedCartId = @OmsSavedCartId AND SCLI.OmsOrderId = @OmsOrderId	
		--		)
		--    END

		--	DELETE FROM ZnodeOmsSavedCartLineItem 
		--	WHERE OmsSavedCartId = @OmsSavedCartId AND OmsOrderId = @OmsOrderId									

		--END;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.BundleProductIds, ',' ) AS q
			   WHERE a.BundleProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> '' ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.ConfigurableProductIds, ',' ) AS q
			   WHERE a.ConfigurableProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
			   ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT RowID, NULL, SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS SKU, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.GroupProductIds, ',' ) AS q
			   WHERE a.GroupProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))) <> ''
			   ;

		IF EXISTS
		(
			SELECT TOP 1 1	FROM @TBL_SavecartLineitems	WHERE GroupProductIds IS NOT NULL OR  ConfigurableProductIds IS NOT NULL
		)
		BEGIN
			SET @AddOnQuantity =(SELECT MAX(Quantity) FROM @TBL_AllProductsTypeData	);
		END;


		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT a.RowID, NULL, q.Item AS SKU,
											   CASE
											   WHEN @AddOnQuantity = 0 THEN a.Quantity
											   ELSE @AddOnQuantity
											   END, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.AddOnValueIds, ',' ) AS q   WHERE a.AddOnValueIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
	DECLARE @Tbl_SaveCartIds TABLE
		( 
			OmsSavedCartLineItemId int, SKU nvarchar(max), RowId int,ParentOmsSavedCartLineItemId INT 
		);

	DECLARE @IsCallForUpdate BIT = 0 
	DECLARE @saveCartLineItemId TABLE (OmsSavedCartLineItemId INT,SKU NVARCHAR(2000),OmsSavedCartId INT,ChildSKU NVARCHAR(max), Sequence INT ,RowId INT Identity(1,1) )

	-- for group,bundle and configure products
	INSERT INTO @saveCartLineItemId (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,YU.SKU ,YU.Sequence 
	FROM ZnodeOmsSavedCartLineItem CLI 
																INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
																INNER JOIN ZnodeOmsSavedCartLineItem   YU ON (Yu.ParentOmsSavedCartLineItemId = CLI.OmsSavedCartLineItemId)
																INNER JOIN  @TBL_AllProductsTypeData tbad ON (tbad.SKU = YU.SKU )
	 WHERE CLI.ParentOmsSavedCartLineItemId IS NULL 
	

	-- for simple products
	INSERT INTO @SaveCartLineItemId  (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,NULL ,CLI.Sequence  
	FROM ZnodeOmsSavedCartLineItem CLI 
	INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId AND CLI.Sequence  = s.Sequence )
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )	
	AND CLI.ParentOmsSavedCartLineItemId IS NULL												
	

	


	  IF @IsCallFromPDP = 1 AND EXISTS (SELECT TOP  1 1 FROM @TBL_SavecartLineitems WHERE PersonalisedAttribute IS NOT NULL)
	BEGIN
	
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId   m
								CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL), ',' ) AS q
								WHERE  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) 
																																						   AND s.PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000))
																																		 
		)	THEN 0 ELSE 1 END
	END

	ELSE IF @IsCallFromPDP = 1
		BEGIN
		
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId --a inner join @TBL_SavecartLineitems s on (a.sku = s.sku) where s.PersonalisedAttribute is null
		)	THEN 0 ELSE 1 END

		END



	   UPDATE SI
		 SET  OmsSavedCartLineItemId = CASE WHEN HJRHRH.OmsSavedCartLineItemId IS NULL THEN  SL.OmsSavedCartLineItemId ELSE HJRHRH.OmsSavedCartLineItemId END 
		      ,Sequence = CASE WHEN HJRHRH.Sequence IS NULL THEN  SI.Sequence ELSE HJRHRH.Sequence END 
		 FROM @TBL_SavecartLineitems SI
		 LEFT JOIN ZnodeOmsSavedCartLineItem SL ON (SI.SKU = SL.SKU AND SI.OmsSavedCartId = SL.OmsSavedCartId AND SI.Sequence = SL.Sequence )
		 LEFT JOIN 	@saveCartLineItemId HJRHRH ON (SI.SKU = HJRHRH.SKU AND SI.OmsSavedCartId = HJRHRH.OmsSavedCartId  AND SI.Sequence = HJRHRH.RowId )
				
		 


		MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING  (SELECT  DISTINCT  ISNULL(SI.OmsSavedCartLineItemId,-1) AS OmsSavedCartLineItemId,SI.SKU,SI.Quantity,SI.OrderLineItemRelationshipTypeID,SI.CustomText,SI.CartAddOnDetails,SI.Sequence,SI.AutoAddon,SI.RowID,SI.OmsOrderId 
		FROM @TBL_SavecartLineitems SI 
		WHERE (EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY WHERE TY.OmsSavedCartLineItemId = SI.OmsSavedCartLineItemId ))
		 OR (@IsCallFromPDP = 1 AND NOT EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY ))) SOURCE 
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND SOURCE.OmsSavedCartLineItemId = TARGET.OmsSavedCartLineItemId AND @IsCallForUpdate = 0
		WHEN MATCHED   THEN
		UPDATE 
		SET   Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = CASE	 WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE Source.OrderLineItemRelationshipTypeID
																		 END, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.Sequence,OmsOrderId = @OmsOrderId,TARGET.AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
																		
		WHEN NOT MATCHED  
			  THEN INSERT(ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  VALUES( NULL, @OmsSavedCartId, Source.SKU, Source.Quantity,CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE OrderLineItemRelationshipTypeID
																		 END, 
					 Source.CustomText, Source.CartAddOnDetails, Source.Sequence, SOURCE.OmsOrderId, SOURCE.AutoAddon, @UserId, @GetDate, @UserId, @GetDate )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
		INTO @Tbl_SaveCartIds;
		 	
		

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_SavecartLineitems TSCLI ON TSCI.SKU = TSCLI.SKU AND TSCLI.RowID = TSCLI.RowID
			CROSS APPLY dbo.split ( ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )

		

		

		IF EXISTS (SELECT TOP 1  1  FROM @TBL_AllProductsTypeData )
		BEGIN 
        MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING ( SELECT b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
																		CASE
																		WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
																		ELSE OrderLineItemRelationshipTypeID
																		END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon,@UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate, a.RowId
			   FROM @TBL_AllProductsTypeData AS a
					INNER JOIN
					@Tbl_SaveCartIds AS b
					ON(a.RowId = b.RowId)
			   WHERE a.SKU IS NOT NULL AND 
					 a.SKU <> '') SOURCE
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND @IsCallForUpdate = 0 AND Target.ParentOmsSavedCartLineItemId = source.OmsSavedCartLineItemId
		WHEN MATCHED THEN
		UPDATE 
		SET ParentOmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId  , Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = 	Source.OrderLineItemRelationshipTypeID, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.SequenceId,OmsOrderId = SOURCE.OmsOrderId,AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate


		WHEN NOT MATCHED
			  THEN INSERT ( ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, [Sequence], OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )

			  VALUES (SOURCE.OmsSavedCartLineItemId,SOURCE.OmsSavedCartId,SOURCE.SKU,SOURCE.Quantity,SOURCE.OrderLineItemRelationshipTypeID , SOURCE.CustomText,
			  SOURCE.CartAddOnDetails,SOURCE.SequenceId,SOURCE.OmsOrderId,SOURCE.AutoAddon,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy, SOURCE.ModifiedDate
			  
			  )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
			   INTO @Tbl_SaveCartIds;
			   
		 END 

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_AllProductsTypeData BAR ON ( TSCI.SKU = BAR.SKU AND BAR.RowID = TSCI.RowID )
			INNER JOIN @TBL_SavecartLineitems TSCLI ON (BAR.SKU = TSCLI.SKU AND BAR.RowID = TSCLI.RowID )
			CROSS APPLY dbo.split ( TSCLI.ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )
		

			DECLARE @TBL_SaveCartConfigProduct TABLE (OmsSavedCartLineItemId INT, SKU VARCHAR(2000),RowId INT, PersonalisedAttribute NVARCHAr(max))
			    INSERT @TBL_SaveCartConfigProduct    
			    SELECT DISTINCT    ZOSCL.OmsSavedCartLineItemId   ,ZOSCL.SKU 
				,  ZOSCL.RowId , (SELECT TOP 1 PersonalisedAttribute FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID )  PersonalisedAttribute
				FROM @Tbl_SaveCartIds AS ZOSCL
				LEFT JOIN @TBL_AllProductsTypeData AS TBBR ON (ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId  )
				WHERE ( EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
				OR   EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData TRT WHERE SKU <> ''  AND IsFromAddon <> 1  AND TRT.RowID = ZOSCl.RowID   ) )
				AND ((ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId) OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData RTR WHERE SKU <> '' AND IsFromAddon <> 1   AND RTR.RowID = ZOSCl.RowID) 
				
				)
			

		INSERT INTO ZnodeOmsPersonalizeCartItem( OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT DISTINCT 
			   b.OmsSavedCartLineItemId 
			  , SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS Keyi, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Value, @UserId, @GetDate, @UserId, @GetDate
			   FROM @Tbl_SaveCartIds m  
			   LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			   CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			   WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) 
																																		   AND s.PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000))
			   ;



	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItemQuantity @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItemQuantity', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO



IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSearchProfileTrigger')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSearchProfileTrigger
END 
GO 

CREATE  PROCEDURE [dbo].[Znode_InsertUpdateSearchProfileTrigger]
(   @SearchProfileId       int,
    @KeywordList SelectColumnList readonly ,
    @UserProfileList TransferId readonly ,
    @UserId                INT  ,
	@IsConfirmation  bit=0)
AS 
   /* 	*/
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate(),@PublishCatalogSearchProfileId int ,@Status bit =0
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY

		 DECLARE @TBL_FilteredTrigger TABLE (Keyword nvarchar(2000),UserProfileId INT)

		-- fetch catalogid of SearchProfileId passed as parameter
		SET @PublishCatalogSearchProfileId = 
		(SELECT PublishCatalogId FROM  ZnodePublishCatalogSearchProfile a
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchProfile b where  a.SearchProfileId = b.SearchProfileId and  a.SearchProfileId = @SearchProfileId ) )


		-- fetch trigger 
		INSERT INTO @TBL_FilteredTrigger(Keyword,UserProfileId)
		SELECT Keyword,UserProfileId FROM ZnodeSearchProfileTrigger c
		WHERE EXISTS (select TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b where a.SearchProfileId = b.SearchProfileId and b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = c.SearchProfileId)


		If EXISTS (Select 1 FROM @KeywordList ) AND  EXISTS (SELECT 1 FROM @UserProfileList )  
		 BEGIN
		 
			IF EXISTS (SELECT 1 FROM @KeywordList KL   CROSS JOIN @UserProfileList UPL
			INNER JOIN  @TBL_FilteredTrigger ss on KL.[StringColumn]=ss.Keyword  and UPL.Id=ss.UserProfileId )
			AND @IsConfirmation=0
				BEGIN
					SET @Status=0
				END
			ELSE 
				BEGIN
					SET @Status=1
				END  
		    IF @Status=1
				BEGIN
					INSERT INTO [dbo].ZnodeSearchProfileTrigger([SearchProfileId],Keyword,UserProfileId,[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
					Select @SearchProfileId,KL.[StringColumn] ,UPL.Id,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
					FROM @KeywordList KL   
					CROSS JOIN @UserProfileList UPL
					WHERE NOT EXISTS(SELECT 1 FROM ZnodeSearchProfileTrigger ss WHERE KL.[StringColumn]=ss.Keyword  and UPL.Id=ss.UserProfileId and ss.SearchProfileId = @SearchProfileId)
					AND @IsConfirmation=0


					UPDATE ss
					Set SS.SearchProfileId=@SearchProfileId,ss.ModifiedBy=@UserId,ss.ModifiedDate=@GetDate
					FROM  @KeywordList KL   
					CROSS JOIN @UserProfileList UPL 
					INNER JOIN ZnodeSearchProfileTrigger ss on  KL.[StringColumn]=ss.Keyword and UPL.Id=ss.UserProfileId 
					WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS 
																				(SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b WHERE a.SearchProfileId = b.SearchProfileId AND b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = ss.SearchProfileId)


				ENd
		 End
		 ELSE If EXISTS (Select 1 FROM @KeywordList ) AND  NOT EXISTS (Select 1 FROM @UserProfileList )  
			BEGIN
				IF EXISTS (Select 1 FROM @KeywordList KL   INNER JOIN  @TBL_FilteredTrigger ss on KL.[StringColumn]=ss.Keyword  AND ss.UserProfileId IS NULL)
				AND @IsConfirmation=0
					BEGIN
						SET @Status=0
					END
				ELSE 
					BEGIN
						SET @Status=1
					END 
				IF @Status=1
					Begin
						INSERT INTO [dbo].ZnodeSearchProfileTrigger
						([SearchProfileId],Keyword,[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
						Select @SearchProfileId,KL.[StringColumn] ,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
						FROM @KeywordList KL  
						WHERE  NOT EXISTS(SELECT 1 FROM ZnodeSearchProfileTrigger ss Where KL.[StringColumn]=ss.Keyword AND ss.UserProfileId IS NULL AND ss.SearchProfileId = @SearchProfileId )
						AND @IsConfirmation=0

						UPDATE ss
						Set SS.SearchProfileId=@SearchProfileId,ss.ModifiedBy=@UserId,ss.ModifiedDate=@GetDate
						FROM  @KeywordList KL 
						INNER JOIN ZnodeSearchProfileTrigger ss on  KL.[StringColumn]=ss.Keyword and ss.UserProfileId IS NULL 
						WHERE EXISTS (select TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS 
																			(SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b where a.SearchProfileId = b.SearchProfileId and b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = ss.SearchProfileId)

					END
			 END
		 ELSE IF NOT EXISTS (SELECT 1 FROM @KeywordList ) AND   EXISTS (SELECT 1 FROM @UserProfileList )  
			Begin
		
				IF EXISTS (SELECT 1 FROM @UserProfileList UPL INNER JOIN  @TBL_FilteredTrigger ss on ss.Keyword IS NULL AND UPL.Id=ss.UserProfileId )
				AND @IsConfirmation=0
					BEGIN
							SET @Status=0
					END
				ELSE 
					BEGIN
							SET @Status=1
					END 

				IF @Status=1
					Begin
						INSERT INTO [dbo].ZnodeSearchProfileTrigger([SearchProfileId],UserProfileId,[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
						Select @SearchProfileId,UPL.Id,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
						FROM  @UserProfileList UPL
						WHERE  NOT EXISTS(SELECT 1 FROM ZnodeSearchProfileTrigger ss WHERE  ss.Keyword IS NULL AND UPL.Id=ss.UserProfileId and ss.SearchProfileId = @SearchProfileId)
						and @IsConfirmation=0

				
						Update ss
						Set SS.SearchProfileId=@SearchProfileId,ss.ModifiedBy=@UserId,ss.ModifiedDate=@GetDate
						FROM  @UserProfileList UPL
						INNER JOIN ZnodeSearchProfileTrigger ss on ss.Keyword IS NULL AND UPL.Id=ss.UserProfileId
						WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchProfile a WHERE EXISTS 
																					(SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile b where a.SearchProfileId = b.SearchProfileId and b.PublishCatalogId = @PublishCatalogSearchProfileId) AND a.SearchProfileId = ss.SearchProfileId) 

					ENd


			End

		  SELECT @SearchProfileId AS ID,CAST(@Status AS BIT) AS Status;   			
		  COMMIT TRAN A;
         END TRY
         BEGIN CATCH
        
		    -- SET @Status = 0;
		  ----   DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 ----@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateQuoteLineItem @CartLineItemXML = '+CAST(@CartLineItemXML AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
    --         EXEC Znode_InsertProcedureErrorLog
				--@ProcedureName = 'Znode_InsertUpdateQuoteLineItem',
				--@ErrorInProcedure = @Error_procedure,
				--@ErrorMessage = @ErrorMessage,
				--@ErrorLine = @ErrorLine,
				--@ErrorCall = @ErrorCall;
         END CATCH;
     END;

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSKUInventoryList')
BEGIN 
	DROP PROCEDURE Znode_GetSKUInventoryList
END 
GO 

CREATE  PROCEDURE [dbo].[Znode_GetSKUInventoryList]
(   @WhereClause VARCHAR(1000),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT,
    @LocaleId    INT           = 1)
AS 
    /*
    Summary : this procedure is used to Get the inventory list by sku 
    Unit Testing 
     EXEC Znode_GetSKUInventoryList  '' ,@RowsCount= 1,@PageNo= 1 ,@Rows = 100
     SELECT * FROM ZnodePublishProduct WHERE PimProductid  = 4
    */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @TBL_InventoryList TABLE (PimProductId int,InventoryId INT ,WarehouseId INT ,WarehouseCode NVARCHAR(100),WarehouseName VARCHAR(100),SKU  VARCHAR(300)
			 ,Quantity NUMERIC (28,6),ReOrderLevel NUMERIC (28,6),IsDownloadable bit default 0,ProductName NVARCHAR(max),RowId INT,CountNo INT);

             DECLARE @DefaultLocaleId VARCHAR(100)= Dbo.Fn_GetDefaultValue('Locale');
             
             IF  OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
			 BEGIN 
				DROP TABLE #TBL_AttributeVAlue
			 END 	
			 DECLARE @PimAttributeSKUId INT = dbo.FN_GetProductSKUAttributeid()
			 ,@PimAttributeProductNameId INT = dbo.FN_GetProductNameAttributeid()

			 SELECT VI.PimProductId,VI.PimAttributeId,VI2.AttributeValue,Case when VI.PimAttributeId =@PimAttributeSKUId then 'SKU'
                    Else 'ProductName' END  AttributeCode,VI2.LocaleId --,COUNT(*)Over(Partition By VI.PimProductId,VI.PimAttributeId ORDER BY VI.PimProductId,VI.PimAttributeId  ) RowId
			 INTO #TBL_AttributeVAlue
			 FROM  ZnodePimAttributeValue  VI 
			 INNER JOIN ZnodePimAttributeValueLocale VI2 ON (VI.PimAttributeValueId = VI2.PimAttributeValueId )
			 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
			 AND  VI.PimAttributeId IN ( @PimAttributeSKUId,@PimAttributeProductNameId)	


			 alter table #TBL_AttributeVAlue add IsDownloadable bit not null  default 0

			 Update a
			 set a.IsDownloadable=1
			 From #TBL_AttributeVAlue a
			 inner join ZnodePimDownloadableProduct b on  a.AttributeValue=b.SKU
			 WHERE a.AttributeCode = 'SKU'  

				
				
					
			 SET @SQL = '	
				;With CTE_InventoryListWithSKU AS 
				(
					SELECT  CTE.PimProductId , CTEI.AttributeValue ProductName,ZW.WarehouseCode,ZW.WarehouseName , CTEI.LocaleId,SKU,SPN.InventoryId,SPN.WarehouseId
						,SPN.Quantity,SPN.ReOrderLevel,cte.IsDownloadable
					FROM #TBL_AttributeVAlue CTE
					INNER JOIN #TBL_AttributeVAlue CTEI ON (CTEI.PimProductId = CTE.Pimproductid 
											AND CTEI.AttributeCode = ''ProductName'' )
					INNER JOIN ZnodeInventory  SPN ON ((SELECT ''''+SPN.SKU FOR XML PATH(''''))  = CTE.AttributeValue)
					LEFT JOIN ZnodeWarehouse ZW ON (ZW.WarehouseId = SPN.WarehouseId) 
					WHERE CTE.AttributeCode = ''SKU'' 
				)
				,CTE_ListDetailForPaging AS 
				(
					SELECT PimProductId, InventoryId,WarehouseId,WarehouseCode,WarehouseName,SKU,Quantity,ReOrderLevel,IsDownloadable,ProductName
					,'+dbo.Fn_GetPagingRowId(@Order_BY,'InventoryId DESC')+',Count(*)Over() CountNo 
					FROM CTE_InventoryListWithSKU
					WHERE 1=1 
						'+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
				)				
				SELECT PimProductId,InventoryId,WarehouseId,WarehouseCode,WarehouseName,dbo.Fn_Trim(SKU)SKU,Quantity,ReOrderLevel,IsDownloadable,dbo.Fn_Trim(ProductName)ProductName,RowId,CountNo
				FROM CTE_ListDetailForPaging 
				'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)



				INSERT INTO @TBL_InventoryList(PimProductId,InventoryId,WarehouseId,WarehouseCode,WarehouseName,SKU,Quantity,ReOrderLevel,IsDownloadable,ProductName,RowId,CountNo)
				EXEC (@SQL);

            SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_InventoryList), 0);

            SELECT PimProductId,InventoryId,WarehouseId,WarehouseCode,WarehouseName,SKU,Quantity,ReOrderLevel,IsDownloadable,ProductName
			FROM @TBL_InventoryList;
         
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSKUInventoryList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSKUInventoryList',
				@ErrorInProcedure = 'Znode_GetSKUInventoryList',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;


GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePortalByPortalId')
BEGIN 
	DROP PROCEDURE Znode_DeletePortalByPortalId
END 
GO 
CREATE PROCEDURE [dbo].[Znode_DeletePortalByPortalId]
(
	 @PortalId	varchar(2000) = '' ,
	 @StoreCode varchar(2000) = '',
	 @Status	bit OUT
)
AS
	/*
	 Summary : This Procedure Is Used to delete the all records of portal if order is not place against portal  
	 --Unit Testing   
	 BEGIN TRANSACTION 
	 DECLARE @Status    BIT = 0
	 EXEC Znode_DeletePortalByPortalId @PortalId = '1,7,8', @Status   = @Status   OUT
	 SELECT @Status   
	 ROLLBACK TRANSACTION

	*/
BEGIN
	BEGIN TRAN DeletePortalByPortalId;
	BEGIN TRY
		SET NOCOUNT ON;

		--SET @PortalId = (SELECT PortalId FROM ZnodePortal ZP  )

		DECLARE @TBL_PortalIds TABLE
		( 
								 PortalId int
		);
		DECLARE @TBL_Promotion TABLE
		( 
								 PromotionId int
		);
		DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		DECLARE @DeletedIds varchar(max)= '';
		-- inserting PortalIds which are not present in Order and Quote

		
		INSERT INTO @TBL_PortalIds 
		SELECT PortalId FROM ZnodePortal ZP
		WHERE CASE WHEN @StoreCode = '' THEN CAST(PortalId AS NVARCHAR(2000)) ELSE StoreCode END IN (

		SELECT Item FROM dbo.Split( CASE WHEN @StoreCode = '' THEN @PortalId ELSE @StoreCode END, ',' ) AS SP ) 
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeOmsOrderDetails AS ZOD WHERE ZOD.PortalId = ZP.PortalId) 
		--AND  NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsQuote AS ZOQ WHERE ZOQ.PortalId = ZP.PortalId );

		
		--END
		--select * from @TBL_PortalIds
		DELETE FROM dbo.ZnodeRobotsTxt WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeRobotsTxt.PortalId)

		DELETE FROM dbo.ZnodePortalPixelTracking WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPixelTracking.PortalId)

		DELETE ZOH
		FROM ZnodeOmsQuotePersonalizeItem ZOH
		INNER JOIN ZnodeOmsQuoteLineItem ZOM ON ZOH.OmsQuoteLineItemId = ZOM.OmsQuoteLineItemId
		WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZOM.OmsQuoteId )

		DELETE ZOH
		FROM ZnodeOmsHistory ZOH
		INNER JOIN ZnodeOmsNotes ZOM ON ZOH.OmsNotesId = ZOM.OmsNotesId
		WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZOM.OmsQuoteId )

		DELETE FROM ZnodeOmsQuoteLineItem WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
										WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZnodeOmsQuoteLineItem.OmsQuoteId )

		DELETE FROM ZnodeOmsNotes WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeOmsQuote ZOQ  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZOQ.PortalId) AND ZOQ.OmsQuoteId = ZnodeOmsNotes.OmsQuoteId )

		DELETE FROM ZnodeOmsQuote WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsQuote.PortalId);

	     DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
	     DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		--DELETE FROM ZnodeTaxRule WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRule.PortalId);
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		DELETE FROM ZnodeFormWidgetEmailConfiguration WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeFormWidgetEmailConfiguration.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		
		 DELETE FROM ZnodeCaseRequestHistory WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
			WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeCaseRequestHistory.CaseRequestId )

		 DELETE FROM ZnodeNote WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
			WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeNote.CaseRequestId )
		
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		DELETE FROM ZnodePortalDisplaySetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalDisplaySetting.PortalId);
		DELETE FROM ZnodeUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGiftCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGiftCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);

		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);

		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);

		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId);

		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);

		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);
		   
		/* Remove Search index */
		--DELETE FROM ZnodeSearchIndexServerStatus WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId
		--		 INNER JOIN ZnodeSearchIndexMonitor AS zsim ON zpi.PortalIndexId = zsim.PortalIndexId WHERE zsim.SearchIndexMonitorId = ZnodeSearchIndexServerStatus.SearchIndexMonitorId);
		--DELETE FROM ZnodeSearchIndexMonitor WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodePortalIndex AS zpi ON TBP.PortalId = zpi.PortalId WHERE zpi.PortalIndexId = ZnodeSearchIndexMonitor.PortalIndexId );
		--DELETE FROM ZnodePortalIndex WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalIndex.PortalId);
		/* Remove Search index */
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);

		INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);

		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);

		
		DELETE FROM ZnodeBlogNewsLocale where exists (select top 1 1 from ZnodeBlogNews ZBN
													where EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )



		DELETE FROM ZnodeBlogNewsCommentLocale where exists (select top 1 1 from ZnodeBlogNewsComment ZBC
													where exists (select top 1 1 from ZnodeBlogNews ZBN
														where exists (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
													



		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )



		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)

		DELETE ZFBGAVL
		FROM ZnodeFormBuilderGlobalAttributeValueLocale ZFBGAVL
		INNER JOIN ZnodeFormBuilderGlobalAttributeValue ZFBGAV ON ZFBGAVL.FormBuilderGlobalAttributeValueId = ZFBGAV.FormBuilderGlobalAttributeValueId
		WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeFormBuilderSubmit ZFBS
														WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZFBS.PortalId) AND ZFBS.FormBuilderSubmitId = ZFBGAV.FormBuilderSubmitId )


		DELETE FROM ZnodeFormBuilderGlobalAttributeValue WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeFormBuilderSubmit ZFBS
														WHERE EXISTS (select top 1 1 from @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZFBS.PortalId) AND ZFBS.FormBuilderSubmitId = ZnodeFormBuilderGlobalAttributeValue.FormBuilderSubmitId )

	DELETE FROM ZnodeFormBuilderSubmit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeFormBuilderSubmit.PortalId)

		DELETE FROM ZnodeCaseRequestHistory WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeCaseRequestHistory.CaseRequestId )

		DELETE FROM ZnodeNote WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCaseRequest ZCR  
	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCR.PortalId) AND ZCR.CaseRequestId = ZnodeNote.CaseRequestId )


		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);
		
		
		IF (SELECT Count(1) FROM @TBL_PortalIds) = (SELECT Count(1) FROM dbo.Split( CASE WHEN @StoreCode = '' THEN @PortalId ELSE @StoreCode END, ',' ) )
		 	
		BEGIN 
		SELECT 1 AS ID, CAST(1 AS bit) AS Status;
		SET @Status = 1;
		END 
		ELSE 
		BEGIN 
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		SET @Status = 0;
		END 
		

		COMMIT TRAN DeletePortalByPortalId;
	END TRY
	BEGIN CATCH
		 
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePortalByPortalId @PortalId = '+ISNULL(@PortalId,'''''')+',@StoreCode = '+ISNULL(@StoreCode,'''''')+',@Status='+ISNULL(CAST(@Status AS VARCHAR(10)),'''');
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    -- ROLLBACK TRAN DeletePortalByPortalId;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_DeletePortalByPortalId',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogList')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogList
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetCatalogList]
(
	@WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
    @RowsCount   INT OUT
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the catalog 
	 Unit Testig 
	 EXEC  _Znode_GetCatalogList '',100,1,'',0
	  EXEC  Znode_GetCatalogList null,100,1,'',0
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 

		 DECLARE @SQL  NVARCHAR(max) 
		 DECLARE @TBL_CatalogId TABLE (PimCatalogId int, PublishCatalogLogId int,CatalogName VARCHAR(max),PublishStatus VARCHAR(300),RowId INT ,CountId INT,PublishCreatedDate DATETIME ,PublishModifiedDate DATETIME,PublishCategoryCount INT ,PublishProductCount INT)
	 
		 SET @SQL = '
		;With Cte_MaxPublish AS 
		(
			 SELECT max(PublishCatalogLogId) PublishCatalogLogId,PimCatalogId
			 FROM ZnodePublishCatalogLog ZPCL   
			 GROUP BY PimCatalogId
		)
		,Cte_CatalogLog AS (
		SELECT ZPC.CatalogName CatalogName, PublishCatalogLogId PublishCatalogLogId,CASE WHEN ZPCL.PublishCatalogLogId IS NULL THEN '''' ELSE 
		CASE WHEN IsCatalogPublished IS NULL THEN ''Processing'' WHEN IsCatalogPublished = 0 THEN ''Publish Failed''
		WHEN IsCatalogPublished = 1 THEN  ''Published Successfully'' END END    PublishStatus ,ZPC.PimCatalogId,ZPCL.CreatedDate AS PublishCreatedDate,ZPCL.ModifiedDate AS PublishModifiedDate,
		--CASE WHEN NOT Exists (Select TOP 1 1 from ZnodePublishCategoryProduct ZPCPCount where 
		--ZPCPCount.PublishCatalogId = ZPCL.PublishCatalogId  )
		--THEN 0 ELSE 
		(SELECT DISTINCT COUNT(Item) FROM dbo.split(ZPCL.PublishCategoryId,'','') SP ) 
		--END  
		PublishCategoryCount, 
		 ISNULL((SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZPCL.PublishCatalogId AND ZPCL.IsCatalogPublished = 1
		 AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZPCL.PublishCategoryId,'','') SP ))  ),0) 
		PublishProductCount
		FROM ZnodePimCatalog ZPC 
		LEFT JOIN ZnodePublishCatalogLog ZPCL  ON ( EXISTS (SELECT TOP 1 1 FROM Cte_MaxPublish CTE WHERE CTE.PimCatalogId = ZPC.PimCatalogId AND CTE.PublishCatalogLogId =  ZPCL.PublishCatalogLogId)  )

		)	 
	     ,Cte_PublishStatus 
		 AS (
		 SELECT PimCatalogId, PublishCatalogLogId, CatalogName, PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount,
		 '+[dbo].[Fn_GetPagingRowId](@Order_BY,'PublishCatalogLogId DESC')+' , Count(*)Over() CountId FROM Cte_CatalogLog
         WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )
	 
		 SELECT PimCatalogId, PublishCatalogLogId,CatalogName,PublishStatus,RowId,CountId,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount
		 FROM Cte_PublishStatus 
		 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '
	

	     PRINT @sql 
		 INSERT INTO @TBL_CatalogId 
		 EXEC (@SQL)

		 SELECT  PimCatalogId,PublishCatalogLogId,CatalogName,PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,PublishProductCount
		 FROM @TBL_CatalogId

		 SET @RowsCount = ISNULL((SELECT TOP 1 COUNTID FROM @TBL_CatalogId),0)
	 

	 
		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetCatalogList',
					@ErrorInProcedure = 'Znode_GetCatalogList',
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetFilterPimProductId')
BEGIN 
	DROP PROCEDURE Znode_GetFilterPimProductId
END 
GO
CREATE  PROCEDURE [dbo].[Znode_GetFilterPimProductId]
(
  @WhereClause XML 
 ,@PimProductId TransferId Readonly 
 ,@LocaleId   INT 
)
AS 
BEGIN 
SET NOCOUNT ON 

DECLARE  @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleID()
		,@SQL NVARCHAR(max)
		,@InternalProductWhereClause NVARCHAR(max)

DECLARE @WorkingProcess INT = 0 

DECLARE @TBL_FilterClause TABLE (ID INT IDENTITY(1,1),AttributeValue NVARCHAR(max),AttributeCode NVARCHAr(max),PimAttributeId INT ,AttributeTypeName VARCHAR(300),AttributeCodeOrg VARCHAR(600))

DECLARE @WhereClauseXML XML = @WhereClause 


IF EXISTS (SELECT TOP 1 1 FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col) 
WHERE Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)')  LIKE  '% in (%')
BEGIN 
 SET @WorkingProcess = 1
 INSERT INTO @TBL_FilterClause (AttributeValue,AttributeCode,AttributeTypeName,PimAttributeId,AttributeCodeOrg)
SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeValue,ZTY.AttributeTypeName,ZPA.PimAttributeId,AttributeCode AttributeCodeOrg
FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
LEFT JOIN  ZnodePimAttribute ZPA  ON ((Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)')  LIKE '%in (%' OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')) 
									= ZPA.AttributeCode ) AND IsCategory = 0 
AND ( ZPA.IsShowOnGrid = 1 OR ZPA.IsConfigurable =1  )  )
LEFT JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)

END 
ELSE 
BEGIN 

INSERT INTO @TBL_FilterClause (AttributeValue,AttributeCode,AttributeTypeName,PimAttributeId,AttributeCodeOrg)
SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeValue,ZTY.AttributeTypeName,ZPA.PimAttributeId,AttributeCode AttributeCodeOrg
FROM @WhereClauseXml.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
LEFT JOIN ZnodePimAttribute ZPA  ON (dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''','')) 
									= ZPA.AttributeCode AND ZPA.IsCategory = 0 
AND ( ZPA.IsShowOnGrid = 1 OR ZPA.IsConfigurable =1  )  )
LEFT JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)


END 



CREATE TABLE #TBL_PimProductId (PimProductId INT)

CREATE TABLE #TBL_PimProductIdDelete (PimProductId INT )

  INSERT INTO #TBL_PimProductId (PimProductId )
  SELECT Id 
  FROM @PimProductId

  SELECT ZPAV.PimProductId ,PimAttributeValueId 
			,ZPAV.CreatedDate,ZPAV.ModifiedDate,TBLA.AttributeCodeOrg AttributeCode
  INTO #TBL_AttributeValueId 
  FROM  ZnodePimAttributeValue ZPAV 
  INNER JOIN @TBL_FilterClause TBLA ON (TBLA.PimAttributeId = ZPAV.PimAttributeId)
  INNER JOIN #TBL_PimProductId YT ON (YT.PimProductId = ZPAV.PimProductId OR NOT EXISTS (SELECT TOP 1 1 #TBL_PimProductId))
IF @WorkingProcess =1 
BEGIN 
 DECLARE @PimAttributeId_in TransferId 

 INSERT INTO @PimAttributeId_in 
 SELECT PimAttributeId
 FROM  @TBL_FilterClause 
 WHERE AttributeTypeName IN ('Simple Select','Multi Select') 
 AND AttributeCode LIKE '%in (%'


 CREATE TABLE #TBL_AttributeDefaultValue_in ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  )    
 INSERT INTO #TBL_AttributeDefaultValue_in(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
 EXEC Znode_GetAttributeDefaultValueLocaleNew_TansferId @PimAttributeId_in, @LocaleId;
 
 DECLARE @WhereClauseInCom NVARCHAR(max) = (SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%in (%') 

SET @SQL = '
   ;With Cte_AttributeValue AS 
   (
   SELECT PimAttributeValueId 
   FROM ZnodePimAttributeValueLocale 
   WHERE AttributeValue '+@WhereClauseInCom+'
   UNION ALL 
   SELECT PimAttributeValueId 
   FROM ZnodePimProductAttributeTextAreaValue   
   WHERE AttributeValue '+@WhereClauseInCom+'
   UNION ALL 
   SELECT ZPADV.PimAttributeValueID 
   FROM ZnodePimProductAttributeDefaultValue ZPADV 
   INNER JOIN #TBL_AttributeDefaultValue_in TBL ON (TBL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
   WHERE TBL.AttributeDefaultValue '+@WhereClauseInCom+'
   )
   
   SELECT PimProductId 
   FROM #TBL_AttributeValueId ZPAV 
   INNER JOIN  Cte_AttributeValue CTAC ON (CTAC.PimAttributeValueId = ZPAV.PimAttributeVaLueId )
   GROUP BY PimProductId
   UNION ALL  
   SELECT PimProductId 
   FROM ZnodePimProduct a
   INNER JOIN ZnodePimFamilyLocale b ON (b.PimAttributeFamilyId = a.PimAttributeFamilyId) 
   WHERE b.AttributeFamilyName '+@WhereClauseInCom+'
   GROUP BY PimProductId
   UNION ALL 
   SELECT  TBLAV.PimProductId 
   FROM ZnodePimProduct TBLAV
   WHERE CASE WHEN TBLAV.IsProductPublish  IS NULL THEN ''Not Published'' 
         WHEN TBLAV.IsProductPublish = 0 THEN ''Draft''
	     ELSE  ''Published'' END '+@WhereClauseInCom+'
   GROUP BY TBLAV.PimProductId 
   '
   -- PRINT @SQL 
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   IF NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) AND EXISTS (SELECT TOP 1 1  FROM @PimProductId Having Max (ID) = 0 )
   BEGIN
    INSERT INTO  #TBL_PimProductId (PimProductId)
	SELECT 0 
   END 
  DELETE  FROM @TBL_FilterClause WHERE AttributeCode LIKE '% in (%'

   DROP TABLE #TBL_AttributeDefaultValue_in
   SET @WorkingProcess  = 0 
END 

  IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode <> '' AND ISNULL(AttributeValue,'') = '')
  BEGIN 

   SET  @InternalProductWhereClause = STUFF( (  SELECT ' INNER JOIN #TBL_AttributeValueId AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' )'				
							FROM @TBL_FilterClause
							WHERE ISNULL(AttributeValue,'') = ''
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
   ----Change for configurable product varient page seach
   SET @SQL = ' 
				SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV '+@InternalProductWhereClause+' 
				WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId )
				GROUP BY TBLAV.PimProductId 
			'
   ----Comment code for Change for configurable product varient page seach
   --SET @SQL = ' 
			--	SELECT  TBLAV.PimProductId 
			--	FROM #TBL_AttributeValueId TBLAV '+@InternalProductWhereClause+' '+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
			--				ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
			--	GROUP BY TBLAV.PimProductId 
			--'
   --PRINT @SQL 
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   DELETE FROM @TBL_FilterClause WHERE ISNULL(AttributeValue,'') = ''
   IF NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) AND EXISTS (SELECT TOP 1 1  FROM @PimProductId Having Max (ID) = 0 )
   BEGIN
    INSERT INTO  #TBL_PimProductId (PimProductId)
	SELECT 0 
   END 
  END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Simple Select','Multi Select') )
BEGIN
 DECLARE @PimAttributeId TransferId 

 INSERT INTO @PimAttributeId 
 SELECT PimAttributeId
 FROM  @TBL_FilterClause WHERE AttributeTypeName IN ('Simple Select','Multi Select') 

 CREATE TABLE #TBL_AttributeDefaultValue ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  )    
 INSERT INTO #TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
 EXEC Znode_GetAttributeDefaultValueLocaleNew_TansferId @PimAttributeId, @LocaleId;
 
  IF @DefaultLocaleId = @LocaleID AND  @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = STUFF( (  SELECT ' INNER JOIN Cte_AttributeValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Simple Select','Multi Select')
							AND AttributeValue <> ''
							AND AttributeValue IS NOT NULL
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')

  SET @SQL = ' ;With Cte_AttributeValue AS 
			   (
	            SELECT TBLAV.PimAttributeValueId ,SUBSTRING((SELECT '',''+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = '+Cast(@localeId AS VARCHAR(200))+'
				FOR XML PATH('''') ),2,4000) AttributeValue
				    ,  '+Cast(@localeId AS VARCHAR(200))+' LocaleId,TBLAV.AttributeCode,TBLAV.PimProductId
				FROM #TBL_AttributeValueId TBLAV
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
				GROUP BY TBLAV.PimAttributeValueId,TBLAV.AttributeCode,TBLAV.PimProductId
			   )
  
				SELECT  TBLAV.PimProductId
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'	GROUP BY TBLAV.PimProductId '
				
  END 
  ELSE IF  @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+'  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Simple Select','Multi Select')
							AND AttributeValue <> ''
							AND AttributeValue IS NOT NULL
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = '  			 
			   SELECT TBLAV.PimAttributeValueId,ZPAVL.PimAttributeDefaultValueId , ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimAttributeValueId ,TBLAV.PimProductId ORDER BY TBLAV.PimAttributeValueId ,TBLAV.PimProductId  ) RowId
			   INTO #temp_Table 
			   FROM #TBL_AttributeValueId TBLAV 
			   INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId)
			   WHERE (ZPAVL.LocaleId = '+Cast(@localeId AS VARCHAR(200))+' OR ZPAVL.LocaleId = '+Cast(@DefaultlocaleId AS VARCHAR(200))+')
				
				;with Cte_AttributeValue AS 
			   (
	            SELECT TBLAV.PimAttributeValueId ,SUBSTRING((SELECT '',''+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN #temp_Table  ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = CASE WHEN ZPAVL.RowId = 2 THEN '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  
				FOR XML PATH('''') ),2,4000) AttributeValue,TBLAV.AttributeCode ,TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END+'
				GROUP BY TBLAV.PimAttributeValueId,TBLAV.AttributeCode ,TBLAV.PimProductId 
			   )
  
				SELECT   TBLAV.PimProductId
				FROM  #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'	GROUP BY TBLAV.PimProductId '

  END 
   PRINT @SQL 
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete
   DROP TABLE #TBL_AttributeDefaultValue
END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No') )
BEGIN  
   
  IF @DefaultLocaleId = @LocaleID AND @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN View_PimProducttextValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
 
  SET @SQL = '	SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+'
				'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId   ) ' END 
				+' GROUP BY TBLAV.PimProductId '

  END 
  ELSE IF @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeDetails AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId = CASE WHEN ZPAVL'+CAST(ID AS VARCHAR(200))+'.RowId = 2 THEN  '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = ' 
     ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.PimProductId,ZPAVL.AttributeValue,TBLAV.AttributeCode,ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimProductId,TBLAV.AttributeCode ORDER BY TBLAV.PimProductId,TBLAV.AttributeCode  ) RowId
	 FROM #TBL_AttributeValueId TBLAV 
	 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId )
	 WHERE (LocaleId = '+Cast(@DefaultLocaleId AS Varchar(300))+' OR LocaleId = '+CAST(@LocaleId AS Varchar(300))+' )'+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END +'
	 ) 
	 SELECT  TBLAV.PimProductId 
  	 FROM #TBL_AttributeValueId TBLAV
	 '+@InternalProductWhereClause+'
	 GROUP BY TBLAV.PimProductId 
	 '
	 

  END 
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 

IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeTypeName IN ('Text Area') )
BEGIN    
  IF @DefaultLocaleId = @LocaleID AND @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
								STUFF( (  SELECT ' INNER JOIN View_PimProductTextAreaValue AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId='+CAST(@LocaleID AS VARCHAR(200))+' )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text Area')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
 
  SET @SQL = '
              SELECT  TBLAV.PimProductId 
				FROM #TBL_AttributeValueId TBLAV
				'+@InternalProductWhereClause+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  END 
  ELSE IF @WorkingProcess = 0 
  BEGIN 
  SET  @InternalProductWhereClause = 
							STUFF( (  SELECT ' INNER JOIN Cte_AttributeDetails AS ZPAVL'+CAST(ID AS VARCHAR(200))+
									' ON ( TBLAV.PimProductId = ZPAVL'+CAST(ID AS VARCHAR(200))+'.PimProductId AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeCode '+AttributeCode+
									' AND ZPAVL'+CAST(ID AS VARCHAR(200))+'.AttributeValue '+AttributeValue+' AND ZPAVL'+CAST(ID AS VARCHAR(200))+
									'.LocaleId = CASE WHEN ZPAVL'+CAST(ID AS VARCHAR(200))+'.RowId = 2 THEN  '+CAST(@LocaleId AS Varchar(300))+' ELSE '+Cast(@DefaultLocaleId AS Varchar(300))+' END  )'				
							FROM @TBL_FilterClause
							WHERE AttributeTypeName IN ('Text Area')
							FOR XML PATH (''), TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')
  SET @SQL = ' 
     ;With Cte_AttributeDetails AS 
	 (
	 SELECT TBLAV.PimProductId,TBLAV.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId ,COUNT(*)Over(Partition By TBLAV.PimProductId,TBLAV.AttributeCode ORDER BY TBLAV.PimProductId,TBLAV.AttributeCode  ) RowId
	 FROM #TBL_AttributeValueId TBLAV 
	 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (ZPAVL.PimAttributeValueId = TBLAV.PimAttributeValueId )
	 WHERE (LocaleId = '+Cast(@DefaultLocaleId AS Varchar(300))+' OR LocaleId = '+CAST(@LocaleId AS Varchar(300))+' )
	 
	 ) 
	 SELECT  TBLAV.PimProductId 
  	 FROM #TBL_AttributeValueId TBLAV
	 '+@InternalProductWhereClause+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' 
							GROUP BY TBLAV.PimProductId 	
							'
   END 
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode  LIKE '%PublishStatus%' )
BEGIN    
 
  SET @SQL = '
              SELECT  TBLAV.PimProductId 
				FROM ZnodePimProduct TBLAV
				WHERE CASE WHEN TBLAV.IsProductPublish  IS NULL THEN ''Not Published'' 
				WHEN TBLAV.IsProductPublish = 0 THEN ''Draft''
				ELSE  ''Published'' END '+(SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%PublishStatus%')+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
IF EXISTS (SELECT TOP 1 1 FROM @TBL_FilterClause WHERE AttributeCode  LIKE '%AttributeFamily%' )
BEGIN 

 ;With Cte_attributeValue AS 
   (
	 SELECT ZPAF.PimAttributeFamilyId,FamilyCode,AttributeFamilyName ,ZPFL.LocaleId
	 FROM ZnodePimAttributeFamily ZPAF
	 INNER JOIN ZnodePimFamilyLocale ZPFL ON (ZPFL.PimAttributeFamilyId = ZPAF.PimAttributeFamilyId) 
	 WHERE ZPFL.LocaleId IN (@DefaultLocaleId,@LocaleId)
	 ) 
   , Cte_AttributeValueAttribute AS (
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	   FROM Cte_attributeValue RTY 
	   WHERE LocaleId = @LocaleId
      )
   , Cte_AttributeValueTht AS (
      SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_AttributeValueAttribute
	  UNION ALL 
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_attributeValue TYY  
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeValueAttribute THE WHERE THE.PimAttributeFamilyId = TYY.PimAttributeFamilyId )
	  AND TYY.LocaleId = @DefaultLocaleId
	  )
  
  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
  INTO #TBL_FamilyLocale
  FROM Cte_AttributeValueTht 


  SET @SQL = '
                SELECT  TBLAV.PimProductId 
				FROM ZnodePimProduct TBLAV 
				INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
				WHERE AttributeFamilyName '+(SELECT TOP 1 AttributeValue FROM @TBL_FilterClause WHERE AttributeCode LIKE '%AttributeFamily%')+CASE WHEN NOT EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId ) THEN '' 
							ELSE ' AND EXISTS (SELECT TOP 1 1 FROM #TBL_PimProductId TBLP WHERE TBLP.PimProductId = TBLAV.PimProductId ) ' END 
							+' GROUP BY TBLAV.PimProductId '
  
   
  
   PRINT @SQL
   DELETE FROM #TBL_PimProductIdDelete 
   INSERT INTO #TBL_PimProductIdDelete  (PimProductId)
   EXEC (@SQL)
   DELETE FROM #TBL_PimProductId
   INSERT INTO #TBL_PimProductId
   SELECT PimProductId FROM #TBL_PimProductIdDelete

END 
SET @SQL = '
 IF EXISTS ( SELECT TOP 1 1 FROM tempdb..sysobjects WHERE name = ''##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+''' )
  BEGIN 
   DROP TABLE ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+'
  END 
 CREATE TABLE ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+' (PimProductId INT )
 INSERT INTO  ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))+'
 SELECT PimProductId 
 FROM #TBL_PimProductId
'
   EXEC (@SQL)
   DROP TABLE #TBL_PimProductId
   DROP TABLE #TBL_AttributeValueId
   DROP TABLE #TBL_PimProductIdDelete
 END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END 
GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT             );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				 Select Distinct PimCategoryId , Null FROM (
				 SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryId in 
				 (SELECT CategoryId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
				 SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

				 INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId
				 AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds) ;
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,@VersionId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId
  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

					IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 SELECT CategoryXml FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductbulk
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk 5, 0 , '' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

  --DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )

   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DELETE FROM #PimProductAttributeXML
   END

   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   Declare @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 
 --DECLARE #TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int  )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,@versionId ,ZPC.PublishCategoryId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and  
				 ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )
			SELECT DISTINCT @publishCatalogId,ZPP.PublishProductId,PimProductId,@versionId,NULL 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) WHERE
				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)


  END
  ELSE 
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
											MAX(PublishCatalogLogId) ELSE @versionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

WHILE @Counter <= @maxCountId
BEGIN
 
  SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO @PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       

	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) from #TBL_AttributeVAlue b where a.PimProductId=b.PimProductId and a.PimAttributeId = b.PimAttributeId )
	 from #TBL_AttributeVAlue a

	 --select * from #TBL_AttributeVAlue
	 --return
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 create table #Cte_GetData (PimProductId int,AttributeCode varchar(600),AttributeValue nvarchar(max))

 create index idx_#Cte_GetDataPimProductId on #Cte_GetData(PimProductId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
where a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
--INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId AND CTE.LocaleId  = CASE WHEN cte.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )

--insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
--SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue                 
--FROM ZnodePimAttributeValue  a 
--INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
--INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
--INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
--WHERE ZPA.IsPersonalizable = 1 
--AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
--and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

	 

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)


insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
where exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

--  --CREATE INDEX IND_Znode

  DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId = @versionId AND IsProductXML = 1   AND LocaleId = @LocaleId 

--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') is not null
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		insert into  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		Select CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
		--Publish parent products with index number 
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST(Isnull((select RowIndex from #Index WHERE PublishProductId = zpp.PublishProductId
								AND PublishCategoryId = ZPCP.PublishCategoryId ) ,0)
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
		)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds ) 
		and zpp.PublishCategoryId is NOT NULL
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST(Isnull((select RowIndex from #Index WHERE PublishProductId = zpp.PublishProductId
								AND PublishCategoryId = ZPCP.PublishCategoryId ) ,0)
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
		AND ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId and zpp.PublishCategoryId is  NULL
		
  END
  ELSE
  BEGIN
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
END 
 


--DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
SET @Counter = @counter + 1 
END 

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleProduct')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleProduct
END 
GO 

-- SELECT * FROM ZnodePublishCataloglog

-- SELECT * FROM ZnodePublishProduct WHERE PublishProductId = 218 


CREATE PROCEDURE [dbo].[Znode_GetPublishSingleProduct]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly 
,@UserId		  INT = 0 
,@TokenId nvarchar(max)= ''	

)
AS


--Declare @PimProductId TransferId 
--insert into @PimProductId  select 128 
-- EXEC [Znode_GetPublishSingleProduct]  @PublishCatalogId = 0 ,@VersionId= 0 ,@PimProductId =@PimProductId, @UserId=2 

BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 

 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
			 MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
			 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
			 AND IsCatalogPublished =1
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
		
             DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT ,AttributeValue Nvarchar(1000) )

			 INSERT INTO @TBL_AttributeVAlueLocale (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId ,LocaleId ,AttributeValue )
			 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId, ''
			 FROM View_LoadManageProductInternal VIR
			 INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = VIR.PimProductId)
			 UNION ALL 
			 SELECT VIR.PimProductId,PimAttributeId,PimProductAttributeMediaId,ZPDE.LocaleId , ''
			 FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
			 WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
			 Union All 
			 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue
			   FROM ZnodePimAttributeValue  VIR
			 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1 )
			 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
			 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
			 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
			 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
			 AND EXISTS(SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )



	

WHILE @Counter <= @maxCountId
BEGIN
 SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId

  INSERT INTO @PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML ZPAX
  WHERE ZPAX.LocaleId = @DefaultLocaleId  
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  INSERT INTO @PimDefaultValueLocale 
   SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML ZX
  WHERE localeId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  
 
  DECLARE @TBL_AttributeVAlue TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT  )
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
  

    INSERT INTO @TBL_AttributeVAlue (PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
    SELECT PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale
    WHERE LocaleId = @LocaleId

    
	INSERT INTO @TBL_AttributeVAlue(PimProductId ,PimAttributeId ,ZnodePimAttributeValueLocaleId )
	SELECT VI.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId
	FROM @TBL_AttributeVAlueLocale VI 
    WHERE VI.LocaleId = @DefaultLocaleId 
	AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AttributeVAlue  CTE WHERE CTE.PimProductId = VI.PimProductId AND CTE.PimAttributeId = VI.PimAttributeId )
 
INSERT INTO @TBL_ZnodeTempPublish  
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM View_LoadManageProductInternal a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_AttributeValue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId)
UNION ALL 
SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+TAVL.AttributeValue+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM ZnodePimAttributeValue  a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
Inner JOIN @TBL_AttributeVAlueLocale TAVL ON  (c.PimAttributeId = TAVL.PimAttributeId  and ZPP.PimProductId = TAVL.PimProductId )
WHERE ZPA.IsPersonalizable = 1 
AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 



UNION ALL 
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML +'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue
 
FROM ZnodePimAttributeValue ZPAV  With (NoLock)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT ',' +MediaPath 
	FROM ZnodePimProductAttributeMedia ZPPG
	INNER JOIN  @TBL_AttributeVAlue TBLV ON (TBLV.PimProductId=  ZPAV.PimProductId AND TBLV.PimAttributeId = ZPAV.PimAttributeId )
    WHERE ZPPG.PimProductAttributeMediaId = TBLV.ZnodePimAttributeValueLocaleId
	FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue
 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
UNION ALL 
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM @TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP 
INNER JOIN @TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
INNER JOIN @PimProductAttributeXML b ON (b.PimAttributeXMLId = c.PimAttributeXMLId )
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId



 DELETE FROM ZnodePublishedXML WHERE  IsProductXML = 1  AND LocaleId = @localeId 
								AND  EXISTS ( SELECT TOP 1 1 FROM  @TBL_PublishCatalogId  TBL WHERE TBL.VersionId  = ZnodePublishedXML.PublishCatalogLogId AND TBL.PublishProductId = ZnodePublishedXML.PublishedId)


;WITH CTE AS
(
SELECT ROW_NUMBER() OVER (PARTITION BY PimProductId	,AttributeCode
ORDER BY PimProductId	,AttributeCode) AS RN
FROM @TBL_ZnodeTempPublish
)

DELETE FROM CTE WHERE RN<>1


 

  
 MERGE INTO ZnodePublishedXML TARGET 
 USING (
 SELECT zpp.PublishProductId,zpp.VersionId ,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPC.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU><SKULower>'+CAST(ISNULL((SELECT ''+Lower(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					FROM ZnodeProfileCatalog ZPFC 
					INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
					WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
STUFF(( SELECT '  '+ AttributeValue  FROM @TBL_ZnodeTempPublish TY WHERE TY.PimProductId = ZPP.PimProductId   
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue
FROM  @TBL_PublishCatalogId zpp
INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
LEFT JOIN ZnodePublishCategory ZPC ON (ZPC.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId)
LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId )
LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ZPCP.PublishCategoryId AND ZPCD.LocaleId = @LocaleId )
WHERE ZPPDFG.LocaleId = @LocaleId
) SOURCE 
ON (
     TARGET.PublishCatalogLogId = SOURCE.versionId 
	 AND TARGET.PublishedId = SOURCE.PublishProductId
	 AND TARGET.IsProductXML = 1 
	 AND TARGET.LocaleId = @localeId 
)
WHEN MATCHED THEN 
UPDATE 
SET  PublishedXML = xmlvalue
   , ModifiedBy = @userId 
   ,ModifiedDate = @GetDate
   ,ImportedGuId = @TokenId 
WHEN NOT MATCHED THEN 
INSERT (PublishCatalogLogId
,PublishedId
,PublishedXML
,IsProductXML
,LocaleId
,CreatedBy
,CreatedDate
,ModifiedBy
,ModifiedDate,ImportedGuId)

VALUES (SOURCE.versionid , Source.publishProductid,Source.xmlvalue,1,@localeid,@userId,@getDate,@userId,@getDate,@TokenId);

DELETE FROM @TBL_ZnodeTempPublish

DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
DELETE FROM @TBL_AttributeValue 

SET @Counter = @counter + 1 
END 

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateContentPage')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateContentPage
END 
GO 
CREATE PROCEDURE [dbo].[Znode_InsertUpdateContentPage]
(   @ContentPageXML XML,
    @Status         BIT OUT,
    @UserId         INT)
AS 
   /* 
    Summary : To Insert content page details with their referance table 
    If CMSContentPagesId =0 then insert else update 
    Unit Testing 
    <ContentPageModel>
      <CMSContentPagesId>0</CMSContentPagesId>
      <PortalId>2</PortalId>
      <CMSContentPageGroupId>2</CMSContentPageGroupId>
      <ProfileIds>5,4,1</ProfileIds>
      <CMSTemplateId>1</CMSTemplateId>
      <LocaleId>1</LocaleId>
      <CMSContentPagesLocaleId>0</CMSContentPagesLocaleId>
      <PageTitle>dsfdsfsd</PageTitle>
      <PageName>fsdfsdfd</PageName>
      <SEOTitle>fdsfds</SEOTitle>
      <SEODescription>fdsfdsf</SEODescription>
      <SEOKeywords>fdsfsd</SEOKeywords>
      <SEOUrl>dsfdsf</SEOUrl>
      <MetaInformation>dsfsdfsd</MetaInformation>
      <IsRedirect>false</IsRedirect>
      <IsConfigurable>false</IsConfigurable>
      <ActivationDate>2016-08-04</ActivationDate>
      <ExpirationDate>2016-08-12</ExpirationDate>
    </ContentPageModel>
  
	*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             DECLARE @Profiledata TABLE(ProfileId INT);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @DefaultlocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @NewCMSContentPagesId INT;
             DECLARE @CmsSeoDetailId INT;
             DECLARE @InsertContentPage TABLE
             (CMSContentPagesId       INT,
              PortalId                INT,
              CMSContentPageGroupId   INT,
              ProfileIds              VARCHAR(MAX),
              CMSTemplateId           INT,
              LocaleId                INT,
              CMSContentPagesLocaleId INT,
              PageTitle               NVARCHAR(200),
              PageName                NVARCHAR(200),
              SEOTitle                NVARCHAR(MAX),
              SEODescription          NVARCHAR(MAX),
              SEOKeywords             NVARCHAR(MAX),
              SEOUrl                  NVARCHAR(MAX),
              MetaInformation         NVARCHAR(MAX),
              IsRedirect              BIT,
              IsActive                BIT,
              ActivationDate          Datetime NULL ,
              ExpirationDate          Datetime NULL
             );
             INSERT INTO @InsertContentPage
                    SELECT Tbl.Col.value('CMSContentPagesId[1]', 'INT'),
                           Tbl.Col.value('PortalId[1]', ' INT '),
                           Tbl.Col.value('CMSContentPageGroupId[1]', 'INT'),
                           Tbl.Col.value('ProfileIds[1]', 'VARCHAR(max)'),
                           Tbl.Col.value('CMSTemplateId[1]', 'INT'),
                           Tbl.Col.value('LocaleId[1]', 'INT'),
                           Tbl.Col.value('CMSContentPagesLocaleId[1]', 'INT '),
                           Tbl.Col.value('PageTitle[1]', 'NVARCHAR(200)'),
                           Tbl.Col.value('PageName[1]', 'NVARCHAR(300)'),
                           Tbl.Col.value('SEOTitle[1]', 'NVARCHAR(max)'),
                           Tbl.Col.value('SEODescription[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('SEOKeywords[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('SEOUrl[1]', 'VARCHAR(300)'),
                           Tbl.Col.value('MetaInformation[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('IsRedirect[1]', 'BIT'),
                           Tbl.Col.value('IsActive[1]', 'BIT'),
					  nullif(Tbl.Col.value('ActivationDate[1]', 'Datetime'), '1900-01-01 00:00:00.000'),
					  nullif(Tbl.Col.value('ExpirationDate[1]', 'Datetime'), '1900-01-01 00:00:00.000')
                    FROM @ContentPageXML.nodes('/ContentPageModel') AS Tbl(Col);
             SET @NewCMSContentPagesId = 0;
             UPDATE @InsertContentPage
               SET
                   ActivationDate = NULL
             WHERE ISNULL(RTRIM(LTRIM(ActivationDate)), '') = '';
             UPDATE @InsertContentPage
               SET
                   ExpirationDate = NULL
             WHERE ISNULL(LTRIM(RTRIM(ExpirationDate)), '') = '';
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM @InsertContentPage
                 WHERE CMSContentPagesId = 0
             )
                 BEGIN
                     INSERT INTO ZnodeCMSContentPages
                     (PortalId,
                      CMSTemplateId,
                      PageName,
                      ActivationDate,
                      ExpirationDate,
                      IsActive,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT PortalId,
                                   CMSTemplateId,
                                   PageName,
                                   ActivationDate,
                                   ExpirationDate,
                                   IsActive,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage;
                     SET @NewCMSContentPagesId = @@Identity;
                     INSERT INTO ZnodeCMSContentPagesLocale
                     (CMSContentPagesId,
                      LocaleId,
                      PageTitle,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @NewCMSContentPagesId,
                                   LocaleId,
                                   PageTitle,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage;
                     INSERT INTO ZNODECMSSEODETAIL
                     (CMSSEOTYPEID,
                      SEOID,
                      ISREDIRECT,
                      MetaInformation,
                      PortalId,
                      SEOUrl,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
					  IsPublish
                     )
                            SELECT b.CMSSEOTypeId,
                                   @NewCMSContentPagesId,
                                   IsRedirect,
                                   MetaInformation,
                                   PortalId,
                                   SEOUrl,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate,
								   case when a.SEOUrl IS NULL OR a.SEOUrl = ''  then 0 else 1 end
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSSEOType AS b ON(name = 'Content Page');
                     SET @CmsSeoDetailId = SCOPE_IDENTITY();
                     INSERT INTO ZnodeCMSSEODetailLocale
                     (CMSSEODetailId,
                      LocaleId,
                      SEOTitle,
                      SEODescription,
                      SEOKeywords,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @CmsSeoDetailId,
                                   @DefaultlocaleId,
                                   SEOTitle,
                                   SEODescription,
                                   SEOKeywords,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSSEOType AS b ON(name = 'Content Page');
                     INSERT INTO @Profiledata
                            SELECT item
                            FROM dbo.Split
                            (
                            (
                                SELECT TOP 1 ProfileIds
                                FROM @InsertContentPage
                            ), ','
                            );
                     INSERT INTO ZnodeCMSContentPagesProfile
                     (CMSContentPagesId,
                      ProfileId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @NewCMSContentPagesId,
                                   s.ProfileId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 CROSS APPLY @Profiledata AS s;
                     INSERT INTO ZnodeCMSContentPageGroupMapping
                     (CMSContentPageGroupId,
                      CMSContentPagesId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPageGroupId,
                                   @NewCMSContentPagesId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a;
                     SELECT ZCP.CMSContentPagesId,
                            ZCP.PortalId,
                            ZCP.CMSTemplateId,
                            ZCCPL.PageTitle,
                            ZCP.PageName,
                            ZCP.ActivationDate,
                            ZCP.ExpirationDate,
                            ZSDl.SEOTitle,
                            ZSDl.SEODescription,
                            ZSDl.SEOKeywords,
                            ZSD.SEOUrl,
                            ZSD.IsRedirect,
                            ZSD.MetaInformation,
                            ICP.ProfileIds
                     FROM ZnodeCMSContentPages AS ZCP
                          INNER JOIN ZnodeCMSSEODetail AS ZSD ON ZCP.CMSContentPagesId = ZSD.SEOId
                          INNER JOIN ZnodeCMSSEODetailLocale AS ZSDl ON(ZSDL.CMSSEODetailId = ZSD.CMSSEODetailId
                                                                        AND ZSDl.LocaleId = @DefaultlocaleId)
                          INNER JOIN ZnodeCMSSEOType AS ZCST ON ZCST.CMSSEOTypeId = ZSD.CMSSEOTypeId
                                                                AND ZCST.name = 'Content Page'
                          INNER JOIN @InsertContentPage AS ICP ON ZCP.PageName = ICP.PageName
                          INNER JOIN ZnodeCMSContentPagesLocale AS ZCCPL ON ZCCPL.CMSContentPagesId = ZCP.CMSContentPagesId
                                                                            AND ZCCPL.LocaleId = @DefaultlocaleId
                     WHERE ZCP.CMSContentPagesId = @NewCMSContentPagesId;
                 END;
             ELSE
                 BEGIN
                     UPDATE ZCCP
                       SET
                           ZCCP.PortalId = ICP.PortalId,
                           ZCCP.CMSTemplateId = ICP.CMSTemplateId,
                           ZCCP.PageName = ICP.PageName,
                           ZCCP.ActivationDate = ICP.ActivationDate,
                           ZCCP.ExpirationDate = ICP.ExpirationDate,
                           ZCCP.IsActive = ICP.IsActive,
                           ZCCP.ModifiedBy = @UserId,
                           ZCCP.ModifiedDate = @GetDate
                     FROM ZnodeCMSContentPages ZCCP
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId;
                     
					 UPDATE ZCCPL
                       SET
                           ZCCPL.PageTitle = ICP.PageTitle
                     FROM ZnodeCMSContentPagesLocale ZCCPL
                          INNER JOIN @InsertContentPage ICP ON ZCCPL.CMSContentPagesId = ICP.CMSContentPagesId
                                                               AND ZCCPL.LocaleId = ICP.LocaleId;
                     INSERT INTO ZnodeCMSContentPagesLocale
                     (CMSContentPagesId,
                      LocaleId,
                      PageTitle,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPagesId,
                                   LocaleId,
                                   PageTitle,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage TBICP
                            WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSContentPagesLocale ZCCPL
                                WHERE ZCCPL.CMSContentPagesId = TBICP.CMSContentPagesId
                                      AND ZCCPL.LocaleId = TBICP.LocaleId
                            );


							


                     UPDATE ZCSD
                       SET
                           ZCSD.IsRedirect = ICP.IsRedirect,
                           ZCSD.MetaInformation = ICP.MetaInformation,
                           ZCSD.SEOUrl = ICP.SEOUrl,
                           ZCSD.ModifiedBy = @UserId,
                           ZCSD.ModifiedDate = @GetDate,
						   ZCSD.IsPublish = case when ICP.SEOUrl IS NULL OR ICP.SEOUrl = ''  then 0 else 1 end
                     FROM ZnodeCMSSEODetail ZCSD
                          INNER JOIN ZnodeCMSContentPages ZCCP ON ZCSD.SEOId = ZCCP.CMSContentPagesId
                          INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                             AND ZCST.Name = 'Content Page'
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId;

						     

                   
				     UPDATE ZCSDL
                       SET
                           ZCSDl.SEOTitle = ICP.SEOTitle,
                           ZCSDl.SEODescription = ICP.SEODescription,
                           ZCSDl.SEOKeywords = ICP.SEOKeywords,
                           ZCSDl.ModifiedBy = @UserId,
                           ZCSDl.ModifiedDate = @GetDate
                     FROM ZnodeCMSSEODetailLocale ZCSDL
                          INNER JOIN ZnodeCMSSEODetail ZCSD ON(ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId)
                          INNER JOIN ZnodeCMSContentPages ZCCP ON ZCSD.SEOId = ZCCP.CMSContentPagesId
                          INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                             AND ZCST.Name = 'Content Page'
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId
                                                               AND ZCSDL.LocaleId = ICP.LocaleId
                                                               AND ZCSDL.LocaleId = ICP.LocaleId;
                      INSERT INTO ZnodeCMSSEODetail (CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish)
					   
					   SELECT  CMSSEOTypeId,CMSContentPagesId,IsRedirect,MetaInformation   ,PortalId ,SEOUrl ,@UserId, @GetDate, @UserId, @GetDate,case when TBL.SEOUrl IS NULL OR TBL.SEOUrl = ''  then 0 else 1 end   
             			FROM  @InsertContentPage  TBL
						LEFT JOIN ZnodeCMSSEOType ZCST   ON (ZCST.Name = 'Content Page')
						 WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSSEODetail ZCSODL
                                WHERE ZCSODL.SEOId = TBL.CMSContentPagesId
                                     
                            );
					    
					 INSERT INTO ZnodeCMSSEODetailLocale
                     (CMSSEODetailId,
                      LocaleId,
                      SEOTitle,
                      SEODescription,
                      SEOKeywords,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT ZCSD.CMSSEODetailId,
                                   ICP.LocaleId,
                                   ICP.SEOTitle,
                                   ICP.SEODescription,
                                   ICP.SEOKeywords,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodeCMSSEODetail ZCSD
                                 INNER JOIN ZnodeCMSContentPages ZCCP ON ZCSD.SEOId = ZCCP.CMSContentPagesId
                                 INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                                    AND ZCST.Name = 'Content Page'
                                 INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId
                            WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSSEODetailLocale ZCSODL
                                WHERE ZCSODL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                      AND ZCSODL.LocaleId = ICP.LocaleId
                            );
                     INSERT INTO @Profiledata
                            SELECT item
                            FROM dbo.Split
                            (
                            (
                                SELECT TOP 1 ProfileIds
                                FROM @InsertContentPage
                            ), ','
                            );
                     DELETE FROM ZnodeCMSContentPagesProfile
                     WHERE CMSContentPagesId IN
                     (
                         SELECT CMSContentPagesId
                         FROM @InsertContentPage
                     );
                     INSERT INTO ZnodeCMSContentPagesProfile
                     (CMSContentPagesId,
                      ProfileId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT q.CMSContentPagesId,
                                   s.ProfileId,
                                @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 LEFT JOIN ZnodeCMSContentPages AS q ON(a.CMSContentPagesId = q.CMSContentPagesId)
                                 CROSS APPLY @Profiledata AS s;
                    
					 DELETE FROM ZnodeCMSContentPageGroupMapping
                     WHERE CMSContentPagesId IN
                     (
                         SELECT CMSContentPagesId
                         FROM @InsertContentPage    
                     );
                     
					 
					  
				     INSERT INTO ZnodeCMSContentPageGroupMapping
                     (CMSContentPageGroupId,
                      CMSContentPagesId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPageGroupId,
                                   b.CMSContentPagesId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSContentPages AS b ON(a.CMSContentPagesId = b.CMSContentPagesId AND a.pageName = b.PageName)
						    WHERE  NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSContentPageGroupMapping ZCCPL
                                WHERE ZCCPL.CMSContentPagesId = b.CMSContentPagesId
                                      AND ZCCPL.CMSContentPageGroupId = a.CMSContentPageGroupId
                            );
						  		 
								 
								 ;
                     SELECT ZCP.CMSContentPagesId,
                            ZCP.PortalId,
                            ZCP.CMSTemplateId,
                            ZCPL.PageTitle,
                            ZCP.PageName,
                            ZCP.ActivationDate,
                            ZCP.ExpirationDate,
                            ZSDl.SEOTitle,
                            ZSDl.SEODescription,
                            ZSDl.SEOKeywords,
                            ZSD.SEOUrl,
                            ZSD.IsRedirect,
                            ZSD.MetaInformation,
                            ICP.ProfileIds
                     FROM ZnodeCMSContentPages AS ZCP
                          INNER JOIN ZnodeCMSSEODetail AS ZSD ON ZCP.CMSContentPagesId = ZSD.SEOId
                          INNER JOIN ZnodeCMSSEODetailLocale AS ZSDL ON(ZSD.CMSSEODetailId = ZSDL.CMSSEODetailId
                                                                        AND ZSDL.LocaleId = @DefaultlocaleId)
                          INNER JOIN ZnodeCMSSEOType AS ZCST ON ZCST.CMSSEOTypeId = ZSD.CMSSEOTypeId
                                                                AND ZCST.name = 'Content Page'
                          INNER JOIN @InsertContentPage AS ICP ON ZCP.CMSContentPagesId = ICP.CMSContentPagesId
                          INNER JOIN ZnodeCMSContentPagesLocale AS ZCPL ON ZCP.CMSContentPagesId = ZCPL.CMSContentPagesId
				   
						  ;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE() 
             
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateContentPage @ContentPageXML = '+CAST(@ContentPageXML AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_InsertUpdateContentPage',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSearchProfile')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSearchProfile
END 
GO 
CREATE  PROCEDURE [dbo].[Znode_InsertUpdateSearchProfile]
(   @SearchProfileId       int,
    @ProfileName           nvarchar(200),
	@SearchQueryTypeId     int,
	@SearchSubQueryTypeId  int,
    @SearchProfileFeatureList SearchProfileFeatureList readonly ,
    @SearchProfileAttributeList SearchProfileAttributeList readonly ,
    @UserId                INT,
	@PublishCatalogId      int,
	@Operator			   nvarchar(20),	
	@IsDefault             bit=0 ,
	@SearchProfileFieldValue  SearchProfileFieldValueFactor  readonly
	 )
AS 
   /* 
    Summary: This Procedure is used to save and edit the quote line item      
    Unit Testing   
    Exec Znode_InsertUpdateQuoteLineItem 
	Unit Testing

	 GO 
	declare @p7 dbo.SearchProfileFetureList
	insert into @p7 values(N'0',1)

	declare @p8 dbo.SearchProfileAttributeList
	insert into @p8 values(N'ProductSpecification',0,0,1)
	insert into @p8 values(N'ShortDescription',0,0,3)
	insert into @p8 values(N'ProductName',0,0,2)
	insert into @p8 values(N'FeatureDescription',0,0,4)
	insert into @p8 values(N'SKU',0,0,5)

	exec sp_executesql N'Znode_InsertUpdateSearchProfile  @SearchProfileId,@ProfileName,@SearchQueryTypeId,@SearchSubQueryTypeId,@SearchProfileFeatureList,@SearchProfileAttributeList,@UserId,@PublishCatalogId,@Operator,@IsDefault',N'@SearchProfileId int,@Prof
ileName nvarchar(17),@SearchQueryTypeId int,@SearchSubQueryTypeId int,@SearchProfileFeatureList [dbo].[SearchProfileFetureList] READONLY,@SearchProfileAttributeList [dbo].[SearchProfileAttributeList] READONLY,@UserId int,@PublishCatalogId int,@Operator nva
rchar(2),@IsDefault bit',@SearchProfileId=0,@ProfileName=N'FineFoodsProfile1',@SearchQueryTypeId=2,@SearchSubQueryTypeId=0,@SearchProfileFeatureList=@p7,@SearchProfileAttributeList=@p8,@UserId=0,@PublishCatalogId=3,@Operator=N'OR',@IsDefault=0
   
	*/
	   BEGIN
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate(),@PublishCatalogSearchProfileId int ,@ReturnMessage  NVARCHAR(max)= ''
  
         BEGIN TRAN A;
         BEGIN TRY


	


		  If Isnull(@SearchProfileId,0)=0  
		  Begin
			IF EXISTS (SELECT TOP 1 1 from ZnodeSearchProfile ZSP WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile PCP WHERE PCP.PublishCatalogId =@PublishCatalogId AND PCP.SearchProfileId =ZSP.SearchProfileId   ) AND ProfileName = @ProfileName  )
			BEGIN 
				SELECT @SearchProfileId AS ID,'ProfileName Already Exists' As MessageDetails,CAST(0 AS BIT) AS Status;   	  
				Return ; 
			END 
			INSERT INTO [dbo].[ZnodeSearchProfile] ([ProfileName],[SearchQueryTypeId],[SearchSubQueryTypeId],[Operator],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
			Select @ProfileName,@SearchQueryTypeId,@SearchSubQueryTypeId,@Operator,@UserId,@GetDate,@UserId,@GetDate
			Set @SearchProfileId=SCOPE_IDENTITY()
		  End
		  else 
		  Begin
			IF EXISTS (SELECT TOP 1 1  FROM [ZnodeSearchProfile] ZSP WHERE [ProfileName] = @ProfileName AND 
			EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogSearchProfile PCP WHERE PCP.PublishCatalogId =@PublishCatalogId AND PCP.SearchProfileId =ZSP.SearchProfileId   ) AND 
			 ZSP.SearchProfileId <>  Isnull(@SearchProfileId,0)  )
			BEGIN 
				SELECT @SearchProfileId AS ID,'ProfileName Already Exists' As MessageDetails,CAST(0 AS BIT) AS Status;   	  
				Return ; 
			END 

		    Update a
			Set a.[ProfileName]=@ProfileName,
			a.SearchQueryTypeId=@SearchQueryTypeId,
			a.SearchSubQueryTypeId=@SearchSubQueryTypeId,
			a.Operator = @Operator,
			a.ModifiedBy=@UserId,
			a.ModifiedDate=@GetDate
			from [dbo].[ZnodeSearchProfile] a
			Where SearchProfileId=@SearchProfileId
		    
		  End 

		  delete f
		  from ZnodeSearchProfileAttributeMapping f
		  Where SearchProfileId=@SearchProfileId
		  and not exists(Select 1 from @SearchProfileAttributeList d
		  where f.AttributeCode=d.AttributeCode )
		  AND f.IsFacets = 0

		  INSERT INTO [dbo].ZnodeSearchProfileAttributeMapping([SearchProfileId],[AttributeCode],[IsFacets],[IsUseInSearch],[BoostValue],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
		  Select @SearchProfileId,[AttributeCode],[IsFacets],[IsUseInSearch],[BoostValue],@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
		   from @SearchProfileAttributeList d
		  where  not exists(Select 1 from ZnodeSearchProfileAttributeMapping f
		  where f.AttributeCode=d.AttributeCode 
		  and f.SearchProfileId=@SearchProfileId)

		  Update f
		  Set f.[IsFacets]=d.[IsFacets],f.[IsUseInSearch]=d.[IsUseInSearch],
		  f.[BoostValue]=d.[BoostValue]
		  From [dbo].ZnodeSearchProfileAttributeMapping f
		  inner join @SearchProfileAttributeList d
		  on f.AttributeCode=d.AttributeCode
		   and f.SearchProfileId=@SearchProfileId

		   delete f
		  from [ZnodeSearchProfileFeatureMapping] f
		  Where SearchProfileId=@SearchProfileId
		  and not exists(Select 1 from @SearchProfileFeatureList d
		  where f.SearchFeatureId=d.SearchProfileFeatureId )

		  INSERT INTO [dbo].[ZnodeSearchProfileFeatureMapping]([SearchProfileId],SearchFeatureId,[SearchFeatureValue],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
		  Select @SearchProfileId,d.SearchProfileFeatureId,[SearchFeatureValue]
		  ,@UserId [CreatedBy],@GetDate[CreatedDate],@UserId [ModifiedBy],@GetDate [ModifiedDate]
		   from @SearchProfileFeatureList d
		  where  not exists(Select 1 from [ZnodeSearchProfileFeatureMapping] f
		  where f.SearchFeatureId=d.SearchProfileFeatureId 
		  and f.SearchProfileId=@SearchProfileId)

		  Update f
		  Set f.[SearchFeatureValue]=d.SearchFeatureValue,
		  f.ModifiedBy=@UserId,
		  f.ModifiedDate=@GetDate
		  From [dbo].[ZnodeSearchProfileFeatureMapping] f
		  inner join @SearchProfileFeatureList d
		  on f.SearchFeatureId=d.SearchProfileFeatureId  and f.SearchProfileId=@SearchProfileId
          
		   Select @PublishCatalogSearchProfileId=PublishCatalogSearchProfileId
		   From  [dbo].[ZnodePublishCatalogSearchProfile]
		   Where [PublishCatalogId]=@PublishCatalogId and  SearchProfileId = @SearchProfileId 


		   If @IsDefault=1
		      update [ZnodePublishCatalogSearchProfile]
			  set [IsDefault]=@IsDefault,
			  ModifiedBy=@UserId,
		      ModifiedDate=@GetDate
			  From  [ZnodePublishCatalogSearchProfile]
			  Where PublishCatalogSearchProfileId!=@PublishCatalogSearchProfileId
			  and [PublishCatalogId]=@PublishCatalogId

		   If Isnull(@PublishCatalogSearchProfileId,0)>0
		   Begin
		      update [ZnodePublishCatalogSearchProfile]
			  set [IsDefault]=@IsDefault,
			  ModifiedBy=@UserId,
		      ModifiedDate=@GetDate
			  From  [ZnodePublishCatalogSearchProfile]
			  Where PublishCatalogSearchProfileId=@PublishCatalogSearchProfileId
		   End
		   Else
		   INSERT INTO [dbo].[ZnodePublishCatalogSearchProfile] ([PublishCatalogId],[SearchProfileId],[IsDefault],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate])
		   Select @PublishCatalogId,@SearchProfileId,@IsDefault,@UserId,@GetDate,@UserId,@GetDate

		   DELETE VF
		   FROM ZnodeSearchProfileFieldValueFactor VF
		   WHERE VF.SearchProfileId = @SearchProfileId
		   AND NOT EXISTS (SELECT 1 FROM @SearchProfileFieldValue SFP WHERE SFP.FieldName = VF.FieldName)


		   INSERT INTO ZnodeSearchProfileFieldValueFactor (SearchProfileId,FieldName,FieldValueFactor,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		   SELECT @SearchProfileId,SPF.FieldName,SPF.FieldValueFactor,@UserId,@GetDate,@UserId,@GetDate
		   FROM @SearchProfileFieldValue SPF
		   WHERE NOT EXISTS (SELECT 1 FROM ZnodeSearchProfileFieldValueFactor pf WHERE pf.FieldName = SPF.FieldName AND pf.SearchProfileId = @SearchProfileId)

		   UPDATE VF
		   SET FieldValueFactor = SPF.FieldValueFactor
		   FROM ZnodeSearchProfileFieldValueFactor VF
		   INNER JOIN @SearchProfileFieldValue SPF ON (SPF.FieldName = VF.FieldName) AND VF.SearchProfileId = @SearchProfileId


		  SELECT @SearchProfileId AS ID,'Successfull' MessageDetails,CAST(1 AS BIT) AS Status;   			
			 COMMIT TRAN A;
         END TRY
         BEGIN CATCH
        
		    -- SET @Status = 0;
		  ----   DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 ----@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateQuoteLineItem @CartLineItemXML = '+CAST(@CartLineItemXML AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,'UnSuccessfull' MessageDetails,CAST(0 AS BIT) AS Status;                    
			 ROLLBACK TRAN A;
    --         EXEC Znode_InsertProcedureErrorLog
				--@ProcedureName = 'Znode_InsertUpdateQuoteLineItem',
				--@ErrorInProcedure = @Error_procedure,
				--@ErrorMessage = @ErrorMessage,
				--@ErrorLine = @ErrorLine,
				--@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_RevertOrderInventory')
BEGIN 
	DROP PROCEDURE Znode_RevertOrderInventory
END 
GO 
CREATE  PROCEDURE [dbo].[Znode_RevertOrderInventory]
(   @OmsOrderDetailsId   INT,
    @OmsOrderLineItemIds VARCHAR(2000) = '',
    @Status              BIT OUT,
    @UserId              INT,
	@IsRevertAll         BIT = 0)
AS 
   /* Summary: this proceedure is used to revert the order  inventory in case of order revert
      Unit Testing:
	  begin tran
	  EXEC  Znode_RevertOrderInventory 
      rollback tran
    */
     BEGIN
         BEGIN TRAN ZROI;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @Revert NVARCHAR(MAX), @SQL NVARCHAR(MAX)
			 
			 SET @SQL = '
			
             UPDATE ZI
               SET
                   ZI.Quantity = ZI.Quantity + ZOOW.Quantity,
                   ZI.MOdifiedBy = '''+CAST(@UserId AS VARCHAR(1000))+''',
                   ZI.ModifiedDate = '''+CAST(@GetDate AS VARCHAR(1000))+'''
             FROM ZnodeOmsOrderWarehouse ZOOW
                  INNER JOIN ZnodeOmsOrderLineItems ZOOLI ON(ZOOLI.OmsOrderLineItemsId = ZOOW.OmsOrderLineItemsId)
                  INNER JOIN ZnodeInventory ZI ON(ZI.WarehouseId = ZOOW.WarehouseId
                                                  AND ZI.SKU = ZOOLI.SKU)
             WHERE 
			  ZOOLI.OmsOrderDetailsId = '+CAST(@OmsOrderDetailsId AS VARCHAR(1000))+'
                   AND EXISTS
             (
                 SELECT TOP 1 1     FROM dbo.split('''+@OmsOrderLineItemIds+''', '','') SP WHERE Sp.Item = ZOOLI.OmsOrderLineItemsId OR '''+@OmsOrderLineItemIds+''' = ''''
             )  
			 ' +CASE WHEN @IsRevertAll = 0 THEN 'AND NOT EXISTS   (SELECT TOP  1 1 FROM ZnodeOmsOrderState OOS WHERE OOS.OrderStateName = ''RETURNED'' AND OOS.OmsOrderStateId = ZOOLI.OrderLineItemStateId) ' ELSE '' END

			

			 PRINT @sql

			 EXEC(@SQL)

             SET @Status = 1;
             SELECT 1 ID,
                    CAST(1 AS BIT) Status;
             COMMIT TRAN ZROI;
         END TRY
         BEGIN CATCH
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_RevertOrderInventory @OmsOrderDetailsId = '+CAST(@OmsOrderDetailsId AS VARCHAR(200))+',@OmsOrderLineItemIds='+@OmsOrderLineItemIds+',@UserId='+CAST(@UserId AS VARCHAR(200))+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN ZROI;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_RevertOrderInventory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'ZnodeReport_GetTopSpendingCustomers')
BEGIN 
	DROP PROCEDURE ZnodeReport_GetTopSpendingCustomers
END 
GO 
CREATE PROCEDURE [dbo].[ZnodeReport_GetTopSpendingCustomers]
(   @BeginDate    DATE         = NULL,
	@EndDate      DATE         = NULL,
	@PortalId     VARCHAR(MAX) = '',
	@UserId       VARCHAR(MAX) = '',
	@FirstName    VARCHAR(MAX) = '',
	@LastName     VARCHAR(MAX) = '',
	@OrderStateId NVARCHAR(MAx)= '')
AS 
/*
     Summary :- This Procedure is used to get frequently Appear users  
     Unit Testing 
     EXEC ZnodeReport_GetTopSpendingCustomers @OrderStateId = '40'
*/
     BEGIN
         BEGIN TRY
        
             DECLARE @TBL_ReportOrderUser TABLE (OmsOrderId INT, UserId     INT, PortalId   INT);
		   DECLARE @TBL_ReportOrderDetails TABLE (UserId INT, BillingFirstName nvarchar(200),BillingLastName nvarchar	(200),
		                                           StoreName nvarchar(max), OrderCount NVarchar(100), Total NVarchar(100),Symbol NVARCHAR(100) );
             INSERT INTO @TBL_ReportOrderUser (OmsOrderId, UserId,PortalId)
                    
				SELECT MAX(ZOOD.OmsOrderId) OmsOrderId,
                           UserId,
                           PortalId
                    FROM ZnodeOmsOrderDetails ZOOD
                    WHERE (EXISTS
                          (
                              SELECT TOP 1 1
                              FROM dbo.split(@PortalId, ',') SP
                              WHERE CAST(ZOOD.PortalId AS VARCHAR(100)) = SP.Item
                                    
                          )OR @PortalId = '')
					AND (EXISTS
                            (
                                SELECT TOP 1 1
                                FROM dbo.split(@OrderStateId, ',') SP
                                WHERE CAST(ZOOD.OmsOrderStateId AS VARCHAR(100)) = SP.Item
                                     
                            )	 OR @OrderStateId = '')
					AND Zood.IsActive =1 	
                    GROUP BY UserId,
                             PortalId;




             WITH Cte_ReportUserDetails
                  AS (
				  SELECT ZOOD.UserId,
                            isnull(ZU.FirstName, ZOOD.BillingFirstName) BillingFirstName,
                            isnull(ZU.LastName, ZOOD.BillingLastName) BillingLastName,
                             ZOOD.PortalId,
                             ZP.StoreName
                      FROM @TBL_ReportOrderUser O
                           INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = O.OmsOrderId)
                           INNER JOIN ZnodePortal ZP ON(Zp.PortalId = ZOOD.PortalId)
						   left outer join ZnodeUser ZU on(ZOOD.userId = zu.userId)
                      WHERE((EXISTS
                            (
                                SELECT TOP 1 1
                                FROM dbo.split(@PortalId, ',') SP
                                WHERE CAST(ZOOD.PortalId AS VARCHAR(100)) = SP.Item
                                      OR @PortalId = ''
                            )))
					    AND  ZOOD.IsActive =1 	
						AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM dbo.split(@OrderStateId, ',') SP
                                WHERE CAST(ZOOD.OmsOrderStateId AS VARCHAR(100)) = SP.Item
                                      OR @OrderStateId = ''
                            )	
							)

                  Insert into @TBL_ReportOrderDetails  (UserID , BillingFirstName ,BillingLastName , StoreName , OrderCount , Total,Symbol  )
                  SELECT CTRO.UserId,
                         CTRO.BillingFirstName,
                         CTRO.BillingLastName,
                         StoreName,
                         COUNT(ZOOD.OmsOrderId) AS 'OrderCount',
                         --Dbo.Fn_GetDefaultPriceRoundOff(SUM(ZOOD.Total))AS 'Total',
						 SUM(ZOOD.Total)AS 'Total',  
					ISNULL(ZC.Symbol,dbo.Fn_GetDefaultCurrencySymbol()) Symbol
                  FROM Cte_ReportUserDetails CTRO
                       INNER JOIN ZnodeOmsOrderDetails ZOOD ON(CTRO.UserId = ZOOD.UserId)
                       LEFT JOIN ZnodeCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode)
                  WHERE(CAST(ZOOD.OrderDate AS DATE) BETWEEN CASE
                                                                 WHEN @BeginDate IS NULL
                                                                 THEN CAST(ZOOD.OrderDate AS DATE)
                                                                 ELSE @BeginDate
                                                             END AND 
												 CASE
                                                                         WHEN @EndDate IS NULL
                                                                         THEN CAST(ZOOD.OrderDate AS DATE)
                                                                         ELSE @EndDate
                                                             END)
                       AND ((EXISTS
                            (
                                SELECT TOP 1 1
                                FROM dbo.split(@PortalId, ',') SP
                                WHERE CAST(CTRO.PortalId AS VARCHAR(100)) = SP.Item
                                      OR @PortalId = ''
                            )))
						AND EXISTS
                            (
                                SELECT TOP 1 1
                                FROM dbo.split(@OrderStateId, ',') SP
                                WHERE CAST(ZOOD.OmsOrderStateId AS VARCHAR(100)) = SP.Item
                                      OR @OrderStateId = ''
                            )	
                       AND (CTRO.BillingFirstName LIKE '%'+@FirstName+'%'
                            OR @FirstName = '')
                       AND (CTRO.BillingLastName LIKE '%'+@LastName+'%'
                            OR @LastName = '')

                       AND ((EXISTS
                            (
                                SELECT TOP 1 1
                                FROM dbo.split(@UserId, ',') SP
                                WHERE CAST(CTRO.UserId AS VARCHAR(100)) = ltrim(rtrim(SP.Item))
                                      OR @UserId = ''
                            )))
							AND ZOOD.IsActive =1 
                  GROUP BY CTRO.UserId,
                           CTRO.BillingFirstName,
                           CTRO.BillingLastName,
                           StoreName,ZC.Symbol
					
					  Select UserID , BillingFirstName ,BillingLastName , StoreName , CAST (OrderCount AS Numeric) as OrderCount , CAST (Total AS decimal(18,2)) Total,Symbol
					  from @TBL_ReportOrderDetails ORder by CAST (Total AS Numeric) DESC;
                 
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_GetTopSpendingCustomers @PortalId = '+@PortalId+',@BeginDate='+CAST(@BeginDate AS VARCHAR(200))+',@EndDate='+CAST(@EndDate AS VARCHAR(200))+',@UserId='+@UserId+',@FirstName='+@FirstName+',@LastName='+@LastName+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'ZnodeReport_GetTopSpendingCustomers',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO


--------------------------------data script ----------------------------------------------------------------------------------------------------------------------------------

Go
insert into ZnodeApplicationSetting (GroupName,ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 
'Table',	'ZnodeSearchProfile',	'<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>SearchProfileId</name><headertext>Checkbox</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>ProfileName</name><headertext>Search Profile Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>PublishCatalogId</name><headertext>Catalog ID</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>CatalogName</name><headertext>Catalog Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>PortalId</name><headertext>Store ID</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>PortalName</name><headertext>Store Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>IsDefault</name><headertext>Is Default</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Search/Search/GetTabStructureForProfile|/Search/Search/Delete</manageactionurl><manageparamfield>searchProfileId|searchProfileId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>',	'SearchProfile',	'SearchProfile',	'SearchProfile',	0,	NULL,	NULL,	NULL,	NULL,	2,	getdate(),	2	, getdate()
where not exists (select * from ZnodeApplicationSetting where ItemName = 'ZnodeSearchProfile')

GO
IF EXISTS (SELECT TOP 1 1 FROM ZnodeapplicationSetting WHERE ItemName = 'ZnodeSearchProfile')
BEGIN
Update ZnodeapplicationSetting  SET Setting = '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>SearchProfileId</name><headertext>Checkbox</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>ProfileName</name><headertext>Search Profile Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>PublishCatalogId</name><headertext>Catalog ID</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>CatalogName</name><headertext>Catalog Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>PortalId</name><headertext>Store ID</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>PortalName</name><headertext>Store Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>IsDefault</name><headertext>Is Default</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Search/Search/GetTabStructureForProfile|/Search/Search/Delete</manageactionurl><manageparamfield>searchProfileId|searchProfileId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'  where ItemName  = 'ZnodeSearchProfile'

END
GO

IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeAddress' AND COLUMN_NAME = 'StateName')
BEGIN
Update ZnodeAddress SET StateName = ltrim(rtrim(StateName)) 
END

GO
IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssociateBrands')
BEGIN
updATE zap
SET AccessPermissionId = 4
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssociateBrands' and za.actionid = zap.ActionId)
END
GO

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssociateShippings')
BEGIN
updATE zap
SET AccessPermissionId = 4
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssociateShippings' and za.actionid = zap.ActionId)
END


GO
--Task Id ZPD-1795
Go
IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'Create' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 2
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'Create' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'Edit' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 2
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'Edit' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'Delete' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 4
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'Delete' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'AssignGroups' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 2
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'AssignGroups' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'AssignAttributes' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 2
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'AssignAttributes' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
ENd
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'UpdateAttributeDisplayOrder' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 2
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UpdateAttributeDisplayOrder' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'UpdateGroupDisplayOrder' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 2
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UpdateGroupDisplayOrder' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssignAttribute' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 4
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssignAttribute' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go

IF EXISTS (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssignGroup' and ControllerName = 'FormBuilder')
BEGIN
updATE zap
SET AccessPermissionId = 4
FROM ZnodeMenuActionsPermission zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssignGroup' and ControllerName = 'FormBuilder' and za.actionid = zap.ActionId)
END
Go


--Task Id: ZPD-1723

updATE zap
SET ControllerName = 'Promotion'
FROM ZnodeActions zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'GetAssociatedShippings' and ControllerName = 'Promotion ' and za.actionid = zap.ActionId)
Go

updATE zap
SET ControllerName = 'Promotion'
FROM ZnodeActions zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssociateShippings' and ControllerName = 'Promotion ' and za.actionid = zap.ActionId)
Go

updATE zap
SET ControllerName = 'Promotion'
FROM ZnodeActions zap
where exists (select top 1 1 FROm ZnodeActions za where ActionName = 'UnAssociateBrands' and ControllerName = 'Promotion ' and za.actionid = zap.ActionId)
Go

-- bugid - 1284

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null ,'WebSite','RemoveAssociatedBrands',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'RemoveAssociatedBrands')


insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store')	
      ,(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'RemoveAssociatedBrands')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'RemoveAssociatedBrands'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
 (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store'),
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName= 'RemoveAssociatedBrands')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
 (select MenuId from ZnodeMenu where MenuName = 'Stores' AND ControllerName = 'Store') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'WebSite' and ActionName = 'RemoveAssociatedBrands'))

--
GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','GetfieldValuesList',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'GetfieldValuesList')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetfieldValuesList')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetfieldValuesList'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetfieldValuesList')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetfieldValuesList'))

GO

--task Id: ZPD-1843

Go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null ,'Inventory','GetInventoryDetail',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'GetInventoryDetail')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail'))


GO

IF NOT EXISTS (select top 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsOrderDetails' AND COLUMN_NAME = 'TransactionId')
 BEGIN
	 Alter table ZnodeOmsOrderDetails Add TransactionId varchar(20)  Null
	
 END

 GO

 IF EXISTS  (SELECT TOP 1  1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'znodePimattribute' AND COLUMN_NAME = 'IsShowOnGrid')
BEGIN
update znodePimattribute
set IsShowOnGrid = 1
where  attributecode = 'isdownloadable' 
END

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryProducts
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
( @pimCatalogId int = 0,@pimCategoryHierarchyId int = 0,@userId int,@versionId int= 0,@status int = 0 OUT,@isDebug bit = 0  )  AS  /*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	EXEC [Znode_GetPublishCategoryProducts]   
	@PimCatalogId = 3 
	, @PimCategoryHierarchyId = 153 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	Select @Status  

 */
	BEGIN   
		BEGIN TRY
			SET NOCOUNT ON;
			DECLARE @tBL_PublishIds table (PublishProductId int,PimProductId int,PublishCatalogId int)
			DECLARE @publishCatalogId int= isnull((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @pimCatalogId),0),@publishCataloglogId int= 0;
			DECLARE @tBL_CategoryCategoryHierarchyIds table (CategoryId int,ParentCategoryId int )
			DECLARE @pimProductId TransferId
			DECLARE @insertPublishProductIds table (PublishProductId int,PimProductId int,PublishCatalogId int )
			--DECLARE @TBL_CategoryXml TABLE ( CategoryXml XML);
				SELECT @versionId = max(PublishCataloglogId)
			FROM ZnodePublishCatalogLog 
			WHERE PublishCatalogId =@publishCatalogId
			INSERT INTO @tBL_CategoryCategoryHierarchyIds(CategoryId,ParentCategoryId ) SELECT DISTINCT PimCategoryId,NULL FROM ( SELECT PimCategoryId,ParentPimCategoryId FROM DBO.[Fn_GetRecurciveCategoryIds](@pimCategoryHierarchyId,@pimCatalogId) UNION SELECT PimCategoryId,NULL FROM ZnodePimCategoryHierarchy WHERE PimCategoryHierarchyId = @pimCategoryHierarchyId UNION SELECT PimCategoryId,NULL FROM [Fn_GetRecurciveCategoryIds_new] (@pimCategoryHierarchyId,@pimCatalogId) ) Category
			IF (isnull(@publishCatalogId,0) = 0 ) 
				BEGIN 
					SET @status = 1
					-- Catalog Not Published 
					RETURN 0;
				END

			-- Any other catalog was in process dont intitiate category publish	
			If Exists ( SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL  )
			Begin
					SET @status = 2
					RETURN 0;
			End

			--IF EXISTS (SELECT CategoryId FROM @TBL_CategoryCategoryHierarchyIds where CategoryId is not null AND CategoryId not in (select PimCategoryId  from ZnodePublishCategory
				--where PublishCatalogId = ISnull(@PublishCatalogId,0) and PimCategoryHierarchyId = @PimCategoryHierarchyId  ))
				--Begin
				--SET @Status = 2  -- Category / subcategory Not Publish 
				--insert into @TBL_CategoryXml (CategoryXml) 
				EXEC [Znode_GetPublishCategoryGroup] @publishCatalogId = @publishCatalogId,@versionId = 0,@userId =2,@isDebug = 1,@pimCategoryHierarchyId = @pimCategoryHierarchyId
			--END 
			BEGIN 
				INSERT INTO @insertPublishProductIds EXEC [Dbo].[Znode_InsertPublishProductIds] @publishCatalogId = @publishCatalogId,@userid = @userid,@pimProductId = @pimProductId,@pimCategoryHierarchyId = @pimCategoryHierarchyId
				INSERT INTO @pimProductId SELECT PimProductId FROM @insertPublishProductIds

				EXEC [Dbo].[Znode_GetPublishProductbulk] @publishCatalogId = @publishCatalogId,@versionId = @versionId,@pimProductId = @pimProductId,@userid = @userid,@pimCategoryHierarchyId = @pimCategoryHierarchyId,@pimCatalogId = @pimCatalogId
				UPDATE ZnodePimProduct 		SET IsProductPublish = 1 			WHERE EXISTS (SELECT TOP 1 1 
					FROM ZnodePublishProduct ZPP
					WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId 
						AND ZPP.PublishCatalogId = @publishCatalogId
					)
			END
			DECLARE @tBL_PublishCatalogId table(PublishCatalogId int,PublishProductId int,PublishCategoryId int,PimProductId int,VersionId int );
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId )  
			SELECT DISTINCT ZPC.PublishCatalogId,ZPX.PublishedId PublishProductId,ZPX.PublishCategoryId,ZPP.PimProductId,ZPX.PublishCatalogLogId FROM ZnodePublishCategory ZPC INNER JOIN @tBL_CategoryCategoryHierarchyIds CTC ON ZPC.PimCategoryId = CTC .CategoryId INNER JOIN ZnodePublishedXml ZPX ON ZPC.PublishCategoryId = ZPX.PublishCategoryId INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId AND ZPX.PublishedId = ZPP.PublishProductId WHERE ZPC.PublishCatalogId = @publishCatalogId AND ZPX.PublishCatalogLogId = @versionId
			INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId ) 
			SELECT IPP.PublishCatalogId,IPP.PublishProductId,0,IPP.PimProductId,@versionId FROM @insertPublishProductIds IPP 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @tBL_PublishCatalogId PCI WHERE IPP.PublishProductId = PCI.PublishProductId)
			
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1,
			    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
									AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
			WHERE PublishCatalogLogId = @versionId AND @versionId <> 0

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 
				FROM @tBL_PublishCatalogId ZPP
				WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId
				)
			--END
				--if isnull(@Status,0) <>  2   
				--Begin
				--	Select  NULL PublishCategoryId  where 1= 0 
				--	SELECT  NULL 'CategoryXml' where 1= 0 
				--End
				SELECT PublishCatalogId
					,PublishProductId
					,PublishCategoryId
					,VersionId
			FROM @tBL_PublishCatalogId
		END TRY
		BEGIN CATCH
			SELECT error_message()
				,error_procedure();
			UPDATE ZnodePublishCatalogLog 
			SET IsCatalogPublished = 0 
			WHERE PublishCatalogLogId = @versionId
			SET @status = 0;
			DECLARE @error_procedure varchar(1000)= error_procedure(),@errorMessage nvarchar(max)= error_message(),@errorLine varchar(100)= error_line(),@errorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+cast(@pimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@pimCategoryHierarchyId+',@UserId='+cast(@userId AS varchar(50))+',@UserId = '+cast(@userId AS varchar(50))+',@VersionId='+cast(@versionId AS varchar(50))+',@Status='+cast(@status AS varchar(10));
			SELECT 0 AS ID
				,cast(0 AS bit) AS Status;
			ROLLBACK TRAN GetPublishProducts;
			EXEC Znode_InsertProcedureErrorLog @procedureName = 'Znode_GetPublishCategoryProducts',@errorInProcedure = @error_procedure,@errorMessage = @errorMessage,@errorLine = @errorLine,@errorCall = @errorCall;
		END CATCH;
		END;

		GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
DROP PROCEDURE Znode_GetPublishProducts
END 
GO 
		
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 0 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
	
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			 
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			   
	         IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@userid	,@TokenId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId,@VersionId,@PimProductId,@userid
				 UPDATE ZnodePimProduct SET IsProductPublish = 1 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
										MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 AND IsCatalogPublished =1 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId

			
			-- SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				;

				SELECT PublishProductId AS ProductXml
				FROM @TBL_PublishCatalogId
				GROUP BY PublishProductId;
			END
			
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1,
			    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
									AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
		    WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0

			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 
			
			--UPDATE ZnodePimattributeValueLocale SET AttributeValue = 'Published' 
			--FROM ZnodePimattributeValue PAV
			--INNER JOIN ZnodePimattributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
			--WHERE PimAttributeId = @PimAttributeIsPublish
			--AND EXISTS ( SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = PAV.PimProductId )

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)
			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPriceFromAssociateProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPriceFromAssociateProducts
END 
GO 
CREATE  PROCEDURE [dbo].[Znode_GetPriceFromAssociateProducts]
(   
	@PortalId         INT,
    @SKU			  NVARCHAR(300),
	@PimProductId	  INT,
	@UserId			  INT = 2,
	@ProductType	  VARCHAR(200),
	@LocaleId		  INT )
AS 
  /*  
    Summary: WebStore: Calculate price from associate product and assign to parent products
	EXEC [Znode_GetPriceFromAssociateProducts]
	@PortalId         = 1 ,
	@SKU	= 'gr990',
	@PimProductId	=  97 ,
	@UserId	= 2,
	@ProductType	= 'Configurable Product',
	@LocaleId	= 1 

 */
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             SET NOCOUNT ON;

			 DECLARE @TBL_ListOfAssociateProducts TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingListOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				

			DECLARE @PimAttributeId INT,@currentUtcDate   VARCHAR(200) = ''
			SET @currentUtcDate   = GETDATE ()
			SET @PimAttributeId =   DBO.Fn_GetProductSKUAttributeId()
						    Declare @ChildProductIds TABLE (Id int, AssociatedProductDisplayOrder int )
			INSERT INTO @ChildProductIds (ID,AssociatedProductDisplayOrder) 
			SELECT ZPPT.PimProductId , ZPPT.DisplayOrder  from ZnodePimProductTypeAssociation ZPPT 
			WHERE ZPPT.PimParentProductId= @PimProductId
			

			--Price logic for Associate products
			INSERT INTO @TBL_ListOfAssociateProducts
			(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct,AssociatedProductDisplayOrder)
			SELECT ZPAV.PimProductId,ZPAVL.AttributeValue,@SKU ,@PimProductId,NULL , NULL,@PimProductId,
			CPI.AssociatedProductDisplayOrder 
			FROM ZnodePimAttributeValue ZPAV INNER JOIN ZnodePimAttributeValueLocale ZPAVL 
			ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
			Inner join @ChildProductIds  CPI ON CPI.ID = ZPAV.PimProductId  
			where ZPAV.PimAttributeId  = @PimAttributeId 

			


			SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),ChildSKU) 
			FROM @TBL_ListOfAssociateProducts where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			

			INSERT INTO @tbl_PricingListOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 


			update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			PLC.SalesPrice = PLCA.SalesPrice 
			from @TBL_ListOfAssociateProducts PLC inner join @tbl_PricingListOfAssociatedProduct
			PLCA on PLC.ChildSKU = PLCA.sku
			
			If @ProductType = 'Configurable Product'
				select Min(RetailPrice)  RetailPrice  , Min(SalesPrice) SalesPrice  from @TBL_ListOfAssociateProducts
			ELSE If @ProductType = 'grouped product'
				select TOP 1 RetailPrice , SalesPrice from @TBL_ListOfAssociateProducts
				Order by AssociatedProductDisplayOrder
			 COMMIT TRAN A;
			
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore_ver1 @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductDataForWebStore_ver1',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemQuantity')
BEGIN 
DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemQuantity
END 
GO 

CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@IsCallFromPDP BIT, @Status bit OUT)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem_aa @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
	1259
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @SaveCartLineItemIdForGroup int= 0;
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int IDENTITY(1, 1), OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute varchar(max), 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails )
			   SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ) AS BundleProductIds, Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ) AS ConfigurableProductIds, Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, 
			          Tbl.Col.value( 'PersonaliseValuesList[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

		DECLARE @OmsSavedCartId int, @OmsSavedCartLineItemId int,@OmsOrderId int;

	
		DECLARE @TBL_AllProductsTypeData TABLE
		( 
			 RowId int, SequenceId int IDENTITY(1, 1), ParentOmsSavedCartLineItemId int, SKU nvarchar(1000), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), CartAddOnDetails nvarchar(max), AutoAddon varchar(max), OmsOrderId int null ,IsFromAddon INT 
		);
		DECLARE @AddonProductSKU nvarchar(max)=	(SELECT TOP 1 AddOnValueIds	FROM @TBL_SavecartLineitems	), 
				@BundleProductSKU nvarchar(max)= (SELECT TOP 1 BundleProductIds	FROM @TBL_SavecartLineitems	);
		SET @OmsSavedCartId =( SELECT TOP 1 OmsSavedCartId FROM @TBL_SavecartLineitems);
		SET @OmsOrderId =( SELECT TOP 1 OmsOrderId FROM @TBL_SavecartLineitems );
		

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.BundleProductIds, ',' ) AS q
			   WHERE a.BundleProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> '' ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.ConfigurableProductIds, ',' ) AS q
			   WHERE a.ConfigurableProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
			   ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT RowID, NULL, SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS SKU, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.GroupProductIds, ',' ) AS q
			   WHERE a.GroupProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))) <> ''
			   ;

		IF EXISTS
		(
			SELECT TOP 1 1	FROM @TBL_SavecartLineitems	WHERE GroupProductIds IS NOT NULL OR  ConfigurableProductIds IS NOT NULL
		)
		BEGIN
			SET @AddOnQuantity =(SELECT MAX(Quantity) FROM @TBL_AllProductsTypeData	);
		END;


		INSERT INTO @TBL_AllProductsTypeData( RowId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT a.RowID, NULL, q.Item AS SKU,
											   CASE
											   WHEN @AddOnQuantity = 0 THEN a.Quantity
											   ELSE @AddOnQuantity
											   END, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.AddOnValueIds, ',' ) AS q   WHERE a.AddOnValueIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''

			  
	DECLARE @Tbl_SaveCartIds TABLE
		( 
			OmsSavedCartLineItemId int, SKU nvarchar(max), RowId int,ParentOmsSavedCartLineItemId INT 
		);

	DECLARE @IsCallForUpdate BIT = 0 
	DECLARE @saveCartLineItemId TABLE (OmsSavedCartLineItemId INT,SKU NVARCHAR(2000),OmsSavedCartId INT,ChildSKU NVARCHAR(max), Sequence INT ,RowId INT Identity(1,1) )

	-- for group,bundle and configure products
	INSERT INTO @saveCartLineItemId (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,YU.SKU ,YU.Sequence 
	FROM ZnodeOmsSavedCartLineItem CLI 
																INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
																INNER JOIN ZnodeOmsSavedCartLineItem   YU ON (Yu.ParentOmsSavedCartLineItemId = CLI.OmsSavedCartLineItemId)
																INNER JOIN  @TBL_AllProductsTypeData tbad ON (tbad.SKU = YU.SKU )
	 WHERE CLI.ParentOmsSavedCartLineItemId IS NULL 
	

	-- for simple products
	INSERT INTO @SaveCartLineItemId  (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,NULL ,CLI.Sequence  
	FROM ZnodeOmsSavedCartLineItem CLI 
	INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId AND CLI.Sequence  = s.Sequence )
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )													
	AND CLI.ParentOmsSavedCartLineItemId IS NULL 
	
	-- for personalized products
	INSERT INTO @SaveCartLineItemId  (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,NULL ,CLI.Sequence  
	FROM ZnodeOmsSavedCartLineItem CLI 
	INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId )
	INNER JOIN ZnodeOmsPersonalizeCartItem ZOPCI ON CLI.OmsSavedCartLineItemId = ZOPCI.OmsSavedCartLineItemId 
			AND ZOPCI.PersonalizeCode = SUBSTRING(s.PersonalisedAttribute, 1, CHARINDEX('~', s.PersonalisedAttribute)-1)
			AND ZOPCI.PersonalizeValue = SUBSTRING(s.PersonalisedAttribute, CHARINDEX('~',  s.PersonalisedAttribute)+1, 4000)
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )													
	AND CLI.ParentOmsSavedCartLineItemId IS NULL
	 
	IF @IsCallFromPDP = 1 AND EXISTS (SELECT TOP  1 1 FROM @TBL_SavecartLineitems WHERE PersonalisedAttribute IS NOT NULL)
	BEGIN
	
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId   m
								CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL), ',' ) AS q
								WHERE  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) 
																																						   AND s.PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000))
																																		 
		)	THEN 0 ELSE 1 END
	END

	ELSE IF @IsCallFromPDP = 1
		BEGIN
		
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId --a inner join @TBL_SavecartLineitems s on (a.sku = s.sku) where s.PersonalisedAttribute is null
		)	THEN 0 ELSE 1 END

		END
		 --SELECT * FROM @TBL_SavecartLineitems
		 --SELECT * FROM @saveCartLineItemId
		UPDATE SI
		 SET  OmsSavedCartLineItemId = CASE WHEN HJRHRH.OmsSavedCartLineItemId IS NULL THEN  SL.OmsSavedCartLineItemId ELSE HJRHRH.OmsSavedCartLineItemId END 
		      ,Sequence = CASE WHEN HJRHRH.Sequence IS NULL THEN  SI.Sequence ELSE HJRHRH.Sequence END 
		 FROM @TBL_SavecartLineitems SI
		 LEFT JOIN ZnodeOmsSavedCartLineItem SL ON (SI.SKU = SL.SKU AND SI.OmsSavedCartId = SL.OmsSavedCartId AND SI.Sequence = SL.Sequence )
		 LEFT JOIN 	@saveCartLineItemId HJRHRH ON (SI.SKU = HJRHRH.SKU AND SI.OmsSavedCartId = HJRHRH.OmsSavedCartId  AND SI.Sequence = HJRHRH.RowId )
		
		----Update OmsSavedCartLineItemId for personalized product update
		UPDATE SI SET SI.OmsSavedCartLineItemId = ZOSCLI.OmsSavedCartLineItemID
		FROM @TBL_SavecartLineitems SI
		INNER JOIN ZnodeOmsSavedCartLineItem ZOSCLI ON SI.OmsSavedCartId = ZOSCLI.OmsSavedCartId AND SI.SKU=ZOSCLI.SKU
		INNER JOIN ZnodeOmsPersonalizeCartItem ZOPCI ON ZOSCLI.OmsSavedCartLineItemId = ZOPCI.OmsSavedCartLineItemId 
			AND ZOPCI.PersonalizeCode = SUBSTRING(SI.PersonalisedAttribute, 1, CHARINDEX('~', SI.PersonalisedAttribute)-1)
			AND ZOPCI.PersonalizeValue = SUBSTRING(SI.PersonalisedAttribute, CHARINDEX('~',  SI.PersonalisedAttribute)+1, 4000)
--select * from @TBL_SavecartLineitems
		MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING  (SELECT  DISTINCT  ISNULL(SI.OmsSavedCartLineItemId,-1) AS OmsSavedCartLineItemId,SI.SKU,SI.Quantity,SI.OrderLineItemRelationshipTypeID,SI.CustomText,SI.CartAddOnDetails,SI.Sequence,SI.AutoAddon,SI.RowID,SI.OmsOrderId 
		FROM @TBL_SavecartLineitems SI 
		WHERE (EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY WHERE TY.OmsSavedCartLineItemId = SI.OmsSavedCartLineItemId ))
		 OR (@IsCallFromPDP = 1 AND NOT EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY ))) SOURCE 
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND SOURCE.OmsSavedCartLineItemId = TARGET.OmsSavedCartLineItemId AND @IsCallForUpdate = 0
		WHEN MATCHED   THEN
		UPDATE 
		SET   Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = CASE	 WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE Source.OrderLineItemRelationshipTypeID
																		 END, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.Sequence,OmsOrderId = @OmsOrderId,TARGET.AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
																		
		WHEN NOT MATCHED  
			  THEN INSERT(ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  VALUES( NULL, @OmsSavedCartId, Source.SKU, Source.Quantity,CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE OrderLineItemRelationshipTypeID
																		 END, 
					 Source.CustomText, Source.CartAddOnDetails, Source.Sequence, SOURCE.OmsOrderId, SOURCE.AutoAddon, @UserId, @GetDate, @UserId, @GetDate )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
		INTO @Tbl_SaveCartIds;
	

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_SavecartLineitems TSCLI ON TSCI.SKU = TSCLI.SKU AND TSCLI.RowID = TSCLI.RowID
			CROSS APPLY dbo.split ( ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )

		

		

		IF EXISTS (SELECT TOP 1  1  FROM @TBL_AllProductsTypeData )
		BEGIN 
        MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING ( SELECT b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
																		CASE
																		WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
																		ELSE OrderLineItemRelationshipTypeID
																		END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon,@UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate, a.RowId
			   FROM @TBL_AllProductsTypeData AS a
					INNER JOIN
					@Tbl_SaveCartIds AS b
					ON(a.RowId = b.RowId)
			   WHERE a.SKU IS NOT NULL AND 
					 a.SKU <> '') SOURCE
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND @IsCallForUpdate = 0 AND Target.ParentOmsSavedCartLineItemId = source.OmsSavedCartLineItemId
		WHEN MATCHED THEN
		UPDATE 
		SET ParentOmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId  , Quantity = CASE WHEN @IsCallFromPDP = 0 THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = 	Source.OrderLineItemRelationshipTypeID, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.SequenceId,OmsOrderId = SOURCE.OmsOrderId,AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate


		WHEN NOT MATCHED
			  THEN INSERT ( ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, [Sequence], OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )

			  VALUES (SOURCE.OmsSavedCartLineItemId,SOURCE.OmsSavedCartId,SOURCE.SKU,SOURCE.Quantity,SOURCE.OrderLineItemRelationshipTypeID , SOURCE.CustomText,
			  SOURCE.CartAddOnDetails,SOURCE.SequenceId,SOURCE.OmsOrderId,SOURCE.AutoAddon,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy, SOURCE.ModifiedDate
			  
			  )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
			   INTO @Tbl_SaveCartIds;
			   
		 END 

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_AllProductsTypeData BAR ON ( TSCI.SKU = BAR.SKU AND BAR.RowID = TSCI.RowID )
			INNER JOIN @TBL_SavecartLineitems TSCLI ON (BAR.SKU = TSCLI.SKU AND BAR.RowID = TSCLI.RowID )
			CROSS APPLY dbo.split ( TSCLI.ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )
		   
			DECLARE @TBL_SaveCartConfigProduct TABLE (OmsSavedCartLineItemId INT, SKU VARCHAR(2000),RowId INT, PersonalisedAttribute NVARCHAr(max))
			    INSERT @TBL_SaveCartConfigProduct    
			    SELECT DISTINCT    ZOSCL.OmsSavedCartLineItemId   ,ZOSCL.SKU 
				,  ZOSCL.RowId , (SELECT TOP 1 PersonalisedAttribute FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID )  PersonalisedAttribute
				FROM @Tbl_SaveCartIds AS ZOSCL
				LEFT JOIN @TBL_AllProductsTypeData AS TBBR ON (ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId  )
				WHERE ( EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
				OR   EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData TRT WHERE SKU <> ''  AND IsFromAddon <> 1  AND TRT.RowID = ZOSCl.RowID   ) )
				AND ((ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId) OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData RTR WHERE SKU <> '' AND IsFromAddon <> 1   AND RTR.RowID = ZOSCl.RowID) 
				
				)
				
	INSERT INTO ZnodeOmsPersonalizeCartItem( OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT DISTINCT 
			   b.OmsSavedCartLineItemId 
			  , SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS Keyi, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Value, @UserId, @GetDate, @UserId, @GetDate
			   FROM @Tbl_SaveCartIds m  
			   LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			   CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			   WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId )-- AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) 
																																	   --AND s.PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000))
			   ;



	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItemQuantity @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItemQuantity', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO


IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportPartialPimProductData')
BEGIN 
	DROP PROCEDURE Znode_ImportPartialPimProductData
END 
GO 

CREATE  PROCEDURE [dbo].[Znode_ImportPartialPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
	/*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		      Create group of product with their attribute code and values and inserted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.
    */

     BEGIN
		 SET NOCOUNT ON
         BEGIN TRY
             --BEGIN TRAN ImportProducts;
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 


			 DECLARE @FamilyAttributeDetail TABLE
			 ( 
				PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
			 );
			 SET @DefaultFamilyId = 0 
             IF @DefaultFamilyId = 0
                 BEGIN
					INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
					--Call Process to insert data of defeult family with cource column name and target column name 
					--EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
                    --UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 

                 END;
             --Read all attribute details with their datatype 
			 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
				BEGIN
					   CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   AttributeDefaultValueCode  VARCHAR(100));
					   -- ELSE 
					   -- CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
					   -- AttributeDefaultValueCode  VARCHAR(100)
					   -- Index Ix_Default (PimAttributeId, AttributeDefaultValueCode));
					   --IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
					   --Begin
						  --Select 'Without Index'
					   --END
					   --Else
						  --Alter TABLE #DefaultAttributeValue ADD Index Ix_Default (PimAttributeId, AttributeDefaultValueCode);
					


					INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
					--Call Process to insert default data value 
					EXEC Znode_ImportGetPimAttributeDefaultValue;
				END;
             ELSE
                BEGIN
                    DROP TABLE #DefaultAttributeValue;
                END;
             EXEC sys.sp_sqlexec
                  @SQLQuery;
          
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
    --         DECLARE @PimProductDetail TABLE 
			 --(
			      
				-- PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				--  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				--  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				--  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  INDEX Ix CLUSTERED (RowNumber) 
    --            );

			DECLARE @PimProductDetail TABLE 
			 (
			      
				  PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
				  ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
				  PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
				  ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
                );

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				
		SET @SQLQuery = ' insert into ZnodeImportSuccessLog (ImportedSku,ImportedProductId,ImportedGuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
		Select SKU, PimProductId , ''' + @NewGUID  + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''' from ' + @TableName ;
		EXEC	sp_executesql @SQLQuery

		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount
		
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
             -- Add PimAttributeDefaultValue 
             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                    SET @NewProductId = 0;
                    SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
									(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
									+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.'+@SourceColumnName+' ) PimAttributeDefaultValueId ,'
									+ @SourceColumnName+','+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
									
									, RowNumber FROM '+@TableName+' TN';
                    INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					EXEC sys.sp_sqlexec @SQLQuery;
                    FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
			 Select * into #PimProductDetail from @PimProductDetail
			 UPDATE a 
			 SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
			 FROM #PimProductDetail c 
			 INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
			 WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
			 FROM #PimProductDetail a 
			 WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
			 AND ab.AttributeValue = 'ConfigurableProduct' )

             -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
			 --If default Value set not need of hard code for IsActive
			 UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'Yes','TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail ppdti
                INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber) FROM #PimProductDetail
             );
             DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL;  --User define table type to pass multiple records of product in single step
		

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
					   	INSERT INTO @PimProductDetailToInsert(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
						PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
						SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
						PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds FROM #PimProductDetail
						WHERE [#PimProductDetail].RowNumber = @IncrementalId; --AND RTRIM(LTRIM(AttributeValue)) <> '';

						Delete from @PimProductDetailToInsert where RTRIM(LTRIM(AttributeValue)) = '';
	                    --ORDER BY [@PimProductDetail].RowNumber;
                        ----Call process to finally insert data into 
                        ----------------------------------------------------------
						--1. [dbo].[ZnodePimProduct]
						--2. [dbo].[ZnodePimAttributeValue]
						--3. [dbo].[ZnodePimAttributeValueLocale]
						if Exists (select TOP 1 1 from @PimProductDetailToInsert)
							EXEC [Znode_ImportPartialInsertUpdatePimProduct] @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
				
						DELETE FROM @PimProductDetailToInsert;
						SET @IncrementalId = @IncrementalId + 1;
					
                 END;
             UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(2), ProcessCompletedDate = Getdate() WHERE ImportProcessLogId = @ImportProcessLogId;
            -- COMMIT TRAN ImportProducts;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
            -- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
            
			-- ROLLBACK TRAN ImportProducts;
         END CATCH;
     END;

GO

update ZnodeImportAttributeValidation 
set IsRequired = 0
where attributecode in ('IsRedirect','RedirectFrom','RedirectTo','EnableRedirection') and exists (select top 1 1 from ZnodeImportHead where name = 'SEODetails' )

GO



IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportSEODetails')
BEGIN 
	DROP PROCEDURE Znode_ImportSEODetails
END 
GO 

CREATE PROCEDURE [dbo].[Znode_ImportSEODetails](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertSEODetails TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max), 
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFProducts TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max),
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFCategory TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max),
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFBrand TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max), 
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		
		DECLARE @InsertedZnodeCMSSEODetail TABLE
		( 
			CMSSEODetailId int , SEOId int, CMSSEOTypeId int
		);
		
		--SET @SSQL = 'Select RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;
		SET @SSQL = 'Select RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;

		INSERT INTO @InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii 
			   where ii.SEOURL in (Select ISD.SEOURL from @InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 ) 

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--	   FROM @InsertSEODetails AS ii 
		--	   where ii.RedirectFrom = ii.RedirectTo 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii
			   WHERE ltrim(rtrim(isnull(ii.SEOUrl,''))) like '% %' -----space not allowed



		DELETE FROM @InsertSEODetails
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Product'' ';
		INSERT INTO @InsertSEODetailsOFProducts(  RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation	,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Category'' ';
		INSERT INTO @InsertSEODetailsOFCategory( RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection	, GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Brand'' ';
		INSERT INTO @InsertSEODetailsOFBrand( RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation	,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection	, GUID )
		EXEC sys.sp_sqlexec @SSQL;

	    -- start Functional Validation 
		--1. Product
		--2. Category
		--3. Content Page
		--4. Brand
		-----------------------------------------------

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii
			   WHERE ii.ImportType NOT in 
			   (
				   Select NAME from ZnodeCMSSEOType where NAME <> 'Content Page'
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFProducts AS ii
			   WHERE ii.CODE NOT in 
			   (
				   Select SKU from ZnodePublishProductDetail ZPPD
					INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
					INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
					AND ZPC.PortalId  = @PortalId AND SKU is not null 
			   )  AND ImportType = 'Product';


		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFCategory AS ii
			   WHERE ii.CODE NOT in 
			   (
				   Select PublishCategoryName from ZnodePublishCategoryDetail ZPPD
				   	INNER JOIN ZnodePublishCategory ZPP ON ZPP.PublishCategoryId = ZPPD.PublishCategoryId
					INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
				   where ZPPD.PublishCategoryName is not null  AND   ZPC.PortalId = @PortalId
			   )  AND ImportType = 'Category';

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFBrand AS ii
			   WHERE ii.CODE NOT in 
			   (
				   Select BrandCode from ZnodeBrandDetails 
			   )  AND ImportType = 'Brand';
		
		
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertSEODetailsOFProducts
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		DELETE FROM @InsertSEODetailsOFCategory
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		DELETE FROM @InsertSEODetailsOFBrand
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		-- Insert Product Data 
		If Exists (Select top 1 1 from @InsertSEODetailsOFProducts)
		Begin
			Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,
						   ZCSD.MetaInformation =  ISD.MetaInformation,
						   ZCSD.SEOUrl=  ISD.SEOUrl
			FROM 
			@InsertSEODetailsOFProducts ISD  INNER JOIN ZnodePublishProductDetail ZPPD ON ISD.Code = ZPPD.SKU 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOId = ZPPD.PublishProductId
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId AND   ZPC.PortalId = ZCSD.PortalId
			where  ZCSD.PortalId  =@PortalId;
			
			Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle
							,ZCSDL.SEODescription = ISD.SEODescription
							,ZCSDL.SEOKeywords= ISD.SEOKeywords
 			FROM 
			@InsertSEODetailsOFProducts ISD  INNER JOIN ZnodePublishProductDetail ZPPD ON ISD.Code = ZPPD.SKU 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOId = ZPPD.PublishProductId
			INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId AND   ZPC.PortalId = ZCSD.PortalId
			where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId; 

			Delete from @InsertedZnodeCMSSEODetail
			INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
			OUTPUT Inserted.CMSSEODetailId,Inserted.SEOId,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail
		
			Select Distinct 1,ZPPD.PublishProductId , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertSEODetailsOFProducts ISD  INNER JOIN ZnodePublishProductDetail ZPPD ON ISD.Code = ZPPD.SKU 
			INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
			where  ZPC.PortalId  =@PortalId AND
			 NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOId  = ZPPD.PublishProductId
			 and  ZCSD .PortalId =@PortalId   );
		
        	insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertedZnodeCMSSEODetail IZCSD INNER JOIN ZnodePublishProductDetail ZPPD ON IZCSD.SEOId = ZPPD.PublishProductId AND IZCSD.CMSSEOTypeId =1  
											 INNER JOIN @InsertSEODetailsOFProducts ISD ON ZPPD.SKU = ISD.Code 
											 INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishProductId = ZPPD.PublishProductId
											 INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId 
			where  ZPC.PortalId  =@PortalId 

	
			-----RedirectUrlInsert
			INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,getdate() as CreatedDate,2 as ModifiedBy,getdate() as ModifiedDate
			from @InsertSEODetailsOFProducts
			where IsRedirect = 1
		END

		-- Insert Category Data 
		
		If Exists (Select top 1 1 from @InsertSEODetailsOFCategory)
		Begin

			Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,
						   ZCSD.MetaInformation =  ISD.MetaInformation,
						   ZCSD.SEOUrl=  ISD.SEOUrl
			FROM 
			@InsertSEODetailsOFCategory ISD  INNER JOIN ZnodePublishCategoryDetail ZPPD ON ISD.Code = ZPPD.PublishCategoryName 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOId = ZPPD.PublishCategoryId
			where  ZCSD.PortalId  =@PortalId;
			
			Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle
							,ZCSDL.SEODescription = ISD.SEODescription
							,ZCSDL.SEOKeywords= ISD.SEOKeywords
 			FROM 
			@InsertSEODetailsOFCategory ISD  INNER JOIN ZnodePublishCategoryDetail ZPPD ON ISD.Code = ZPPD.PublishCategoryName 
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOId = ZPPD.PublishCategoryId
			INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId
			where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId; 

			Delete from @InsertedZnodeCMSSEODetail
			INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
			OUTPUT Inserted.CMSSEODetailId,Inserted.SEOId,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail
		
			Select Distinct 2,ZPPD.PublishCategoryId , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertSEODetailsOFCategory ISD  INNER JOIN ZnodePublishCategoryDetail ZPPD ON ISD.Code = ZPPD.PublishCategoryName 
			INNER JOIN ZnodePublishCategory ZPP ON ZPP.PublishCategoryId = ZPPD.PublishCategoryId
			INNER JOIN ZnodePortalCatalog ZPC ON ZPC.PublishCatalogId = ZPP.PublishCatalogId AND   ZPC.PortalId = @PortalId
			where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOId  = ZPPD.PublishCategoryId AND ZCSD.PortalId = @PortalId );
		


			insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertedZnodeCMSSEODetail IZCSD INNER JOIN ZnodePublishCategoryDetail ZPPD ON IZCSD.SEOId = ZPPD.PublishCategoryId AND IZCSD.CMSSEOTypeId =2  
											 INNER JOIN @InsertSEODetailsOFCategory ISD ON ZPPD.PublishCategoryName = ISD.Code 

			-----RedirectUrlInsert
			insert into ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,getdate() as CreatedDate,2 as ModifiedBy,getdate() as ModifiedDate
			from @InsertSEODetailsOFProducts SDP
			where IsRedirect = 1
		END
										 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;

GO



insert into ZnodeRoleMenu (RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'c120e647-4cdd-48a8-8113-6fe0eae87b3d' ,(select MenuId from ZnodeMenu where MenuName = 'Form Submission' AND ControllerName = 'FormSubmission'),2,Getdate(),2,Getdate() where not exists
(select * from ZnodeRoleMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Form Submission' AND ControllerName = 'FormSubmission') and 
RoleId = 'c120e647-4cdd-48a8-8113-6fe0eae87b3d')

insert into ZnodeRoleMenu (RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'c120e647-4cdd-48a8-8113-6fe0eae87b3d' ,(select MenuId from ZnodeMenu where MenuName = 'Manage Forms' AND ControllerName = 'FormBuilder'),2,Getdate(),2,Getdate() where not exists
(select * from ZnodeRoleMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Manage Forms' AND ControllerName = 'FormBuilder') and 
RoleId = 'c120e647-4cdd-48a8-8113-6fe0eae87b3d')

insert into ZnodeRoleMenu (RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'c120e647-4cdd-48a8-8113-6fe0eae87b3d' ,(select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage'),2,Getdate(),2,Getdate() where not exists
(select * from ZnodeRoleMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Application Logs' AND ControllerName = 'LogMessage') and 
RoleId = 'c120e647-4cdd-48a8-8113-6fe0eae87b3d')

insert into ZnodeRoleMenu (RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'c120e647-4cdd-48a8-8113-6fe0eae87b3d' ,(select MenuId from ZnodeMenu where MenuName = 'Entity Attributes' AND ControllerName = 'GlobalAttribute'),2,Getdate(),2,Getdate() where not exists
(select * from ZnodeRoleMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Entity Attributes' AND ControllerName = 'GlobalAttribute') and 
RoleId = 'c120e647-4cdd-48a8-8113-6fe0eae87b3d')
insert into ZnodeRoleMenu (RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'c120e647-4cdd-48a8-8113-6fe0eae87b3d' ,(select MenuId from ZnodeMenu where MenuName = 'Attribute Groups' AND ControllerName = 'GlobalAttributeGroup'),2,Getdate(),2,Getdate() where not exists
(select * from ZnodeRoleMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Attribute Groups' AND ControllerName = 'GlobalAttributeGroup') and 
RoleId = 'c120e647-4cdd-48a8-8113-6fe0eae87b3d')

insert into ZnodeRoleMenu (RoleId,MenuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'c120e647-4cdd-48a8-8113-6fe0eae87b3d' ,(select MenuId from ZnodeMenu where MenuName = 'Attributes' AND ControllerName = 'GlobalAttribute'),2,Getdate(),2,Getdate() where not exists
(select * from ZnodeRoleMenu where MenuId = (select MenuId from ZnodeMenu where MenuName = 'Attributes' AND ControllerName = 'GlobalAttribute') and 
RoleId = 'c120e647-4cdd-48a8-8113-6fe0eae87b3d')

Go

update ZnodeSearchQueryType set HelpDescription='Query the text in more than one searchable field.</br>Best : Used when text must appear in same searchable field

</br>Cross : Used when text can be spread across multiple searchable fields' where SearchQueryTypeId=
(select SearchQueryTypeId from  ZnodeSearchQueryType where QueryTypeName = 'Multi Match')

GO

--------------------------------------------------------------------------------for july release -------------------------------------------------------------------------------------

if exists( select * from sys.types where is_user_defined = 1 and name ='SearchRuleItemDetail' )
drop type SearchRuleItemDetail
GO
CREATE TYPE [dbo].[SearchRuleItemDetail] AS TABLE (
    [SearchItemKeyword]    VARCHAR (100) NULL,
    [SearchItemCondition]  VARCHAR (50)  NULL,
    [SearchItemValue]      VARCHAR (600) NULL,
    [SearchItemBoostValue] VARCHAR (10)  NULL,
    [SearchCatalogRuleId]  INT           NULL,
    [SearchItemRuleId]     INT           NULL);
GO
if exists( select * from sys.types where is_user_defined = 1 and name ='SearchRuleTriggerDetail' )
drop type SearchRuleTriggerDetail
GO
CREATE TYPE [dbo].[SearchRuleTriggerDetail] AS TABLE (
    [SearchTriggerKeyword]   VARCHAR (100) NULL,
    [SearchTriggerCondition] VARCHAR (50)  NULL,
    [SearchTriggerValue]     VARCHAR (600) NULL,
    [SearchCatalogRuleId]    INT           NULL,
    [SearchTriggerRuleId]    INT           NULL);
GO

IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSWidgetTitleConfigurationLocale' AND COLUMN_NAME = 'IsNewTab' )
 BEGIN 
 ALTER TABLE ZnodeCMSWidgetTitleConfigurationLocale ADD  IsNewTab BIT  DEFAULT (0)  NOT NULL
 END
 GO

 IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeOmsOrderDetails' AND COLUMN_NAME = 'TotalAdditionalCost' )
BEGIN
alter table ZnodeOmsOrderDetails add  TotalAdditionalCost numeric(28,6) null
END
GO

 IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePrice' AND COLUMN_NAME = 'CostPrice' )
BEGIN
alter table ZnodePrice add  CostPrice numeric(28,6) null
END
GO

IF EXISTS (SELECT * FROM sys.views where name = 'View_GetListOfPimAttributeValues')
	drop view View_GetListOfPimAttributeValues
go
CREATE View [dbo].[View_GetListOfPimAttributeValues]
AS
	----comment code for below requirement
	--SELECT ISNULL(NULL,0) RowId, ZPAVL.AttributeValue  
	--FROM ZnodePimAttribute  ZPA INNER JOIN ZnodePimAttributeValue ZPAV  ON ZPA.PimAttributeId = ZPAV.PimAttributeId
	--NNER JOIN ZnodePimAttributeValueLocale ZPAVL on ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
	
	---- Added Isdownloadable column
	WITH CTE AS
	(
		select DISTINCT ZPAV.PimProductId ,Case when ZPDP.SKU is not null then 1 else 0 END IsDownloadable 
		from ZnodePimAttribute  ZPA INNER JOIN ZnodePimAttributeValue ZPAV  ON ZPA.PimAttributeId = ZPAV.PimAttributeId
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL on ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		LEFT join ZnodePimDownloadableProduct ZPDP ON zpavl.AttributeValue = ZPDP.SKU
		where ZPA.AttributeCode = 'SKU'
	)
	SELECT ISNULL(NULL,0) RowId, ZPAVL.AttributeValue, C.IsDownloadable  
	FROM ZnodePimAttribute  ZPA 
	INNER JOIN ZnodePimAttributeValue ZPAV  ON ZPA.PimAttributeId = ZPAV.PimAttributeId
	INNER JOIN ZnodePimAttributeValueLocale ZPAVL on ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
	INNER JOIN CTE C ON ZPAV.PimProductId = C.PimProductId
GO
IF EXISTS (SELECT * FROM sys.tables where name = 'ZnodeOmsOrderLineItemsAdditionalCost')
drop table ZnodeOmsOrderLineItemsAdditionalCost
GO
CREATE TABLE [dbo].[ZnodeOmsOrderLineItemsAdditionalCost] (
    [OmsOrderLineItemsAdditionalCostId] INT            IDENTITY (1, 1) NOT NULL,
    [OmsOrderLineItemsId]               INT            NULL,
    [KeyName]                           NVARCHAR (300) NOT NULL,
    [KeyValue]                          NUMERIC (18)   NOT NULL,
    [CreatedBy]                         INT            NOT NULL,
    [CreatedDate]                       DATETIME       NOT NULL,
    [ModifiedBy]                        INT            NOT NULL,
    [ModifiedDate]                      DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([OmsOrderLineItemsAdditionalCostId] ASC),
    CONSTRAINT [FK_ZnodeOmsOrderLineItemsAdditionalCost_ZnodeOmsOrderLineItems] FOREIGN KEY ([OmsOrderLineItemsId]) REFERENCES [dbo].[ZnodeOmsOrderLineItems] ([OmsOrderLineItemsId])
);
GO
IF EXISTS (SELECT * FROM sys.tables where name = 'ZnodeSearchCatalogRule')
drop table ZnodeSearchCatalogRule
GO
CREATE TABLE [dbo].[ZnodeSearchCatalogRule] (
    [SearchCatalogRuleId] INT           IDENTITY (1, 1) NOT NULL,
    [PublishCatalogId]    INT           NOT NULL,
    [RuleName]            VARCHAR (600) NULL,
    [StartDate]           DATETIME      NULL,
    [EndDate]             DATETIME      NULL,
    [IsTriggerForAll]     BIT           NOT NULL,
    [IsItemForAll]        BIT           NOT NULL,
    [IsGlobalRule]        BIT           CONSTRAINT [DF_ZnodeSearchCatalogRule_IsGlobalRule] DEFAULT ((0)) NOT NULL,
    [IsPause]             BIT           CONSTRAINT [DF_ZnodeSearchCatalogRule_IsPause] DEFAULT ((0)) NOT NULL,
    [CreatedBy]           INT           NOT NULL,
    [CreatedDate]         DATETIME      NOT NULL,
    [ModifiedBy]          INT           NOT NULL,
    [ModifiedDate]        DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodeSearchCatalogRule] PRIMARY KEY CLUSTERED ([SearchCatalogRuleId] ASC),
    CONSTRAINT [UK_ZnodeSearchCatalogRule_RuleName] UNIQUE NONCLUSTERED ([RuleName] ASC)
);
GO
IF EXISTS (SELECT * FROM sys.tables where name = 'ZnodeSearchItemRule')
drop table ZnodeSearchItemRule
GO
CREATE TABLE [dbo].[ZnodeSearchItemRule] (
    [SearchItemRuleId]     INT           IDENTITY (1, 1) NOT NULL,
    [SearchCatalogRuleId]  INT           NOT NULL,
    [SearchItemKeyword]    VARCHAR (100) NULL,
    [SearchItemCondition]  VARCHAR (50)  NULL,
    [SearchItemValue]      VARCHAR (600) NULL,
    [SearchItemBoostValue] INT           NULL,
    [CreatedBy]            INT           NOT NULL,
    [CreatedDate]          DATETIME      NOT NULL,
    [ModifiedBy]           INT           NOT NULL,
    [ModifiedDate]         DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodeSearchItemRule] PRIMARY KEY CLUSTERED ([SearchItemRuleId] ASC),
    CONSTRAINT [FK_ZnodeSearchItemRule_ZnodeSearchCatalogRule] FOREIGN KEY ([SearchCatalogRuleId]) REFERENCES [dbo].[ZnodeSearchCatalogRule] ([SearchCatalogRuleId])
);
GO
IF EXISTS (SELECT * FROM sys.tables where name = 'ZnodeSearchTriggerRule')
drop table ZnodeSearchTriggerRule
GO
CREATE TABLE [dbo].[ZnodeSearchTriggerRule] (
    [SearchTriggerRuleId]    INT           IDENTITY (1, 1) NOT NULL,
    [SearchCatalogRuleId]    INT           NOT NULL,
    [SearchTriggerKeyword]   VARCHAR (100) NULL,
    [SearchTriggerCondition] VARCHAR (50)  NULL,
    [SearchTriggerValue]     VARCHAR (600) NULL,
    [CreatedBy]              INT           NOT NULL,
    [CreatedDate]            DATETIME      NOT NULL,
    [ModifiedBy]             INT           NOT NULL,
    [ModifiedDate]           DATETIME      NOT NULL,
    CONSTRAINT [PK_ZnodeSearchTriggerRule] PRIMARY KEY CLUSTERED ([SearchTriggerRuleId] ASC),
    CONSTRAINT [FK_ZnodeSearchTriggerRule_ZnodeSearchCatalogRule] FOREIGN KEY ([SearchCatalogRuleId]) REFERENCES [dbo].[ZnodeSearchCatalogRule] ([SearchCatalogRuleId])
);
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteOrderById')
BEGIN 
	DROP PROCEDURE Znode_DeleteOrderById
END 
GO
CREATE PROCEDURE [dbo].[Znode_DeleteOrderById]
(@OrderDetailId INT,
 @Status                     BIT OUT

)
AS

/*
begin tran
exec Znode_DeleteOrderById 6
rollback tran
*/
BEGIN
  SET NOCOUNT ON
   BEGIN  TRAN DeleteOrderById
  BEGIN TRY 


			DECLARE @OmsOrderId INT 
			DECLARE @TBL_OmsOrderLineItems TABLE (OmsOrderLineItemsId INT,OmsOrderShipmentId INT, OmsOrderDetailsId INT)
			INSERT INTO @TBL_OmsOrderLineItems
			SELECT OmsOrderLineItemsId,OmsOrderShipmentId, OmsOrderDetailsId FROM znodeOmsOrderLineItems 
			WHERE OmsOrderDetailsId = @OrderDetailId

			SET @OmsOrderId = (SELECT OmsOrderId FROM ZnodeOmsOrderDetails  WHERE OmsOrderDetailsId = @OrderDetailId )

			DELETE FROM ZnodeOmsOrderAttribute WHERE EXISTS (SELECT OmsOrderLineItemsId FROM znodeOmsOrderLineItems  WHERE OmsOrderDetailsId = @OrderDetailId)
			DELETE FROM ZnodeOmsOrderDiscount WHERE (OmsOrderDetailsId = @OrderDetailId  or OmsOrderLineItemId IN (SELECT OmsOrderLineItemsId FROM znodeOmsOrderLineItems  WHERE OmsOrderDetailsId = @OrderDetailId))
			DELETE FROM ZnodeOmsOrderWarehouse WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsOrderWarehouse.OmsOrderLineItemsId  )
			--DELETE FROM ZnodeOmsOrderLineItems WHERE OmsOrderDetailsId IN (SELECT OmsOrderDetailsId FROM ZnodeOmsOrderLineItems WHERE OmsOrderDetailsId = @OrderDetailId)

			DELETE FROM ZnodeOmsOrderLineItemsAdditionalCost WHERE EXISTS ( SELECT TOP 1 1 FROM 
			ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)
			AND ZnodeOmsOrderLineItems.OmsOrderLineItemsId = ZnodeOmsOrderLineItemsAdditionalCost.OmsOrderLineItemsId)


			DELETE FROM ZnodeOmsPersonalizeItem WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsPersonalizeItem.OmsOrderLineItemsId)

			
			DELETE FROM ZnodeOmsOrderShipment WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderShipmentId = ZnodeOmsOrderShipment.OmsOrderShipmentId )

			DELETE FROM ZnodeOmsTaxOrderLineDetails WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsTaxOrderLineDetails.OmsOrderLineItemsId)

			DELETE FROM ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)


			DELETE FROM znodeGiftCardHistory WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM znodeOmsEmailHistory WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM znodeOmsNotes  WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM ZnodeOmsReferralCommission WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM ZnodeOmsTaxOrderDetails WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM ZnodeOmsOrderDetails  WHERE  OmsOrderDetailsId = @OrderDetailId 

			DELETE FROM ZnodeOmsOrder WHERE OmsOrderId = @OmsOrderId AND  NOT EXISTS (SELECT TOP  1 1 FROM ZnodeOmsOrderDetails EREE 
			     WHERE EREE.OmsOrderId = ZnodeOmsOrder.OmsOrderId)
            
			
            SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
        SET @Status = 1;    
		 COMMIT  TRAN DeleteOrderById
	END TRY
	BEGIN CATCH
	   SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
	    SET @Status = 0;
		ROLLBACK TRAN DeleteOrderById
	SELECT ERROR_MESSAGE()
	END CATCH

END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCMSWidgetsConfigurationList')
BEGIN 
	DROP PROCEDURE Znode_GetCMSWidgetsConfigurationList
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetCMSWidgetsConfigurationList]
( @WhereClause VARCHAR(1000),
  @Rows        INT           = 1000,
  @PageNo      INT           = 0,
  @Order_BY    VARCHAR(100)  = NULL,
  @RowsCount   INT OUT , 
  @LocaleId    INT =0 )
AS  
    /*
	
    Summary: To get list of CMS widgets configuration 
    		 Use tablevariable @CMSWidgetsConfigurationList to sort data 	                  
    		 User view : View_CMSWidgetsConfigurationList
    
    Unit Testing   
    EXEC Znode_GetCMSWidgetsConfigurationList @WhereClause='cmswidgetsid = 2 and cmsmappingid = 1 and widgetskey like '%2253%' and typeofmapping like '%portalmapping%' and localeid = 2',@RowsCount=0,@Rows = 100,@PageNo=0,@Order_BY = Null

	*/

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		  DECLARE @DefultLocaleId INT  = dbo.FN_getDefaultLocaleId()

             DECLARE @SQL NVARCHAR(MAX);

             SET @SQL = '
			 DECLARE @CMSWidgetsConfigurationList  TABLE 
			(
									CMSWidgetTitleConfigurationId	int
									,CMSMappingId					int
									,cmsWidgetsId					int
									,WidgetsKey						nvarchar (256)
									,TypeOFMapping					nvarchar (100)
									,Title							nvarchar (600)
									,Url							nvarchar(Max)
									,MediaId						INT 
									,Image							varchar (300)
									,LocaleId						INT
									,TitleCode						nvarchar (600)
									,CMSWidgetTitleConfigurationLocaleId	int
									,IsNewTab						bit
								)
				;With Cte_Getdate AS (  
				SELECT a.CMSWidgetTitleConfigurationLocaleId, b.CMSWidgetTitleConfigurationId, b.CMSMappingId, b.cmsWidgetsId, b.WidgetsKey , b.TypeOFMapping ,a.Title,a.Url,a.LocaleId,b.TitleCode,a.MediaId,c.[Path] [Image]
				,a.IsNewTab
				FROM ZnodeCMSWidgetTitleConfigurationLocale a
				LEFT JOIN ZnodeCMSWidgetTitleConfiguration b ON (b.CMSWidgetTitleConfigurationId = a.CMSWidgetTitleConfigurationId )
				LEFT JOIN ZNodeMedia c ON (a.MediaId = c.MediaId  )
				WHERE LocaleId IN ('+CAST(@DefultLocaleId AS VARCHAR(50))+','+CAST(@LocaleId AS VARCHAR(50))+')
				)

				, Cte_dsadga AS 
				(  SELECT * 
				  FROM Cte_Getdate WER 
				  WHERE WER.LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+'
				) 
				, Cte_there AS (
				  SELECT  CMSWidgetTitleConfigurationLocaleId	,CMSWidgetTitleConfigurationId	,CMSMappingId,	cmsWidgetsId	,WidgetsKey,	TypeOFMapping,	Title	,Url,	LocaleId	,TitleCode,	MediaId,	Image,IsNewTab
				  FROM Cte_dsadga 
				  UNION ALL 
				  SELECT CMSWidgetTitleConfigurationLocaleId	,CMSWidgetTitleConfigurationId	,CMSMappingId,	cmsWidgetsId	,WidgetsKey,	TypeOFMapping,	Title	,Url,	LocaleId	,TitleCode,	MediaId,	Image,IsNewTab
				  FROM Cte_Getdate WER 
				  WHERE WER.LocaleId = '+CAST(@DefultLocaleId AS VARCHAR(50))+' 
				  AND NOT EXISTS  (SELECT TOP 1 1 FROM  Cte_dsadga GTR WHERE GTR.CMSWidgetTitleConfigurationId = WER.CMSWidgetTitleConfigurationId)
				)
				 INSERT INTO @CMSWidgetsConfigurationList 
					SELECT CMSWidgetTitleConfigurationId, CMSMappingId, cmsWidgetsId, WidgetsKey , TypeOFMapping ,Title,Url,MediaId,
					[dbo].[FN_GetMediaThumbnailMediaPath]( [Image]),LocaleId,TitleCode,CMSWidgetTitleConfigurationLocaleId,IsNewTab
					FROM Cte_there 
  
					SELECT @Count = COUNT (1) FROM @CMSWidgetsConfigurationList

					SELECT * FROM @CMSWidgetsConfigurationList WHERE '+CASE
																		   WHEN @WhereClause = ''
																		   THEN '1=1'
																		   ELSE @WhereClause
																	   END+' Order BY '+ISNULL(CASE
																								   WHEN @Order_BY = ''
																								   THEN NULL
																								   ELSE @Order_BY
																							   END, '1');
						--select @SQL
						PRINT @SQL

             EXEC SP_executesql
                  @SQL,
                  N'@Count INT OUT',
                  @Count = @RowsCount OUT;

				  

         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSWidgetsConfigurationList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSWidgetsConfigurationList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCMSWidgetTitle')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCMSWidgetTitle
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetPublishCMSWidgetTitle]
(
 @PortalId INT = 0  
)
AS 
/*
 This Procedure is used to get the record of content pages for publish  portal 
  EXEC 
*/
BEGIN 
 BEGIN TRY 
  SET NOCOUNT ON 
   
   DECLARE @TBL_LocaleId TABLE ( RowId INT IDENTITY(1,1) PRIMARY KEY , LocaleId INT )
   DECLARE @TBL_GetDATATable TABLE (WidgetTitleConfigurationId INT ,MappingId INT ,  PortalId INT 
			, LocaleId INT , MediaPath   VARCHAR(300) , Title nvarchar (600) ,TitleCode nvarchar(600) ,TypeOFMapping NVARCHAR(100) 
			,Url nvarchar(600)  , WidgetsKey  NVARCHAR(256),IsNewTab bit)
   INSERT INTO @TBL_LocaleId (LocaleId )
   SELECT LocaleId 
   FROm ZnodeLocale 
   WHERE IsActive = 1 
    DECLARE @LocaleId INT  ,@DefaultLocaleId INT = dbo.FN_GEtDEFAULTLocaleID() 
   DECLARE @CounterId INT = 1 , @MaxRowId INT = (SELECT Max(RowId ) FROM @TBL_LocaleId)  

   WHILE @CounterId <= @MaxRowId
   BEGIN 
   SET @LocaleId = (SELECT TOP 1 LocaleID FROM @TBL_LocaleId WHERe RowId =@CounterId )  
  
   DECLARE @TBL_TitleWidgetsData TABLE (CMSWidgetTitleConfigurationId INT , CMSWidgetTitleConfigurationLocaleId INT )
  ;With Cte_GetContentPagesId AS 
   (
     SELECT ZCWTC.CMSWidgetTitleConfigurationId , ZCWTCL.CMSWidgetTitleConfigurationLocaleId ,LocaleId, IsNewTab
	 FROM ZnodeCMSWidgetTitleConfiguration ZCWTC 
	 INNER JOIN ZnodeCMSWidgetTitleConfigurationLocale  ZCWTCL ON (ZCWTCL.CMSWidgetTitleConfigurationId = ZCWTC.CMSWidgetTitleConfigurationId )
     WHERE ZCWTCL.LocaleId   IN (@DefaultLocaleId,@LocaleId) 
   ) 
   , Cte_LocaleIdFiletr AS 
   (
    SELECT CMSWidgetTitleConfigurationId,CMSWidgetTitleConfigurationLocaleId
    FROM Cte_GetContentPagesId CET1 
	WHERE LocaleId = @LocaleId
    )
	,Cte_CompleteRecords AS 
	(
	 SELECT CMSWidgetTitleConfigurationId,CMSWidgetTitleConfigurationLocaleId
	 FROM Cte_LocaleIdFiletr
	 UNION ALL 
	 SELECT CMSWidgetTitleConfigurationId,CMSWidgetTitleConfigurationLocaleId
	 FROM Cte_GetContentPagesId  CTE2
	 WHERE Cte2.localeId = @DefaultLocaleId
	 AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_LocaleIdFiletr CTE1 WHERE Cte1.CMSWidgetTitleConfigurationId = CTE2.CMSWidgetTitleConfigurationId )
	
	
	)

	INSERT INTO @TBL_TitleWidgetsData (CMSWidgetTitleConfigurationId,CMSWidgetTitleConfigurationLocaleId)
	SELECT CMSWidgetTitleConfigurationId,CMSWidgetTitleConfigurationLocaleId
	FROM Cte_CompleteRecords 
	 
	 INSERT INTO @TBL_GetDATATable (WidgetTitleConfigurationId  ,MappingId  ,  PortalId  , LocaleId  , MediaPath   , Title  ,TitleCode  ,TypeOFMapping  ,Url   , WidgetsKey,IsNewTab )
	 SELECT ZCWTC.CMSWidgetTitleConfigurationId WidgetTitleConfigurationId,ZCWTC.CMSMappingId MappingId,ZCWTC.CMSMappingId  PortalId,@LocaleId LocaleId,ZM.[path]MediaPath,ZCWTCL.Title,ZCWTC.TitleCode,ZCWTC.TypeOFMapping,ZCWTCl.Url,ZCWTC.WidgetsKey,IsNewTab
	 FROM ZnodeCMSWidgetTitleConfiguration ZCWTC 
	 INNER JOIN ZnodeCMSWidgetTitleConfigurationLocale  ZCWTCL ON (ZCWTCL.CMSWidgetTitleConfigurationId = ZCWTC.CMSWidgetTitleConfigurationId )
	 INNER JOIN @TBL_TitleWidgetsData TBLW ON (TBLW.CMSWidgetTitleConfigurationLocaleId  =  ZCWTCL.CMSWidgetTitleConfigurationLocaleId)
	 LEFT JOIN ZnodeMedia ZM ON (Zm.MediaId = ZCWTCL.MediaId)
	 WHERE ZCWTC.TypeOFMapping = 'PortalMapping'
	 AND ZCWTC.CMSMappingId  = @PortalId

	 SET @CounterId = @CounterId+1 
	 DELETE FROM @TBL_TitleWidgetsData
   END 

   SELECT WidgetTitleConfigurationId  ,MappingId  ,  PortalId  , LocaleId  , MediaPath   , Title  ,TitleCode  ,TypeOFMapping  ,Url   , WidgetsKey,IsNewTab
   FROM @TBL_GetDATATable

   END TRY 
   BEGIN CATCH 
   SELECT ERROR_MESSAGE()
   END CATCH 
   
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetStoreList')
BEGIN 
	DROP PROCEDURE Znode_GetStoreList
END 
GO 

CREATE PROCEDURE [dbo].[Znode_GetStoreList]
(
	@WhereClause NVARCHAR(MAX),
    @Rows        INT           = 100,
    @PageNo      INT           = 1,
    @Order_BY    VARCHAR(100)  = '',
	@UserId		 INT=0,
    @RowsCount   INT OUT

)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the Portal 
	 Unit Testig
	 begin tran 
	 EXEC  Znode_GetStoreList '',100,'','',0

	 EXEC  Znode_GetStoreList '',100,1,null,2,0
	 rollback tran
	 select * from ZnodeDomain
*/
   BEGIN 
		BEGIN TRY 
			SET NOCOUNT ON 

			 DECLARE @SQL  NVARCHAR(MAX) 
			 DECLARE @TBL_PortalId TABLE (PortalId INT, PublishPortalLogId INT,StoreName NVARCHAR(MAX),CompanyName NVARCHAR(MAX),LogoPath NVARCHAR(MAX),UseSSL BIT,AdminEmail 
			 NVARCHAR(MAX),SalesEmail NVARCHAR(MAX),CustomerServiceEmail NVARCHAR(MAX),SalesPhoneNumber NVARCHAR(MAX),CustomerServicePhoneNumber NVARCHAR(MAX),ImageNotAvailablePath NVARCHAR(MAX),ShowSwatchInCategory BIT,
			 ShowAlternateImageInCategory BIT,ExternalID VARCHAR(50),MobileLogoPath NVARCHAR(MAX),DefaultOrderStateID INT,DefaultReviewStatus NVARCHAR(2),SplashCategoryID INT,SplashImageFile NVARCHAR(MAX),
			 MobileTheme NVARCHAR(MAX),CopyContentBasedOnPortalId INT,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME,InStockMsg NVARCHAR(max),OutOfStockMsg NVARCHAR(MAX),BackOrderMsg NVARCHAR(MAX)
			 ,PublishStatus VARCHAR(300),ThemeName VARCHAR(200),CSSName NVARCHAr(2000),CatalogName NVARCHAR(max),DomainUrl NVARCHAR(200),OrderStatus NVARCHAR(200),LocaleId INT,PublishCatalogId INT,StoreCode NVARCHAR(200),RowId INT ,CountId INT)
	

			 SET @SQL = '
			 ;With Cte_MaxPublish AS 
			 (
			 SELECT MAX(PublishPortalLogId) PublishPortalLogId,PortalId
			 FROM ZnodePublishPortalLog ZPCL  
			 GROUP BY PortalId
			 )
			 ,Cte_PortalLog AS (
			 SELECT ZPC.StoreName ,ZPC.CompanyName ,ZPC.LogoPath ,ZPC.UseSSL ,ZPC.AdminEmail ,ZPC.SalesEmail ,ZPC.CustomerServiceEmail ,ZPC.SalesPhoneNumber ,ZPC.CustomerServicePhoneNumber ,
			 ZPC.ImageNotAvailablePath ,ZPC.ShowSwatchInCategory ,ZPC.ShowAlternateImageInCategory ,ZPC.ExternalID ,ZPC.MobileLogoPath ,ZPC.DefaultOrderStateID ,ZPC.DefaultReviewStatus ,
			 ZPC.SplashCategoryID ,ZPC.SplashImageFile ,ZPC.MobileTheme ,ZPC.CopyContentBasedOnPortalId ,
			 ZPC.CreatedBy ,ZPC.CreatedDate ,ZPC.ModifiedBy ,ZPC.ModifiedDate ,ZPC.InStockMsg ,ZPC.OutOfStockMsg ,ZPC.BackOrderMsg , PublishPortalLogId ,CASE WHEN ZPCL.PublishPortalLogId IS NULL THEN '''' ELSE 
			 CASE WHEN IsPortalPublished IS NULL THEN ''Processing'' WHEN IsPortalPublished = 0 THEN ''Publish Failed''
			 WHEN IsPortalPublished = 1 THEN  ''Published Successfully'' END END    PublishStatus ,ZPC.PortalId, ZCT.Name as ThemeName, ZCTC.CSSName, ZPUC.CatalogName,
			 CASE WHEN ZD.DomainName IS NULL  THEN ''#'' ELSE ZD.DomainName END DomainUrl,ZOOS.Description OrderStatus,
			 ZPL.LocaleId, ZPPC.PublishCatalogId,ZPC.StoreCode
			FROM ZnodePortal ZPC 
			INNER JOIN ZnodeCMSPortalTheme AS ZCPT ON (ZCPT.PortalId = ZPC.PortalId )
			INNER JOIN ZnodeCMSThemeCSS AS ZCTC ON ZCPT.CMSThemeCSSId = ZCTC.CMSThemeCSSId 
			INNER JOIN ZnodeCMSTheme AS ZCT ON ZCPT.CMSThemeId = ZCT.CMSThemeId AND ZCTC.CMSThemeId = ZCT.CMSThemeId 
			LEFT JOIN ZnodePortalCatalog ZPCI ON ZPCI.PortalId = ZPC.PortalId 
			LEFT JOIN ZnodePublishCatalog ZPUC ON ZPCI.PublishCatalogId = ZPUC.PublishCatalogId 
			LEFT JOIN ZnodeOmsOrderState ZOOS ON ZPC.DefaultOrderStateID = ZOOS.OmsOrderStateId
			LEFT JOIN ZnodePortalCatalog ZPPC ON ZPPC.PortalId = ZPC.PortalId
			LEFT JOIN ZnodePortalLocale ZPL ON (ZPL.LocaleId = ( select TOP 1 LocaleId from ZnodePortalLocale WHERE ZPC.PortalId = ZPL.PortalId AND ZPL.IsDefault = 1)) 
			LEFT JOIN ZnodePublishPortalLog ZPCL  ON ( EXISTS (SELECT TOP 1 1 FROM Cte_MaxPublish CTE WHERE CTE.PortalId = ZPC.PortalId AND CTE.PublishPortalLogId =  ZPCL.PublishPortalLogId)  )
			LEFT JOIN ZnodeDomain ZD ON (ZD.DomainId = (SELECT TOP 1 DomainId FROM ZnodeDomain ZDR WHERE ZDR.PortalId = ZPC.PortalId AND ZDR.IsActive = 1 AND ZDR.ApplicationType = ''WebStore''))
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeUserPortal ZUP WHERE (ZUP.PortalId=ZPC.PortalId OR ZUP.PortalId IS NULL)   AND ZUP.UserId='+CAST(@UserId AS VARCHAR (200)) +')
			 )
			 ,Cte_PublishStatus 
			 AS (
			 SELECT PortalId,PublishPortalLogId, StoreName,CompanyName,LogoPath,UseSSL,AdminEmail,SalesEmail,CustomerServiceEmail,SalesPhoneNumber,CustomerServicePhoneNumber,ImageNotAvailablePath,
			 ShowSwatchInCategory,ShowAlternateImageInCategory,ExternalID,MobileLogoPath,DefaultOrderStateID,DefaultReviewStatus,SplashCategoryID,SplashImageFile,MobileTheme,CopyContentBasedOnPortalId,
			 CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,InStockMsg,OutOfStockMsg,BackOrderMsg, PublishStatus,ThemeName,CSSName,CatalogName,DomainUrl,OrderStatus,LocaleId,PublishCatalogId,StoreCode,
			 '+[dbo].[Fn_GetPagingRowId](@Order_BY,'PortalId ,PublishPortalLogId DESC')+' , Count(*)Over() CountId FROM Cte_PortalLog
			 WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )
	 
			 SELECT PortalId,PublishPortalLogId,StoreName,CompanyName,LogoPath,UseSSL,AdminEmail,SalesEmail,CustomerServiceEmail,SalesPhoneNumber,CustomerServicePhoneNumber,ImageNotAvailablePath,
			 ShowSwatchInCategory,ShowAlternateImageInCategory,ExternalID,MobileLogoPath,DefaultOrderStateID,DefaultReviewStatus,SplashCategoryID,SplashImageFile,MobileTheme,CopyContentBasedOnPortalId,
			 CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,InStockMsg,OutOfStockMsg,BackOrderMsg,PublishStatus,ThemeName,CSSName,CatalogName,DomainUrl,OrderStatus,LocaleId,PublishCatalogId,StoreCode,RowId,CountId 
			 FROM Cte_PublishStatus 
			 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)
	

	         PRINT @SQL
			 INSERT INTO @TBL_PortalId 
			
			 EXEC (@SQL)

			 SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_PortalId),0)

		
			 SELECT  PortalId,PublishPortalLogId,StoreName,CompanyName,LogoPath,UseSSL,AdminEmail,SalesEmail,CustomerServiceEmail,SalesPhoneNumber,CustomerServicePhoneNumber,ImageNotAvailablePath,
			 ShowSwatchInCategory,ShowAlternateImageInCategory,ExternalID,MobileLogoPath,DefaultOrderStateID,DefaultReviewStatus,SplashCategoryID,SplashImageFile,MobileTheme,CopyContentBasedOnPortalId,
			 CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,InStockMsg,OutOfStockMsg,BackOrderMsg,PublishStatus,ThemeName,CSSName,CatalogName,DomainUrl,OrderStatus,LocaleId,PublishCatalogId,StoreCode
			 FROM @TBL_PortalId
	 
				

		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetStoreList @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')
             
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetStoreList',
					@ErrorInProcedure = 'Znode_GetStoreList',
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetWebStoreSearchProfileTrigger')
BEGIN 
	DROP PROCEDURE Znode_GetWebStoreSearchProfileTrigger
END 
GO 

CREATE PROCEDURE [dbo].[Znode_GetWebStoreSearchProfileTrigger]
(   @Keyword nvarchar(100) = '',
    @UserProfileId int = '',
	@PublishCatalogId int,
	@PortalId int 
)
AS 
/*
	 Summary :- This Procedure is used to get the publish status of the catalog 
	 Unit Testig 
	 EXEC  [Znode_GetWebStoreSearchProfileTrigger] 'Apple','1',3,1
*/
   BEGIN 
		BEGIN TRY 
		SET NOCOUNT ON 
				 Declare @SearchProfileId int 

				 Select @SearchProfileId=d.SearchProfileId 
				 from [ZnodeSearchProfileTrigger] d
				 inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=d.SearchProfileId
				 Where d.Keyword=@Keyword
				 and d.UserProfileId=@UserProfileId
				 and c.PublishCatalogId=@PublishCatalogId

				 If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=d.SearchProfileId 
					from [ZnodeSearchProfileTrigger] d
					inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=d.SearchProfileId
					Where d.Keyword=@Keyword
					and c.PublishCatalogId=@PublishCatalogId
					and d.UserProfileId is null
				 eND

				 If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=d.SearchProfileId 
					from [ZnodeSearchProfileTrigger] d
					inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=d.SearchProfileId
					Where d.UserProfileId=@UserProfileId
					and c.PublishCatalogId=@PublishCatalogId
					and d.Keyword is null
				 eND

				 If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=a.SearchProfileId 
					from ZnodePortalSearchProfile a
					inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=a.SearchProfileId
					Where a.PortalId =@PortalId 
					and a.IsDefault=1
					and c.PublishCatalogId=@PublishCatalogId
				End 

				--If isnull(@SearchProfileId,0)=0
				-- Begin
				--	Select @SearchProfileId=min(a.SearchProfileId)
				--	from ZnodePortalSearchProfile a
				--	inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=a.SearchProfileId
				--	Where a.PortalId =@PortalId 
				--	and a.IsDefault=0
				--	and c.PublishCatalogId=@PublishCatalogId
				--End 

				If isnull(@SearchProfileId,0)=0
				 Begin
					Select @SearchProfileId=a.SearchProfileId
					from ZnodeSearchProfile a
					----inner join ZnodePublishCatalogSearchProfile c on c.SearchProfileId=a.SearchProfileId
					Where a.IsDefault=1
					--and c.PublishCatalogId=@PublishCatalogId
				End 

				If Isnull(@SearchProfileId,0)>0
				exec [dbo].[Znode_GetSearchProfileDetails] @SearchProfileId=@SearchProfileId

				----To get SearchRule Item Details
				exec [Znode_GetSearchTriggerItemRuleDetails] @Keyword = @Keyword, @PublishCatalogId = @PublishCatalogId

		 END TRY 
		 BEGIN CATCH 
			DECLARE @Status BIT ;
			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
			@ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)
	--		= 'EXEC Znode_GetCatalogList @WhereClause = '+@WhereClause+',@Rows='+CAST(@Rows AS
 --VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
			EXEC Znode_InsertProcedureErrorLog
					@ProcedureName = 'Znode_GetZnodeSearchProfileList',
					@ErrorInProcedure = @Error_procedure,
					@ErrorMessage = @ErrorMessage,
					@ErrorLine = @ErrorLine,
					@ErrorCall = @ErrorCall;
		 END CATCH 
   END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportCustomer')
BEGIN 
	DROP PROCEDURE Znode_ImportCustomer
END 
GO 
CREATE  PROCEDURE [dbo].[Znode_ImportCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id from AspNetRoles where   NAME = 'Customer'  

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertCustomer TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max),CreatedDate Datetime, GUID NVARCHAR(400)
		);

			--SET @SSQL = 'SELECT RowNumber,UserName,FirstName,LastName,BudgetAmount,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId,GUID FROM '+ @TableName;
		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertCustomer( RowNumber,UserName,FirstName,LastName,Email,PhoneNumber,       EmailOptIn,IsActive,ExternalId,CreatedDate,GUID )
		EXEC sys.sp_sqlexec @SSQL;
		

		
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1
		If( Isnull(@ProfileId ,0) = 0 ) 
		Begin
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '10', 'Default Portal Profile', '', @NewGUId, null , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				
				UPDATE ZnodeImportProcessLog
				SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
				WHERE ImportProcessLogId = @ImportProcessLogId;

				DELETE FROM @InsertCustomer 
				SET @Status = 0;
				SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
				ROLLBACK TRAN A;
				Return 0 
		End

		--UserName,FirstName,LastName,Email,PhoneNumber,EmailOptIn,IsActive,ExternalId
	
	    -- start Functional Validation 

		-----------------------------------------------
		If @IsAllowGlobalLevelUserCreation = 'true'
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					    WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
					   );
		Else 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   
					   );
		
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ii.UserName not like '%_@_%_.__%' 
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertCustomer AS ii
					   WHERE ltrim(rtrim(ii.UserName)) in 
					   (SELECT ltrim(rtrim(UserName))  FROM @InsertCustomer group by ltrim(rtrim(UserName))  having count(*) > 1 )

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);


		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 
				
				
				DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
				DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
				DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256),CreatedDate Datetime )

				UPDATE ANU SET 
				ANU.PhoneNumber	= IC.PhoneNumber
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

				UPDATE ZU SET 
				ZU.FirstName	= IC.FirstName,
				ZU.LastName		= IC.LastName,
				--ZU.MiddleName	= IC.MiddleName,
				ZU.BudgetAmount = IC.BudgetAmount,
				ZU.Email		= IC.Email,
				ZU.PhoneNumber	= IC.PhoneNumber,
				ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
				ZU.IsActive		= IC.IsActive
				--ZU.ExternalId = ExternalId
				from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN @InsertCustomer IC ON ANZU.UserName = IC.UserName 
				where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

	
				Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
				OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
				Select NEWID(),IC.UserName, @PortalId FROM @InsertCustomer IC 
				where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

				INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
				LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
				output inserted.Id, inserted.UserName into @InsertedASPNetUsers
				SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,NULL LockoutEndDateUtc,1 LockoutEnabled,
				0,@GetDate,AspNetZnodeUserId from @InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
				ON A.UserName = B.UserName
				
				INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
				IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate into @InsertZnodeUser
				SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
				,IC.PhoneNumber,Isnull(IC.EmailOptIn,0),IC.IsActive,IC.ExternalId, @UserId,
				CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,@UserId,@Getdate
				from @InsertCustomer IC Inner join 
				@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
				@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
				INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
				INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
				SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
				from @InsertZnodeUser IZU
				--Declare @ProfileId  int 
				--select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @Portalid and IsDefaultRegistedProfile=1

				insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT @ProfileId  , UserId, 1 , @UserId,CreatedDate,@UserId,@Getdate from @InsertZnodeUser
		-- 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'ZnodeReport_GetPopularProductFiltered')
BEGIN 
	DROP PROCEDURE ZnodeReport_GetPopularProductFiltered
END 
GO 
CREATE PROCEDURE [dbo].[ZnodeReport_GetPopularProductFiltered](
      @BeginDate   DATE          = NULL ,
      @EndDate     DATE          = NULL ,
      @PortalId    NVARCHAR(MAX) = '' ,
      @SKU         NVARCHAR(MAX) = '' ,
      @ProductName NVARCHAR(MAX) = '')
AS 
/*
     Sumarry : - This Procedure is used to find the Popular products filtered 
     Unit Testing 
     EXEC ZnodeReport_GetPopularProductFiltered 
	*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
          
		   WITH Cte_ReportData
                  AS 
			    (SELECT ZP.StoreName AS 'StoreName' , ZOOLI.SKU , ZOOLI.ProductName , SUM(ZOOLI.Quantity) AS 'Quantity' , ZOOLI.Price AS 'Price' ,
			    SUM(ZOOLI.Quantity) * ZOOLI.Price AS TotalAmount , ISNULL(ZC.Symbol , dbo.Fn_GetDefaultCurrencySymbol()) AS Symbol
                      FROM ZnodeOmsOrder AS ZOO INNER JOIN ZnodeOmsOrderDetails AS ZOOD ON ( ZOOD.OmsOrderId = ZOO.OmsOrderId AND ZOOD.IsActive =1 )
                                                INNER JOIN ZnodeOmsOrderLineItems AS ZOOLI ON Zood.OmsOrderDetailsId = ZOOLI.OmsOrderDetailsId
                                                INNER JOIN ZnodePortal AS ZP ON Zp.PortalID = ZOOD.PortalId
                                                LEFT JOIN ZnodeCurrency AS ZC ON ( ZC.CurrencyCode = ZOOD.CurrencyCode )
                      WHERE ( CAST(ZOOD.OrderDate AS DATE) BETWEEN CASE
                                                                       WHEN @BeginDate IS NULL
                                                                       THEN CAST(ZOOD.OrderDate AS DATE)
                                                                       ELSE @BeginDate
                                                                   END AND CASE
                                                                               WHEN @EndDate IS NULL
                                                                               THEN CAST(ZOOD.OrderDate AS DATE)
                                                                               ELSE @EndDate
                                                                           END )
                            AND
                            ( EXISTS ( SELECT TOP 1 1
                                       FROM dbo.split ( @PortalId , ','
                                                      ) AS SP
                                       WHERE CAST(Zp.PortalID AS VARCHAR(100)) = SP.Item
                                             OR
                                             @PortalId = ''
                                     ) )
                            AND
                            ( ZOOLI.SKU LIKE '%'+@SKU+'%'
                              OR
                              @SKU = '' )
                            AND
                            ( ZOOLI.ProductName LIKE '%'+@ProductName+'%'
                              OR
                              @ProductName = '' )
                      GROUP BY ZP.StoreName , ZOOLI.SKU , ZOOLI.ProductName , ZOOLI.Price , ZC.Symbol
                      HAVING SUM(ZOOLI.Quantity) > 0)

                  SELECT StoreName , SKU , ProductName , dbo.Fn_GetDefaultInventoryRoundOff ( Quantity ) AS Quantity , DBO.Fn_GetDefaultPriceRoundOff ( Price ) AS Price , 
			   DBO.Fn_GetDefaultPriceRoundOff ( TotalAmount ) AS TotalAmount , Symbol FROM Cte_ReportData ORDER BY Cast( Quantity as Numeric) DESC;
         END TRY

         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_GetPopularProductFiltered @PortalId = '+@PortalId+',@BeginDate='+CAST(@BeginDate AS VARCHAR(200))+',@EndDate='+CAST(@EndDate AS VARCHAR(200))+',@SKU='+@SKU+',@ProductName='+@ProductName+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'ZnodeReport_GetPopularProductFiltered',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteInventory')
BEGIN 
	DROP PROCEDURE Znode_DeleteInventory
END 
GO 
CREATE PROCEDURE Znode_DeleteInventory
(
	@InventoryId VARCHAR(2000),
	@Status int OUT
)
AS
BEGIN
BEGIN TRY
		SET NOCOUNT ON;
		BEGIN TRAN A;
		DECLARE @TBL_DeletdInventoryId TABLE
		( 
			InventoryId int
		);
		DECLARE @TBL_DeletdPimDownloadableProductKeyid TABLE
		( 
			PimDownloadableProductKeyId int
		);
		INSERT INTO @TBL_DeletdInventoryId
			   SELECT Item
			   FROM dbo.split( @InventoryId, ',' ) AS a;

		INSERT INTO @TBL_DeletdPimDownloadableProductKeyid
		SELECT ZPDPK.PimDownloadableProductKeyId from ZnodePimDownloadableProductKey ZPDPK WHERE PimDownloadableProductId IN 
		(
			SELECT PimDownloadableProductId FROM ZnodePimDownloadableProduct ZPDP
			INNER JOIN ZnodeInventory ZI ON ZPDP.SKU = ZI.SKU
			WHERE ZI.InventoryId IN  (SELECT Item from Split(@InventoryId, ','))
		)
		DELETE FROM ZnodeInventory
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM @TBL_DeletdInventoryId AS a
			WHERE a.InventoryId = ZnodeInventory.InventoryId
		);
		DELETE FROM ZnodePimDownloadableProductKey
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM @TBL_DeletdPimDownloadableProductKeyid AS da
			WHERE da.PimDownloadableProductKeyId = ZnodePimDownloadableProductKey.PimDownloadableProductKeyId
			AND IsUsed = 0
		);

		IF
		(
			SELECT COUNT(1)
			FROM @TBL_DeletdInventoryId
		) =
		(
			SELECT COUNT(1)
			FROM dbo.split( @InventoryId, ',' ) AS a
		)
		BEGIN
			SELECT 1 AS ID, CAST(1 AS bit) AS Status;
		END;
		ELSE
		BEGIN
			SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		END;
		SET @Status = 1;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteInventory @InventoryId = '+@InventoryId+',@Status='+CAST(@Status AS
 VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteInventory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
	END CATCH;
	
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteSearchCatalogRule')
BEGIN 
	DROP PROCEDURE Znode_DeleteSearchCatalogRule
END 
GO 
CREATE PROCEDURE [dbo].[Znode_DeleteSearchCatalogRule]
( 
	@SearchCatalogRuleId VARCHAR(MAX),
	@Status      BIT OUT
)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRAN DeleteSearchCatalogRule;
    BEGIN TRY

		DELETE FROM ZnodeSearchItemRule
		WHERE EXISTS 
			  ( SELECT * FROM ZnodeSearchCatalogRule ZSCR WHERE EXISTS(SELECT * FROM dbo.Split(@SearchCatalogRuleId,',')S WHERE ZSCR.SearchCatalogRuleId = S.Item )
				AND ZSCR.SearchCatalogRuleId = ZnodeSearchItemRule.SearchCatalogRuleId )

		DELETE FROM ZnodeSearchTriggerRule
		WHERE EXISTS 
			  ( SELECT * FROM ZnodeSearchCatalogRule ZSCR WHERE EXISTS(SELECT * FROM dbo.Split(@SearchCatalogRuleId,',')S WHERE ZSCR.SearchCatalogRuleId = S.Item )
				AND ZSCR.SearchCatalogRuleId = ZnodeSearchTriggerRule.SearchCatalogRuleId )

		DELETE FROM ZnodeSearchCatalogRule 
		WHERE EXISTS ( SELECT * FROM dbo.Split(@SearchCatalogRuleId,',')S WHERE ZnodeSearchCatalogRule.SearchCatalogRuleId = S.Item )
		
		SELECT 1 AS ID,CAST(1 AS BIT) AS [Status];
        SET @Status = 1;

	COMMIT TRAN DeleteSearchCatalogRule;
    END TRY
    BEGIN CATCH
        DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteCMSSlider @CMSSliderId = '+CAST(@SearchCatalogRuleId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(50));
        SELECT 0 AS ID,
            CAST(0 AS BIT) AS [Status];
        SET @Status = 0;
		ROLLBACK TRAN DeleteCMSSlider;
        EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_DeleteSearchCatalogRule',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;
        ROLLBACK TRAN DeleteSearchCatalogRule;
    END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchRuleDetails')
BEGIN 
	DROP PROCEDURE Znode_GetSearchRuleDetails
END 
GO 

CREATE PROCEDURE [dbo].[Znode_GetSearchRuleDetails]
(
	@WhereClause         VARCHAR(MAX)  = '',
    @Rows                INT           = 100,
    @PageNo              INT           = 1,
    @Order_BY            VARCHAR(1000) = '',
    @RowsCount           INT OUT
)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		Declare @TBL_SerchRuleDetail Table (SearchCatalogRuleId Int, RuleName varchar(600), UserName nvarchar(512), CreatedDate Datetime, StartDate Datetime, EndDate Datetime, IsPause Bit,RowId Int, CountId Int)
		Declare @SQL Varchar(max)

		SET @SQL = '
		;With Cte_SerchRuleDetail As'+
		+'('+
			+' SELECT ZSCR.publishcatalogid, ZSCR.SearchCatalogRuleId, ZSCR.RuleName, ANZU.UserName, ZSCR.CreatedDate, ZSCR.StartDate, ZSCR.EndDate, ZSCR.IsPause '+ 
			+' FROM ZnodeSearchCatalogRule ZSCR '+ 
			+' LEFT JOIN ZnodeUser ZU ON ZSCR.CreatedBy = ZU.UserId '+
			+' INNER JOIN AspNetUsers ANU ON ZU.AspNetUserId = ANU.Id '+
			+' INNER JOIN AspNetZnodeUser ANZU ON ANU.UserName = ANZU.AspNetZnodeUserId '+
		 +')'+
		 +',Cte_SerchRuleDetail_OrderBy AS '+
		 +'('
			+' SELECT publishcatalogid,SearchCatalogRuleId, RuleName, UserName, CreatedDate, StartDate, EndDate, IsPause '+
			+' , '+[dbo].[Fn_GetPagingRowId](@Order_BY, ' SearchCatalogRuleId ASC')+
			+' FROM Cte_SerchRuleDetail '+
		+')'+
		 +' SELECT CSRD.SearchCatalogRuleId, CSRD.RuleName, CSRD.UserName, CSRD.CreatedDate, StartDate, EndDate, IsPause, Count(*)Over() As CountId '+
		 +' FROM Cte_SerchRuleDetail_OrderBy CSRD 
		 '+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows)+'
		 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+'
		 '+[dbo].[Fn_GetOrderByClause](@Order_BY, 'CSRD.SearchCatalogRuleId ASC')
		
		 print @SQL
		 INSERT INTO @TBL_SerchRuleDetail (SearchCatalogRuleId, RuleName, UserName, CreatedDate, StartDate, EndDate, IsPause, CountId)
		 EXEC (@SQL)

		 SELECT SearchCatalogRuleId, RuleName, UserName, CreatedDate, StartDate, EndDate,IsPause, 
		        CASE WHEN IsPause = 1 THEN 'Yes' ELSE '' END AS Paused, 
				CountId
		 FROM @TBL_SerchRuleDetail

		 SET @RowsCount = ISNULL((SELECT top 1 CountId FROM @TBL_SerchRuleDetail), 0);
	END TRY
         BEGIN CATCH
		
		DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSearchRuleDetails @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSearchRuleDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
            
      END CATCH;
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchTriggerItemRuleDetails')
BEGIN 
	DROP PROCEDURE Znode_GetSearchTriggerItemRuleDetails
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetSearchTriggerItemRuleDetails]
(
	@Keyword nvarchar(100) = '',
	@PublishCatalogId int
)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();

		declare @Keyword1 varchar(MAX), @sql VARCHAR(MAX)
		select @Keyword1 = coalesce(@Keyword1+'ZSTR.SearchTriggerValue like ''%','')+item+'%'' OR ' from dbo.split(@Keyword,' ') where item <> ''

		select @Keyword1 = 'ZSTR.SearchTriggerValue like ''%'+SUBSTRING(@Keyword1,1,LEN(@Keyword1)-3)


		SET @sql =
		'SELECT DISTINCT ZSCR.SearchCatalogRuleId,ZSIR.SearchItemKeyword, ZSIR.SearchItemCondition, ZSIR.SearchItemValue, ZSIR.SearchItemBoostValue, ZSCR.IsItemForAll 
		FROM ZnodeSearchCatalogRule ZSCR 
		INNER JOIN ZnodeSearchTriggerRule ZSTR ON ZSCR.SearchCatalogRuleId = ZSTR.SearchCatalogRuleId 
		INNER JOIN ZnodeSearchItemRule ZSIR ON ZSCR.SearchCatalogRuleId = ZSIR.SearchCatalogRuleId 
		WHERE ZSCR.PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(10))+' AND ZSCR.IsGlobalRule = 0 
		AND ( (IsItemForAll = 0  AND ZSTR.SearchTriggerValue LIKE CASE WHEN ZSTR.SearchTriggerCondition = ''Is'' THEN '''+@Keyword+''' ELSE ''%'+@Keyword+'%'' END) OR 
		     (IsItemForAll = 1  AND '+case when @Keyword1 <> '' then +@Keyword1 else '1=1' end+' ) OR 
			 (IsItemForAll = 0  AND ZSTR.SearchTriggerCondition <> ''Is'' AND '+case when @Keyword1 <> '' then +@Keyword1 else '1=1' end+')) 
		AND CAST('''+CAST(@GetDate AS VARCHAR(100))+''' AS DATE) BETWEEN CAST(ZSCR.StartDate AS DATE) AND ISNULL(ZSCR.EndDate,''9999-01-01'')
		AND IsPause <> 1 
		UNION ALL
		SELECT DISTINCT ZSCR.SearchCatalogRuleId,ZSIR.SearchItemKeyword, ZSIR.SearchItemCondition, ZSIR.SearchItemValue, ZSIR.SearchItemBoostValue, ZSCR.IsItemForAll 
		FROM ZnodeSearchCatalogRule ZSCR 
		LEFT JOIN ZnodeSearchTriggerRule ZSTR ON ZSCR.SearchCatalogRuleId = ZSTR.SearchCatalogRuleId 
		INNER JOIN ZnodeSearchItemRule ZSIR ON ZSCR.SearchCatalogRuleId = ZSIR.SearchCatalogRuleId 
		WHERE ZSCR.PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(10))+' AND ZSCR.IsGlobalRule = 1 
		AND CAST('''+CAST(@GetDate AS VARCHAR(100))+''' AS DATE) BETWEEN CAST(ZSCR.StartDate AS DATE) AND ISNULL(ZSCR.EndDate,''9999-01-01'') 
		AND IsPause <> 1'

		PRINT @sql
		EXEC (@sql)

	END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			    @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryHierarchy @Keyword = '+@Keyword+' @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50));
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetCategoryHierarchy',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchTriggerItemRuleForEdit')
BEGIN 
	DROP PROCEDURE Znode_GetSearchTriggerItemRuleForEdit
END 
GO 
CREATE PROCEDURE [dbo].[Znode_GetSearchTriggerItemRuleForEdit]
(
	@SearchCatalogRuleId  Int
)
AS
/*
	exec [Znode_GetSearchTriggerItemRuleForEdit] @SearchCatalogRuleId = 6
*/
BEGIN
	
	SET NOCOUNT ON;

	BEGIN TRY
		----Getting Search Catalog Rule Data
		SELECT ZSCR.SearchCatalogRuleId, ZSCR.PublishCatalogId,	ZSCR.RuleName,	ZSCR.StartDate,	ZSCR.EndDate, ZSCR.IsTriggerForAll, ZSCR.IsItemForAll,	ZSCR.IsGlobalRule, ZSCR.IsPause
		FROM ZnodeSearchCatalogRule ZSCR
		WHERE SearchCatalogRuleId = @SearchCatalogRuleId 

		----Getting Search Trigger Rule Data
		SELECT ZSTR.SearchTriggerRuleId, ZSTR.SearchCatalogRuleId, ZSTR.SearchTriggerKeyword, ZSTR.SearchTriggerCondition, ZSTR.SearchTriggerValue 
		FROM ZnodeSearchTriggerRule ZSTR 
		WHERE ZSTR.SearchCatalogRuleId = @SearchCatalogRuleId 

		----Getting Search Item Rule Data
		SELECT ZSIR.SearchItemRuleId, ZSIR.SearchCatalogRuleId, ZSIR.SearchItemKeyword, ZSIR.SearchItemCondition, ZSIR.SearchItemValue, ZSIR.SearchItemBoostValue
		FROM ZnodeSearchItemRule ZSIR
		WHERE ZSIR.SearchCatalogRuleId = @SearchCatalogRuleId 

	 END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			         @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
					 @ErrorLine VARCHAR(100)= ERROR_LINE(), 
					 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryHierarchy @SearchCatalogRuleId = '+CAST(@SearchCatalogRuleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCategoryHierarchy',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSearchCatalogRule')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSearchCatalogRule
END 
GO 
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSearchCatalogRule]
(
	@SearchCatalogRuleId Int = 0, ---- 0 -- Insert, >0 -- Update
	@PublishCatalogId  Int,
	@RuleName Varchar(600),
	@StartDate DateTime,
	@EndDate DateTime = NULL, ---01/01/0001 '0001-01-01'
	@IsGlobalRule Bit = 0, -- 1 - Apply to all search for catalog
	@IsTriggerForAll Bit = 0, -- 0 for Any , 1 for All
	@SearchRuleTriggerDetail SearchRuleTriggerDetail ReadOnly,
	@IsItemForAll Bit = 0, -- 0 for Any , 1 for All
	@SearchRuleItemDetail SearchRuleItemDetail ReadOnly,
	@UserId Int,
	@Status Bit Out
)
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE @GetDate DateTime= dbo.Fn_GetDate()

	DECLARE @InsertedSearchCatalogRule TABLE ( SearchCatalogRuleId INT ) 

	BEGIN TRY
	BEGIN TRAN

		---- Updating existing Rule against catalog
		UPDATE ZnodeSearchCatalogRule
		SET RuleName = @RuleName,
		    StartDate = @StartDate,
			EndDate = CASE WHEN CAST(@EndDate AS Date) = '1754-01-01' THEN NULL ELSE @EndDate END, ----'1754-01-01' Default date used for null 
			IsTriggerForAll = @IsTriggerForAll,
			IsItemForAll = @IsItemForAll,
			IsGlobalRule = @IsGlobalRule,
			ModifiedBy = @UserId,
			ModifiedDate = @GetDate
		WHERE PublishCatalogId = @PublishCatalogId 
		AND SearchCatalogRuleId = @SearchCatalogRuleId 

		---- Inserting new Rule against catalog
		INSERT INTO ZnodeSearchCatalogRule( PublishCatalogId, RuleName, StartDate, EndDate, IsTriggerForAll, IsItemForAll, IsGlobalRule, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		OUTPUT Inserted.SearchCatalogRuleId  into @InsertedSearchCatalogRule ( SearchCatalogRuleId )
		SELECT @PublishCatalogId AS PublishCatalogId, @RuleName AS RuleName, @StartDate AS StartDate, CASE WHEN CAST(@EndDate AS Date) = '1754-01-01' THEN NULL ELSE @EndDate END AS EndDate, 
		@IsTriggerForAll AS IsTriggerForAll, @IsItemForAll AS IsItemForAll, @IsGlobalRule AS IsGlobalRule, @UserId AS CreatedBy, @GetDate AS CreatedDate,@UserId AS ModifiedBy, @GetDate AS ModifiedDate
		WHERE NOT EXISTS( SELECT * FROM ZnodeSearchCatalogRule WHERE RuleName = @RuleName )
		AND @SearchCatalogRuleId = 0

		----Deleting search trigger against catalog rule
		DELETE FROM ZnodeSearchTriggerRule 
		WHERE NOT EXISTS (SELECT * FROM @SearchRuleTriggerDetail SRTD WHERE ZnodeSearchTriggerRule.SearchTriggerRuleId = SRTD.SearchTriggerRuleId 
						  AND ZnodeSearchTriggerRule.SearchCatalogRuleId = SRTD.SearchCatalogRuleId  )
		AND ZnodeSearchTriggerRule.SearchCatalogRuleId = @SearchCatalogRuleId 

		---- Updating search trigger against catalog rule --- SRTD.SearchCatalogRuleId IS NOT NULL records for update
		UPDATE ZSTR 
		SET ZSTR.SearchTriggerKeyword = SRTD.SearchTriggerKeyword,
		    ZSTR.SearchTriggerCondition = SRTD.SearchTriggerCondition,
		    ZSTR.SearchTriggerValue = SRTD.SearchTriggerValue, 
		    ZSTR.ModifiedBy = @UserId, 
			ZSTR.ModifiedDate = @GetDate
		OUTPUT Inserted.SearchCatalogRuleId  into @InsertedSearchCatalogRule ( SearchCatalogRuleId )
		FROM ZnodeSearchTriggerRule ZSTR 
		INNER JOIN @SearchRuleTriggerDetail SRTD ON ZSTR.SearchTriggerRuleId = SRTD.SearchTriggerRuleId 
		AND ZSTR.SearchCatalogRuleId = @SearchCatalogRuleId 
		                                           
		---- Inserting search trigger against new created catalog rule --- SRTD.SearchCatalogRuleId IS NULL records for insert
		INSERT INTO ZnodeSearchTriggerRule( SearchCatalogRuleId, SearchTriggerKeyword, SearchTriggerCondition, SearchTriggerValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
		SELECT ISCR.SearchCatalogRuleId, SRTD.SearchTriggerKeyword, SRTD.SearchTriggerCondition, SRTD.SearchTriggerValue, 
		       @UserId AS CreatedBy, @GetDate AS CreatedDate,@UserId AS ModifiedBy, @GetDate AS ModifiedDate
		FROM @SearchRuleTriggerDetail SRTD
		CROSS APPLY (SELECT TOP 1 SearchCatalogRuleId FROM @InsertedSearchCatalogRule ) ISCR 
		WHERE ISNULL(SRTD.SearchCatalogRuleId,0) = 0
		
		---- Inserting search trigger against existing catalog rule 
		INSERT INTO ZnodeSearchTriggerRule( SearchCatalogRuleId, SearchTriggerKeyword, SearchTriggerCondition, SearchTriggerValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
		SELECT SRTD.SearchCatalogRuleId, SRTD.SearchTriggerKeyword, SRTD.SearchTriggerCondition, SRTD.SearchTriggerValue, 
		       @UserId AS CreatedBy, @GetDate AS CreatedDate,@UserId AS ModifiedBy, @GetDate AS ModifiedDate
		FROM @SearchRuleTriggerDetail SRTD
		WHERE ISNULL(SRTD.SearchCatalogRuleId,0) <> 0
		AND NOT EXISTS ( SELECT * FROM ZnodeSearchTriggerRule ZSTR WHERE SRTD.SearchCatalogRuleId = ZSTR.SearchCatalogRuleId AND SRTD.SearchTriggerKeyword = ZSTR.SearchTriggerKeyword
		                 AND SRTD.SearchTriggerCondition = ZSTR.SearchTriggerCondition AND SRTD.SearchTriggerValue = ZSTR.SearchTriggerValue)
		
		----Deleting search items against catalog rule
		DELETE FROM ZnodeSearchItemRule 
		WHERE NOT EXISTS (SELECT * FROM @SearchRuleItemDetail SRID WHERE ZnodeSearchItemRule.SearchItemRuleId = SRID.SearchItemRuleId 
						  AND ZnodeSearchItemRule.SearchCatalogRuleId = SRID.SearchCatalogRuleId  )
		AND ZnodeSearchItemRule.SearchCatalogRuleId = @SearchCatalogRuleId 

		---- Updating search items against catalog rule --- SRID.SearchCatalogRuleId IS NOT NULL records for update
		UPDATE ZSIR 
		SET ZSIR.SearchItemKeyword = SRID.SearchItemKeyword,
			ZSIR.SearchItemCondition = SRID.SearchItemCondition,
		    ZSIR.SearchItemValue = SRID.SearchItemValue, 
		    ZSIR.SearchItemBoostValue = SRID.SearchItemBoostValue,
			ZSIR.ModifiedBy = @UserId, 
			ZSIR.ModifiedDate = @GetDate
		OUTPUT Inserted.SearchCatalogRuleId  INTO @InsertedSearchCatalogRule ( SearchCatalogRuleId )
		FROM ZnodeSearchItemRule ZSIR 
		INNER JOIN @SearchRuleItemDetail SRID ON ZSIR.SearchItemRuleId = SRID.SearchItemRuleId 
		AND ZSIR.SearchCatalogRuleId = @SearchCatalogRuleId 
		                                        
		---- Inserting search items against new created catalog rule --- SRID.SearchCatalogRuleId IS NULL records for insert
		INSERT INTO ZnodeSearchItemRule( SearchCatalogRuleId, SearchItemKeyword, SearchItemCondition, SearchItemValue, SearchItemBoostValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
		SELECT ISCR.SearchCatalogRuleId, SRID.SearchItemKeyword, SRID.SearchItemCondition, SRID.SearchItemValue, SRID.SearchItemBoostValue, 
		       @UserId AS CreatedBy, @GetDate AS CreatedDate,@UserId AS ModifiedBy, @GetDate AS ModifiedDate
		FROM @SearchRuleItemDetail SRID
		CROSS APPLY (SELECT TOP 1 SearchCatalogRuleId FROM @InsertedSearchCatalogRule ) ISCR 
		WHERE ISNULL(SRID.SearchCatalogRuleId,0) = 0
		
		---- Inserting search items against existing catalog rule 
		INSERT INTO ZnodeSearchItemRule( SearchCatalogRuleId, SearchItemKeyword, SearchItemCondition, SearchItemValue, SearchItemBoostValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
		SELECT SRID.SearchCatalogRuleId, SRID.SearchItemKeyword, SRID.SearchItemCondition, SRID.SearchItemValue, SRID.SearchItemBoostValue, 
		       @UserId AS CreatedBy, @GetDate AS CreatedDate,@UserId AS ModifiedBy, @GetDate AS ModifiedDate
		FROM @SearchRuleItemDetail SRID
		WHERE ISNULL(SRID.SearchCatalogRuleId,0) <> 0 
		AND NOT EXISTS (SELECT * FROM ZnodeSearchItemRule ZSIR WHERE SRID.SearchCatalogRuleId = ZSIR.SearchCatalogRuleId AND SRID.SearchItemKeyword = ZSIR.SearchItemKeyword 
		                AND SRID.SearchItemCondition = ZSIR.SearchItemCondition AND SRID.SearchItemValue = ZSIR.SearchItemValue )

		SET @Status = 1
		SELECT 1 as Id, @Status  AS [Status]

	COMMIT TRAN
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN
		SET @Status = 0 
		SELECT 1 as Id, @Status  AS [Status]
	END CATCH

END
GO

Update ZnodeapplicationSetting  SET Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PimProductId</name>
    <headertext>Checkbox</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>PimProductId</name>
    <headertext>ID</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>Image</name>
    <headertext>Image</headertext>
    <width>20</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>ProductImage,ProductName</imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>imageicon</Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>ProductName</name>
    <headertext>Product Name</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>ProductType</name>
    <headertext>Product Type</headertext>
    <width>50</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>SKU</name>
    <headertext>SKU</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>SKU</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>Assortment</name>
    <headertext>Assortment</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
where ItemName ='UnassociatedProducts'

GO

Update ZnodeApplicationSetting  SET Setting ='<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>ProductId</name>
    <headertext>Checkbox</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>ProductId</name>
    <headertext>ID</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>Image</name>
    <headertext>Image</headertext>
    <width>20</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>ImagePath, ProductName</imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>imageicon</Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>ProductName</name>
    <headertext>Product Name</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>ProductType</name>
    <headertext>Product Type</headertext>
    <width>50</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>SKU</name>
    <headertext>SKU</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>SKU</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>Assortment</name>
    <headertext>Assortment</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
 where ItemName ='UnassociatedProductsDynamic'

 GO


 -- dt\07\06\2018
 
IF NOT EXISTS (select TOP 1 1 from ZnodeApplicationSetting WHERE ItemName ='ZnodeSearchCatalogRule')
 BEGIN
insert into ZnodeApplicationSetting values('Table','ZnodeSearchCatalogRule','<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>SearchCatalogRuleId</name>      <headertext>Checkbox</headertext>      <width>0</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>RuleName</name>      <headertext>Rule Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>UserName</name>      <headertext>Created By</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CreatedDate</name>      <headertext>Created On</headertext>      <width>0</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>StartDate</name>      <headertext>Start Date</headertext>      <width>0</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>EndDate</name>      <headertext>End Date</headertext>      <width>0</width>      <datatype>DateTime</datatype>      <columntype>DateTime</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Paused</name>      <headertext>Paused</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Edit|Disable|Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>searchCatalogRuleId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Disable|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/Search/Search/UpdateBoostAndBuryRule|/Search/Search/PauseCatalogSearchRule|/Search/Search/DeleteCatalogSearchRule</manageactionurl>      <manageparamfield>searchCatalogRuleId|searchCatalogRuleId,IsPause|searchCatalogRuleId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>grid-action</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>','ZnodeSearchCatalogRule'
,'ZnodeSearchCatalogRule','ZnodeSearchCatalogRule',0,null,null,null,null,2,getdate(),2,getdate())

END

--dt\14th June, 2018\ Task Id: ZPD-2075

GO 
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimCategoryProductId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimCategoryId</name>      <headertext>ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimCategoryId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,CategoryName</imageparamfield>      <manageactionurl>/Pim/Category/Edit</manageactionurl>      <manageparamfield>PimCategoryId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CategoryName</name>      <headertext>Category Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>Delete</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/PIM/Category/DeleteAssociatedCategories</manageactionurl>      <manageparamfield>PimCategoryProductId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' , ModifiedDate = GETDATE()
where  ItemName = 'AssociatedCategoriesToProduct'
GO

GO 
update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimCategoryId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimCategoryId</name>      <headertext>ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit</format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimCategoryId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,CategoryName</imageparamfield>      <manageactionurl>/Pim/Category/Edit</manageactionurl>      <manageparamfield>PimCategoryId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>CategoryName</name>      <headertext>Category Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>' , ModifiedDate = GETDATE()
where  ItemName = 'UnAssociatedCategoriesToProduct'
GO

--dt\15th June, 2018 Task Id-ZPD-1566

Go
update ZnodeApplicationSetting set Setting='<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PimProductTypeAssociationId</name>
    <headertext>Product ID</headertext>
    <width>20</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>y</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>PimProductId</name>
    <headertext>Checkbox</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>PimProductId</name>
    <headertext>ID</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>Image</name>
    <headertext>Image</headertext>
    <width>20</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>ProductImage,ProductName</imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>imageicon</Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>ProductName</name>
    <headertext>Product Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>ProductType</name>
    <headertext>Product Type</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>SKU</name>
    <headertext>SKU</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>SKU</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>8</id>
    <name>Assortment</name>
    <headertext>Assortment</headertext>
    <width>0</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>9</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>Delete</format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Delete</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/PIM/Brand/UnAssociateBrandProducts</manageactionurl>
    <manageparamfield>PimProductId,AttributeValue</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>' where ItemName='AssociatedBrandProductList'
Go

Go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null ,'Inventory','GetInventoryDetail',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'GetInventoryDetail')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'GetInventoryDetail'))


GO
--ZPD-1957 : 11-June-2018
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null ,'Inventory','ImportInventoryView',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Inventory' and ActionName = 'ImportInventoryView')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ImportInventoryView')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ImportInventoryView'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory'),
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ImportInventoryView')	
,2,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Inventory' AND ControllerName = 'Inventory') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Inventory' and ActionName= 'ImportInventoryView'))

GO

--ZPD-1727 : 14-June-2018
Go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','GetBoostAndBuryRules',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'GetBoostAndBuryRules')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetBoostAndBuryRules')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetBoostAndBuryRules'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetBoostAndBuryRules')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetBoostAndBuryRules'))

GO


Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','CreateBoostAndBuryRule',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'CreateBoostAndBuryRule')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'CreateBoostAndBuryRule')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'CreateBoostAndBuryRule'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'CreateBoostAndBuryRule')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'CreateBoostAndBuryRule'))


Go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','UpdateBoostAndBuryRule',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'UpdateBoostAndBuryRule')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'UpdateBoostAndBuryRule')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'UpdateBoostAndBuryRule'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'UpdateBoostAndBuryRule')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'UpdateBoostAndBuryRule'))


Go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','DeleteCatalogSearchRule',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'DeleteCatalogSearchRule')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'DeleteCatalogSearchRule')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'DeleteCatalogSearchRule'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'DeleteCatalogSearchRule')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'DeleteCatalogSearchRule'))


Go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','PauseCatalogSearchRule',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'PauseCatalogSearchRule')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'PauseCatalogSearchRule')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'PauseCatalogSearchRule'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'PauseCatalogSearchRule')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'PauseCatalogSearchRule'))


Go
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','IsRuleNameExist',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'IsRuleNameExist')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'IsRuleNameExist')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'IsRuleNameExist'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'IsRuleNameExist')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'IsRuleNameExist'))

GO

INSERT INTO ZnodeCMSContentPages (PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublished)
SELECT 1,(select CMSTemplateId FROM ZnodeCMSTemplate WHERE Name = 'Simple Search'),'Simple Search Page',null,null,1,2,getdate(),2,getdate(),1
WHERE NOT EXISTS (SELECT * FROM  ZnodeCMSContentPages WHERE PortalId = 1 and CMSTemplateId = (select CMSTemplateId FROM ZnodeCMSTemplate WHERE Name = 'Simple Search') and PageName = 'Simple Search Page')

INSERT INTO ZnodeCMSContentPagesLocale (CMSContentPagesId,LocaleId,PageTitle,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page'),1,'Simple Search Page',2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT * FROM ZnodeCMSContentPagesLocale WHERE CMSContentPagesId = (select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page' and PortalId = 1)  and PageTitle = 'Simple Search Page')

INSERT INTO ZnodeCMSContentPagesProfile (ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT null,(select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page'),2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT * from ZnodeCMSContentPagesProfile where  CMSContentPagesId = (select CMSContentPagesId from ZnodeCMSContentPages where PageName = 'Simple Search Page' and PortalId = 1))

GO

INSERT INTO ZnodeImportAttributeValidation (AttributeTypeName,AttributeCode,ImportHeadId,IsRequired,ControlName,ValidationName,SubValidationName,ValidationValue
,RegExp,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SequenceNumber)
select 'Date','CreatedDate',(select importheadid from ZnodeImportHead where Name = 'Customer'),0,'Date','MinDate',null,'','',null,2,getdate(),2,getdate(),10
where not exists (select * from ZnodeImportAttributeValidation where ImportHeadId = (select ImportHeadId from ZnodeImportHead where Name = 'Customer' )
AND AttributeCode= 'CreatedDate')

GO
INSERT INTO ZnodeImportTemplateMapping (ImportTemplateId,SourceColumnName,TargetColumnName,DisplayOrder,IsActive,IsAllowNull,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate'),'CreatedDate','CreatedDate',0,0,0,2,getdate(),2,getdate()
where not exists (select * from ZnodeImportTemplateMapping where ImportTemplateId = (select ImportTemplateId from ZnodeImportTemplate where TemplateName = 'CustomerTemplate')
AND TargetColumnName = 'CreatedDate')

GO

----------------------------------------------------------------------------------------------------------------------------------------------------------
-- changes after 19 june ------------------------------------------------------------------------------------------------------



 IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeBlogNews ' AND COLUMN_NAME = 'BlogNewsCode' )
 BEGIN 
 ALTER TABLE ZnodeBlogNews  ADD    BlogNewsCode  nvarchar(2000)      NULL
 END
 GO

 IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSSEODetail' AND COLUMN_NAME = 'SEOCode' )
 BEGIN 
 ALTER TABLE ZnodeCMSSEODetail ADD    SEOCode nvarchar(2000)      NULL
 END
 GO
  IF  EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCmsseodetail' AND COLUMN_NAME = 'SEOId' )
 BEGIN 
 ALTER TABLE ZnodeCmsseodetail alter column    SEOId INT    NULL
 END

 GO
 CREATE  INDEX IX_ZnodeCMSSEODetail 
ON ZnodeCMSSEODetail(SEOCode);
GO

 IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePublishCategoryDetail ' AND COLUMN_NAME = 'CategoryCode' )
 BEGIN 
 ALTER TABLE ZnodePublishCategoryDetail  ADD    CategoryCode  nvarchar(4000)      NULL
 END
GO
--IF NOT EXISTS (SELECT TOP 1 1  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodeCMSWidgetTitleConfigurationLocale ' AND COLUMN_NAME = 'IsNewTab' )
-- BEGIN 
-- ALTER TABLE ZnodeCMSWidgetTitleConfigurationLocale  ADD    IsNewTab  Bit Default(0)  NOT   NULL
-- UPDATE ZnodeCMSWidgetTitleConfigurationLocale
-- SET IsNewTab = 0
-- END
--GO


IF EXISTS (select top 1 1 from sys.views where name = 'View_GetCMSCustomerReviewInformation')
BEGIN
DROP VIEW View_GetCMSCustomerReviewInformation
END
GO

CREATE view  [dbo].[View_GetCMSCustomerReviewInformation] AS 
SELECT CMSCustomerReviewId,a.PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,Status,ZPPD.ProductName,ZPPD.LocaleId
,CONVERT(DATE,a.CreatedDate)CreatedDate
,CONVERt(DATE,a.ModifiedDate)ModifiedDate,a.CreatedBy,a.ModifiedBy,ZCSD.SEOUrl,ZCSD.PortalId
FROM ZNODECMSCUSTOMERREVIEW A 
INNER JOIN ZnodePublishProductDetail ZPPD ON (A.PUBLISHPRODUCTID = ZPPD.PUBLISHPRODUCTID)
LEFT OUTER JOIN ZnodeCMSSEODetail ZCSD on ZPPD.SKU = ZCSD.SEOCode
LEFT OUTER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId AND ZCST.NAME = 'Product'
GO

IF EXISTS (select top 1 1 from sys.views where name = 'View_GetContentPageDetails')
BEGIN
DROP VIEW View_GetContentPageDetails
END
GO

CREATE VIEW [dbo].[View_GetContentPageDetails]
AS
     SELECT ZCCP.CMSContentPagesId,
            PageName,
            PageTitle,
            ActivationDate,
            ExpirationDate,
            SEODescription,
            SEOKeywords,
            SEOTitle,
            SEOUrl,
            IsActive,
			IsRedirect,
            StoreName,
            CMSTemplateId,
            MetaInformation,
            ZCCP.PortalId,
            ZCCPGM.CMSContentPageGroupId,
            ZCCPL.LocaleId
     FROM ZnodeCMSContentPages ZCCP
          LEFT JOIN ZnodeCMSContentPagesLocale ZCCPL ON(ZCCPL.CMSContentPagesId = ZCCP.CMSContentPagesId)
          LEFT JOIN ZnodeCMSContentPageGroupMapping ZCCPGM ON(ZCCPGM.CMSContentPagesId = ZCCp.CMSContentPagesId)
          LEFT JOIN ZnodeCMSContentPageGroup ZCCPG ON(ZCCPG.CMSContentPageGroupId = ZCCPGM.CMSContentPageGroupId)
          LEFT JOIN ZnodeCMSContentPageGroupLocale ZCCPGL ON(ZCCPGL.CMSContentPageGroupId = ZCCPG.CMSContentPageGroupId
                                                             AND ZCCPGL.LocaleId = ZCCPL.LocaleId)
          LEFT JOIN ZnodeCMSSeoDetail ZCSED ON(ZCSED.SEOCode = ZCCp.PageName
                                               AND EXISTS
                                              (
                                                  SELECT TOP 1 1
                                                  FROM ZnodeCMSSEOType ZCST
                                                  WHERE ZCST.CMSSEOTypeId = ZCSED.CMSSEOTypeId
                                                        AND ZCST.Name = 'Content Page'
                                              ))
          LEFT JOIN ZnodeCMSSEODetailLocale ZCSEDL ON(ZCSEDL.CMSSEODetailId = ZCSED.CMSSEODetailId
                                                      AND ZCSEDL.LocaleId = ZCCPL.LocaleId)
          LEFT JOIN ZnodePortal ZP ON(ZP.PortalId = ZCCP.POrtalId);
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_CopyPortalMessageAndContentPages')
BEGIN 
	DROP PROCEDURE Znode_CopyPortalMessageAndContentPages
END
GO

CREATE PROCEDURE [dbo].[Znode_CopyPortalMessageAndContentPages]
(	@CopyPortalId    INT,
    @PortalId        INT,
    @UserId          INT,
    @Status          INT = 1 OUT)
AS 
    
	/*
     Summary :- This procedure is used to copy existing portal messages and content pages to the another portal 
     Fn_GetDefaultValue use to find the defualt value of locale 
     copy only default locale data and active records 
     Affected tables "ZnodeCMSContentPages" copy the record of one portal to another portal 
     "ZnodeCMSContentPagesLocale" copy the record of one portal to another portal 
     "ZnodeCMSPortalMessage" copy the record of one portal to another portal 
     Unit Testing
	 begin tran
     EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = 1 ,@PortalId = 1 ,@UserId = 2 ,@Status =0 
     rollback tran  
   */
    
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @TBL_ContentPageDetail TABLE
             (
			    CMSContentPagesId    INT,
                OldCMSContentPagesId INT,
				PageName NVARCHAR(200)
                
             );
             DECLARE @TBL_CMSSEODetailId TABLE
             (
			    CMSSEODetailId    INT,
                OldCMSSEODetailId INT 
                 
             );
			 -- copy the  messages for portal

             INSERT INTO ZnodeCMSPortalMessage (PortalId, CMSMessageKeyId,CMSMessageId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT DISTINCT @PortalId,ZCPM.CMSMessageKeyId,ZCPM.CMSMessageId,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessage AS ZCPM
             INNER JOIN ZnodeCMSMessage AS ZCM ON(ZCM.CMSMessageId = ZCPM.CMSMessageId)
             WHERE ZCPM.PortalId = @CopyPortalId;  
            
			 INSERT INTO ZnodeCMSPortalMessageKeyTag (PortalId,CMSMessageKeyId,TagXML,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @PortalId,CMSMessageKeyId,TagXML,@UserId,@GetDate,@UserId,@GetDate
             FROM ZnodeCMSPortalMessageKeyTag ZCPMT
             WHERE PortalId = @CopyPortalId;
			 -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
             WITH Cte_CMSContentPages
             AS 
             (SELECT DISTINCT ZCCP.CMSContentPagesId,@PortalId AS PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,@UserId AS CreatedBy,@GetDate AS CreatedDate,@UserId AS ModifiedBy,@GetDate AS ModifiedDate 
	         FROM ZnodeCMSContentPages AS ZCCP
             WHERE IsActive = 1 AND PortalId = @CopyPortalId)
			 -- merge use for catching the output 
             MERGE INTO ZnodeCMSContentPages TARGET
             USING Cte_CMSContentPages SOURCE 
             ON 1 = 0
                      WHEN NOT MATCHED
                      THEN INSERT(PortalId,CMSTemplateId,PageName,ActivationDate,ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					  VALUES (SOURCE.PortalId,SOURCE.CMSTemplateId,SOURCE.PageName,SOURCE.ActivationDate,SOURCE.ExpirationDate,SOURCE.IsActive,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate)
                      OUTPUT Inserted.CMSContentPagesId,
                      SOURCE.CMSContentPagesId,Inserted.PageName 
                      INTO @TBL_ContentPageDetail;

             -- here collect the inserted data for further use 

             INSERT INTO ZnodeCMSContentPageGroupMapping (CMSContentPageGroupId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT CMSContentPageGroupId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
			 FROM ZnodeCMSContentPageGroupMapping ZCCPGM
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPGM.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesLocale(CMSContentPagesId,LocaleId,PageTitle,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT TBCPD.CMSContentPagesId,LocaleId,PageTitle,@UserId,@GetDate,@userId,@GetDate -- insert default locale records 
             FROM ZnodeCMSContentPagesLocale AS ZCCPL
             INNER JOIN @TBL_ContentPageDetail AS TBCPD ON(TBCPD.OldCMSContentPagesId = ZCCPL.CMSContentPagesId);

             INSERT INTO ZnodeCMSContentPagesProfile (ProfileId,CMSContentPagesId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT ProfileId,TBCPD.CMSContentPagesId,@UserId,@GetDate,@userId,@GetDate
             FROM ZnodeCMSContentPagesProfile ZCPP
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.OldCMSContentPagesId = ZCPP.CMSContentPagesId)
             WHERE EXISTS  ( SELECT TOP 1 1 FROM ZnodePortalProfile ZPP WHERE ZPP.PortalId = @CopyPortalId AND isnull(ZPP.ProfileId,0) = isnull(ZCPP.ProfileId,0) )
             -- this cte use to collect the required data to merge with ZnodeCMSContentPages 
			 ;WITH Cte_CMSSEODetails
             AS  
             (
			 SELECT ZCSD.CMSSEODetailId,ZCSD.CMSSEOTypeId,TBCPD.CMSContentPagesId,IsRedirect,MetaInformation,@PortalId PortalId,SEOUrl,@UserId CREATEDBy,@GetDate CREATEDDATE,@userId MODIFIEDBY,@GetDate MODIFIEDDATE
			 ,ZCSD.IsPublish,ZCSD.SEOCode
             FROM ZnodeCMSSEODetail ZCSD
             INNER JOIN @TBL_ContentPageDetail TBCPD ON(TBCPD.PageName = ZCSD.SEOCode)
             INNER JOIN ZnodeCMSSEOType ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Content Page'))
			 -- merge use for catching the output
             MERGE INTO ZnodeCMSSEODetail TARGET
             USING Cte_CMSSEODetails SOURCE 
             ON 1 = 0
             WHEN NOT MATCHED
             THEN INSERT(CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish,SEOCode)
			 VALUES (SOURCE.CMSSEOTypeId,NULL,SOURCE.IsRedirect,SOURCE.MetaInformation,SOURCE.PortalId,SOURCE.SEOUrl,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy,SOURCE.ModifiedDate,SOURCE.IsPublish,SOURCE.SEOCode)
             OUTPUT Inserted.CMSSEODetailId,
             SOURCE.CMSSEODetailId 
             INTO @TBL_CMSSEODetailId;

             INSERT INTO ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT TBCPD.CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,@UserId CREATEDBy,@GetDate CREATEDDATE,@userId MODIFIEDBY,@GetDate MODIFIEDDATE
             FROM ZnodeCMSSEODetailLocale ZCSDl
             INNER JOIN @TBL_CMSSEODetailId TBCPD ON(TBCPD.OldCMSSEODetailId = ZCSDl.CMSSEODetailId);
                          
			 INSERT INTO ZnodePortalCountry (PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
			 SELECT @PortalId,CountryCode,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 FROM ZnodePortalCountry ZPC
			 WHERE PortalId = @CopyPortalId
			 AND IsDefault = 1 
			 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCountry ZPPP WHERE ZPPP.PortalId = @PortalId AND ZPPP.CountryCode = CountryCode );

			 EXEC Znode_CopyPortalEmailTemplate @PortalId,@CopyPortalId,@userId
			 SET @Status = 1;
			 SELECT @CopyPortalId AS ID,CAST(1 AS BIT) AS [Status];
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= ' EXEC Znode_CopyPortalMessageAndContentPages @CopyPortalId = '+CAST(@CopyPortalId AS VARCHAR(100))+' ,@PortalId='+CAST(@PortalId AS VARCHAR(100))+' ,@UserId= '+CAST(@UserId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(50));
             SELECT @PortalId AS ID,
                    CAST(0 AS BIT) AS [Status];
             SET @Status = 0;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_CopyPortalMessageAndContentPages',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteBlogNews')
BEGIN 
	DROP PROCEDURE Znode_DeleteBlogNews
END
GO
CREATE PROCEDURE [dbo].[Znode_DeleteBlogNews]
( 
@BlogNewsId VARCHAR(2000),
@Status           BIT OUT
  )
AS 
  /*  
     Summary : Remove blog/news details with their reference data 
			   Here complete delete the blog(s)/News and their references without any check  
			   If passed @BlogNewsIds are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma separeted data in table rows 
			   1 ZnodeBlogNews
			   2 ZnodeBlogNewsLocale
			   3 ZnodeCMSSEODetail
			   4 ZnodeCMSSEODetailLocale
			   5 ZnodeBlogNewsContent
    
       
    */
	 BEGIN
         BEGIN TRAN DeleteBlogNews;
         BEGIN TRY
             SET NOCOUNT ON;
             
			 DECLARE @TBL_DeleteBlogNews TABLE(BlogNewsId INT,BlogNewsCode NVARCHAR(4000));  -- table holds the BlogNewsId id and BlogNewsCode
             INSERT INTO @TBL_DeleteBlogNews
                    SELECT a.BlogNewsId, a.BlogNewsCode
                    FROM [dbo].[ZnodeBlogNews] AS a
                         INNER JOIN dbo.Split(@BlogNewsId, ',') AS b ON(a.BlogNewsId = b.Item); -- dbo.Split function use to make ',' separeted data in table rows 
           
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSSEODetail
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteBlogNews AS TBDCP
                     WHERE TBDCP.BlogNewsCode = ZnodeCMSSEODetail.SEOCode
                 )
                       AND ZnodeCMSSEODetail.CMSSEOTypeId IN
                 (
                     SELECT CMSSEOTypeId
                     FROM ZnodeCMSSEOType
                     WHERE NAME = 'BlogNews'
                 )
                       AND ZnodeCMSSEODetail.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM ZnodeCMSSEODetail
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteBlogNews AS TBDCP
                 WHERE TBDCP.BlogNewsCode = ZnodeCMSSEODetail.SEOCode
             )
                   AND ZnodeCMSSEODetail.CMSSEOTypeId IN
             (
                 SELECT CMSSEOTypeId
                 FROM ZnodeCMSSEOType
                 WHERE NAME = 'BlogNews'
             );

			 DELETE FROM ZnodeBlogNewsCommentLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeBlogNewsComment
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteBlogNews AS TBDCP
                     WHERE TBDCP.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId
                 )
				   AND ZnodeBlogNewsComment.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId
             );
          
			DELETE FROM ZnodeBlogNewsComment
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteBlogNews AS TBDCP
                 WHERE TBDCP.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId
             );

			 DELETE FROM ZnodeBlogNewsContent
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteBlogNews AS TBDCP
                 WHERE TBDCP.BlogNewsId = ZnodeBlogNewsContent.BlogNewsId
             );

			 DELETE FROM ZnodeBlogNewsLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteBlogNews AS TBDCP
                 WHERE TBDCP.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId
             );

			 DELETE FROM ZnodeBlogNews
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteBlogNews AS TBDCP
                 WHERE TBDCP.BlogNewsId = ZnodeBlogNews.BlogNewsId
             );


             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeleteBlogNews
             ) =
             (   -- if count are equal then  dataset status are return true other wise false 
                 SELECT COUNT(1)
                 FROM dbo.Split(@BlogNewsId, ',')
             ) 
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS [Status];
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS [Status];
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteBlogNews;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteBlogNews @BlogNewsId = '+@BlogNewsId+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS [Status];
             ROLLBACK TRAN DeleteBlogNews;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteBlogNews',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteBrand')
BEGIN 
	DROP PROCEDURE Znode_DeleteBrand
END
GO
CREATE  PROCEDURE [dbo].[Znode_DeleteBrand]
( @BrandId VARCHAR(2000),
  @Status  BIT OUT,
  @IsDebug bit = 0 )
AS
 /*   
     Summary: Delete brand detail  
			  This procdure will delete brands if is associated with product or not 
			  here is no any check for association as per requirement 
			  Delete table sequence 
			  1.ZnodeBrandDetails
			  SELECT * FROM ZnodeBRandDetails
     Unit Testing  
			  begin tran 
			  EXEC Znode_DeleteBrand 17,1
			  rollback tran
   */
     BEGIN
         BEGIN TRAN DeleteBrand;
         BEGIN TRY
             SET NOCOUNT ON;
			 -- table use to hold the brand id 
             DECLARE @TBL_DeletdBrandId TABLE(BrandId INT, BrandCode NVARCHAR(1200)); 
             DECLARE @TBL_CMSSEODetailId TABLE(CMSSEODetailId INT);
             DECLARE @TBL_DeletedBrands TABLE(BrandId INT);

             INSERT INTO @TBL_DeletdBrandId
					SELECT a.BrandId , a.BrandCode
					FROM ZnodeBrandDetails a
					INNER JOIN dbo.split(@BrandId, ',') AS SP ON (a.BrandId = SP.Item)

             INSERT INTO @TBL_CMSSEODetailId(CMSSEODetailId)
                    SELECT CMSSEODetailId
                    FROM ZnodeCMSSEODetail ZCSD
                         INNER JOIN ZnodeCMSSEOType ZST ON(ZCSD.CMSSEOTypeId = ZST.CMSSEOTypeId)
                    WHERE ZST.Name = 'Brand'
                          AND EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @TBL_DeletdBrandId TBDB
                        WHERE TBDB.BrandCode = ZCSD.SEOCode
                    );

			Delete from ZnodePromotionBrand where  EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @TBL_DeletdBrandId TBDB
                        WHERE TBDB.BrandId = ZnodePromotionBrand.BrandId
                    );
			 Delete from ZnodeCMSWidgetBrand  where  EXISTS
                    (
                        SELECT TOP 1 1
                        FROM @TBL_DeletdBrandId TBDB
                        WHERE TBDB.BrandId = ZnodeCMSWidgetBrand.BrandId
                    );
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_CMSSEODetailId TBCSO
                 WHERE TBCSO.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM ZnodeCMSSEODetail
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_CMSSEODetailId TBCSO
                 WHERE TBCSO.CMSSEODetailId = ZnodeCMSSEODetail.CMSSEODetailId
             );
             DELETE FROM ZnodeBrandDetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletdBrandId AS TBDA
                 WHERE TBDA.BrandId = ZnodeBrandDetailLocale.BrandId
             );
             DELETE FROM ZnodeBrandDetails
             OUTPUT DELETED.BrandId
                    INTO @TBL_DeletedBrands
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletdBrandId AS TBDA
                 WHERE TBDA.BrandId = ZnodeBrandDetails.BrandId
             );
             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeletedBrands
             ) =
             (
                 SELECT COUNT(1)
                 FROM dbo.split(@BrandId, ',') AS a
             ) -- check statement if count is equal the data set return true aother wise false 
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS Status;
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS Status;
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteBrand;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteBrand @BrandId = '+@BrandId+',@Status='+CAST(@Status AS VARCHAR(50));
             SELECT 0 AS ID,
        CAST(0 AS BIT) AS Status,ERROR_MESSAGE();
             SET @Status = 0;
             ROLLBACK TRAN DeleteBrand;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteBrand',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteContentPage')
BEGIN 
	DROP PROCEDURE Znode_DeleteContentPage
END
GO
CREATE PROCEDURE [dbo].[Znode_DeleteContentPage]
( @CMSContentPageId VARCHAR(2000),
  @Status           BIT OUT)
AS 
  /*  
     Summary : Remove content page details with their referance data 
			   Here complete delete the ContentPages and their references without any check  
			   If passed @CMSContentPageIds are matched with deleted count then data set return true other wise false 
			   dbo.Split function use to make comma separeted data in table rows 
			   1 ZnodeCMSContentPagesProfile
			   2 ZnodeCMSContentPagesLocale
			   3 ZnodeCMSContentPageGroupMapping
			   4 ZnodeCMSSEODetail
			   5 ZnodeCMSContentPages
     Unit Testing 
	 begin tran
     DEclare @Status bit 
     EXEC Znode_DeleteContentPage  29 ,@Status =@Status OUT 
	 rollback tran
       
    */
	 BEGIN
         BEGIN TRAN DeleteContentPage;
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @TBL_DeleteContentPage TABLE(CMSContentPagesId INT,PageName NVARCHAR(200));  -- table holds the CMSContentPagesId id 
             INSERT INTO @TBL_DeleteContentPage
                    SELECT a.CMSContentPagesId,a.PageName
                    FROM [dbo].[ZnodeCMSContentPages] AS a
                         INNER JOIN dbo.Split(@CMSContentPageId, ',') AS b ON(a.CMSContentPagesId = b.Item); -- dbo.Split function use to make ',' separeted data in table rows 
             DELETE FROM ZnodeCMSContentPagesProfile
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPagesLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPageGroupMapping
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSWidgetCategory
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetCategory.CMSMappingId
                       AND ZnodeCMSWidgetCategory.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetProduct
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetProduct.CMSMappingId
                       AND ZnodeCMSWidgetProduct.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetSliderBanner
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetSliderBanner.CMSMappingId
                       AND ZnodeCMSWidgetSliderBanner.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSWidgetTitleConfiguration
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSWidgetTitleConfiguration.CMSMappingId
                       AND ZnodeCMSWidgetTitleConfiguration.TypeOFMapping = 'ContentPageMapping'
             );
             DELETE FROM ZnodeCMSSEODetailLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeCMSSEODetail
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM @TBL_DeleteContentPage AS TBDCP
                     WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
                 )
                       AND ZnodeCMSSEODetail.CMSSEOTypeId IN
                 (
                     SELECT CMSSEOTypeId
                     FROM ZnodeCMSSEOType
                     WHERE NAME = 'Content Page'
                 )
                       AND ZnodeCMSSEODetail.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             );
             DELETE FROM ZnodeCMSSEODetail
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.PageName = ZnodeCMSSEODetail.SEOCode
             )
                   AND ZnodeCMSSEODetail.CMSSEOTypeId IN
             (
                 SELECT CMSSEOTypeId
                 FROM ZnodeCMSSEOType
                 WHERE NAME = 'Content Page'
             );
             DELETE FROM ZnodeCMSContentPagesLocale
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId
             );
             DELETE FROM ZnodeCMSContentPages
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteContentPage AS TBDCP
                 WHERE TBDCP.CMSContentPagesId = ZnodeCMSContentPages.CMSContentPagesId
             );
             IF
             (
                 SELECT COUNT(1)
                 FROM @TBL_DeleteContentPage
             ) =
             (   -- if count are equal then  dataset status are return true other wise false 
                 SELECT COUNT(1)
                 FROM dbo.Split(@CMSContentPageId, ',')
             ) 
                 BEGIN
                     SELECT 1 AS ID,
                            CAST(1 AS BIT) AS [Status];
                     SET @Status = 1;
                 END;
             ELSE
                 BEGIN
                     SELECT 0 AS ID,
                            CAST(0 AS BIT) AS [Status];
                     SET @Status = 0;
                 END;
             COMMIT TRAN DeleteContentPage;
         END TRY
         BEGIN CATCH
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteContentPage @CMSContentPageId = '+@CMSContentPageId+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS [Status];
             ROLLBACK TRAN DeleteContentPage;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteContentPage',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePublishCatalog')
BEGIN 
	DROP PROCEDURE Znode_DeletePublishCatalog
END
GO
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalog]
(   @PublishCatalogIds  VARCHAR(1000),
	@PublishCategoryIds VARCHAR(1000) = NULL,
	@PublishProductIds  VARCHAR(1000) = NULL,
	@IsDeleteCatalogId  BIT           = 0)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
             DECLARE @TBL_DeletedCatalog TABLE(PublishCatalogId INT);
             DECLARE @TBL_DeletedCategory TABLE([PublishCategoryId] INT);
             DECLARE @TBL_DeleteProduct TABLE([PublishProductId] INT);
             INSERT INTO @TBL_DeletedCatalog
                    SELECT [item]
                    FROM [dbo].[Split](@PublishCatalogIds, ',');

             INSERT INTO @TBL_DeletedCategory
                    SELECT PublishCategoryId
                    FROM ZnodePublishCategory AS PC
                    WHERE( EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishCategoryIds, ',') AS m
                             WHERE m.Item = PC.PublishCategoryId
                         ));

             INSERT INTO @TBL_DeleteProduct
                    SELECT [PublishProductId]
                    FROM [ZNodePublishProduct] AS adf
                    WHERE(EXISTS
                         (
                             SELECT TOP 1 1
                             FROM [dbo].[Split](@PublishProductIds, ',') AS de
                             WHERE de.[Item] = adf.[PublishProductId]
                         )
                   );
             DELETE FROM [ZnodeCMSWidgetCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             );
         
             DELETE FROM [ZnodeCMSWidgetProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             );
             DELETE FROM [ZnodeCMSCustomerReview]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             );
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             --DELETE FROM ZnodeCMSSEODetailLocale
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEODetail]
             --    WHERE EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM @TBL_DeleteProduct AS qw
             --        WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --    )
             --          AND EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM [ZnodeCMSSEOType] AS we
             --        WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --              AND [Name] = 'Product'
             --    )
             --          AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             --);
             --DELETE FROM [ZnodeCMSSEODetail]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteProduct AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --)
             --      AND EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEOType] AS we
             --    WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --          AND [Name] = 'Product'
             --);
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeletedCategory AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteProduct AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
			 DELETE FROM ZnodePublishCategoryProduct 
			 WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1

			 DELETE FROM ZnodePublishProductDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishProductDetail.PublishProductId = ZnodePublishProduct.PublishProductId  )
             DELETE FROM ZnodePublishProduct  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishCategoryDetail.PublishCategoryId = ZnodePublishCategory.PublishCategoryId)
             DELETE FROM ZnodePublishCategory  
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 

			 DELETE FROM ZnodePublishedXml WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishCataLogLog 
						WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1 
						AND ZnodePublishedXml.PublishCatalogLogId = ZnodePublishCataLogLog.PublishCatalogLogId  )

			 DELETE FROM ZnodePublishCataLogLog WHERE [PublishCatalogId] = @PublishCatalogIds AND @IsDeleteCatalogId = 1;

			 DELETE FROM znodeSearchIndexServerStatus 
					WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeSearchIndexMonitor a WHERE EXISTS 
					(SELECT TOP 1 1 FROM ZnodeCatalogIndex b WHERE b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = a.catalogindexid) AND a.SearchIndexMonitorid = znodeSearchIndexServerStatus.SearchIndexMonitorid )

			 DELETE FROM ZnodeSearchIndexMonitor
					WHERE EXISTS (SELECT TOP 1 1  FROM ZnodeCatalogIndex b where b.publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1 AND b.catalogindexid = ZnodeSearchIndexMonitor.catalogindexid)


			 DELETE FROM ZnodeCatalogIndex
			 WHERE publishcatalogid =@PublishCatalogIds AND @IsDeleteCatalogId = 1

			
             DELETE FROM ZnodePublishCatalog
             WHERE [PublishCatalogId] = @PublishCatalogIds
                   AND @PublishCategoryIds IS NULL
                   AND @PublishProductIds IS NULL
                   AND @IsDeleteCatalogId = 1;
				  
				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		     
			  DECLARE @Status BIT ;
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			  @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePublishCatalog @PublishCatalogIds = '''+ISNULL(@PublishCatalogIds,'''')+''',@PublishCategoryIds='''+ISNULL(@PublishCategoryIds,'''')+''',@PublishProductIds='''+ISNULL(@PublishProductIds,'''')+''',@IsDeleteCatalogId='+ISNULL(CAST(@IsDeleteCatalogId AS VARCHAR(200)),'''')+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeletePublishCatalog',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeletePublishCatalogProduct')
BEGIN 
	DROP PROCEDURE Znode_DeletePublishCatalogProduct
END
GO
CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogProduct]
(   
   	@PublishProductIds	Transferid READONLY 
	,@PublishCatalogId   INT = 0 
	,@PimCategoryHierarchyId int = 0 
	,@PimCatalogId int = 0 
	
)
AS
   /*
    Summary:Delete the publish product from all related references 
    Unit Testing   
	begin tran
	SELECT * FROM ZnodePublishCatalog 
    EXEC Znode_DeletePublishCatalog @PublishCatalogIds =5 ,@IsDeleteCatalogId = 1 , @PublishCategoryIds = ''
	rollback tran
   */ 
     BEGIN
         BEGIN TRANSACTION A;
         BEGIN TRY
             SET NOCOUNT ON;
	
	         DECLARE @TBL_DeleteIds TABLE (PublishCatalogId INT ,PublishCategoryId INT ,PublishProductId INT )  
			 DECLARE @TBL_DeleteCategoryProduct TABLE (PublishCategoryProductId INT )			 
			 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int )
			 
		
			If @PimCategoryHierarchyId <> 0 AND @PimCatalogId <>  0 
			Begin
				INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


				INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 AND ZPPC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )
				 
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 AND ZPCC.PimCategoryId in 
							(
								Select CategoryId from @TBL_CategoryCategoryHierarchyIds
							) 


				 AND a.PublishCatalogId = @PublishCatalogId
			END 
			Else 
			Begin
				 INSERT INTO @TBL_DeleteIds (PublishCatalogId,PublishProductId,PublishCategoryId  )
				 SELECT ZPP.PublishCatalogId,ZPP.PublishProductId ,ZPCP.PublishCategoryId
				 FROM ZnodePublishProduct  ZPP 
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId) 
				 LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND ZPCP.PublishProductId = ZPP.PublishProductId )
				 LEFT JOIN ZnodePublishCategory  ZPPC ON (ZPPC.PublishCatalogId = ZPC.PublishCatalogId AND ZPPC.PublishCategoryId = ZPCP.PublishCategoryId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM @PublishProductIds ZPCC WHERE ZPCC.Id = ZPP.PublishProductId )

				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where zpp.PublishProductId = PX.PublishedId )
			 
				 INSERT INTO @TBL_DeleteCategoryProduct 
				 SELECT PublishCategoryProductId 
				 FROM ZnodePublishCategoryProduct a 
				 INNER JOIN ZnodePublishProduct ZPP ON (ZPP.PublishProductId = a.PublishProductId AND ZPP.PublishCatalogId = a.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = a.PublishCatalogId )
				 INNER JOIN ZnodePublishCategory ZPCC ON (ZPCC.PublishCategoryId = a.PublishCategoryId)
				 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalogCategory ZPDF WHERE ZPDF.PimCatalogId = ZPC.PimCatalogId AND ZPDF.PimCategoryId = ZPCC.PimCategoryId AND ZPDF.PimProductId = ZPP.PimProductId  )
				 --AND NOT EXISTS ( SELECT * FROM ZnodePublishedXML PX where a.PublishProductId = PX.PublishedId )
				 AND a.PublishCatalogId = @PublishCatalogId
			 END 
					
						
		     UPDATE 	TBL 
			 SET PublishCategoryId = NULL 
			 FROM @TBL_DeleteIds TBL 
			 WHERE  EXISTS  (SELECT TOP 1 1 FROM ZnodePublishCategoryProduct ZPCC 
			 WHERE  TBL.PublishCatalogId = ZPCC.PublishCatalogId AND ZPCC.PublishCategoryId = TBL.PublishCategoryId   AND TBL.PublishProductId <> ZPCC.PublishProductId ) 			 

			 DELETE FROM [ZnodeCMSWidgetCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodeCMSWidgetCategory].[PublishCategoryId]
             )
			
			 ;
         
             DELETE FROM [ZnodeCMSWidgetProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSWidgetProduct].[PublishProductId]
             );
             DELETE FROM [ZnodeCMSCustomerReview]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodeCMSCustomerReview].[PublishProductId]
             );
             DELETE FROM ZnodeUserWishList
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE EXISTS
                 (
                     SELECT TOP 1 1
                     FROM ZnodePublishProductDetail ZPPD
                     WHERE ZPPD.SKU = ZnodeUserWishList.SKU
                           AND qw.[PublishProductId] = ZPPD.[PublishProductId]
                 )
             );
            

             DELETE FROM [ZnodePromotionProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePromotionProduct].[PublishProductId]
             );
             DELETE FROM [ZnodePromotionCategory]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePromotionCategory].[PublishCategoryId]
             );
             DELETE FROM [ZnodePublishCategoryDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryDetail].[PublishCategoryId]
             );	
            
             --DELETE FROM ZnodeCMSSEODetailLocale
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEODetail]
             --    WHERE EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM @TBL_DeleteIds AS qw
             --        WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --    )
             --          AND EXISTS
             --    (
             --        SELECT TOP 1 1
             --        FROM [ZnodeCMSSEOType] AS we
             --        WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --              AND [Name] = 'Product'
             --    )
             --          AND [ZnodeCMSSEODetail].CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId
             --);
             --DELETE FROM [ZnodeCMSSEODetail]
             --WHERE EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM @TBL_DeleteIds AS qw
             --    WHERE qw.[PublishProductId] = [ZnodeCMSSEODetail].[SEOId]
             --)
             --      AND EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM [ZnodeCMSSEOType] AS we
             --    WHERE we.[CMSSEOTypeId] = [ZnodeCMSSEODetail].[CMSSEODetailId]
             --          AND [Name] = 'Product'
             --);
            
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishCategoryProduct].[PublishProductId]
             )
			 OR 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteCategoryProduct AS qw
                 WHERE qw.PublishCategoryProductId = [ZnodePublishCategoryProduct].PublishCategoryProductId
             )
			 ;
             DELETE FROM [ZnodePublishCategoryProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS w
                 WHERE w.[PublishCategoryId] = [ZnodePublishCategoryProduct].[PublishCategoryId]
             );
			  DELETE FROM dbo.ZnodeSearchGlobalProductBoost WHERE 
			 EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = ZnodeSearchGlobalProductBoost.[PublishProductId]
              );
             DELETE FROM [ZnodePublishProductDetail]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZnodePublishProductDetail].[PublishProductId]
             );
             DELETE FROM [ZNodePublishProduct]
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishProductId] = [ZNodePublishProduct].[PublishProductId]
             
			 );
		
			 DELETE FROM ZnodePublishCategoryDetail 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategoryDetail.[PublishCategoryId]
              );
			
			DELETE FROM ZnodeSearchGlobalProductCategoryBoost 
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodeSearchGlobalProductCategoryBoost.[PublishCategoryId]
             
			 );
			 DELETE FROM ZnodePublishCategory
			 WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM @TBL_DeleteIds AS qw
                 WHERE qw.[PublishCategoryId] = ZnodePublishCategory.[PublishCategoryId]
             
			 );

			 			 				
             COMMIT TRANSACTION A;
			 
         END TRY
         BEGIN CATCH
		      SELECT ERROR_MESSAGE() 
			 
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetBrandDetailsLocale')
BEGIN 
	DROP PROCEDURE Znode_GetBrandDetailsLocale
END
GO
CREATE PROCEDURE [dbo].[Znode_GetBrandDetailsLocale]  
( @WhereClause  NVARCHAR(MAX),  
  @Rows    INT           = 10,  
  @PageNo   INT           = 1,  
  @Order_BY   VARCHAR(1000) = '',  
  @RowsCount  INT           = 0 OUT,  
  @LocaleId   INT           = 1,    
  @IsAssociated  BIT           = 0,  
  @PromotionId      INT     = 0   
)  
AS  
  /*  
     Summary :- This Procedure is used to get brand localies   
     Unit Testing   
  begin tran  
     EXEC Znode_GetBrandDetailsLocale ''isactive = 'true''',@RowsCount= 1,@LocaleId = 1   
  rollback tran    
 */  
  BEGIN  
         BEGIN TRY  
             SET NOCOUNT ON;  
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();  
             DECLARE @SeoId VARCHAR(MAX)= '', @SQL NVARCHAR(MAX) , @SeoCode NVARCHAR(MAX) ;
             DECLARE @TBL_BrandDetails TABLE  
             (Description         NVARCHAR(MAX),  
              BrandId             INT,  
              BrandCode           VARCHAR(600),  
              DisplayOrder        INT,  
              IsActive            BIT,  
              WebsiteLink         NVARCHAR(1000),  
              BrandDetailLocaleId INT,  
              SEOFriendlyPageName NVARCHAR(600),  
              MediaPath           NVARCHAR(MAX),  
              MediaId             INT,  
			  ImageName           VARCHAR(300)  
             );  
  
    DECLARE @AttributeId INT= [dbo].[Fn_GetProductBrandAttributeId]();  
             DECLARE @TBL_AttributeDefault TABLE  
             (PimAttributeId            INT,  
              AttributeDefaultValueCode VARCHAR(600),  
              IsEditable                BIT,  
              AttributeDefaultValue     NVARCHAR(MAX)  
			 ,DisplayOrder INT   
             );  
             DECLARE @TBL_SeoDetails TABLE  
             (CMSSEODetailId       INT,  
              SEOTitle             NVARCHAR(MAX),  
              SEOKeywords          NVARCHAR(MAX),  
              SEOURL               NVARCHAR(MAX),  
              ModifiedDate         DATETIME,  
              SEODescription       NVARCHAR(MAX),  
              MetaInformation      NVARCHAR(MAX),  
              IsRedirect           BIT,  
              CMSSEODetailLocaleId INT,  
              --SEOId                INT ,
			  PublishStatus        NVARCHAR(20),
			  SEOCode				NVARCHAR(4000) 
			   
             );  
             DECLARE @TBL_BrandDetail TABLE  
             (Description          NVARCHAR(MAX),  
              BrandId              INT,  
              BrandCode            VARCHAR(600),  
              DisplayOrder         INT,  
              IsActive             BIT,  
              WebsiteLink          NVARCHAR(1000),  
              BrandDetailLocaleId  INT,  
              MediaPath            NVARCHAR(MAX),  
              MediaId              INT,  
			  ImageName      VARCHAr(300) ,  
              CMSSEODetailId       INT,  
              SEOTitle             NVARCHAR(MAX),  
              SEOKeywords          NVARCHAR(MAX),  
              SEOURL               NVARCHAR(MAX),  
              ModifiedDate         DATETIME,  
              SEODescription       NVARCHAR(MAX),  
              MetaInformation      NVARCHAR(MAX),  
              IsRedirect           BIT,  
              CMSSEODetailLocaleId INT,  
              --SEOId                INT,  
              BrandName            NVARCHAR(MAX),  
              RowId                INT,  
              CountId              INT ,
			  SEOCode              NVARCHAR(4000) 
             );  
             IF @PromotionId > 0  
    BEGIN   
      
     SET @SeoId = ISNULL(SUBSTRING((SELECT ','+CAST(BrandId AS VARCHAR(50))  
     FROM ZnodePromotionBrand   
     WHERE PromotionId= @PromotionId  FOR XML PATH ('') ),2,4000),'0')  
  
     SET @WhereClause = CASE WHEN @IsAssociated = 1 THEN ' BrandId IN (' ELSE ' BrandId NOT IN (' END  +@SeoId+') AND '+CASE WHEN @WhereClause = '' THEN '1=1' ELSE @WhereClause END   
     SET @SeoId = ''  
    END    
      
     INSERT INTO @TBL_AttributeDefault  
   EXEC Znode_GetAttributeDefaultValueLocale @AttributeId,@LocaleId;  
      
  
     IF @PromotionId = 0  
    BEGIN   
      
     
              SET @WhereClause = ' '+@WhereClause+CASE  
                                              WHEN @IsAssociated = 1  
                                                     THEN CASE  
                                                              WHEN @WhereClause = ''  
                                                              THEN ' '  
                                                              ELSE ' AND '  
                                                          END+' EXISTS ( SELECT TOP 1 1 FROM ZnodeBrandDetails BD INNER JOIN ZnodeBrandDetailLocale BDL ON (BD.BrandId = BDL.BrandId)   
                    
                                           WHERE ( BD.BrandCode = TMADV.BrandCode))'  
                                                     ELSE CASE  
                                                              WHEN @WhereClause = ''  
                                                              THEN ' 1 = 1  '  
                                                              ELSE ''  
                                                          END  
                                                  END;  
   END    
  
    
             ;WITH Cte_GetBrandBothLocale  
                   AS (SELECT ZBDL.Description,ZBD.BrandId,LocaleId,ZBD.BrandCode,ZBD.DisplayOrder,ZBD.IsActive,ZBD.WebsiteLink,ZBDl.BrandDetailLocaleId,  
           SEOFriendlyPageName,[dbo].[Fn_GetMediaThumbnailMediaPath](Zm.path) MediaPath,ZBD.MediaId,Zm.path ImageName  
        FROM ZnodeBrandDetails ZBD  
        LEFT JOIN ZnodeBrandDetailLocale ZBDL ON(ZBD.BrandId = ZBDL.BrandId)  
        LEFT JOIN ZnodeMedia ZM ON(ZM.MediaId = ZBD.MediaId)  
        WHERE LocaleId IN(@LocaleId, @DefaultLocaleId)  
              
             ),  
                   Cte_BrandFirstLocale  
                   AS (SELECT Description,BrandId,LocaleId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName  
                       FROM Cte_GetBrandBothLocale CTGBBL  
                       WHERE LocaleId = @LocaleId),  
                   Cte_BrandDefaultLocale  
                   AS (SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName  
                       FROM Cte_BrandFirstLocale  
                       UNION ALL  
                       SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName  
                  FROM Cte_GetBrandBothLocale CTBBL  
                  WHERE LocaleId = @DefaultLocaleId  
                  AND NOT EXISTS  
                  (  
                      SELECT TOP 1 1  
                      FROM Cte_BrandFirstLocale CTBFL  
                      WHERE CTBBL.BrandId = CTBFL.BrandId  
                  ))  
  
                  INSERT INTO @TBL_BrandDetails (Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName)  
                         SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName  
                         FROM Cte_BrandDefaultLocale CTEBD;  
                 
      SET @SeoCode = SUBSTRING(  
                                   (  
                                       SELECT ','+CAST(BrandCode AS VARCHAR(600))  
     FROM @TBL_BrandDetails  
                                       FOR XML PATH('')  
                                   ), 2, 4000);  


                  INSERT INTO @TBL_SeoDetails (CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,PublishStatus,SEOCode)  
                  EXEC Znode_GetSeoDetails 
                  @SeoCode,  
                  'Brand',  
                  @LocaleId;  
                  
      SELECT TBBD.*,TBSD.*,TBAD.AttributeDefaultValue BrandName,TBAD.AttributeDefaultValueCode  
      INTO #TM_BrandLocale  
      FROM @TBL_BrandDetails TBBD  
                  LEFT JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOCode = TBBD.BrandCode)  
                  INNER JOIN @TBL_AttributeDefault TBAD ON(TBAD.AttributeDefaultValueCode = TBBD.BrandCode);  
  

 

             SET @SQL = '   
             ;With Cte_BrandDetails AS   
    (  
     SELECT * ,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'BrandId DESC')+',Count(*)Over() CountId  
     FROM #TM_BrandLocale TMADV  
     WHERE 1=1  
     '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+'  
  
       )  
    SELECT Description  , BrandId , BrandCode , DisplayOrder  ,IsActive  ,WebsiteLink ,BrandDetailLocaleId   
         , MediaPath ,MediaId,ImageName ,CMSSEODetailId ,SEOTitle ,SEOKeywords , SEOURL   
         , ModifiedDate  ,  SEODescription   ,MetaInformation   ,IsRedirect ,CMSSEODetailLocaleId  
         ,BrandName ,RowId  ,CountId ,SEOCode
    FROM Cte_BrandDetails  
    '+[dbo].[Fn_GetOrderByClause](@Order_BY, 'BrandId DESC')+' ';  
  
  print @SQL
             INSERT INTO @TBL_BrandDetail  
             (  
    Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,  
    BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,  
    SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,  
    CMSSEODetailLocaleId,BrandName,RowId,CountId ,SEOCode 
    )  
             EXEC (@SQL);  
             SET @RowsCount = ISNULL(  
                                    (  
                                        SELECT TOP 1 CountId  
                                        FROM @TBL_BrandDetail  
                                    ), 0);  
             SELECT BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,@PromotionId PromotionId   
             ,SEOCode
			 FROM @TBL_BrandDetail;  
         END TRY  
         BEGIN CATCH  
            DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),   
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetBrandDetailsLocale @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))
	+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@PromotionId='+CAST(@PromotionId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetBrandDetailsLocale',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCategoryFeedList')
BEGIN 
	DROP PROCEDURE Znode_GetCategoryFeedList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCategoryFeedList]
( @PortalId         NVARCHAR(MAX) = NULL,
  @LocaleId         INT,
  --will be used for CategoryId
  @CommaSeparatedId NVARCHAR(MAX) = NULL 
)
AS
/*
 Summary:This procedure is used to get effective keyword feeding of category list
 Unit Testing:
 EXEC Znode_GetCategoryFeedList 1 

*/

     BEGIN
         SET NOCOUNT ON;
		   BEGIN TRY
         DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultValue('Locale');

         DECLARE @TBL_DomainName TABLE
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );

         DECLARE @TBL_PortalIds TABLE(ProtalId INT);
         DECLARE @TBL_SEODetails TABLE
         (loc                   NVARCHAR(MAX),
          lastmod               DATETIME,
          [g:condition]         VARCHAR(100),
          [description]         NVARCHAR(MAX),
          [g:id]                INT,
          link                  VARCHAR(100),
          [g:identifier_exists] VARCHAR(200),
          DomainName            NVARCHAR(300),
          PortalId              INT,
		  SEOCode               NVARCHAR(4000)
         );

         INSERT INTO @TBL_PortalIds
         SELECT Zp.PortalId
         FROM Znodeportal AS ZP
         INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId)
         INNER JOIN ZnodePublishCategory AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)
         WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM DBO.Split(@PortalID, ',') AS Sp
                    WHERE(CAST(sp.Item AS INT) = ZP.PortalId
                          OR @PortalID = '0' )
                )
         GROUP BY Zp.PortalId;

	

         INSERT INTO @TBL_DomainName
         SELECT ZD.PortalId,ZD.DomainName,    
                ROW_NUMBER() OVER(Partition BY ZD.DomainName,ZD.PortalId ORDER BY ZD.DomainName,ZD.PortalId) RowId                               
         FROM ZnodeDomain ZD
         WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PortalIds TBP
                    WHERE TBP.ProtalId = ZD.PortalId
                )
		AND ApplicationType = 'Webstore'
		AND IsActive =1 ;

		
         ;WITH Cte_SeoDetailsWithLocale
              AS (
			  SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishCategoryId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId ,ZCSD.SEOCode
              FROM ZnodePublishCategory AS ZPCC 
              LEFT JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPCC.PublishCatalogId)
              LEFT JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPPC.PublishCatalogId)
			  LEFT JOIN ZnodePublishcategorydetail PCD ON (PCD.PublishCategoryId = ZPCC.PublishCategoryId)
              LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZPC.PortalId)
			  LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PCD.CategoryCode = ZCSD.SEOCode AND ZPC.PortalId = ZCSD.PortalId
					    AND EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST
								    WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = 'Category')) 
              LEFT  JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                                            AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))
              WHERE EXISTS
				  (
					SELECT TOP 1 1
					FROM @TBL_PortalIds TBP
					WHERE ZPC.PortalId = TBP.ProtalId
				  )
			  AND EXISTS (SELECT TOP 1 1 FROM  dbo.split(@CommaSeparatedId,',' ) SP WHERE SP.Item = PCD.CategoryCode)
			  ),

              Cte_SeoDetailsWithFirstLocale
              AS (SELECT *
                  FROM Cte_SeoDetailsWithLocale
                  WHERE LocaleId = @LocaleId),

              Cte_SeoDetailsWithDefaultLocale
              AS (SELECT *
				  FROM Cte_SeoDetailsWithFirstLocale
				  UNION ALL
				  SELECT *
				  FROM Cte_SeoDetailsWithLocale AS CTSDWL
				  WHERE LocaleId = @DefaultLocaleId
						AND NOT EXISTS
				  (
					  SELECT TOP 1 1
					  FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
					  WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
				  ))

              INSERT INTO @TBL_SEODetails
                     SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,SEOCode
                     FROM Cte_SeoDetailsWithDefaultLocale;

			  SELECT DISTINCT loc,lastmod,DomainName,[g:id] Id,PortalId,b.PublishCategoryName AS Name,SEOCode
			  FROM @TBL_SEODetails a
              INNER JOIN ZnodePublishCategoryDetail b ON(b.PublishCategoryId = a.[g:id] AND b.LOcaleId = @LocaleId)
			  WHERE DomainName IS NOT NULL;
			  END TRY
			  BEGIN CATCH
               DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@CommaSeparatedId='+@CommaSeparatedId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCategoryFeedList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
			  END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCMSContentPageList')
BEGIN 
	DROP PROCEDURE Znode_GetCMSContentPageList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCMSContentPageList]
(@WhereClause NVARCHAR(3000),
 @Rows        INT            = 100,
 @PageNo      INT            = 1,
 @Order_BY    VARCHAR(1000)  = 'PageName',
 @RowsCount   INT OUT,
 @LocaleId    INT            = 1)
 
AS

/*
 Summary :
 This procedure use to find the list of Content pages associated to the portal 
 SELECT * FROM Information_schema.Columns WHERE COLUMN_NAME = 'profileid'
 EXEC Znode_GetCMSContentPageList 'ccp.portalid = 4 and profileid = 1 and (CMSContentPagesId = 11 or CMSContentPagesId = 12 or CMSContentPagesId = 13)' ,@RowsCount = 0 

*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @SQL NVARCHAR(MAX);
             SET @WhereClause = REPLACE(@WhereClause, 'CMSContentPagesId', 'ccp.CMSContentPagesId');
			 SET @SQL = '
					DECLARE @ConatenPage TABLE (CMSContentPagesId  INT ,PortalId INT , CMSTemplateId INT ,IsActive BIT ,PageName Nvarchar(200),SEOTitle NVARCHAR(200),SEODescription NVARCHAR(max) 
											,SEOKeywords NVARCHAR(max),SEOUrl NVARCHAR(max),ContentPageHtml NVARCHAR(max),PageTemplateName NVARCHAR(200), PageTemplateFileName NVARCHAR(4000),ActivationDate DATETIME , DeactivationDate DATETIME  ,LocaleId INT  )
					INSERT INTO @ConatenPage
					SELECT  ccp.CMSContentPagesId ,ccp.PortalId, ccp.CMSTemplateId,IsActive,PageName ,ZCSDL.SEOTitle,ZCSDL.SEODescription ,ZCSDL.SEOKeywords,csd.SEOUrl,ccpl.text ContentPageHtml,ct.Name PageTemplateName, ct.FileName PageTemplateFileName,ccp.ActivationDate, ccp.ExpirationDate DeactivationDate  ,ccpl.LocaleId
					FROM ZnodeCMSContentPages ccp  
					INNER  JOIN ZnodeCMSContentPagesProfile cpp ON (cpp.CMSContentPagesId = ccp.CMSContentPagesId)
					INNER JOIN ZnodeCMSTextWidgetConfiguration ccpl ON (ccpl.CMSMappingId = ccp.CMSContentPagesId AND TypeOFMapping = ''ContentPageMapping'')
					INNER JOIN ZnodeCMSTemplate ct ON (ct.CMSTemplateId = ccp.CMSTemplateId)
					LEFT JOIN ZnodeCMSSEODetail csd ON (EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType ww WHERE ww.Name = ''Content Page'' AND ccp.PageName = csd.SEOCode  )  )
					LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON (ZCSDL.CMSSEODetailId = csd.CMSSEODetailId AND ZCSDL.LocaleId = '+CAST(@LocaleId AS VARCHAR(100))+') 
					WHERE 1=1 '+CASE
									WHEN @WhereClause = ''
									THEN ''
									ELSE ' AND '+@WhereClause
								END+' ORDER BY '+CASE
													 WHEN @Order_BY = ''
													 THEN ' 1 '
													 ELSE ' '+@Order_BY
												 END+' SELECT @Count = COUNT (1) FROM @ConatenPage   SELECT * FROM @ConatenPage '; 

								 EXEC SP_executesql
									  @SQL,
									  N'@Count INT OUT ',
									  @Count = @RowsCount OUT;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSContentPageList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSContentPageList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCMSContentPagesFolderDetails')
BEGIN 
	DROP PROCEDURE Znode_GetCMSContentPagesFolderDetails
END
GO
CREATE   PROCEDURE [dbo].[Znode_GetCMSContentPagesFolderDetails]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(100)  = NULL,
  @RowsCount   INT OUT,
  @LocaleId    INT           = 1)
AS  
   /* 
    Summary: To get content page folder details 
             Provide output for paging with dynamic where cluase                  
    		 User view : View_CMSContentPagesFolderDetails
    Unit Testing  
    Exec Znode_GetCMSContentPagesFolderDetails '',@RowsCount = 0
    
	*/
     BEGIN
        BEGIN TRY
          SET NOCOUNT ON;

		     DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @SQLWhereClause nvarchar(max)

			 
             DECLARE @DefaultLocaleId VARCHAR(100)= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_ContenetPageLocale TABLE(CMSContentPagesId INT,PortalId INT,CMSTemplateId INT,PageTitle NVARCHAR(200),PageName NVARCHAR(200),ActivationDate DATETIME, ExpirationDate DATETIME,IsActive BIT
				    ,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME,PortalName  NVARCHAR(max) ,CMSContentPageGroupId INT 
				    , PageTemplateName NVARCHAR(200),SEOUrl NVARCHAR(max),MetaInformation NVARCHAR(max),SEODescription NVARCHAR(max),SEOTitle NVARCHAR(max),SEOKeywords NVARCHAR(max),CMSContentPageGroupName NVARCHAR(200),RowId INT ,CountNo INT,PublishStatus nvarchar(300)  ,SEOPublishStatus  nvarchar(300), SEOCode NVARCHAR(4000) )
			--SET @SQLWhereClause  = [dbo].[Fn_GetFilterWhereClause](@WhereClause) 
					SET @SQL = '  
						;With CMSContentPages AS (		
						SELECT DISTINCT ZCCP.CMSContentPagesId,ZCCP.PortalId,ZCCP.CMSTemplateId,ZCCPL.PageTitle,ZCCP.PageName,ZCCP.ActivationDate, ZCCP.ExpirationDate,ZCCP.IsActive
						,ZCCP.CreatedBy,ZCCP.CreatedDate,ZCCP.ModifiedBy,ZCCP.ModifiedDate,e.StoreName PortalName   ,ZCCPG.CMSContentPageGroupId 
						,zct.Name PageTemplateName ,zcsd.SEOUrl,zcsd.MetaInformation,ZCCPGL.Name CMSContentPageGroupName,ZCCPL.LocaleId,ZCSDL.SEODescription,ZCSDL.SEOTitle,ZCSDL.SEOKeywords	,ZCSDL.LocaleId LocaleSeo,ZCCPGL.LocaleId LocaeIdRTR ,ZCCP.IsPublished
						, zcsd.IsPublish IsSEOPublished, ZCSD.SEOCode
					    FROM ZnodeCMSContentPages ZCCP 
						LEFt Outer JOIN [ZnodeCMSContentPageGroupMapping] ZCCPGM ON (ZCCPGM.CMSContentPagesId = ZCCP.CMSContentPagesId) 
					    LEFt Outer JOIN [ZnodeCMSContentPageGroup] ZCCPG ON (ZCCPG.CMSContentPageGroupId = ZCCPGM.CMSContentPageGroupId)
						LEFt Outer JOIN [ZnodeCMSContentPagesLocale] ZCCPL ON (ZCCP.CMSContentPagesId = ZCCPL.CMSContentPagesId  )
						LEFt Outer JOIN [ZnodeCMSContentPageGroupLocale] ZCCPGL ON (ZCCPGL.CMSContentPageGroupId = ZCCPG.CMSContentPageGroupId AND ZCCPGL.LocaleId = ZCCPL.LocaleId  )					
						LEFT JOIN ZnodeCMSTemplate zct ON (zct.CMSTemplateId = ZCCP.CMSTemplateId )
						LEFT JOIN ZnodeCMSSEODetail zcsd ON (zcsd.SEOCode = ZCCP.PageName AND ZCSD.Portalid = ZCCP.portalId AND 
					    EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType zcst WHERE zcst.CMSSEOTypeId = zcsd.CMSSEOTypeId AND zcst.Name = ''Content Page'' ))
					    LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON (ZCSDL.CMSSEODetailId = zcsd.CMSSEODetailId  AND ZCSDL.LocaleId = ZCCPL.LocaleId ) 
						LEFt Outer JOIN ZnodePortal e on ZCCP.PortalId = e.PortalId 
					    WHERE  ZCCPL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCSDL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCCPGL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						AND zcsd.PortalId IS NOT NULL ) 
						, Cte_ContaintPageDetails AS (
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEODescription,SEOTitle,SEOKeywords,MetaInformation,IsPublished	, IsSEOPublished,SEOCode FROM CMSContentPages WHERE LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+'
      --                  AND LocaleSeo = '+CAST(@LocaleId AS VARCHAR(50))+'
						--AND LocaeIdRTR   = '+CAST(@LocaleId AS VARCHAR(50))+'
						)
						, Cte_ContentPage  AS (     	 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished,SEOCode	FROM Cte_ContaintPageDetails 
						UNION ALL 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
						,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName ,CMSContentPageGroupId , PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished,SEOCode
					    FROM CMSContentPages CCP WHERE LocaleId = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					    AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_ContaintPageDetails CTCPD WHERE CTCPD.CMSContentPagesId  = CCP.CMSContentPagesId AND  CTCPD.Portalid = CCp.PortalId)  AND  LocaleSeo = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					    AND LocaeIdRTR   = '+CAST(@DefaultLocaleId AS VARCHAR(50))+')				

					    ,Cte_ContenetPageFilter AS (
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,SEOKeywords,SEOTitle,SEODescription,MetaInformation,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,Case When Isnull(IsPublished ,0 ) = 0 then ''Draft'' ELSE ''Published'' END PublishStatus
						,Case When Isnull(IsSEOPublished ,0 ) = 0 then ''Draft'' ELSE ''Published'' END SEOPublishStatus  , SEOCode
						
						 FROM Cte_ContentPage) '
   
						set @SQLWhereClause = @SQL + '
						
						,Cte_ContentFinal AS
						(
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,
						PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,SEOKeywords,SEOTitle,
						SEODescription,MetaInformation,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,
						PortalName,CMSContentPageGroupId, PageTemplateName ,
						SEOUrl,CMSContentPageGroupName,PublishStatus,SEOPublishStatus,'+[dbo].[Fn_GetPagingRowId](@Order_BY,'CMSContentPagesId')+',Count(*)Over() CountNo,SEOCode
						FROM Cte_ContenetPageFilter WHERE  1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )

						
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,MetaInformation,    PublishStatus,SEOPublishStatus, SEOCode
					    FROM Cte_ContentFinal  '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						--select @SQLWhereClause
						print @SQLWhereClause


					    INSERT INTO @TBL_ContenetPageLocale (CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
									,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,
									MetaInformation,PublishStatus,SEOPublishStatus,SEOCode)
           				
					    EXEC (@SQLWhereClause)      
						                                                     
					    SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ContenetPageLocale) ,0)   
						     
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate,ExpirationDate,IsActive
							   ,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
							   ,PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,
							   PublishStatus,SEOPublishStatus,SEOCode
						FROM @TBL_ContenetPageLocale

           
    END TRY
	
    BEGIN CATCH
        DECLARE @Status BIT ;
		     SET @Status = 0;
			 select ERROR_MESSAGE()
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSContentPagesFolderDetails @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');


              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
        EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorInProcedure = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
    END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCMSCustomerReviewInformation')
BEGIN 
	DROP PROCEDURE Znode_GetCMSCustomerReviewInformation
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCMSCustomerReviewInformation]
( @WhereClause NVARCHAR(Max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT,
  @LocaleId    INT           = 0,
  @PortalId    INT           = 0
  )
AS
/*
 Summary : Procedure is used to Get Customer Review Information.
 Unit Testing:
 exec Znode_GetCMSCustomerReviewInformation @WhereClause='',@RowsCount=null,@Rows = 100,@PageNo=1,@Order_BY = '',@PortalId = 0,@LocaleId = 1
*/
 BEGIN
   BEGIN TRY
      SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
             IF @LocaleId = 0
                 BEGIN
                     SELECT @LocaleId = dbo.Fn_GetDefaultLocaleId();
                 END;
             DECLARE @TBL_CustomerReview TABLE (CMSCustomerReviewId INT ,PublishProductId INT ,UserId INT,Headline NVARCHAR(400) ,Comments NVARCHAR(1000),UserName NVARCHAR(600),StoreName NVARCHAR(600)
												,UserLocation NVARCHAR(2000),Rating INT,[Status] NVARCHAR(20),ProductName NVARCHAR(max),CreatedDate DATETIME,ModifiedDate DATETIME,CreatedBy INT,ModifiedBy INT,SEOUrl NVARCHAR(max),RowId INT,CountNo INT)
			 
		 SET @SQL = ' 
		  ;With Cte_CustomerReview AS 
		  (
		   SELECT CMSCustomerReviewId,a.PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,Status,ZPPD.ProductName,ZPPD.LocaleId,ZP.StoreName
					,a.CreatedDate
					,a.ModifiedDate,a.CreatedBy,a.ModifiedBy,ZCSD.SEOUrl,ZCSD.PortalId
			FROM ZNODECMSCUSTOMERREVIEW A 
			INNER JOIN ZnodePublishProductDetail ZPPD ON (A.PUBLISHPRODUCTID = ZPPD.PUBLISHPRODUCTID AND ZPPD.LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+')
			LEFT OUTER JOIN ZnodeCMSSEODetail ZCSD on (ZPPD.SKU = ZCSD.SEOCode AND  (ZCSD.PortalId = '+CAST(@PortalId AS VARCHAR(50))+' OR '+CAST(@PortalId AS VARCHAR(50))+' = 0 )
			AND EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType ZCST WHERE  (ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId AND ZCST.NAME = ''Product'')
			)
			 )
	
			INNER  JOIN ZnodePortal ZP ON (A.PortalId = ZP.PortalId)
			WHERE ZP.PortalId = '+CAST(@PortalId AS VARCHAR(50))+' OR '+CAST(@PortalId AS VARCHAR(50))+' = 0 
		  )
		  ,Cte_CustomerInfo AS 
		  (		  
		   SELECT CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,Status,ProductName,StoreName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl ,'+dbo.Fn_GetPagingRowId(@Order_BY,'CMSCustomerReviewId')+',Count(*)Over() CountNo  
		   FROM Cte_CustomerReview 
		   WHERE 1=1
		   '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
		  )
		  SELECT CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,Status,ProductName,StoreName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl,RowId,CountNo
		  FROM Cte_CustomerInfo 
		  '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)                                                                                                                                                                                                                                                                        
          
		 PRINT @SQL
		  INSERT INTO @TBL_CustomerReview (CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,[Status],ProductName,StoreName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl,RowId,CountNo)                                                                                                                                                                                                                                        
          EXEC (@SQL)

		  SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_CustomerReview ),0)

		  SELECT CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,[Status],ProductName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl,StoreName
		  FROM @TBL_CustomerReview

           
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSCustomerReviewInformation @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSCustomerReviewInformation',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetContentFeedList')
BEGIN 
	DROP PROCEDURE Znode_GetContentFeedList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetContentFeedList]
( @PortalId NVARCHAR(MAX) = NULL,
  @LocaleId INT)
AS
/*
	Summary : This procedure is used to get effective keyword feeding of content list
	Unit Testing:
	EXEC Znode_GetContentFeedList 4,1
	
*/
     BEGIN
         SET NOCOUNT ON;
		 BEGIN TRY
         DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
         DECLARE @TBL_DomainName TABLE
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );

         DECLARE @TBL_PortalIds TABLE(ProtalId INT);
         DECLARE @TBL_SEODetails TABLE
         (loc                   NVARCHAR(MAX),
          lastmod               DATETIME,
          [g:condition]         VARCHAR(100),
          [description]         NVARCHAR(MAX),
          [g:id]                INT,
          link                  VARCHAR(100),
          [g:identifier_exists] VARCHAR(200),
          DomainName            NVARCHAR(300),
          PortalId              INT,
		   SEOCode               NVARCHAR(4000)
         );

         INSERT INTO @TBL_PortalIds
                SELECT Zp.PortalId
                FROM Znodeportal AS ZP
                INNER JOIN ZnodeCMSContentPages AS ZPC ON(ZPC.PortalId = Zp.PortalId)
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM DBO.Split(@PortalID, ',') AS Sp
                    WHERE(CAST(sp.Item AS INT) = ZP.PortalId
                          OR @PortalID = '0' )
                )
                GROUP BY Zp.PortalId;

         INSERT INTO @TBL_DomainName
                SELECT ZD.PortalId,ZD.DomainName,                     
                       ROW_NUMBER() OVER(PArtition BY ZD.DomainName,
                                                  ZD.PortalId ORDER BY ZD.DomainName,
                                                  ZD.PortalId) RowId
                FROM ZnodeDomain ZD
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PortalIds TBP
                    WHERE TBP.ProtalId = ZD.PortalId
                )
			AND IsActive =1 
			AND applicationType = 'Webstore';

				


         ;WITH Cte_SeoDetailsWithLocale
              AS (SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.CMSContentPagesId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPCC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId,ZCSD.SEOCode
                 FROM ZnodeCMSContentPages AS ZPCC 
                 LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(ZPCC.PageName = ZCSD.SEOCode AND EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId
                                                   AND ZCST.Name = 'Content Page'))
                 LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                                            AND LocaleId IN(@LocaleId, @DefaultLocaleId))
                 LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZPCC.PortalId )
                  WHERE EXISTS
                  (
                      SELECT TOP 1 1
                      FROM @TBL_PortalIds TBP
                      WHERE ZPCC.PortalId = TBP.ProtalId
                  )),

              Cte_SeoDetailsWithFirstLocale
              AS (SELECT *
                  FROM Cte_SeoDetailsWithLocale
                  WHERE LocaleId = @LocaleId),

              Cte_SeoDetailsWithDefaultLocale
              AS (
              SELECT *
              FROM Cte_SeoDetailsWithFirstLocale
              UNION ALL
              SELECT *
              FROM Cte_SeoDetailsWithLocale AS CTSDWL
              WHERE LocaleId = @DefaultLocaleId
                    AND NOT EXISTS
              (
                  SELECT TOP 1 1
                  FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
                  WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
              ))

              INSERT INTO @TBL_SEODetails
                     SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,SEOCode
                     FROM Cte_SeoDetailsWithDefaultLocale;

         WITH Cte_ContentPages
              AS (SELECT ZCCP.CMSContentPagesId,ZCCPl.PageTitle,ZCCPL.LocaleId,ZCCP.PageName
                  FROM ZnodeCMSContentPages ZCCP
                  INNER JOIN ZnodeCMSContentPagesLocale ZCCPL ON(ZCCPL.CMSContentPagesId = ZCCP.CMSContentPagesId)
                  WHERE EXISTS
                  (
                      SELECT TOP 1 1
                      FROM @TBL_SEODetails TBSD
                      WHERE TBSD.[g:id] = ZCCP.CMSContentPagesId
                  )
                        AND LocaleID IN(@LocaleId, @DefaultLocaleId)),

              Cte_ContentPageFirstLocale
              AS (SELECT *
                  FROM Cte_ContentPages CTCP
                  WHERE LocaleId = @LocaleId),

              Cte_ContentPageSecondLocale
              AS (
              SELECT *
              FROM Cte_ContentPageFirstLocale CTPFL
              UNION ALL
              SELECT *
              FROM Cte_ContentPages CTCP
              WHERE LocaleId = @LocaleId
                    AND NOT EXISTS
              (
                  SELECT TOP 1 1
                  FROM Cte_ContentPageFirstLocale CTCPFL
                  WHERE CTCPFL.CMSContentPagesId = CTCP.CMSContentPagesId
              ))

              SELECT loc,lastmod,DomainName,'' AS [image],PageName Name,[g:id] CMSContentPagesId,PortalId,SEOCode
              FROM @TBL_SEODetails TBSD
              LEFT JOIN Cte_ContentPageSecondLocale CTCPSL ON(TBSD.[g:id] = CTCPSL.CMSContentPagesId);
		END TRY
		BEGIN CATCH
		  DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetContentFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetContentFeedList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
		END CATCH

     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductDataForWebStore')
BEGIN 
	DROP PROCEDURE Znode_GetProductDataForWebStore
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetProductDataForWebStore]  
(   @SKU              VARCHAR(MAX) = '' ,  
    @PublishCatalogId int = 0 ,  
    @PublishProductId VARCHAR(MAX),  
    @PortalId         INT,  
    @LocaleId         INT)  
AS   
  /*    
    Summary: WebStore: SP for getting products data   
       Get average rating of products   
       Get Price / Inventory / SEO details .  
    Unit Testing  
 begin tran     
    EXEC [Znode_GetProductDataForWebStore] 'SKBCA1112,SKWI122,SKFVR123,FVZK0237,SKPMAR123,SKLS232',0,'96,92,98,103,94,97',@PortalId=2 ,@LocaleId=1  
    EXEC [Znode_GetProductDataForWebStore] 'SKPMAR123',3,'',@PortalId=1 ,@LocaleId=0  
 rollback tran  
   */  
     BEGIN  
         BEGIN TRAN A;  
         BEGIN TRY  
             SET NOCOUNT ON;  
  
             DECLARE @Tlb_SKU TABLE  
             (SKU        VARCHAR(100),  
              SequenceNo INT IDENTITY  
             );  
	If @SKU <> ''  
		INSERT INTO @Tlb_SKU(SKU) SELECT Item FROM Dbo.split(@SKU, ',');  
	Else if @PublishCatalogId > 0   
		INSERT INTO @Tlb_SKU(SKU)   
		select Distinct ZPPD.SKU  from ZnodePublishCategoryProduct ZPCP INNER JOIN ZnodePublishProductDetail ZPPD ON ZPCP.PublishProductId = ZPPD.PublishProductId   
		where  ZPCP.PublishCatalogId = @PublishCatalogId  
  
             DECLARE @Tlb_PublishProduct TABLE  
             (PublishProductId INT,  
              SequenceNo       INT IDENTITY  
             );  
  
    If @PublishProductId <> ''  
		 INSERT INTO @Tlb_PublishProduct(PublishProductId)  
				 SELECT Item FROM Dbo.split(@PublishProductId, ',');   
    Else if @PublishCatalogId > 0   
		INSERT INTO @Tlb_PublishProduct(PublishProductId)  
		select Distinct ZPCP.PublishProductId  from ZnodePublishCategoryProduct ZPCP where  ZPCP.PublishCatalogId = @PublishCatalogId  
    Else if @PublishCatalogId = 0 AND  @PublishProductId = ''   AND    @SKU <> ''
		INSERT INTO @Tlb_PublishProduct(PublishProductId)  
		SELECT Distinct ZPCP.PublishProductId  from ZnodePublishProductDetail ZPCP INNER JOIN @Tlb_SKU TSK ON ZPCP.SKU = TSK.SKU
		  
             --DECLARE @Tlb_ProductData TABLE  
             --(PublishProductId INT,  
             -- SKU              NVARCHAR(100),  
             -- SEOTitle         NVARCHAR(200),  
             -- SEODescription   NVARCHAR(MAX),  
             -- SEOKeywords      NVARCHAR(MAX),  
             -- SEOUrl           NVARCHAR(MAX),  
             -- Rating           Numeric(28,6),  
             -- TotalReviews     INT  
             --);  
  
    CREATE TABLE #Tlb_ProductData   
             (PublishProductId INT,  
              SKU              NVARCHAR(100),  
              SEOTitle         NVARCHAR(200),  
              SEODescription   NVARCHAR(MAX),  
              SEOKeywords      NVARCHAR(MAX),  
              SEOUrl           NVARCHAR(MAX),  
              Rating           Numeric(28,6),  
              TotalReviews     INT,
			  IsPublish        bit  
             );  
  
             INSERT INTO #Tlb_ProductData (PublishProductId,SKU)  
             SELECT PP.PublishProductId,SK.SKU FROM @Tlb_PublishProduct AS PP INNER JOIN @Tlb_SKU AS SK ON PP.SequenceNo = SK.SequenceNo;  
  
             DECLARE @Tlb_CustomerAverageRatings TABLE  
             (PublishProductId INT,  
              Rating           NUMERIC(28,6),  
              TotalReviews     INT  
             );   
             -- Calculate Average rating   
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)  
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId)   
    FROM ZnodeCMSCustomerReview AS CCR  
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A'   
    AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )  
    GROUP BY CCR.PublishProductId    ;  
  
             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews   
    FROM @Tlb_CustomerAverageRatings CAR  
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;  
  
    UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl, PD.IsPublish = ZCSO.IsPublish 
    FROM #Tlb_ProductData PD  
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode  
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)  
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'  
    WHERE ZCSO.PortalId = @PortalId  
  
    UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword 
	FROM #Tlb_ProductData PD  
    INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId 
	WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL  
     --AND ZCSO.PortalId = @PortalId  

    SELECT ZPCP.PublishCatalogId , PD.PublishProductId,SKU,SEOTitle,SEODescription,SEOKeywords,SEOUrl,Rating,TotalReviews, 
		   CASE WHEN ISNULL(IsPublish,0) = 0  THEN 'Draft' ELSE 'Published' END PublishStatus    
    FROM #Tlb_ProductData PD LEFT Outer join ZnodePublishCategoryProduct ZPCP  ON PD.PublishProductId = ZPCP.PublishProductId ;
	               
    COMMIT TRAN A;  
     
         END TRY  
         BEGIN CATCH  
              DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore @SKU = '+@SKU+',@PublishProductId='+@PublishProductId+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetProductDataForWebStore',  
    @ErrorInProcedure = @Error_procedure,  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
         END CATCH;  
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductFeedList')
BEGIN 
	DROP PROCEDURE Znode_GetProductFeedList
END
GO
CREATE PROCEDURE [dbo].[Znode_GetProductFeedList]
(   @PortalId   VARCHAR(2000) = NULL,
    @ProductIds VARCHAR(MAX)  = '',
    @LocaleId   INT,
    @FeedType   NVARCHAR(MAX) = NULL)
AS
/*
Summary: This Procedure is used to get effective keyword feeding of Product list
 SELECT * FROM ZnodePublishProductDetail
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3
 SELECT * FROM ZnodePortalCatalog 
 Unit Testing:
 EXEC Znode_GetProductFeedList @PortalId='0',@ProductIds = '116,117,118'
 ,@LocaleId=1,@FeedType='Bing' 

*/
     BEGIN
	 BEGIN TRY
         SET NOCOUNT ON;      
         
		 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
         DECLARE @TBL_DomainName TABLE
         (PortalId   INT,
          DomainName NVARCHAR(300),
          RowId      INT
         );  	
       
         DECLARE @TBL_SEODetails TABLE
         (loc                   NVARCHAR(MAX),
          lastmod               DATETIME,
          [g:condition]         VARCHAR(100),
          [description]         NVARCHAR(MAX),
          [g:id]                INT,
          link                  VARCHAR(100),
          [g:identifier_exists] VARCHAR(200),
          DomainName            NVARCHAR(300),
          PortalId              INT
		  , SEOCode             NVARCHAR(4000)
         );
         DECLARE @TBL_CompleteDetailes TABLE
         (loc                   NVARCHAR(MAX),
          lastmod               DATETIME,
          [g:condition]         VARCHAR(100),
          [description]         NVARCHAR(MAX),
          [g:id]                INT,
          link                  VARCHAR(100),
          [g:identifier_exists] VARCHAR(200),
          DomainName            NVARCHAR(300),
          PortalId              INT,
          [g:availability]      NVARCHAR(1000),
          SKU                   NVARCHAR(MAX),
		  SEOCode               NVARCHAR(4000)
         );
         DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
         DECLARE @TBL_PortalIds TABLE(PortalId INT); 
	
         INSERT INTO @TBL_PortalIds
         SELECT Zp.PortalId 
		 FROM Znodeportal AS ZP 
		 INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)
         INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PublishCatalogId = ZPC.PublishCatalogId) 
		 INNER JOIN ZNodePublishProduct AS ZPP ON(ZPP.PublishCatalogId = ZPPC.PublishCatalogId)
		 INNER JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPP.PublishProductId)
         WHERE EXISTS(SELECT TOP 1 1 FROM DBO.Split(@ProductIds, ',') AS Sp WHERE (sp.Item  = PPD.SKU)  OR @ProductIds = '0')
		 AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp
						WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')
		 AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId
		 AND IsActive = 1 AND ApplicationType = 'Webstore')
		 GROUP BY Zp.PortalId; 

         INSERT INTO @TBL_DomainName 
		 SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName) 
		 FROM ZnodeDomain AS ZD 
         WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)
		 AND IsActive = 1 AND ApplicationType = 'Webstore'
		


         ;WITH Cte_SeoDetailsWithLocale
         AS (
		 SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.PublishProductId AS [g:id],
             '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode
			 FROM ZNodePublishProduct AS ZPCC 
			 INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.PublishCatalogId)
			 LEFT JOIN ZnodePublishProductDetail AS PPD ON (PPD.PublishProductId = ZPCC.PublishProductId)
             -- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)
			 LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(PPD.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)
             LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')
             LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))
             LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId ) 
			 WHERE EXISTS(SELECT TOP 1 1 FROM DBO.Split(@ProductIds, ',') AS Sp
						WHERE (sp.Item  = PPD.SKU) OR @ProductIds = '0')
			AND EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId	)
			 )

         ,Cte_SeoDetailsWithFirstLocale
         AS (
			 SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode
             FROM Cte_SeoDetailsWithLocale 
			 WHERE LocaleId = @LocaleId
			 )         
		,Cte_SeoDetailsWithDefaultLocale
         AS (
			 SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode
             FROM Cte_SeoDetailsWithFirstLocale
             UNION ALL
             SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode
             FROM Cte_SeoDetailsWithLocale AS CTSDWL
             WHERE LocaleId = @DefaultLocaleId 
			 AND NOT EXISTS(SELECT TOP 1 1 FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId))
              
		 INSERT INTO @TBL_SEODetails
         SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode
		 FROM Cte_SeoDetailsWithDefaultLocale;

		

         INSERT INTO @TBL_CompleteDetailes
         SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,
         CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END
         END AS [g:availability],ZPPD.SKU ,TBSD.SEOCode
		 FROM ZnodePublishProduct AS ZPP 
		 LEFT JOIN @TBL_SEODetails AS TBSD ON(ZPP.PublishProductId = TBSD.[g:id] )
         LEFT JOIN ZnodePublishProductDetail AS ZPPD ON(ZPPD.PublishProductId = ZPP.PublishProductId AND ZPPD.LocaleId = @LocaleId )
         LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)
         LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)
         LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPPD.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))
         WHERE EXISTS(SELECT TOP 1 1 FROM DBO.Split(@ProductIds, ',') AS Sp WHERE (sp.Item  = ZPPD.SKU) OR @ProductIds = '0')
		 AND EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId	)
         GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPPD.SKU,ZPPD.LocaleId, TBSD.SEOCode;
		
         DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 URL FROM ZnodeMediaConfiguration WHERE IsActive = 1));
		       

         ;WITH Cte_PortalList
         AS (
		     SELECT zp.PortalId,dbo.Fn_GetDefaultPriceRoundOff(ZPS.RetailPrice)RetailPrice,Zps.SKU,TBCD.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId
             FROM ZnodePriceList AS ZPL 
			 LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId
             LEFT JOIN dbo.ZnodeCurrency AS zc ON ZPL.CurrencyId = zc.CurrencyId 
			 LEFT JOIN dbo.ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId
             LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId) 
			 LEFT JOIN @TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku) 
			 WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate 
			 AND EXISTS( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId) 
			 GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode
			 )

         SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId
		,CTPL.RetailPrice AS [g:price]
		 ,@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode
         FROM @TBL_CompleteDetailes AS TBCD 
		 LEFT JOIN Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)
		 WHERE  EXISTS(SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId	)

	END TRY
	BEGIN CATCH
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@ProductIds='+@ProductIds+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_GetProductFeedList',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
	
	 END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetProductInfoForWebStore')
BEGIN 
	DROP PROCEDURE Znode_GetProductInfoForWebStore
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetProductInfoForWebStore]
(   
	@PortalId         INT,
    @LocaleId         INT,
	@UserId			  INT = 2,
	@ProductDetailsFromWebStore   DBO.ProductDetailsFromWebStore READONLY,
	@currentUtcDate    VARCHAR(200) = '')
AS 
  /*  
    Summary: WebStore: SP for getting products data 
    		 Get average rating of products 
    		 Get Price / Inventory / SEO details .
    Unit Testing
	begin tran   
   
	declare @p6 dbo.ProductDetailsFromWebStore
	insert into @p6 values(217,N'GroupedProduct',N'DontTrackInventory',N'C13-5038')
	insert into @p6 values(231,N'ConfigurableProduct',N'DisablePurchasing',N'gr990')
	insert into @p6 values(502,N'SimpleProduct',N'DontTrackInventory',N'grapes1234')
	insert into @p6 values(232,N'SimpleProduct',N'DisablePurchasing',N'st32477')
	insert into @p6 values(215,N'GroupedProduct',N'DontTrackInventory',N'D9-4911')
	insert into @p6 values(504,N'SimpleProduct',N'DisablePurchasing',N'Test')

	 exec sp_executesql N'Znode_GetProductInfoForWebStore  @PortalId,@LocaleId,@UserId,@ProductDetailsFromWebStore,@currentUtcDate',N'@PortalId int,@LocaleId int,@UserId int,@ProductDetailsFromWebStore [dbo].[ProductDetailsFromWebStore] READONLY,@currentUtcD

ate nvarchar(4000)',@PortalId=1,@LocaleId=1,@UserId=0,@ProductDetailsFromWebStore=@p6,@currentUtcDate=N'2/6/2018 12:00:00 AM'


   */
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             SET NOCOUNT ON;
			 
			 DECLARE @Tlb_SKU TABLE (SKU VARCHAR(100))
			 DECLARE @PublishProductIds  NVARCHAR(max) ,@SKU NVARCHAR(max) 
				
			 DECLARE @TBL_PricebyCatalogforAssociateProduct TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingSkuOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				
		

			--Create TABLE #Tlb_PromotionProductData 
   --          (
			--	  PromotionId      INT,
			--	  PromotionType	   INT, 
			--	  ExpirationDate   Datetime, 
			--	  ActivationDate   Datetime,
			--	  PublishProductId INT,
			--	  PromotionMessage Nvarchar(max)  
   --          );
			 Create TABLE #Tbl_PriceListWisePrice 
             (
				  SKU            VARCHAR(300),
				  RetailPrice    NUMERIC(28, 6),
				  SalesPrice     NUMERIC(28, 6),
				  TierPrice      NUMERIC(28, 6),
				  TierQuantity   NUMERIC(28, 6),
				  CurrencyCode   Varchar(100),
				  CurrencySuffix Varchar(1000),
				  ExternalId NVARCHAR(2000)
             );

			 CREATE TABLE #Tlb_ProductData 
             (
				  PublishProductId INT,
				  SKU              NVARCHAR(100),
				  SEOTitle         NVARCHAR(200),
				  SEODescription   NVARCHAR(MAX),
				  SEOKeywords      NVARCHAR(MAX),
				  SEOUrl           NVARCHAR(MAX),
				  Rating           Numeric(28,6),
				  TotalReviews     INT,
				  RetailPrice      NUMERIC(28, 6),
				  SalesPrice       NUMERIC(28, 6),
				  TierPrice        NUMERIC(28, 6),
				  TierQuantity     NUMERIC(28, 6),
				  CurrencyCode     Varchar(100),
				  CurrencySuffix   Varchar(1000),
				  ExternalId       NVARCHAR(2000),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6)

			   );


			 Create TABLE #Tbl_Inventory
             (
				  SKU            VARCHAR(300),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  PortalId      int
				
             );
            INSERT INTO #Tlb_ProductData (PublishProductId,SKU)
            SELECT id,SKU FROM @ProductDetailsFromWebStore
			  		
			SELECT @SKU = Substring((SELECT ',' + SKU FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 

			SELECT @PublishProductIds = Substring((SELECT ',' + CONVERT(NVARCHAR(100),id ) FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 
			 	
			--INSERT INTO  #Tlb_PromotionProductData(PromotionId,PromotionType, ExpirationDate,  ActivationDate, PublishProductId,PromotionMessage)
			--Exec [Znode_GetPromotionByPublishProductId] @PublishProductIds = @PublishProductIds ,@UserId  = @UserId	,@PortalId  = @PortalId  
			 
			INSERT INTO #Tbl_PriceListWisePrice( SKU, RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,ExternalId)
			EXEC Znode_GetPublishProductPricingBySku @SKU = @SKU ,@PortalId = @PortalId ,@currentUtcDate = @currentUtcDate,@UserId = @UserId 
			
			insert into #Tbl_Inventory (SKU,	Quantity,	ReOrderLevel,	PortalId)
			EXEC Znode_GetInventoryBySkus @SKUs=@SKU,@PortalId=@PortalId

			--Price logic for Associate products
			----INSERT INTO @TBL_PricebyCatalogforAssociateProduct(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct)
			----SELECT cl.Item, NULL , PR.SKU, PR.ID, null, null , PR.[ProductType]  FROM @ProductDetailsFromWebStore PR
			----Cross Apply dbo.split (AssociateProducts, ',') CL 

			----UPDATE PDI SET PDI.ChildSKU = ZPPD.SKU 
			----from @TBL_PricebyCatalogforAssociateProduct PDI inner join
			----ZnodePublishProductDetail ZPPD On PDI.AssociatedProductId = ZPPD.PublishProductId
			
			----SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),AssociatedProductId) 
			----FROM @TBL_PricebyCatalogforAssociateProduct where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			----INSERT INTO @tbl_PricingSkuOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			----EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 

			----update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			----PLC.SalesPrice = PLCA.SalesPrice 
			----from @TBL_PricebyCatalogforAssociateProduct PLC inner join @tbl_PricingSkuOfAssociatedProduct
			----PLCA on PLC.ChildSKU = PLCA.sku
			
			----Update PBC SET PBC.RetailPrice = 
			----	(Select TOP 1 Isnull(RetailPrice ,SalesPrice) from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU
			----		and PCBA.ParentSKU is not null and PCBA.ChildSKU is not null
			----	Order by AssociatedProductDisplayOrder)
			----	from #Tbl_PriceListWisePrice  PBC  where 
			----	Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA
			----	where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'ConfigurableProduct')
			----	and PBC.RetailPrice IS null 

			Update PD SET 
			 PD.SKU             = PLWP.SKU            
			,PD.RetailPrice     = PLWP.RetailPrice     
			,PD.SalesPrice      = PLWP.SalesPrice      
			,PD.TierPrice       = PLWP.TierPrice       
			,PD.TierQuantity    = PLWP.TierQuantity    
			,PD.CurrencyCode    = PLWP.CurrencyCode    
			,PD.CurrencySuffix  = PLWP.CurrencySuffix  
			,PD.ExternalId 	    = PLWP.ExternalId 	   
			FROM #Tlb_ProductData PD Inner join #Tbl_PriceListWisePrice PLWP on 
			PD.SKU = PLWP.SKU

			Update PD SET 
			 PD.Quantity = TLI.Quantity,
			 PD.ReOrderLevel= TLI.ReOrderLevel
			 FROM #Tlb_ProductData PD Inner join #Tbl_Inventory TLI on 
			PD.SKU = TLI.SKU

			 

			----Update PD SET 
			----	  PD.PromotionId      =PLWP.PromotionId,
			----	  PD.PromotionType	  =PLWP.PromotionType, 
			----	  PD.ExpirationDate   =PLWP.ExpirationDate, 
			----	  PD.ActivationDate   =PLWP.ActivationDate,
			----	  PD.PublishProductId =PLWP.PublishProductId,
			----	  PD.PromotionMessage  =PLWP.PromotionMessage   
			----from #Tlb_ProductData PD Inner join #Tlb_PromotionProductData PLWP on 
			----PD.PublishProductId = PLWP.PublishProductId


			 DECLARE @Tlb_CustomerAverageRatings TABLE
             (PublishProductId INT,
              Rating           NUMERIC(28,6),
              TotalReviews     INT
             ); 
             -- Calculate Average rating 
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId) 
			 FROM ZnodeCMSCustomerReview AS CCR
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A' 
			 AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )
			 GROUP BY CCR.PublishProductId    ;

             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews 
			 FROM @Tlb_CustomerAverageRatings CAR
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;

             UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl 
			 FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 WHERE ZCSO.PortalId = @PortalId
             
			 --UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl 
			 --FROM #Tlb_ProductData PD
    --         INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
    --         LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
    --         INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 --WHERE ZCSO.PortalId = @PortalId

             UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL
			  --AND ZCSO.PortalId = @PortalId
             SELECT PublishProductId,SKU,SEOTitle,SEODescription,SEOKeywords,SEOUrl,Rating,TotalReviews ,
			  RetailPrice,SalesPrice,TierPrice, TierQuantity,CurrencyCode,CurrencySuffix,ExternalId,
			   Quantity  ,ReOrderLevel FROM #Tlb_ProductData;             
			 			
			 --Select PDFW.ID PublishProductId ,PDFW.SKU,PromotionId,PromotionType,ExpirationDate,ActivationDate,PromotionMessage from #Tlb_PromotionProductData PPD Inner join 
			 --@ProductDetailsFromWebStore PDFW ON PPD.PublishProductId = PDFW.ID

			 --SELECT SKU,RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,ExternalId from #Tbl_PriceListWisePrice  


			 COMMIT TRAN A;
			
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductInfoForWebStore @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductInfoForWebStore',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishBlogNews')
BEGIN 
	DROP PROCEDURE Znode_GetPublishBlogNews
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishBlogNews]
(
 @PortalId INT = 0 
)
AS
/*
   This Procedure is used to publish the blog news against the store 
  
 EXEC Znode_GetPublishBlogNews 1 



*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   DECLARE @LocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
   DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
   DECLARE @TBL_BlogData TABLE (BlogNewsId INT,PortalId INT ,MediaId INT ,BlogNewsType NVARCHAR(max),IsBlogNewsActive BIT ,IsAllowGuestComment BIT,LocaleId INT ,BlogNewsTitle NVARCHAR(max),CMSContentPagesId INT
   ,BodyOverview NVARCHAR(max),Tags NVARCHAR(max),BlogNewsContent NVARCHAR(max),CreatedDate DATETIME,ActivationDate DATETIME ,ExpirationDate DATETIME, MediaPath varchar(max),BlogNewsCode NVARCHAR(4000) )
   INSERT INTO @TBL_Locale (LocaleId)
   SELECT LocaleId 
   FROM ZnodeLocale 
   WHERE IsActive =1 

   SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
   
   WHILE @IncrementalId <= @MaxCount
   BEGIN 

   SET @localeId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)

  ;With Cte_GetCmsBlogNewsData AS 
  (
    SELECT ZBN.BlogNewsId,PortalId,ZBN.MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,ZBNL.LocaleId
	,BlogNewsTitle,ZBN.CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,ZBN.CreatedDate,ActivationDate,ExpirationDate,zm.Path MediaPath,ZBN.BlogNewsCode
	FROM ZnodeBlogNews ZBN 
	INNER JOIN ZnodeBlogNewsLocale ZBNL ON (ZBNL.BlogNewsId = ZBN.BlogNewsId)
	LEFT JOIN ZnodeBlogNewsContent ZBNC ON ( ZBNC.BlogNewsId = ZBN.BlogNewsId AND ZBNC.LocaleId = ZBNL.LocaleId) 
	left join znodemedia ZM on(ZM.MediaId = ZBN.MediaId)
	WHERE (ZBNL.LocaleId = @localeId OR ZBNL.LocaleId = @DefaultLocaleId)  
	AND ZBn.PortalId = @PortalId 
	AND ZBN.IsBlogNewsActive = 1 
  )
  , Cte_GetFirstFilterData AS
  (
    SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId
	,BlogNewsTitle,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
	FROM Cte_GetCmsBlogNewsData 
	WHERE LocaleId = @localeId
  )
  , Cte_GetDefaultFilterData AS
  (
   SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId
   ,BlogNewsTitle,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
   FROM  Cte_GetFirstFilterData 
   UNION ALL 
   SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId
   ,BlogNewsTitle,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
   FROM Cte_GetCmsBlogNewsData CTEC 
   WHERE LocaleId = @DefaultLocaleId 
   AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstFilterData CTEFD WHERE CTEFD.BlogNewsId = CTEC.BlogNewsId )
   )
   INSERT INTO @TBL_BlogData (BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId,BlogNewsTitle
   ,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode)
   SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,@localeId,BlogNewsTitle
   ,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
   FROM Cte_GetDefaultFilterData

  SET @IncrementalId = @IncrementalId +1 
  END 

SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId,BlogNewsTitle,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
FROM @TBL_BlogData 


END TRY 
BEGIN CATCH 
SELECT ERROR_MESSAGE()
END CATCH
END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategory')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategory
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishCategory]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
    @IsDebug          BIT = 0)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
     


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,
			  PimCategoryHierarchyId INT,
			  ParentPimCategoryHierarchyId INT ,
			   CategoryCode  NVARCHAR(MAX)             );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
             SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 WHERE ZPCH.PimCatalogId = @PimCatalogId; 
             -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog
             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
             SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
			 FROM ZnodePublishCategoryProduct ZPCP
             INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
             INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
             INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
             WHERE ZPC.PublishCatalogId = @PublishCataLogId 
			 AND NOT EXISTS(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId
			 AND TBPC.PimProductId = ZPP.PimProductId AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	
             EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
			 TARGET.PimCategoryId = SOURCE.PimCategoryId 
			 AND TARGET.PublishCatalogId = @PublishCataLogId 
			 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,INSERTED.parentPimCategoryHierarchyId INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			
    --         UPDATE TBPC SET PublishParentCategoryId = TBPCS.PublishCategoryId 
			 --FROM @TBL_PublishPimCategoryIds TBPC
    --         INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId)
    --         INNER JOIN @TBL_PublishPimCategoryIds TBPCS ON(TBC.PimCategoryHierarchyId = TBPCS.parentPimCategoryHierarchyId  ) 
			 --WHERE TBC.parentPimCategoryHierarchyId IS NOT NULL;
           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			 FROM ZnodePublishCategory ZPC
             INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
			 AND TBPC.PublishCatalogId =@PublishCatalogId
			 ;
			 UPDATE a
			 SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId =@PublishCatalogId
			AND b.PublishCatalogId =@PublishCatalogId

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));


					  UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'')
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

             UPDATE ZnodePublishCatalogLog SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
			 GROUP BY PublishCategoryId																				
             FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

             DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
            
             INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
             
			 SELECT CategoryXml  
			 FROM @TBL_CategoryXml 
			 

			 UPDATE ZnodePimCategory 
			 SET IsCategoryPublish =1 
			 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)

              
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   ,
			  CategoryCode  NVARCHAR(MAX)    );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				 Select Distinct PimCategoryId , Null FROM (
				 SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryId in 
				 (SELECT CategoryId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
				 SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

				 INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
				 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId
				 AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 --AND NOT EXISTS
				 --(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 --AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 --AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				 AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds) ;
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					   UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'')
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,@VersionId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId
  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

					IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 SELECT CategoryXml FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProducts
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProducts](
	    @PublishCatalogId int= NULL
	  , @PublishCategoryId varchar(2000)= NULL
	  , @UserId int
	  , @NotReturnXML int= NULL
	  , @PimProductId TransferId Readonly
	  , @VersionId int= 0
	  , @IsDebug bit= 0
	  , @TokenId nvarchar(max)= ''
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

    Unit Testing
    
    SELECT * FROM ZnodePimCustomField WHERE CustomCode = 'Test'
    SELECT * FROM ZnodePimCatalogCategory WHERE pimCatalogId = 3 AND PimProductId = 181
    SELECT * FROM ZnodePimCustomFieldLocale WHERE PimCustomFieldId = 1
    SELECT * FROM ZnodePublishProduct WHERE PublishProductid = 213 = 30
    select * from znodepublishcatalog
    SELECT * FROM view_loadmanageProduct WHERE Attributecode = 'ProductNAme' AND AttributeValue LIKE '%Apple%'
    SELECT * FROM ZnodePimCategoryProduct WHERE  PimProductId = 181
    SELECT * FROM ZnodePimCatalogcategory WHERE pimcatalogId = 3 \
	DECLARE @ttr TransferId 
	INSERT INTO @ttr  
	SELECT 25719 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = 0 ,@UserId= 2 ,@NotReturnXML= NULL,@PimProductId = @ttr,@IsDebug= 1 
    EXEC Znode_GetPublishProducts  @PublishCatalogId = null,@UserId= 2 ,@NotReturnXML= NULL,@IsDebug= 1  ,@PimProductId = 103
    EXEC Znode_GetPublishProducts  @PublishCatalogId =1,@UserId= 2 ,@RequiredXML= 1	
    SELECT * FROM 	ZnodePimCatalogCategory  WHERE pimcatalogId = 3  
    SELECT * FROM [dbo].[ZnodePimCategoryHierarchy]  WHERE pimcatalogId = 3 
 */
  
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
	
	         DECLARE @TBL_PublishIds TABLE (PublishProductId INT , PimProductId INT , PublishCatalogId INT)
			  DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId()
			 --User cananot modify / update UDT, Need to declare additinal table variable for editing in other store procedure.
			 DECLARE @PimProductId_Editable TransferId
			   
	         IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			   -- Process call single product publish
			   INSERT INTO @TBL_PublishIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
			
			--select * from @TBL_PublishIds

			   INSERT INTO @PimProductId_Editable
			   SELECT distinct PimProductId FROM @TBL_PublishIds
			   -- initiate single product publish 
			   EXEC Znode_GetPublishSingleProduct @PublishCatalogId,@VersionId,@PimProductId_Editable,@userid	,@TokenId
			  -- SELECT 	@PimProductId	
			 END 
			 ELSE 
			 BEGIN 
				-- Process call catalog publish (include category, products with multiple types)
			     EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId
				 EXEC Znode_GetPublishProductbulk @PublishCatalogId,@VersionId,@PimProductId,@userid
				 UPDATE ZnodePimProduct SET IsProductPublish = 1 WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishProduct ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId AND ZPP.PublishCatalogId = @PublishCatalogId)
			 END 
			
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT );

			 INSERT INTO @TBL_PublishCatalogId 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
										MAX(PublishCatalogLogId) ELSE @versionId END 
			 FROM ZnodePublishProduct ZPP 
			 LEFT JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			 WHERE (EXISTS (SELECT TOP 1 1 FROM @TBL_PublishIds SP WHERE SP.PimProductId = ZPP.PimProductId  ))
			 AND IsCatalogPublished =1 
			 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId

			
			 --SELECT * FROM @TBL_PublishCatalogId

			IF EXISTS (SELECT TOP 1 1 FROM @PimProductId WHERE ID IS NOT NULL AND ID <> '')

			--IF @PimProductId IS NOT NULL AND @PimProductId <> ''
			BEGIN
				SELECT PublishedXML ProductXml
				FROM ZnodePublishedXml ZPX
				WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId TBLP WHERE TBLP.VersionId = ZPX.PublishCatalogLogId AND TBLP.PublishProductId = ZPX.PublishedId  )
				AND IsProductXML = 1
				;

				SELECT PublishProductId AS ProductXml
				FROM @TBL_PublishCatalogId
				GROUP BY PublishProductId;

				-- dataset for SEO implementation
				SELECT  SKU 
				FROM ZnodePublishProductDetail PPD 
				INNER JOIN @TBL_PublishCatalogId TPC ON (TPC.PublishProductId = PPD.PublishProductId )
				WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId tb WHERE tb.ID = TPC.PimProductId)
				AND PPD.localeid = @DefaultLocaleId
				GROUP BY SKU;

			END
			
			UPDATE ZnodePublishCatalogLog 
			SET IsProductPublished = 1,
			    PublishProductId = (SELECT COUNT( DISTINCT  PublishProductId) FROM ZnodePublishCategoryProduct SP  WHERE Sp.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId --AND ZnodePublishCatalogLog.IsCatalogPublished = 1
									AND ( SP.PublishCategoryId in (SELECT Item FROM dbo.split(ZnodePublishCatalogLog.PublishCategoryId,',') SP ))  )
		    WHERE PublishCatalogLogId = @VersionId AND  @VersionId <> 0

			DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]() 
			
			--UPDATE ZnodePimattributeValueLocale SET AttributeValue = 'Published' 
			--FROM ZnodePimattributeValue PAV
			--INNER JOIN ZnodePimattributeValueLocale PAVL ON PAV.PimAttributeValueId = PAVL.PimAttributeValueId
			--WHERE PimAttributeId = @PimAttributeIsPublish
			--AND EXISTS ( SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = PAV.PimProductId )

			UPDATE ZnodePimProduct 
			SET IsProductPublish = 1 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PublishCatalogId ZPP WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId)
			--END 
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
		UPDATE ZnodePublishCatalogLog 
	    SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @VersionId
		DECLARE @Status bit;
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS varchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',

		@VersionId='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishSingleCategory')
BEGIN 
	DROP PROCEDURE Znode_GetPublishSingleCategory
END
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishSingleCategory]
(   @PimCategoryId    INT, 
    @UserId           INT,
    @Status           int = 0 OUT,
	@IsDebug          BIT = 0)
AS 
/*
       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
	            During Catalog Publish Publish status should be updated 
				   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 

       EXEC [Znode_GetPublishSingleCategory @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @PublishCatalogLogId int , @PublishCataLogId int , @VersionId  int ,@PimCatalogId int 
			 
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
			 
			 DECLARE @TBL_PublishCatalogId TABLE(PublishCatalogId INT,PimCatalogId  INT , VersionId INT )

			 INSERT INTO @TBL_PublishCatalogId  (PublishCatalogId,PimCatalogId,VersionId ) 
			 SELECT ZPCL.PublishCatalogId, ZPCL.PimCatalogId,ZPCL.PublishCatalogLogId
			 FROM ZnodePimCategoryHierarchy ZPCH INNER JOIN ZnodePublishCatalogLog  ZPCL 
			 ON ZPCH.PimCatalogId = ZPCL.PimCatalogId and ZPCH.PimCategoryId = @PimCategoryId 
			 where  PublishCatalogLogId in (Select MAX (PublishCatalogLogId) from ZnodePublishCatalogLog ZPCL where 
			 ZPCH.PimCatalogId = ZPCL.PimCatalogId)

			 IF NOT EXISTS (Select TOP 1 1 from @TBL_PublishCatalogId) OR NOT EXISTS (select TOP 1 1  from ZnodePimCatalogCategory where PimCategoryId = @PimCategoryId  )
			 Begin
				SET @Status = 1  -- Category not associated or catalog not publish
				ROLLBACK TRAN GetPublishCategory;
				Return 0 ;
			 END 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (
				  PimAttributeId            INT,
				  AttributeDefaultValueCode VARCHAR(100),
				  IsEditable                BIT,
				  AttributeDefaultValue     NVARCHAR(MAX),
				  DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (
				  PimCategoryAttributeValueId INT,
				  PimCategoryId               INT,
				  CategoryValue               NVARCHAR(MAX),
				  AttributeCode               VARCHAR(300),
				  PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (
				  RowId     INT IDENTITY(1, 1),
				  LocaleId  INT,
				  IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (
				  PimCategoryId       INT,
				  PimParentCategoryId INT,
				  DisplayOrder        INT,
				  ActivationDate      DATETIME,
				  ExpirationDate      DATETIME,
				  CategoryName        NVARCHAR(MAX),
				  ProfileId           VARCHAR(MAX),
				  IsActive            BIT,
				  PimCategoryHierarchyId INT,
				  ParentPimCategoryHierarchyId INT,
				  PublishCatalogId INT,
				  PimCatalogId  INT,
				  VersionId INT  ,
				  CategoryCode  NVARCHAR(MAX)          
			 );
             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
			 
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;

             INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId,
			 PublishCatalogId,PimCatalogId,VersionId)
			 --select @PimCategoryId, NULL , NULL , NULL , NULL ,NULL , NULL ,NULL 
			 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId,
			 PublishCatalogId,PCI.PimCatalogId,VersionId
			 FROM ZnodePimCategoryHierarchy AS ZPCH 
			 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
			 Inner join @TBL_PublishCatalogId PCI on ZPCH.PimCatalogId = PCI.PimCatalogId 
			 WHERE ZPCH.PimCategoryId = @PimCategoryId ; 

			 MERGE INTO ZnodePublishCategory TARGET USING 
			 ( Select PC.PimCategoryId,
					  PC.PimCategoryHierarchyId,
					  PC.PimParentCategoryId,
					  PC.ParentPimCategoryHierarchyId,
					  PC.PublishCatalogId
					  FROM @TBL_PimCategoryIds PC ) 
			 SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = SOURCE.PublishCatalogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
				TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,
			 PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             
			 WHEN NOT MATCHED THEN 
			 INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			 ,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,SOURCE.PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)

				OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			     	    
			 -- here update the publish parent category id
            UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
			FROM ZnodePublishCategory ZPC
            INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			WHERE ZPC.PublishCatalogId = TBPC.PublishCatalogId 
			AND TBPC.PublishCatalogId  in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL AND 
			ZPC.PimCategoryId = @PimCategoryId  ;

			UPDATE a
			SET  a.PublishParentCategoryId = b.PublishCategoryId
			FROM ZnodePublishCategory a 
			INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
			WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
			AND a.PublishCatalogId = b.PublishCatalogId AND b.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
			AND a.PimCategoryId = @PimCategoryId 
			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
			 --INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;
			
		     SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId	 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281

					--select * from @TBL_AttributeValue



                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId in (Select PublishCatalogId from @TBL_PublishCatalogId)
					   FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

                     WITH Cte_CategoryProfile
                     AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
					 FROM ZnodeProfileCatalog ZPC 
					 INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
                        AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
					   FROM ZnodePimCategoryHierarchy ZPCC 
					   WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
					   WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId in (Select PimCatalogId from @TBL_PublishCatalogId)
					   AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId))


					 UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )
					 
					 --select * from @TBL_PimCategoryIds

					 --select * from @TBL_AttributeValue
					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369


					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
					 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
					 FROM @TBL_PimCategoryIds TBC
                     INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode= SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT TBC.VersionId,TBPC.PublishCategoryId ZnodeCategoryId,TBC.PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'')
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId))
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId in  (Select PublishCatalogId from @TBL_PublishCatalogId) )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),


                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+
					  ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,TBAV.CategoryValue AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

						
                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;

                  
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;
	
			Select PublishCategoryId ,VersionId	, PimCatalogId	, LocaleId,PublishCatalogId
			into #OutPublish from @TBL_PublishCatalogId CLI CROSS JOIN @TBL_CategoryXml  
			--group by PimCatalogId,VersionId,PublishCategoryId

			Alter TABLE #OutPublish ADD Id int Identity 
			SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
			 --SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
			SET @Counter =1 
            WHILE @Counter <= @MaxId -- Loop on Locale id 
            BEGIN
				SELECT @VersionId = VersionId  ,
				@PublishCategoryId = PublishCategoryId 
				from #OutPublish where ID = @Counter

				SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
				where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 
	
				IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
				BEGIN
					SET @ExistingPublishCategoryId  = @ExistingPublishCategoryId + ',' +  Convert(nvarchar(100),@PublishCategoryId )
					UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
					ModifiedDate = @GetDate
					WHERE PublishCatalogLogId = @VersionId;
				END
				DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
				SET @Counter  = @Counter  + 1  
			END
           	Select distinct 
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCategoryId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PublishCategoryId,
			SUBSTRING(( SELECT Distinct ',' + CAST(VersionId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) VersionId,	
			SUBSTRING(( SELECT Distinct ',' + CAST(PublishCatalogId	 AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) PimCatalogId,
			SUBSTRING(( SELECT Distinct ',' + CAST(LocaleId AS VARCHAR(50)) FROM #OutPublish CLO
			FOR XML PATH('')), 2, 4000) LocaleId
			from #OutPublish
			--group by PimCatalogId,VersionId,PublishCategoryId

			--Select PublishCategoryId ,VersionId	, PimCatalogId, LocaleId  from #OutPublish 

			Select CategoryXml from @TBL_CategoryXml 

			SELECT CategoryCode FROM @TBL_PimCategoryIds
			GROUP BY CategoryCode

			UPDATE ZnodePimCategory	SET IsCategoryPublish = 1 WHERE PimCategoryId = @PimCategoryId 

			Commit TRAN GetPublishCategory;
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0 -- Publish Falies 
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchTriggerItemRuleDetails')
BEGIN 
	DROP PROCEDURE Znode_GetSearchTriggerItemRuleDetails
END
GO
CREATE PROCEDURE [dbo].[Znode_GetSearchTriggerItemRuleDetails]
(
	@Keyword nvarchar(100) = '',
	@PublishCatalogId int
)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY

	DECLARE @GetDate DATETIME= dbo.Fn_GetDate()

		;WITH cte_Trigger AS
		(
			SELECT DISTINCT ZSCR.SearchCatalogRuleId, ZSTR.SearchTriggerRuleId, ZSTR.SearchTriggerValue, ZSTR.SearchTriggerCondition,ZSCR.IsItemForAll
			FROM ZnodeSearchCatalogRule ZSCR 
			INNER JOIN ZnodeSearchTriggerRule ZSTR ON ZSCR.SearchCatalogRuleId = ZSTR.SearchCatalogRuleId 
			WHERE ZSCR.PublishCatalogId = @PublishCatalogId AND ZSCR.IsGlobalRule = 0 AND IsPause <> 1
			AND CAST(@GetDate AS DATE) BETWEEN CAST(ZSCR.StartDate AS DATE) AND ISNULL(ZSCR.EndDate,'9999-01-01')
		)
		,cte_PresentCount as
		(
			SELECT CT.SearchCatalogRuleId, CT.SearchTriggerRuleId,CT.IsItemForAll,Count(1) Cnt
			FROM cte_Trigger CT 
			CROSS APPLY Dbo.Split( CT.SearchTriggerValue ,' ') ff
			WHERE (( CT.SearchTriggerCondition='Contains' AND EXISTS (SELECT 1 FROM  dbo.Split(@KeyWord,' ') CK WHERE CK.Item like '%'+ff.Item+'%'  ))
					--OR ( CT.SearchTriggerCondition='Is' AND EXISTS (SELECT 1 FROM dbo.Split(@KeyWord,' ') CK1 WHERE CK1.Item like  ff.Item   ))
					OR ( CT.SearchTriggerCondition='Is' AND CT.SearchTriggerValue = @KeyWord ))
			GROUP BY CT.SearchCatalogRuleId, CT.SearchTriggerRuleId,CT.IsItemForAll
		)
		SELECT DISTINCT CPC.SearchCatalogRuleId,ZSIR.SearchItemKeyword, ZSIR.SearchItemCondition, ZSIR.SearchItemValue, ZSIR.SearchItemBoostValue, CPC.IsItemForAll
		FROM cte_PresentCount CPC
		INNER JOIN ZnodeSearchItemRule ZSIR ON CPC.SearchCatalogRuleId = ZSIR.SearchCatalogRuleId 
		WHERE EXISTS (SELECT 1 FROM cte_Trigger CT WHERE CT.SearchTriggerRuleId=CPC.SearchTriggerRuleId 
		AND  ((CT.IsItemForAll=0) OR (CT.IsItemForAll=1 and ( len(CT.SearchTriggerValue)- len(replace(CT.SearchTriggerValue,' ',''))+1) = CPC.Cnt )))
		UNION ALL
		SELECT DISTINCT ZSCR.SearchCatalogRuleId,ZSIR.SearchItemKeyword, ZSIR.SearchItemCondition, ZSIR.SearchItemValue, ZSIR.SearchItemBoostValue, ZSCR.IsItemForAll 
		FROM ZnodeSearchCatalogRule ZSCR 
		LEFT JOIN ZnodeSearchTriggerRule ZSTR ON ZSCR.SearchCatalogRuleId = ZSTR.SearchCatalogRuleId 
		INNER JOIN ZnodeSearchItemRule ZSIR ON ZSCR.SearchCatalogRuleId = ZSIR.SearchCatalogRuleId 
		WHERE ZSCR.PublishCatalogId = @PublishCatalogId AND ZSCR.IsGlobalRule = 1 
		AND CAST( @GetDate AS DATE ) BETWEEN CAST( ZSCR.StartDate AS DATE ) AND ISNULL( ZSCR.EndDate,'9999-01-01' ) 
		AND IsPause <> 1

	END TRY
	BEGIN CATCH
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSearchTriggerItemRuleDetails @Keyword = '+@Keyword+' @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetSearchTriggerItemRuleDetails',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSearchTriggerItemRuleForEdit')
BEGIN 
	DROP PROCEDURE Znode_GetSearchTriggerItemRuleForEdit
END
GO
CREATE PROCEDURE [dbo].[Znode_GetSearchTriggerItemRuleForEdit]
(
	@SearchCatalogRuleId  Int
)
AS
/*
	exec [Znode_GetSearchTriggerItemRuleForEdit] @SearchCatalogRuleId = 6
*/
BEGIN
	
	SET NOCOUNT ON;

	BEGIN TRY
		----Getting Search Catalog Rule Data
		SELECT ZSCR.SearchCatalogRuleId, ZSCR.PublishCatalogId,PC.CatalogName,	ZSCR.RuleName,	ZSCR.StartDate,	ZSCR.EndDate, ZSCR.IsTriggerForAll, ZSCR.IsItemForAll,	ZSCR.IsGlobalRule, ZSCR.IsPause
		FROM ZnodeSearchCatalogRule ZSCR
		INNER Join ZnodePublishCatalog ZPC on ZSCR.PublishCatalogId = ZPC.PublishCatalogId
		INNER JOIN ZnodePimCatalog PC on ZPC.PimCatalogId = PC.PimCatalogId
		WHERE SearchCatalogRuleId = @SearchCatalogRuleId 

		----Getting Search Trigger Rule Data
		SELECT ZSTR.SearchTriggerRuleId, ZSTR.SearchCatalogRuleId, ZSTR.SearchTriggerKeyword, ZSTR.SearchTriggerCondition, ZSTR.SearchTriggerValue 
		FROM ZnodeSearchTriggerRule ZSTR 
		WHERE ZSTR.SearchCatalogRuleId = @SearchCatalogRuleId 

		----Getting Search Item Rule Data
		SELECT ZSIR.SearchItemRuleId, ZSIR.SearchCatalogRuleId, ZSIR.SearchItemKeyword, ZSIR.SearchItemCondition, ZSIR.SearchItemValue, ZSIR.SearchItemBoostValue
		FROM ZnodeSearchItemRule ZSIR
		WHERE ZSIR.SearchCatalogRuleId = @SearchCatalogRuleId 

	 END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			         @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
					 @ErrorLine VARCHAR(100)= ERROR_LINE(), 
					 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryHierarchy @SearchCatalogRuleId = '+CAST(@SearchCatalogRuleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCategoryHierarchy',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSeoDetails')
BEGIN 
	DROP PROCEDURE Znode_GetSeoDetails
END
GO
CREATE PROCEDURE [dbo].[Znode_GetSeoDetails]
(   @SeoCode    NVARCHAR(4000) = '',
	@SeoType  NVARCHAR(200),
	@LocaleId INT,
	@PortalId INT=0)
AS 
   /*
     Summary:- This Procedure is used to get the Seo Detials on the bassis of seo type  
     Unit Testing 
     EXEC Znode_GetSeoDetails 1,'Category'
	 Znode_GetSeoDetails  @SeoId=null,@SeoType='Category',@LocaleId=1,@PortalId=1
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_SeoId TABLE(SeoCode NVARCHAR(4000));

             INSERT INTO @TBL_SeoId(SeoCode)
			 SELECT item FROM dbo.Split(@SeoCode, ',') SP;

            ; WITH Cte_SeoDetailsIds
              AS (SELECT ZCSD.CMSSEODetailId, SEOTitle,SEOKeywords,SEOURL,ZCSD.ModifiedDate,ZCSDL.SEODescription,MetaInformation,IsRedirect,
              CMSSEODetailLocaleId,LocaleId, ZCSD.IsPublish,ZCSD.SEOCode FROM ZnodeCMSSEODetail AS ZCSD 
              INNER JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = @SeoType)                                                   
              INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId)
              WHERE LocaleId IN(@LocaleId, @DefaultLocaleId) AND  (ZCSD.PortalId= @PortalId OR @PortalId = 0 )
              AND( EXISTS (SELECT TOP 1 1 FROM @TBL_SeoId TBSD WHERE TBSD.SeoCode = ZCSD.SeoCode) OR @SeoCode = '' )  )

            ,Cte_SeoDetailsFirstLocale
             AS (SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
             ,IsPublish,SEOCode FROM Cte_SeoDetailsIds WHERE LocaleId = @LocaleId)

            ,Cte_SeoDetailDefaultLocale
				AS (
				SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
				,IsPublish,SEOCode FROM Cte_SeoDetailsFirstLocale
				UNION ALL
				SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
				,IsPublish,SEOCode FROM Cte_SeoDetailsIds CTSD
				WHERE LocaleId = @DefaultLocaleId
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_SeoDetailsFirstLocale CTSDL WHERE CTSDL.CMSSEODetailId = CTSD.CMSSEODetailId))

        SELECT CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId
        ,Case When Isnull(IsPublish ,0 ) = 0 then 'Draft' ELSE 'Published' END   PublishStatus,SEOCode
		 FROM Cte_SeoDetailDefaultLocale;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSeoDetails @SeoCode = '+@SeoCode+',@SeoType='+@SeoType+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSeoDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetSeoDetailsForPublish')
BEGIN 
	DROP PROCEDURE Znode_GetSeoDetailsForPublish
END
GO
CREATE PROCEDURE [dbo].[Znode_GetSeoDetailsForPublish]
(   
	@PortalId INT=0,
	@IsBrand  Bit = 0  ,
	@SeoCode    NVARCHAR(4000) = '',
	@SeoType  NVARCHAR(200) = ''
)
AS 
   /*
     Summary:- This Procedure is used to get the Seo Detials on the bassis of Portal 
     Unit Testing 
	 Znode_GetSeoDetailsForPublish @PortalId=0, @IsBrand=0, @SeoId = '14',@SeoType = 'Product'
   */
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_SeoId TABLE(SEOCode NVARCHAR(4000));

			 INSERT INTO @TBL_SeoId(SEOCode)
			 SELECT item FROM dbo.Split(@SeoCode, ',') SP;

			 ;With Cte_SeoDetails AS
			 (
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, Case When Isnull(ZCSD.IsPublish ,0 ) = 0 then 'Draft' ELSE 'Published' END AS PublishStatus,ZCSD.SEOCode 
				FROM ZnodeCMSSEODetail AS ZCSD 
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                 
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE (ZCSD.PortalId= @PortalId OR @PortalId = 0 ) AND ZCST.Name <> 'Brand'
				AND EXISTS ( SELECT * FROM ZnodeLocale ZL WHERE ZL.LocaleId = ZCSDL.LocaleId AND IsActive = 1 )
				AND( EXISTS (SELECT TOP 1 1 FROM @TBL_SeoId TBSD WHERE TBSD.SEOCode = ZCSD.SEOCode) OR @SeoCode = '' )
				AND ( ZCST.Name = @SeoType OR @SeoType = '' ) 
				UNION ALL
				SELECT ZCSD.PortalId, ZCSD.CMSSEODetailId, ZCSDL.SEOTitle, ZCSDL.SEOKeywords, lower(ZCSD.SEOUrl) as SEOUrl,ZCSD.ModifiedDate,ZCSDL.SEODescription, ZCSD.MetaInformation,ZCSD.IsRedirect,
					   ZCSDL.CMSSEODetailLocaleId, ZCSDL.LocaleId, ZCSD.CMSSEOTypeId, ZCST.Name AS SEOTypeName, Case When Isnull(ZCSD.IsPublish ,0 ) = 0 then 'Draft' ELSE 'Published' END AS  PublishStatus,ZCSD.SEOCode 
				FROM ZnodeCMSSEODetail AS ZCSD 
				INNER JOIN ZnodeCMSSEOType AS ZCST ON ( ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId )                                                  
				INNER JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON ( ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId )
				WHERE @IsBrand = 1 AND ZCST.Name = 'Brand'
				AND EXISTS ( SELECT * FROM ZnodeLocale ZL WHERE ZL.LocaleId = ZCSDL.LocaleId AND IsActive = 1 )
				AND( EXISTS (SELECT TOP 1 1 FROM @TBL_SeoId TBSD WHERE TBSD.SEOCode = ZCSD.SEOCode) OR @SeoCode = '' )
				AND ( ZCST.Name = @SeoType OR @SeoType = '' ) 
			)
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, IsRedirect, CMSSEODetailLocaleId, LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus,SEOCode   
			FROM Cte_SeoDetails 
			UNION ALL
			SELECT PortalId, CMSSEODetailId, SEOTitle, SEOKeywords, SEOUrl, SEODescription, MetaInformation, IsRedirect, CMSSEODetailLocaleId, ZL.LocaleId, CMSSEOTypeId, SEOTypeName, PublishStatus,SEOCode   
			FROM Cte_SeoDetails CSD
			LEFT JOIN ZnodeLocale ZL ON IsActive = 1 AND IsDefault = 0 --ZL.LocaleId = CSD.LocaleId
			WHERE 
			NOT EXISTS( SELECT * FROM Cte_SeoDetails CSD1 
			            INNER JOIN ZnodeLocale ZL1 ON CSD1.LocaleId = ZL1.LocaleId AND ZL1.IsActive = 1 AND ZL1.IsDefault = 0
						WHERE CSD.CMSSEOTypeId = CSD1.CMSSEOTypeId AND CSD.SEOCode = CSD1.SEOCode AND ZL.LocaleId = CSD1.LocaleId )
			AND EXISTS ( SELECT * FROM ZnodeLocale ZL WHERE ZL.LocaleId = CSD.LocaleId AND IsActive = 1 AND IsDefault = 1 )

			
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		    SET @Status = 0;
		    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetSeoDetailsForPublsh @PortalId = '+CAST(@PortalId AS VARCHAR(10))+',@IsBrand ='+CAST(@IsBrand AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
            SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
            EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetSeoDetails',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ImportSEODetails')
BEGIN 
	DROP PROCEDURE Znode_ImportSEODetails
END
GO
CREATE PROCEDURE [dbo].[Znode_ImportSEODetails](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertSEODetails TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max), 
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit,
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFProducts TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max),
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFCategory TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max),
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		DECLARE @InsertSEODetailsOFBrand TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ImportType varchar(20), Code nvarchar(300), 
			IsRedirect	bit	,MetaInformation	nvarchar(max),PortalId	int	,SEOUrl	nvarchar(max),IsActive bit,
			SEOTitle	nvarchar(max),SEODescription	nvarchar(max),SEOKeywords	nvarchar(max), 
			RedirectFrom nvarchar(max),RedirectTo nvarchar(max), EnableRedirection bit, 
			GUID nvarchar(400)
			--Index Ind_ImportType (ImportType),Index Ind_Code (Code)
		);

		
		DECLARE @InsertedZnodeCMSSEODetail TABLE
		( 
			CMSSEODetailId int , SEOCode Varchar(4000), CMSSEOTypeId int
		);
		
		--SET @SSQL = 'Select RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;
		SET @SSQL = 'Select RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;

		INSERT INTO @InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii 
			   where ii.SEOURL in (Select ISD.SEOURL from @InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 ) 

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		--	   FROM @InsertSEODetails AS ii 
		--	   where ii.RedirectFrom = ii.RedirectTo 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '35', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii
			   WHERE ltrim(rtrim(isnull(ii.SEOUrl,''))) like '% %' -----space not allowed



		DELETE FROM @InsertSEODetails
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);
		
		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Product'' ';
		INSERT INTO @InsertSEODetailsOFProducts(  RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation	,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Category'' ';
		INSERT INTO @InsertSEODetailsOFCategory( RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection	, GUID )
		EXEC sys.sp_sqlexec @SSQL;

		SET @SSQL = 'Select RowNumber,' +@CsvColumnString +',GUID  FROM '+@TableName
		+ ' Where ImportType = ''Brand'' ';
		INSERT INTO @InsertSEODetailsOFBrand( RowNumber , ImportType , Code , 
			IsRedirect	,MetaInformation	,SEOUrl	,IsActive ,
			SEOTitle	,SEODescription	,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection	, GUID )
		EXEC sys.sp_sqlexec @SSQL;

	    -- start Functional Validation 
		--1. Product
		--2. Category
		--3. Content Page
		--4. Brand
		-----------------------------------------------

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetails AS ii
			   WHERE ii.ImportType NOT in 
			   (
				   Select NAME from ZnodeCMSSEOType where NAME <> 'Content Page'
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFProducts AS ii
			   WHERE ii.CODE NOT in 
			   (
					SELECT ZPAVL.AttributeValue
					FROM ZnodePimAttributeValue ZPAV 
					inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
					inner join ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId
					Where ZPA.AttributeCode = 'SKU'
			   )  AND ImportType = 'Product';


		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFCategory AS ii
			   WHERE ii.CODE NOT in 
			   (
					SELECT ZPCAVL.CategoryValue
					FROM ZnodePimCategoryAttributeValue ZPCAV 
					INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId
					INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId
					Where ZPA.AttributeCode = 'CategoryCode'
			   )  AND ImportType = 'Category';

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '19', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertSEODetailsOFBrand AS ii
			   WHERE ii.CODE NOT in 
			   (
				   Select BrandCode from ZnodeBrandDetails 
			   )  AND ImportType = 'Brand';
		
		
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM @InsertSEODetailsOFProducts
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		DELETE FROM @InsertSEODetailsOFCategory
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		DELETE FROM @InsertSEODetailsOFBrand
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		-- Insert Product Data 
		If Exists (Select top 1 1 from @InsertSEODetailsOFProducts)
		Begin
			Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,
						   ZCSD.MetaInformation =  ISD.MetaInformation,
						   ZCSD.SEOUrl=  ISD.SEOUrl
			FROM 
			@InsertSEODetailsOFProducts ISD  
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOCode = ISD.Code
			where  ZCSD.PortalId  =@PortalId;
			
			Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle
							,ZCSDL.SEODescription = ISD.SEODescription
							,ZCSDL.SEOKeywords= ISD.SEOKeywords
 			FROM 
			@InsertSEODetailsOFProducts ISD  
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOCode = ISD.Code
			INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId
			where  ZCSD.PortalId = @PortalId AND ZCSDL.LocaleId = @LocaleId; 

			Delete from @InsertedZnodeCMSSEODetail
			INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
			OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail		
			Select Distinct 1,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate from 
			@InsertSEODetailsOFProducts ISD  
			where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = 1 AND ZCSD.SEOCode = ISD.Code and  ZCSD .PortalId =@PortalId   );
		
        	insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate 
			from @InsertedZnodeCMSSEODetail IZCSD 
			INNER JOIN @InsertSEODetailsOFProducts ISD ON IZCSD.SEOCode = ISD.Code 

			-----RedirectUrlInsert
			INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,getdate() as CreatedDate,2 as ModifiedBy,getdate() as ModifiedDate
			from @InsertSEODetailsOFProducts
			where IsRedirect = 1
		END

		-- Insert Category Data 
		If Exists (Select top 1 1 from @InsertSEODetailsOFCategory)
		Begin

			Update ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,
						   ZCSD.MetaInformation =  ISD.MetaInformation,
						   ZCSD.SEOUrl=  ISD.SEOUrl
			FROM 
			@InsertSEODetailsOFCategory ISD  
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOCode = ISD.Code
			where  ZCSD.PortalId  =@PortalId;
			
			Update ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle
							,ZCSDL.SEODescription = ISD.SEODescription
							,ZCSDL.SEOKeywords= ISD.SEOKeywords
 			FROM 
			@InsertSEODetailsOFCategory ISD  
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOCode = ISD.Code
			INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId
			where  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId; 

			Delete from @InsertedZnodeCMSSEODetail

			INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
			OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail		
			Select Distinct 2,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate 
			from @InsertSEODetailsOFCategory ISD  
			where NOT EXISTS (Select TOP 1 1 from ZnodeCMSSEODetail ZCSD where ZCSD.CMSSEOTypeId = 2 AND ZCSD.SEOCode  = ISD.Code AND ZCSD.PortalId = @PortalId );

			insert into ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			Select Distinct IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate 
			from @InsertedZnodeCMSSEODetail IZCSD 
			INNER JOIN @InsertSEODetailsOFCategory ISD ON IZCSD.SEOCode = ISD.Code 
			WHERE IZCSD.CMSSEOTypeId =2  

			-----RedirectUrlInsert
			INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT RedirectFrom,RedirectTo,EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,getdate() as CreatedDate,2 as ModifiedBy,getdate() as ModifiedDate
			FROM @InsertSEODetailsOFProducts SDP
			WHERE IsRedirect = 1
		END
										 
		--select 'End'
		--      SET @Status = 1;
		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 2 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		UPDATE ZnodeImportProcessLog
		  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		ROLLBACK TRAN A;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateContentPage')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateContentPage
END
GO
CREATE PROCEDURE [dbo].[Znode_InsertUpdateContentPage]
(   @ContentPageXML XML,
    @Status         BIT OUT,
    @UserId         INT)
AS 
   /* 
    Summary : To Insert content page details with their referance table 
    If CMSContentPagesId =0 then insert else update 
    Unit Testing 
    <ContentPageModel>
      <CMSContentPagesId>0</CMSContentPagesId>
      <PortalId>2</PortalId>
      <CMSContentPageGroupId>2</CMSContentPageGroupId>
      <ProfileIds>5,4,1</ProfileIds>
      <CMSTemplateId>1</CMSTemplateId>
      <LocaleId>1</LocaleId>
      <CMSContentPagesLocaleId>0</CMSContentPagesLocaleId>
      <PageTitle>dsfdsfsd</PageTitle>
      <PageName>fsdfsdfd</PageName>
      <SEOTitle>fdsfds</SEOTitle>
      <SEODescription>fdsfdsf</SEODescription>
      <SEOKeywords>fdsfsd</SEOKeywords>
      <SEOUrl>dsfdsf</SEOUrl>
      <MetaInformation>dsfsdfsd</MetaInformation>
      <IsRedirect>false</IsRedirect>
      <IsConfigurable>false</IsConfigurable>
      <ActivationDate>2016-08-04</ActivationDate>
      <ExpirationDate>2016-08-12</ExpirationDate>
    </ContentPageModel>
  
	*/
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             DECLARE @Profiledata TABLE(ProfileId INT);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @DefaultlocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @NewCMSContentPagesId INT;
             DECLARE @CmsSeoDetailId INT;
             DECLARE @InsertContentPage TABLE
             (CMSContentPagesId       INT,
              PortalId                INT,
              CMSContentPageGroupId   INT,
              ProfileIds              VARCHAR(MAX),
              CMSTemplateId           INT,
              LocaleId                INT,
              CMSContentPagesLocaleId INT,
              PageTitle               NVARCHAR(200),
              PageName                NVARCHAR(200),
              SEOTitle                NVARCHAR(MAX),
              SEODescription          NVARCHAR(MAX),
              SEOKeywords             NVARCHAR(MAX),
              SEOUrl                  NVARCHAR(MAX),
              MetaInformation         NVARCHAR(MAX),
              IsRedirect              BIT,
              IsActive                BIT,
              ActivationDate          Datetime NULL ,
              ExpirationDate          Datetime NULL,
			  IsPublished			  BIT --
             );
             INSERT INTO @InsertContentPage
                    SELECT Tbl.Col.value('CMSContentPagesId[1]', 'INT'),
                           Tbl.Col.value('PortalId[1]', ' INT '),
                           Tbl.Col.value('CMSContentPageGroupId[1]', 'INT'),
                           Tbl.Col.value('ProfileIds[1]', 'VARCHAR(max)'),
                           Tbl.Col.value('CMSTemplateId[1]', 'INT'),
                           Tbl.Col.value('LocaleId[1]', 'INT'),
                           Tbl.Col.value('CMSContentPagesLocaleId[1]', 'INT '),
                           Tbl.Col.value('PageTitle[1]', 'NVARCHAR(200)'),
                           Tbl.Col.value('PageName[1]', 'NVARCHAR(300)'),
                           Tbl.Col.value('SEOTitle[1]', 'NVARCHAR(max)'),
                           Tbl.Col.value('SEODescription[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('SEOKeywords[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('SEOUrl[1]', 'VARCHAR(300)'),
                           Tbl.Col.value('MetaInformation[1]', 'NVARCHAR(MAX)'),
                           Tbl.Col.value('IsRedirect[1]', 'BIT'),
                           Tbl.Col.value('IsActive[1]', 'BIT'),
					  nullif(Tbl.Col.value('ActivationDate[1]', 'Datetime'), '1900-01-01 00:00:00.000'),
					  nullif(Tbl.Col.value('ExpirationDate[1]', 'Datetime'), '1900-01-01 00:00:00.000'),
					       Tbl.Col.value('IsPublished[1]', 'BIT')
                    FROM @ContentPageXML.nodes('/ContentPageModel') AS Tbl(Col);
             SET @NewCMSContentPagesId = 0;
             UPDATE @InsertContentPage
               SET
                   ActivationDate = NULL
             WHERE ISNULL(RTRIM(LTRIM(ActivationDate)), '') = '';
             UPDATE @InsertContentPage
               SET
                   ExpirationDate = NULL
             WHERE ISNULL(LTRIM(RTRIM(ExpirationDate)), '') = '';
             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM @InsertContentPage
                 WHERE CMSContentPagesId = 0
             )
                 BEGIN
                     INSERT INTO ZnodeCMSContentPages
                     (PortalId,
                      CMSTemplateId,
                      PageName,
                      ActivationDate,
                      ExpirationDate,
                      IsActive,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT PortalId,
                                   CMSTemplateId,
                                   PageName,
                                   ActivationDate,
                                   ExpirationDate,
                                   IsActive,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage;
                     SET @NewCMSContentPagesId = @@Identity;
                     INSERT INTO ZnodeCMSContentPagesLocale
                     (CMSContentPagesId,
                      LocaleId,
                      PageTitle,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @NewCMSContentPagesId,
                                   LocaleId,
                                   PageTitle,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage;
                     INSERT INTO ZNODECMSSEODETAIL
                     (CMSSEOTYPEID,
                      SEOID,
                      ISREDIRECT,
                      MetaInformation,
                      PortalId,
                      SEOUrl,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
					  IsPublish,
					  SEOCode
                     )
                            SELECT b.CMSSEOTypeId,
                                   NULL,
                                   IsRedirect,
                                   MetaInformation,
                                   PortalId,
                                   SEOUrl,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate,
								   --case when a.SEOUrl IS NULL OR a.SEOUrl = ''  then 0 else 1 end,
								   a.IsPublished,
								   PageName
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSSEOType AS b ON(name = 'Content Page');
                     SET @CmsSeoDetailId = SCOPE_IDENTITY();
                     INSERT INTO ZnodeCMSSEODetailLocale
                     (CMSSEODetailId,
                      LocaleId,
                      SEOTitle,
                      SEODescription,
                      SEOKeywords,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @CmsSeoDetailId,
                                   @DefaultlocaleId,
                                   SEOTitle,
                                   SEODescription,
                                   SEOKeywords,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSSEOType AS b ON(name = 'Content Page');
                     INSERT INTO @Profiledata
                            SELECT item
                            FROM dbo.Split
                            (
                            (
                                SELECT TOP 1 ProfileIds
                                FROM @InsertContentPage
                            ), ','
                            );
                     INSERT INTO ZnodeCMSContentPagesProfile
                     (CMSContentPagesId,
                      ProfileId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT @NewCMSContentPagesId,
                                   s.ProfileId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 CROSS APPLY @Profiledata AS s;
                     INSERT INTO ZnodeCMSContentPageGroupMapping
                     (CMSContentPageGroupId,
                      CMSContentPagesId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPageGroupId,
                                   @NewCMSContentPagesId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a;
                     SELECT ZCP.CMSContentPagesId,
                            ZCP.PortalId,
                            ZCP.CMSTemplateId,
                            ZCCPL.PageTitle,
                            ZCP.PageName,
                            ZCP.ActivationDate,
                            ZCP.ExpirationDate,
                            ZSDl.SEOTitle,
                            ZSDl.SEODescription,
                            ZSDl.SEOKeywords,
                            ZSD.SEOUrl,
                            ZSD.IsRedirect,
                            ZSD.MetaInformation,
                            ICP.ProfileIds
                     FROM ZnodeCMSContentPages AS ZCP
                          INNER JOIN ZnodeCMSSEODetail AS ZSD ON ZCP.PageName = ISNULL(ZSD.SEOCode,'')
                          INNER JOIN ZnodeCMSSEODetailLocale AS ZSDl ON(ZSDL.CMSSEODetailId = ZSD.CMSSEODetailId
                                                                        AND ZSDl.LocaleId = @DefaultlocaleId)
                          INNER JOIN ZnodeCMSSEOType AS ZCST ON ZCST.CMSSEOTypeId = ZSD.CMSSEOTypeId
                                                                AND ZCST.name = 'Content Page'
                          INNER JOIN @InsertContentPage AS ICP ON ZCP.PageName = ICP.PageName
                          INNER JOIN ZnodeCMSContentPagesLocale AS ZCCPL ON ZCCPL.CMSContentPagesId = ZCP.CMSContentPagesId
                                                                            AND ZCCPL.LocaleId = @DefaultlocaleId
                     WHERE ZCP.CMSContentPagesId = @NewCMSContentPagesId;
                 END;
             ELSE
                 BEGIN
                     UPDATE ZCCP
                       SET
                           ZCCP.PortalId = ICP.PortalId,
                           ZCCP.CMSTemplateId = ICP.CMSTemplateId,
                           ZCCP.PageName = ICP.PageName,
                           ZCCP.ActivationDate = ICP.ActivationDate,
                           ZCCP.ExpirationDate = ICP.ExpirationDate,
                           ZCCP.IsActive = ICP.IsActive,
                           ZCCP.ModifiedBy = @UserId,
                           ZCCP.ModifiedDate = @GetDate
                     FROM ZnodeCMSContentPages ZCCP
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId;
                     
					 UPDATE ZCCPL
                       SET
                           ZCCPL.PageTitle = ICP.PageTitle
                     FROM ZnodeCMSContentPagesLocale ZCCPL
                          INNER JOIN @InsertContentPage ICP ON ZCCPL.CMSContentPagesId = ICP.CMSContentPagesId
                                                               AND ZCCPL.LocaleId = ICP.LocaleId;
                     INSERT INTO ZnodeCMSContentPagesLocale
                     (CMSContentPagesId,
                      LocaleId,
                      PageTitle,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPagesId,
                                   LocaleId,
                                   PageTitle,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage TBICP
                            WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSContentPagesLocale ZCCPL
                                WHERE ZCCPL.CMSContentPagesId = TBICP.CMSContentPagesId
                                      AND ZCCPL.LocaleId = TBICP.LocaleId
                            );


							


                     UPDATE ZCSD
                       SET
                           ZCSD.IsRedirect = ICP.IsRedirect,
                           ZCSD.MetaInformation = ICP.MetaInformation,
                           ZCSD.SEOUrl = ICP.SEOUrl,
                           ZCSD.ModifiedBy = @UserId,
                           ZCSD.ModifiedDate = @GetDate,
						   ZCSD.IsPublish = ICP.IsPublished ,--case when ICP.SEOUrl IS NULL OR ICP.SEOUrl = ''  then 0 else 1 end,
						   ZCSD.SEOCode=ICP.PageName
                     FROM ZnodeCMSSEODetail ZCSD
                          INNER JOIN ZnodeCMSContentPages ZCCP ON ISNULL(ZCSD.SEOCode,'') = ZCCP.PageName
                          INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                             AND ZCST.Name = 'Content Page'
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId;

						     

                   
				     UPDATE ZCSDL
                       SET
                           ZCSDl.SEOTitle = ICP.SEOTitle,
                           ZCSDl.SEODescription = ICP.SEODescription,
                           ZCSDl.SEOKeywords = ICP.SEOKeywords,
                           ZCSDl.ModifiedBy = @UserId,
                           ZCSDl.ModifiedDate = @GetDate
                     FROM ZnodeCMSSEODetailLocale ZCSDL
                          INNER JOIN ZnodeCMSSEODetail ZCSD ON(ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId)
                          INNER JOIN ZnodeCMSContentPages ZCCP ON ISNULL(ZCSD.SEOCode,'') = ZCCP.PageName
                          INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                             AND ZCST.Name = 'Content Page'
                          INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId
                                                               AND ZCSDL.LocaleId = ICP.LocaleId
                                                               AND ZCSDL.LocaleId = ICP.LocaleId;
                      INSERT INTO ZnodeCMSSEODetail (CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish,SEOCode)
					   
					   SELECT  CMSSEOTypeId,NULL,IsRedirect,MetaInformation   ,PortalId ,SEOUrl ,@UserId, @GetDate, @UserId, @GetDate,
					   IsPublished, --case when TBL.SEOUrl IS NULL OR TBL.SEOUrl = ''  then 0 else 1 end
					   PageName   
             			FROM  @InsertContentPage  TBL
						LEFT JOIN ZnodeCMSSEOType ZCST   ON (ZCST.Name = 'Content Page')
						 WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSSEODetail ZCSODL
                                WHERE ZCSODL.SEOCode = TBL.PageName
                                     
                            );
					    
					 INSERT INTO ZnodeCMSSEODetailLocale
                     (CMSSEODetailId,
                      LocaleId,
                      SEOTitle,
                      SEODescription,
                      SEOKeywords,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT ZCSD.CMSSEODetailId,
                                   ICP.LocaleId,
                                   ICP.SEOTitle,
                                   ICP.SEODescription,
                                   ICP.SEOKeywords,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM ZnodeCMSSEODetail ZCSD
                                 INNER JOIN ZnodeCMSContentPages ZCCP ON ISNULL(ZCSD.SEOCode,'') = ZCCP.PageName
                                 INNER JOIN ZnodeCMSSEOType ZCST ON ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId
                                                                    AND ZCST.Name = 'Content Page'
                                 INNER JOIN @InsertContentPage ICP ON ZCCP.CMSContentPagesId = ICP.CMSContentPagesId
                            WHERE NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSSEODetailLocale ZCSODL
                                WHERE ZCSODL.CMSSEODetailId = ZCSD.CMSSEODetailId
                                      AND ZCSODL.LocaleId = ICP.LocaleId
                            );
                     INSERT INTO @Profiledata
                            SELECT item
                            FROM dbo.Split
                            (
                            (
                                SELECT TOP 1 ProfileIds
                                FROM @InsertContentPage
                            ), ','
                            );
                     DELETE FROM ZnodeCMSContentPagesProfile
                     WHERE CMSContentPagesId IN
                     (
                         SELECT CMSContentPagesId
                         FROM @InsertContentPage
                     );
                     INSERT INTO ZnodeCMSContentPagesProfile
                     (CMSContentPagesId,
                      ProfileId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT q.CMSContentPagesId,
                                   s.ProfileId,
                                @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 LEFT JOIN ZnodeCMSContentPages AS q ON(a.CMSContentPagesId = q.CMSContentPagesId)
                                 CROSS APPLY @Profiledata AS s;
                    
					 DELETE FROM ZnodeCMSContentPageGroupMapping
                     WHERE CMSContentPagesId IN
                     (
                         SELECT CMSContentPagesId
                         FROM @InsertContentPage    
                     );
                     
					 
					  
				     INSERT INTO ZnodeCMSContentPageGroupMapping
                     (CMSContentPageGroupId,
                      CMSContentPagesId,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate
                     )
                            SELECT CMSContentPageGroupId,
                                   b.CMSContentPagesId,
                                   @UserId,
                                   @GetDate,
                                   @UserId,
                                   @GetDate
                            FROM @InsertContentPage AS a
                                 INNER JOIN ZnodeCMSContentPages AS b ON(a.CMSContentPagesId = b.CMSContentPagesId AND a.pageName = b.PageName)
						    WHERE  NOT EXISTS
                            (
                                SELECT TOP 1 1
                                FROM ZnodeCMSContentPageGroupMapping ZCCPL
                                WHERE ZCCPL.CMSContentPagesId = b.CMSContentPagesId
                                      AND ZCCPL.CMSContentPageGroupId = a.CMSContentPageGroupId
                            );
						  		 
								 
								 ;
                     SELECT ZCP.CMSContentPagesId,
                            ZCP.PortalId,
                            ZCP.CMSTemplateId,
                            ZCPL.PageTitle,
                            ZCP.PageName,
                            ZCP.ActivationDate,
                            ZCP.ExpirationDate,
                            ZSDl.SEOTitle,
                            ZSDl.SEODescription,
                            ZSDl.SEOKeywords,
                            ZSD.SEOUrl,
                            ZSD.IsRedirect,
                            ZSD.MetaInformation,
                            ICP.ProfileIds
                     FROM ZnodeCMSContentPages AS ZCP
                          INNER JOIN ZnodeCMSSEODetail AS ZSD ON ZCP.PageName = ISNULL(ZSD.SEOCode,'')
                          INNER JOIN ZnodeCMSSEODetailLocale AS ZSDL ON(ZSD.CMSSEODetailId = ZSDL.CMSSEODetailId
                                                                        AND ZSDL.LocaleId = @DefaultlocaleId)
                          INNER JOIN ZnodeCMSSEOType AS ZCST ON ZCST.CMSSEOTypeId = ZSD.CMSSEOTypeId
                                                                AND ZCST.name = 'Content Page'
                          INNER JOIN @InsertContentPage AS ICP ON ZCP.CMSContentPagesId = ICP.CMSContentPagesId
                          INNER JOIN ZnodeCMSContentPagesLocale AS ZCPL ON ZCP.CMSContentPagesId = ZCPL.CMSContentPagesId
				   
						  ;
                 END;
             SET @Status = 1;
             COMMIT TRAN A;
         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE() 
             
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateContentPage @ContentPageXML = '+CAST(@ContentPageXML AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		     ROLLBACK TRAN A;
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_InsertUpdateContentPage',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_InsertUpdateSaveCartLineItemQuantity')
BEGIN 
	DROP PROCEDURE Znode_InsertUpdateSaveCartLineItemQuantity
END
GO
CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@Status bit OUT)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem_aa @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>30</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
	1259
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @SaveCartLineItemIdForGroup int= 0;
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int IDENTITY(1, 1), IsAddToCartPage int, OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute varchar(max), 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( IsAddToCartPage, OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails )
			   SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS IsAddToCartPage, Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ) AS BundleProductIds, Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ) AS ConfigurableProductIds, Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, 
			          Tbl.Col.value( 'PersonaliseValuesList[1]', 'NVARCHAR(Max)' ) AS GroupProductIds, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

		DECLARE @OmsSavedCartId int, @OmsSavedCartLineItemId int,@OmsOrderId int;

	
		DECLARE @TBL_AllProductsTypeData TABLE
		( 
			 RowId int, SequenceId int IDENTITY(1, 1), IsAddToCartPage int, ParentOmsSavedCartLineItemId int, SKU nvarchar(1000), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), CartAddOnDetails nvarchar(max), AutoAddon varchar(max), OmsOrderId int null ,IsFromAddon INT 
		);
		DECLARE @AddonProductSKU nvarchar(max)=	(SELECT TOP 1 AddOnValueIds	FROM @TBL_SavecartLineitems	), 
				@BundleProductSKU nvarchar(max)= (SELECT TOP 1 BundleProductIds	FROM @TBL_SavecartLineitems	);
		SET @OmsSavedCartId =( SELECT TOP 1 OmsSavedCartId FROM @TBL_SavecartLineitems);
		SET @OmsOrderId =( SELECT TOP 1 OmsOrderId FROM @TBL_SavecartLineitems );
		

		INSERT INTO @TBL_AllProductsTypeData( RowId, IsAddToCartPage, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, a.IsAddToCartPage, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdBundle, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.BundleProductIds, ',' ) AS q
			   WHERE a.BundleProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> '' ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, IsAddToCartPage, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId ,IsFromAddon)
			   SELECT RowID, a.IsAddToCartPage, NULL, q.Item AS SKU, a.Quantity, @OrderLineItemRelationshipTypeIdConfigurable, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.ConfigurableProductIds, ',' ) AS q
			   WHERE a.ConfigurableProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''
			   ;

		INSERT INTO @TBL_AllProductsTypeData( RowId, IsAddToCartPage, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT RowID, a.IsAddToCartPage, NULL, SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS SKU, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Quantity, @OrderLineItemRelationshipTypeIdGroup, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,0
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.GroupProductIds, ',' ) AS q
			   WHERE a.GroupProductIds IS NOT NULL
			   AND  RTRIM(LTRIM(SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1))) <> ''
			   ;
			   
		IF EXISTS
		(
			SELECT TOP 1 1	FROM @TBL_SavecartLineitems	WHERE GroupProductIds IS NOT NULL OR  ConfigurableProductIds IS NOT NULL
		)
		BEGIN
			SET @AddOnQuantity =(SELECT MAX(Quantity) FROM @TBL_AllProductsTypeData	);
		END;


		INSERT INTO @TBL_AllProductsTypeData( RowId, IsAddToCartPage, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,IsFromAddon )
			   SELECT a.RowID, a.IsAddToCartPage, NULL, q.Item AS SKU,
											   CASE
											   WHEN @AddOnQuantity = 0 THEN a.Quantity
											   ELSE @AddOnQuantity
											   END, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, AutoAddon, OmsOrderId,1
			   FROM @TBL_SavecartLineitems AS a	CROSS APPLY	dbo.Split( a.AddOnValueIds, ',' ) AS q   WHERE a.AddOnValueIds IS NOT NULL
			   AND  RTRIM(LTRIM(q.Item)) <> ''

			  
	DECLARE @Tbl_SaveCartIds TABLE
		( 
			OmsSavedCartLineItemId int, SKU nvarchar(max), RowId int,ParentOmsSavedCartLineItemId INT 
		);

	DECLARE @IsCallForUpdate BIT = 0 
	DECLARE @saveCartLineItemId TABLE (OmsSavedCartLineItemId INT,SKU NVARCHAR(2000),OmsSavedCartId INT,ChildSKU NVARCHAR(max), Sequence INT ,RowId INT Identity(1,1) )

	-- for group,bundle and configure products
	INSERT INTO @saveCartLineItemId (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,YU.SKU ,YU.Sequence 
	FROM ZnodeOmsSavedCartLineItem CLI 
																INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId)
																INNER JOIN ZnodeOmsSavedCartLineItem   YU ON (Yu.ParentOmsSavedCartLineItemId = CLI.OmsSavedCartLineItemId)
																INNER JOIN  @TBL_AllProductsTypeData tbad ON (tbad.SKU = YU.SKU )
	 WHERE CLI.ParentOmsSavedCartLineItemId IS NULL 
	

	-- for simple products
	INSERT INTO @SaveCartLineItemId  (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,NULL ,CLI.Sequence  
	FROM ZnodeOmsSavedCartLineItem CLI 
	INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId AND CLI.Sequence  = s.Sequence )
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )													
	AND CLI.ParentOmsSavedCartLineItemId IS NULL 
	
	-- for personalized products
	INSERT INTO @SaveCartLineItemId  (OmsSavedCartLineItemId,SKU,OmsSavedCartId,ChildSKU,Sequence)
	SELECT DISTINCT CLI.OmsSavedCartLineItemId,cli.SKU ,cli.OmsSavedCartId,NULL ,CLI.Sequence  
	FROM ZnodeOmsSavedCartLineItem CLI 
	INNER JOIN  @TBL_SavecartLineitems s ON (s.SKU = cli.SKU AND s.OmsSavedCartId = cli.OmsSavedCartId )
	INNER JOIN ZnodeOmsPersonalizeCartItem ZOPCI ON CLI.OmsSavedCartLineItemId = ZOPCI.OmsSavedCartLineItemId 
			AND ZOPCI.PersonalizeCode = SUBSTRING(s.PersonalisedAttribute, 1, CHARINDEX('~', s.PersonalisedAttribute)-1)
			AND ZOPCI.PersonalizeValue = SUBSTRING(s.PersonalisedAttribute, CHARINDEX('~',  s.PersonalisedAttribute)+1, 4000)
	WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_AllProductsTypeData )													
	AND CLI.ParentOmsSavedCartLineItemId IS NULL
	
		IF EXISTS (SELECT TOP  1 1 FROM @TBL_SavecartLineitems WHERE PersonalisedAttribute IS NOT NULL)
	BEGIN
	
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId   m
								CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL), ',' ) AS q
								WHERE  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) 
																																						   AND s.PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000))
																																		 
		)	THEN 0 ELSE 1 END
	END

	ELSE
		BEGIN
		
		SET @IsCallForUpdate = CASE WHEN EXISTS (SELECT TOP  1 1 FROM @saveCartLineItemId --a inner join @TBL_SavecartLineitems s on (a.sku = s.sku) where s.PersonalisedAttribute is null
		)	THEN 0 ELSE 1 END

		END
	
		UPDATE SI
		 SET  OmsSavedCartLineItemId = CASE WHEN HJRHRH.OmsSavedCartLineItemId IS NULL THEN  SL.OmsSavedCartLineItemId ELSE HJRHRH.OmsSavedCartLineItemId END 
		      ,Sequence = CASE WHEN HJRHRH.Sequence IS NULL THEN  SI.Sequence ELSE HJRHRH.Sequence END 
		 FROM @TBL_SavecartLineitems SI
		 LEFT JOIN ZnodeOmsSavedCartLineItem SL ON (SI.SKU = SL.SKU AND SI.OmsSavedCartId = SL.OmsSavedCartId AND SI.Sequence = SL.Sequence )
		 LEFT JOIN 	@saveCartLineItemId HJRHRH ON (SI.SKU = HJRHRH.SKU AND SI.OmsSavedCartId = HJRHRH.OmsSavedCartId  AND SI.Sequence = HJRHRH.RowId )
		
		----Update OmsSavedCartLineItemId for personalized product update
		UPDATE SI SET SI.OmsSavedCartLineItemId = ZOSCLI.OmsSavedCartLineItemID
		FROM @TBL_SavecartLineitems SI
		INNER JOIN ZnodeOmsSavedCartLineItem ZOSCLI ON SI.OmsSavedCartId = ZOSCLI.OmsSavedCartId AND SI.SKU=ZOSCLI.SKU
		INNER JOIN ZnodeOmsPersonalizeCartItem ZOPCI ON ZOSCLI.OmsSavedCartLineItemId = ZOPCI.OmsSavedCartLineItemId 
			AND ZOPCI.PersonalizeCode = SUBSTRING(SI.PersonalisedAttribute, 1, CHARINDEX('~', SI.PersonalisedAttribute)-1)
			AND ZOPCI.PersonalizeValue = SUBSTRING(SI.PersonalisedAttribute, CHARINDEX('~',  SI.PersonalisedAttribute)+1, 4000)

		MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING  (SELECT  DISTINCT SI.IsAddToCartPage, ISNULL(SI.OmsSavedCartLineItemId,-1) AS OmsSavedCartLineItemId,SI.SKU,SI.Quantity,SI.OrderLineItemRelationshipTypeID,SI.CustomText,SI.CartAddOnDetails,SI.Sequence,SI.AutoAddon,SI.RowID,SI.OmsOrderId 
		FROM @TBL_SavecartLineitems SI 
		WHERE (EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY WHERE TY.OmsSavedCartLineItemId = SI.OmsSavedCartLineItemId ))
		 OR (NOT EXISTS (SELECT TOP 1 1  FROM @saveCartLineItemId TY ))) SOURCE 
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND SOURCE.OmsSavedCartLineItemId = TARGET.OmsSavedCartLineItemId AND @IsCallForUpdate = 0
		WHEN MATCHED   THEN
		UPDATE 
		SET   Quantity = CASE WHEN (SOURCE.IsAddToCartPage <> 0 ) THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END ,
		 OrderLineItemRelationshipTypeID = CASE	 WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE Source.OrderLineItemRelationshipTypeID
																		 END, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.Sequence,OmsOrderId = @OmsOrderId,TARGET.AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate
																		
		WHEN NOT MATCHED  
			  THEN INSERT(ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  VALUES( NULL, @OmsSavedCartId, Source.SKU, Source.Quantity,CASE
																			WHEN Source.OrderLineItemRelationshipTypeID = 0 
																			THEN NULL
																			ELSE OrderLineItemRelationshipTypeID
																		 END, 
					 Source.CustomText, Source.CartAddOnDetails, Source.Sequence, SOURCE.OmsOrderId, SOURCE.AutoAddon, @UserId, @GetDate, @UserId, @GetDate )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
		INTO @Tbl_SaveCartIds;
	

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_SavecartLineitems TSCLI ON TSCI.SKU = TSCLI.SKU AND TSCLI.RowID = TSCLI.RowID
			CROSS APPLY dbo.split ( ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )

		
		IF EXISTS (SELECT TOP 1  1  FROM @TBL_AllProductsTypeData )
		BEGIN 
        MERGE INTO ZnodeOmsSavedCartLineItem TARGET
		USING ( SELECT a.IsAddToCartPage,b.OmsSavedCartLineItemId, @OmsSavedCartId OmsSavedCartId , a.SKU, Quantity,
																		CASE
																		WHEN OrderLineItemRelationshipTypeID = 0 THEN NULL
																		ELSE OrderLineItemRelationshipTypeID
																		END OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, SequenceId, OmsOrderId, AutoAddon,@UserId CreatedBy , @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate, a.RowId
			   FROM @TBL_AllProductsTypeData AS a
					INNER JOIN
					@Tbl_SaveCartIds AS b
					ON(a.RowId = b.RowId)
			   WHERE a.SKU IS NOT NULL AND 
					 a.SKU <> '') SOURCE
		ON TARGET.OmsSavedCartId = @OmsSavedCartId AND TARGET.SKU = Source.SKU AND @IsCallForUpdate = 0 AND Target.ParentOmsSavedCartLineItemId = source.OmsSavedCartLineItemId
		WHEN MATCHED THEN
		UPDATE 
		SET ParentOmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId  , Quantity = CASE WHEN (SOURCE.IsAddToCartPage <> 0 ) THEN Source.Quantity ELSE Target.Quantity + Source.Quantity END,
		 OrderLineItemRelationshipTypeID = 	Source.OrderLineItemRelationshipTypeID, 
																		 CustomText = Source.CustomText,CartAddOnDetails = Source.CartAddOnDetails,Sequence= Source.SequenceId,OmsOrderId = SOURCE.OmsOrderId,AutoAddon = SOURCE.AutoAddon
																		 ,CreatedBy=@UserId,CreatedDate =@GetDate ,ModifiedBy =@UserId,ModifiedDate =@GetDate


		WHEN NOT MATCHED
			  THEN INSERT ( ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, [Sequence], OmsOrderId, AutoAddon, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )

			  VALUES (SOURCE.OmsSavedCartLineItemId,SOURCE.OmsSavedCartId,SOURCE.SKU,SOURCE.Quantity,SOURCE.OrderLineItemRelationshipTypeID , SOURCE.CustomText,
			  SOURCE.CartAddOnDetails,SOURCE.SequenceId,SOURCE.OmsOrderId,SOURCE.AutoAddon,SOURCE.CreatedBy,SOURCE.CreatedDate,SOURCE.ModifiedBy, SOURCE.ModifiedDate
			  
			  )
		OUTPUT Inserted.OmsSavedCartLineItemId, Source.SKU, SOURCE.RowID,INSERTED.ParentOmsSavedCartLineItemId
			   INTO @Tbl_SaveCartIds;
			   
		 END 

			INSERT INTO ZnodeOmsSavedCartLineItemDetails ( OmsSavedCartLineItemId, OmsSavedCartId, [Key], Value, CreatedBy, CreatedDate,ModifiedBy, ModifiedDate ) 
			SELECT SCLI.OmsSavedCartLineItemId, SCLI.OmsSavedCartId, LEFT(ID.item,CHARINDEX('~',ID.item)-1) as [Key], RIGHT(ID.item, LEN(ID.item)-CHARINDEX('~',ID.item)) as Value, @UserId, @GetDate, @UserId, @GetDate
			FROM ZnodeOmsSavedCartLineItem SCLI
			INNER JOIN @Tbl_SaveCartIds TSCI ON SCLI.OmsSavedCartLineItemId = TSCI.OmsSavedCartLineItemId
			INNER JOIN @TBL_AllProductsTypeData BAR ON ( TSCI.SKU = BAR.SKU AND BAR.RowID = TSCI.RowID )
			INNER JOIN @TBL_SavecartLineitems TSCLI ON (BAR.SKU = TSCLI.SKU AND BAR.RowID = TSCLI.RowID )
			CROSS APPLY dbo.split ( TSCLI.ItemDetails, ',' ) ID 
			WHERE SCLI.OmsSavedCartId = @OmsSavedCartId AND LEFT(ID.item,CHARINDEX('~',ID.item)-1) IS NOT NULL
			AND EXISTS ( SELECT * FROM @TBL_SavecartLineitems TSCLI1 WHERE TSCLI.SKU = TSCLI.SKU AND TSCLI.RowId = TSCLI.RowId AND TSCLI.ItemDetails IS NOT NULL )
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItemDetails scd WHERE scd.OmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND scd.OmsSavedCartId = SCLI.OmsSavedCartId )
		   
			DECLARE @TBL_SaveCartConfigProduct TABLE (OmsSavedCartLineItemId INT, SKU VARCHAR(2000),RowId INT, PersonalisedAttribute NVARCHAr(max))
			    INSERT @TBL_SaveCartConfigProduct    
			    SELECT DISTINCT    ZOSCL.OmsSavedCartLineItemId   ,ZOSCL.SKU 
				,  ZOSCL.RowId , (SELECT TOP 1 PersonalisedAttribute FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID )  PersonalisedAttribute
				FROM @Tbl_SaveCartIds AS ZOSCL
				LEFT JOIN @TBL_AllProductsTypeData AS TBBR ON (ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId  )
				WHERE ( EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = ZOSCL.SKU AND TRTR.RowID = ZOSCL.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
				OR   EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData TRT WHERE SKU <> ''  AND IsFromAddon <> 1  AND TRT.RowID = ZOSCl.RowID   ) )
				AND ((ZOSCL.SKU = TBBR.SKU AND TBBR.RowID = ZOSCL.RowId) OR NOT EXISTS (SELECT TOP 1 1 FROM @TBL_AllProductsTypeData RTR WHERE SKU <> '' AND IsFromAddon <> 1   AND RTR.RowID = ZOSCl.RowID) 
				
				)
				
	INSERT INTO ZnodeOmsPersonalizeCartItem( OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT DISTINCT 
			   b.OmsSavedCartLineItemId 
			  , SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) AS Keyi, SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000) AS Value, @UserId, @GetDate, @UserId, @GetDate
			   FROM @Tbl_SaveCartIds m  
			   LEFT JOIN @TBL_SaveCartConfigProduct AS b ON( b.RowId = m.RowId )
			   CROSS APPLY	dbo.Split( (SELECT TOP 1 PersonalisedAttribute FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID ), ',' ) AS q
			   WHERE EXISTS (SELECT TOP 1 1 FROM  @TBL_SavecartLineitems TRTR   WHERE TRTR.SKU = m.SKU AND TRTR.RowID = m.RowID AND TRTR.PersonalisedAttribute IS NOT NULL )
			   AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem s WHERE s.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId )-- AND s.PersonalizeCode = SUBSTRING(q.Item, 1, CHARINDEX('~', q.Item)-1) 
																																	   --AND s.PersonalizeValue = SUBSTRING(q.Item, CHARINDEX('~', q.Item)+1, 4000))
			   ;



	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH

		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItemQuantity @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItemQuantity', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageProductList_XML')
BEGIN 
	DROP PROCEDURE Znode_ManageProductList_XML
END
GO
CREATE  PROCEDURE [dbo].[Znode_ManageProductList_XML]
(   @WhereClause						 XML,
    @Rows								 INT           = 100,
    @PageNo								 INT           = 1,
    @Order_BY			 VARCHAR(1000) = '',
    @LocaleId			 INT           = 1,
    @PimProductId		 VARCHAR(2000) = 0,
    @IsProductNotIn	 BIT           = 0,
	@IsCallForAttribute BIT		   = 0,
	@AttributeCode      VARCHAR(max ) = '' ,
	@IsDebug            Bit		   = 0 )
AS
    
/*
		  Summary:-   This Procedure is used for get product List  
				    Procedure will pivot verticle table(ZnodePimattributeValues) into horizontal table with columns 
				    ProductId,ProductName,ProductType,AttributeFamily,SKU,Price,Quantity,IsActive,ImagePath,Assortment,LocaleId,DisplayOrder
        
		  Unit Testing
		  
exec Znode_ManageProductList_XML @WhereClause=N'',@Rows=50,@PageNo=1,@Order_By=N'',@LocaleId=1,@PimProductId=N'',@IsProductNotIn=1,@IsCallForAttribute=0,@AttributeCode=''
          select * from ZnodeAttributeType  WHERE AttributeValue LIKE '%&%'
		  UPDATE VieW_lOADMANAGEpRODUCT SET  AttributeValue = 'A & B'  WHERE AttributeValue LIKE '% and %' AND PimProductId = 158
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @PimProductIds TransferId, --VARCHAR(MAX), 
					 @FirstWhereClause NVARCHAR(MAX)= '', 
					 @SQL NVARCHAR(MAX)= '' ,
					 @OutPimProductIds VARCHAR(max),
					 @ProductXML NVARCHAR(max) ;

             DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
					 ,@RowsCount INT =0 ;
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT 
			  ,PimAttributedefaultValueId INT 
             );
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			   DECLARE @TBL_AttributeDetailsLocale AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
			 DECLARE @TBL_MultiSelectAttribute TABLE (PimAttributeId INT , AttributeCode VARCHAR(600))
			
			 DECLARE @TBL_MediaAttribute TABLE (Id INT ,PimAttributeId INT ,AttributeCode VARCHAR(600) )
			 
			 DECLARE @TBL_ProductIds TABLE 
			 (
			  PimProductId INT,
			  ModifiedDate DATETIME  
			 )

			 DECLARE @FamilyDetails TABLE
             (
			  PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(Max)
             );
             DECLARE @DefaultAttributeFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT IDENTITY(1,1)
             );
          		
             IF EXISTS ( SELECT TOP 1 1 FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
			 WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights') and @IsCallForAttribute=1
                 BEGIN
                DECLARE @AttributeCodeValue TABLE (AttributeValue NVARCHAr(max),AttributeCode NVARCHAR(max))

				INSERT INTO @AttributeCodeValue(AttributeValue,AttributeCode)
				SELECT  Tbl.Col.value ( 'attributevalue[1]' , 'NVARCHAR(max)') AS AttributeValue
						 ,Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)') AS AttributeCode
				FROM @WhereClause.nodes ( '//ArrayOfWhereClauseModel/WhereClauseModel'  ) AS Tbl(Col)
				WHERE dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Brand'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  = 'Vendor'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'ShippingCostRules'
                OR dbo.Fn_Trim(REPLACE(REPLACE(Tbl.Col.value ( 'attributecode[1]' , 'NVARCHAR(max)'),' = ',''),'''',''))  =  'Highlights'
				
				
			

				SET @SQL =   
				           ';WIth Cte_DefaultValue AS (
										  SELECT AttributeDefaultValueCode , ZPDF.PimAttributeId ,FNPA.AttributeCode
										  FROM ZnodePImAttributeDefaultValue ZPDF
										  INNER JOIN [dbo].[Fn_GetProductDefaultFilterAttributes] () FNPA ON ( FNPA.PimAttributeId = ZPDF.PimAttributeId) 
										)
										, Cte_productIds AS 
										(
										  SELECT a.PimProductId, c.AttributeCode , CTDV.AttributeDefaultValueCode AttributeValue,b.ModifiedDate 
										  FROM  ZnodePimAttributeValue a
										  LEFT JOIN ZnodePimAttribute c ON(c.PimAttributeId = a.PimAttributeId)
										  LEFT JOIN ZnodePimAttributeValueLocale b ON(b.PimAttributeValueId = a.PimAttributeValueId)  
										  INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode 
										  AND EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,'','') SP WHERE SP.Item = CTDV.AttributeDefaultValueCode) )
										  Union all 
										  
											SELECT a.PimProductId,c.AttributeCode,ZPADV.AttributeDefaultValueCode AttributeValue ,a.ModifiedDate 
											FROM ZnodePimProductAttributeDefaultValue ZPPADV
											INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPPADV.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)
											LEFT JOIN ZnodePimAttributeValue a ON (a.PimAttributeValueId = ZPPADV.PimAttributeValueId )
											LEFT JOIN ZnodePimAttribute c ON ( c.PimAttributeId=a.PimAttributeId )
											INNER JOIN Cte_DefaultValue CTDV ON (CTDV.AttributeCode = c.AttributeCode )
										)										
										SELECT PimProductId ,ModifiedDate
										FROM Cte_productIds WHERE  AttributeCode '+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+' AND 
										AttributeValue '+(SELECT TOP 1 AttributeValue  FROM @AttributeCodeValue )+' GROUP BY PimProductId,ModifiedDate Order By ModifiedDate DESC ';

					 SET @Order_BY = CASE WHEN @Order_BY = '' THEN 'ModifiedDate DESC' ELSE @Order_BY END 
					 	
					 SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(max)),'<WhereClauseModel><attributecode>'+(SELECT TOP 1 AttributeCode  FROM @AttributeCodeValue )+'</attributecode><attributevalue>'+(SELECT TOP 1 AttributeValue   FROM @AttributeCodeValue )+'</attributevalue></WhereClauseModel>','') AS XML )
					
				     INSERT INTO @TBL_ProductIds ( PimProductId, ModifiedDate )
					 EXEC (@SQL);

                     INSERT INTO @ProductIdTable( PimProductId )
                     SELECT PimProductId 
					 FROM @TBL_ProductIds

                     INSERT INTO @TransferPimProductId
					 SELECT PimProductId
                     FROM @ProductIdTable
                   
				   			   --SELECT * FROM @TransferPimProductId
     DELETE FROM @ProductIdTable;
   --  SET @WhereClause = CAST(REPLACE(CAST(@WhereClause AS NVARCHAR(MAX)), @FirstWhereClause, ' 1 = 1') AS XML);
                 END
	            ELSE IF @PimProductId <> ''
			    BEGIN 
		
				 INSERT INTO @TransferPimProductId(id)
				 SELECT Item 
				 FROM dbo.split(@PimProductId,',')
			    END 

				
				
	 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 	IF @PimProductId <> ''  OR   @IsCallForAttribute=1 --OR (CAST(@WhereClause AS NVARCHAR(max))= N'' AND @Order_by <> N'' AND @AttributeCode = N'')
		BEGIN 
	 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 0 THEN 1  
					 WHEN @IsProductNotIn = 1 THEN 0 END 
		END 
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsProductNotIn,@TransferPimProductId
	 
	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	 
	  SET @SQL = 'SELECT Distinct PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 
	

	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	 
	 END 
	 ELSE 
	 BEGIN
	      
	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 
             

  			 INSERT INTO @PimProductIds ( Id  )
			 SELECT id FROM @TBL_MainList

			 DECLARE @TBL_PimProductIds transferId 
			 INSERT INTO @TBL_PimProductIds
			 SELECT id 
             FROM @PimProductIds
			 			 	
			 DECLARE @PimAttributeIds TransferId  
			 INSERT INTO @PimAttributeIds
			 SELECT PimAttributeId  
			 FROM [dbo].[Fn_GetProductGridAttributes]()
			 
			 INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue_newTesting
                  @TBL_PimProductIds,
                  @PimAttributeIds,
                  @localeId;
			
			UPDATE @TBL_AttributeDetails
			SET AttributeValue = ISNULL(AttributeValue,'')
			WHERE AttributeValue IS NULL 

----------------------------------------------------------------------------------------------------

			

		    declare @SKU SelectColumnList
			declare @TBL_Inventorydetails table (Quantity NVARCHAR(MAx),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue 
			FROM @TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'

			--select * from @SKU
			
			INSERT INTO @TBL_InventoryDetails(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU

			-- select * from @TBL_InventoryDetails

------------------------------------------------------------------------------------------------------------------------


			 INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             
		 UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
           	
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.ID PimProductId ,CASE WHEN IsProductPublish = 1 THEN   'Published' WHEN IsProductPublish = 0 THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus',NULL
			FROM @PimProductIds a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.ID)

	  INSERT INTO @TBL_AttributeDetailsLocale (PimProductId ,PimAttributeId,AttributeCode )
			SELECT  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
			FROM @TBL_AttributeDetails TBLAD 
			GROUP BY  TBLAD.PimProductId ,TBLAD.PimAttributeId,TBLAD.AttributeCode 
       
	    
					

	    UPDATE TBLPP 
		SET AttributeValue = CTDD.AttributeValue 
		FROM  @TBL_AttributeDetails CTDD 
		INNER JOIN @TBL_AttributeDetailsLocale TBLPP ON (TBLPP.PimProductId = CTDD.PimProductId AND TBLPP.AttributeCode  = CTDD.AttributeCode)
		WHERE TBLPP.AttributeValue IS NULL 

    	SET @ProductXML =  '<MainProduct>'+ STUFF( (  SELECT '<Product>'+'<PimProductId>'+CAST(TBAD.PimProductId AS VARCHAR(50))+'</PimProductId>'
																		+'<AvailableInventory>'+CAST(ISNULL(IDD.[Quantity],'') AS VARCHAR(50))+'</AvailableInventory>'
		+ STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT  ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeDetailsLocale TBADI      
															 WHERE TBADI.PimProductId = TBAD.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

		FROM @TBL_AttributeDetailsLocale TBAD
		INNER JOIN @TBL_MainList TBPI ON (TBAD.PimProductid = TBPI.id )
		LEFT JOIN @TBL_ProductIds TPT ON TBAD.PimProductId = TPT.PimProductId
		LEFT JOIN @TBL_InventoryDetails IDD ON (TBPI.id = IDD.PimProductId)
		GROUP BY TBAD.pimProductid, TPT.ModifiedDate,TBPI.RowId,IDD.Quantity
		ORDER BY TBPI.RowId 
		FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
			--FOR XML PATH ('MainProduct'))


			SELECT  CAST(@ProductXML AS XML ) ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'

     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END 
		;

             -- find the all locale values 
         END TRY
         BEGIN CATCH
		    SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductList_XML @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@IsCallForAttribute='+CAST(@IsCallForAttribute AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductList_XML',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;

         END CATCH;

     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageProductListByAttributes')
BEGIN 
	DROP PROCEDURE Znode_ManageProductListByAttributes
END
GO
CREATE PROCEDURE [dbo].[Znode_ManageProductListByAttributes]
(   @WhereClause      XML,
	@PimAttributeIds  VARCHAR(3000) = NULL,
	@Rows             INT           = 100,
	@PageNo           INT           = 0,
	@Order_BY         VARCHAR(1000) = '',
	@LocaleId         INT,
	@PimProductId     VARCHAR(max) = NULL,
	@IsProductNotIn   BIT           = 0,
	@RelatedProductId INT           = 0, 
	@IsDebug		    BIT = 0 
	)
AS
   /*  Summary:-  This Procedure is used for get product List with extra column attribute supllied to the procedure 
     Unit Testing 
     DECLARE @EDE INT = 0 
	 exec Znode_ManageProductListByAttributes @WhereClause='',@PimAttributeIds = '35,81',@Rows = 10,@PageNo=1,@Order_BY = '',@RelatedProductId = 53442,@PimProductId = '',@IsProductNotIn= 0 ,@LocaleId=1 --SELECT @EDE 
	
	*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
		  --  SELECT '123112'
             DECLARE @SQL NVARCHAR(MAX), @AttributeCode_filter NVARCHAR(2000), @WhereClauseChanges NVARCHAR(MAX)= '',@OutPimProductIds varchar(max) ;
             SET @WhereClauseChanges = CONVERT(NVARCHAR(MAX), @WhereClause);
             DECLARE @PimAttributeFamilyId INT= Dbo.Fn_GetDefaultValue('PimFamily'), @RowsCount INT, @DefaultLocaleId INT= Dbo.Fn_GetDefaultlocaleId();
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()					 
			
	
			 DECLARE @ProductIdTable TABLE
             (PimProductId INT,
              CountId      INT,
              RowId        INT identity(1,1)
             );
             DECLARE @TBL_PimAttributeId TABLE
             (PimAttributeId INT,
              AttributeCode  VARCHAR(600)
             );
             INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
					
             SET @AttributeCode_filter = ISNULL(CAST((
                                                      SELECT CAST('<WhereClauseModel><attributecode>'+ '  = '+''''+TBPA.AttributeCode+''''+'</attributecode></WhereClauseModel>' AS XML )
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH(''),TYPE
                                                  ) AS NVARCHAR(max)),'');
          
		     SET @WhereClauseChanges = [dbo].[Fn_GetXmlWhereClauseForAttribute](@WhereClauseChanges,@AttributeCode_filter, @LocaleId);
             SET @WhereClause = CONVERT(XML, @WhereClauseChanges);	
	    
		  INSERT INTO @TransferPimProductId
		  SELECT ITEM
		  FROM DBO.SPLIT(@PIMPRODUCTID,',')
		  UNION ALL 
		  SELECT PimProductId 
		  FROM ZnodePimProductTypeAssociation  
		  WHERE PimParentProductId=  @RelatedProductId
		  AND @PIMPRODUCTID = '0'
		
		   DECLARE @AttributeCode NVARCHAR(max)
		   SET @AttributeCode = SUBSTRING ((SELECT ','+AttributeCode FROM [dbo].[Fn_GetProductGridAttributes]() qt WHERE (EXISTS (SELECT TOP 1 1 
				FROM dbo.split(@PimAttributeIds,',') TR WHERE tr.Item = qt.PimAttributeId)  OR AttributeCode = 'ProductType')
		   FOR XML PATH('')  ),2,4000)
		   
		   --EXEC Znode_GetProductIdForPaging
     --             @whereClauseXML = @WhereClause,
     --             @Rows = @Rows,
     --             @PageNo = @PageNo,
     --             @Order_BY = @Order_BY,
     --             @RowsCount = @RowsCount OUT,
     --             @LocaleId = @LocaleId,
     --             @AttributeCode = @AttributeCode,
     --             @PimProductId = @TransferPimProductId,
     --             @IsProductNotIn = @IsProductNotIn,
				 -- @OutProductId = @OutPimProductIds OUT
				 -- ;

				


 SET @IsProductNotIn = CASE WHEN @IsProductNotIn = 1 THEN 0 
	 WHEN @IsProductNotIn = 0 THEN 1  END
     DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE(Id INT , RowId INT )
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList @IsProductNotIn ,@TransferPimProductId

	

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	  
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))
	  --INSERT INTO @TAB 
	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 

	 IF EXISTS (SELECT Top 1 1 FROM @TAb )OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	
	 END 
	 ELSE 
	 BEGIN
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 

			 INSERT INTO @ProductIdTable
             (PimProductId) 
			 select id
			 from @TBL_MainList
		
             SET @AttributeCode_filter = SUBSTRING(
                                                  (
                                                      SELECT ','+TBPA.AttributeCode
                                                      FROM @TBL_PimAttributeId TBPA
                                                      FOR XML PATH('')
                                                  ), 1, 4000);
             --DECLARE @PimProductIds VARCHAR(MAX)= SUBSTRING(
             --                                              (
             --                                                  SELECT ','+CAST(PimProductId AS VARCHAR(100))
             --                                                  FROM @ProductIdTable
             --                                                  FOR XML PATH('')
             --                                              ), 2, 4000);

			 DECLARE @PimProductIds TransferId

			 INSERT INTO @PimProductIds ( Id )
			 SELECT id FROM @TBL_MainList

			 --DECLARE @TBL_PimProductIds transferId 
			 --INSERT INTO @TBL_PimProductIds
			 --SELECT id 
    --         FROM @PimProductIds
			 		
					
														      		
             DECLARE @DefaultAttributeCode VARCHAR(MAX)= dbo.Fn_GetDefaultValue('AttributeCode');
            

			 INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@DefaultAttributeCode, ',') SP
                        WHERE SP.Item = ZPA.AttributeCode
                    );
			
		

			INSERT INTO @TBL_PimAttributeId
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           'OR_'+AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.Split(@PimAttributeIds, ',') SP
                        WHERE SP.Item = ZPA.PimAttributeId
                    );
             
	
             SET @DefaultAttributeCode = @DefaultAttributeCode + @AttributeCode_filter;
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId                INT,
              AttributeValue              NVARCHAR(MAX),
              AttributeCode               VARCHAR(600),
              PimAttributeId              INT,
              PimProductTypeAssociationId INT,
              DisplayOrder                INT,
              IsNonEditableRow            BIT DEFAULT 0
             );
             DECLARE @TBL_AttributeCode TABLE
             (PimAttributeId INT,
              AttributeCode  VARCHAR(300)
             );
             INSERT INTO @TBL_AttributeCode
             (PimAttributeId,
              AttributeCode
             )
                    SELECT PimAttributeId,
                           AttributeCode
                    FROM ZnodePimAttribute ZPA
                    WHERE EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.split(@DefaultAttributeCode, ',') SP
                        WHERE Sp.Item = ZPA.AttributeCode
                    );

             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder INT
             );
			  
             DECLARE @PimAttributeId VARCHAR(MAX);
             SET @PimAttributeId = SUBSTRING(
                                            (
                                                SELECT ','+CAST(TBAC.PimAttributeId AS VARCHAR(50))
                                                FROM @TBL_AttributeCode TBAC
                                                     INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON(ZPADV.PimAttributeId = TBAC.PimAttributeId)
                                                FOR XML PATH('')
                                            ), 2, 4000);

													
             INSERT INTO @TBL_AttributeDefaultValue
             (
			  PimAttributeId,
              AttributeDefaultValueCode,
              IsEditable,
              AttributeDefaultValue
			  ,DisplayOrder
             )
             EXEC Znode_GetAttributeDefaultValueLocale
                  @PimAttributeId,
                  @LocaleId;


             INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )
             EXEC Znode_GetProductsAttributeValue
                  @PimProductIds,
                  @DefaultAttributeCode,
                  @localeId;

			  INSERT INTO @TBL_AttributeDetails
             (PimProductId,
              AttributeValue,
              AttributeCode,
              PimAttributeId
             )

			 SELECT ZPAV.PimProductId ,ZPPAVD.PimAttributeDefaultValueId,'OR_'+ZPA.AttributeCode,ZPA.PimAttributeId
             FROM ZnodePimAttributeValue ZPAV 
			 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
			 INNER JOIN @ProductIdTable TBL ON (TBL.PimProductId = ZPAV.PimProductId )
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAVD ON (ZPPAVD.PimAttributeValueId = ZPAV.PimAttributeValueId  )
			WHERE ZPPAVD.LocaleId = @DefaultLocaleId
			AND EXISTS (SELECT TOP 1 1 FROM dbo.Split(@PimAttributeIds,',') SP WHERE Sp.Item = ZPA.PimAttributeId )


			----------------------------------------------------------------------------------------------
			 declare @SKU SelectColumnList
			declare @TBL_Inventorydetails table (Quantity NVARCHAR(MAx),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue FROM @TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'

			--select * from @SKU
			
			INSERT INTO @TBL_InventoryDetails(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU


			select Quantity,PimProductId INTO #Temp_Inventory
			FROM @TBL_InventoryDetails

			---------------------------------------------------------------------------------------------------------

             --;WITH Cte_UpdateDefaultAttributeValue
             --     AS (SELECT PimProductId,
             --                AttributeCode,
             --                AttributeValue,
             --                SUBSTRING(
             --                         (
             --                             SELECT ','+TBADV.AttributeDefaultValue
             --                             FROM @TBL_AttributeDefaultValue TBADV
             --                                  INNER JOIN @TBL_AttributeCode TBAC ON(TBADV.PimAttributeId = TBAC.PimAttributeId)
             --                             WHERE TBAC.AttributeCode = TBAD.AttributeCode
             --                                   AND EXISTS
             --                             (
             --                                 SELECT TOP 1 1
             --                                 FROM dbo.split(TBAD.AttributeValue, ',') SP
             --                                 WHERE Sp.item = TBADV.AttributeDefaultValueCode
             --                             )
             --                             FOR XML PATH('')
             --                         ), 2, 4000) AttributeDefaultValue
             --         FROM @TBL_AttributeDetails TBAD)
                  --UPDATE TBAD
                  --  SET
                  --      AttributeValue = CTUDAV.AttributeDefaultValue
                  --FROM @TBL_AttributeDetails TBAD
                  --     INNER JOIN Cte_UpdateDefaultAttributeValue CTUDAV ON(CTUDAV.PimProductId = TBAD.PimProductId
                  --                                                          AND CTUDAV.AttributeCode = TBAD.AttributeCode)
                  --WHERE AttributeDefaultValue IS NOT NULL;

             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );

             INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1;
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
			
             --- Update the  product families name locale wise   


			 	;WITH Cte_ProductMedia
               AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			   , SUBSTRING( ( SELECT ','+dbo.Fn_GetMediaThumbnailMediaPath (zm.PATH) 
			   FROM ZnodeMedia AS ZM
              
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue 
			   FROM @TBL_AttributeDetails AS TBA 
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV 
			  INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;

		
             UPDATE TBAD
               SET
                   PimProductTypeAssociationId = ZPTA.PimProductTypeAssociationId,
                   DisplayOrder = ZPTA.DisplayOrder
             FROM @TBL_AttributeDetails TBAD
                  INNER JOIN ZnodePimproductTypeAssociation ZPTA ON(ZPTA.PimProductId = TBAD.PimProductId)
             WHERE ZPTA.PimParentProductId = @RelatedProductId;
            
			-- DECLARE @AttributeCode NVARCHAR(4000);
             SET @AttributeCode = SUBSTRING(
                                           (
                                               SELECT DISTINCT
                                                      ','+QUOTENAME(AttributeCode)
                                               FROM @TBL_PimAttributeId
                                               FOR XML PATH('')
                                           ), 2, 4000);
             DECLARE @AttributeCode_Duplicate NVARCHAR(4000)= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  ', Piv.'+QUOTENAME(AttributeCode)
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 1, 4000);
             DECLARE @AttributeCode_Duplicate_Data NVARCHAR(4000);
			 	 
			

			  SET  @AttributeCode_Duplicate_Data= SUBSTRING(
                                                                       (
                                                                           SELECT 
                                                                                  'AND Piv.'+QUOTENAME('OR_'+AttributeCode) +'= Isa.'+QUOTENAME(AttributeCode)+' '
                                                                           FROM ZnodePimAttribute ZPA
                                                                           WHERE EXISTS
                                                                           (
                                                                               SELECT TOP 1 1
                                                                               FROM dbo.Split(@PimAttributeIds, ',') SP
                                                                               WHERE SP.Item = ZPA.PimAttributeId
                                                                               ORDER BY AttributeCode
                                                                           )
																		   GROUP BY ZPA.AttributeCode,ZPA.DisplayOrder
																		   ORDER BY ZPA.DisplayOrder  DESC
                                                                           FOR XML PATH('')
                                                                       ), 4, 4000) +' '

            -- SET @AttributeCode_Duplicate_Data = REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000), ',', '+'',''+');
             SELECT PimProductId,
                    AttributeValue,
                    AttributeCode,
                    PimProductTypeAssociationId,
                    DisplayOrder
             INTO #Temp_attribute
             FROM @Tbl_AttributeDetails
             ORDER BY DisplayOrder;
             SELECT *
             INTO #temp_Family
             FROM @FamilyDetails;
             
			 DECLARE @IsSelectedAttributeValue TABLE
             (ProductId      INT,
              AttributeValue NVARCHAR(500),
              AttributeCode  NVARCHAR(500),
              PimAttributeId INT,PimAttributeDefaultValueId INT 
             );

			  
		   DECLARE @IsSelectedAttributeValueLocale TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode NVARCHAR(600),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(max),
			  DisplayOrder   INT 
             );
          

		  -- select @PimProductId ,@AttributeCode ,@LocaleId 
		  ;With Cte_AttributeVAkuestest AS 
		  (
		    SELECT ZPAV.PimAttributeId , ZPPAD.PimAttributeDefaultValueId ,ZPAV.PimProductId
			FROM ZnodePimAttributeVAlue ZPAV 
			INNER JOIN ZnodePimProductAttributeDefaultValue ZPPAD ON (ZPPAD.PimAttributeValueId = ZPAV.PimAttributeValueId)
			INNER JOIN ZnodePimproductTypeAssociation ZPPTA on ZPAV.PimProductId = ZPPTA.PimProductId and ZPPTA.PimParentProductId = @RelatedProductId 
			WHERE EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimAttributeIds,',') SP WHERE SP.Item = ZPAV.PimAttributeId )
			AND EXISTS (SELECT TOP 1 1 FROM dbo.split(@PimProductId,',') SP WHERE SP.Item = ZPAV.PimProductId  or @PimProductId = '0')
		) ,Cte_PimAttributeDefaultValueLocale AS 
		(
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA  
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 
		  UNION 
		  SELECT  AttributeDefaultValue ,PimAttributeId,PimProductId,CTA.PimAttributeDefaultValueId
		  FROM ZnodePimAttributeDefaultValueLocale CTA 
		  INNER JOIN Cte_AttributeVAkuestest CTB ON (CTB.PimAttributeDefaultValueId = CTA.PimAttributeDefaultValueId)		
		  WHERE LocaleId = @DefaultLocaleId 	
		)
		,Cte_AttributeValueForCode 
		As
		(
		  SELECT AttributeDefaultValue AtributeValue , AttributeCode ,PimProductId ,a.PimAttributeDefaultValueId
		  FROM Cte_PimAttributeDefaultValueLocale a
		  INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = a.PimAttributeId )
		)
			 INSERT INTO @IsSelectedAttributeValue (ProductId,AttributeCode,AttributeValue,PimAttributeDefaultValueId)
             SELECT PimProductId,AttributeCode,AtributeValue,PimAttributeDefaultValueId
			 FROM Cte_AttributeValueForCode
             
			 --INSERT INTO @IsSelectedAttributeValueLocale
    --         EXEC Znode_GetAttributeDefaultValueLocale
    --              @PimAttributeIds,
    --              @LocaleId;
             
			 --UPDATE izav
    --           SET
    --               izav.AttributeValue = isval.AttributeDefaultValue
    --         FROM @IsSelectedAttributeValue izav
    --              INNER JOIN @IsSelectedAttributeValueLocale isval ON izav.AttributeValue = isval.AttributeDefaultValueCode AND izav.PimAttributeId = isval.PimAttributeId ;
             

			 SELECT * 
			 --SUBSTRING(
    --                         (
    --                             SELECT ','+isav.AttributeValue
    --                             FROM @IsSelectedAttributeValue isav
				--				 INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ISAV.PimAttributeID )
    --                             WHERE isa.ProductId = isav.ProductId
    --                             ORDER BY ZPA.DisplayOrder DESC
    --                             FOR XML PATH('')
    --                         ), 2, 4000) AttributeValue,
							

             INTO #IsSelectedAttribute
             FROM @IsSelectedAttributeValue isa
			; 
				 
			 IF @IsDebug = 1 
			 BEGIN 
			 SELECT * FROM @IsSelectedAttributeValue izav

			 SELECT * FROM #IsSelectedAttribute

			 END 
             --select * from @IsSelectedAttributeValue
             --select @AttributeCode_Duplicate,@AttributeCode_Duplicate_data
             --select * from #IsSelectedAttribute
			 
             SET @AttributeCode = REPLACE(@AttributeCode, ',[DisplayOrder]', '');
             SET @SQL = '
			     
				 ;with Cte_Getvalue AS (
				 SELECT ProductId , '+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+'
				 FROM ( SELECT ProductId,AttributeCode,PimAttributeDefaultValueId FROM #IsSelectedAttribute gt ) dd 
				 PIVOT ( MAX (PimAttributeDefaultValueId) FOR AttributeCode IN ('+REPLACE(SUBSTRING(@AttributeCode_Duplicate, 2, 4000),'Piv.','')+')  ) PIV 
				 )

				SELECT DISTINCT  piv.PimProductTypeAssociationId, zpp.PimProductid ProductId, [ProductName],ProductType ,ISNULL(zf.FamilyName,'''')  AttributeFamily , [SKU]
						  , CASE WHEN [IsActive] IS NULL THEN ''false'' ELSE   [IsActive]  END  [Status],  piv.[ProductImage] ImagePath,[Assortment],DisplayOrder  ,'+CAST(@LocaleId AS VARCHAR(50))+' LocaleId
						  ,DENSE_RANK()Over(Order By'+SUBSTRING(@AttributeCode_Duplicate, 2, 4000)+') CombinationId '+@AttributeCode_Duplicate+'
					, CASE When isa.ProductId Is Null then 0 ELSE 1 END IsNonEditableRow,'+ CAST(@RelatedProductId AS VARCHAR(50))+' RelatedProductId, IDD.Quantity AvailableInventory
				FROM ZNodePimProduct zpp 
				LEFT JOIN  #temp_Family zf ON (zf.PimProductId = zpp.PimProductId)
				INNER JOIN #Temp_attribute 
				PIVOT 
				(
				Max(AttributeValue) FOR AttributeCode  IN ( '+@AttributeCode+')
				)Piv  
				ON (Piv.PimProductId = zpp.PimProductid) 
				LEFT JOIN #Temp_Inventory IDD ON (IDD.PimProductId = Piv.PimProductId)
				--LEFT JOIN ZnodeMedia zm ON (zm.MediaId = piv.[ProductImage])
				LEFT OUTER JOIN Cte_Getvalue isa ON ('+@AttributeCode_Duplicate_Data+')
				    '+' Order BY '+ISNULL(CASE
                                                  WHEN @Order_BY = ''
                                                  THEN 'DisplayOrder'
                                                  ELSE @Order_BY
                                              END, 'DisplayOrder');
		
	
             -- SELECT '''+SUBSTRINg(REPLACE(@AttributeCode_Duplicate,'Piv.',''),2,4000)+''' Ids
			 
             SELECT AttributeCode
             FROM ZnodePimAttribute ZPA
             WHERE EXISTS
             (
                 SELECT TOP 1 1
                 FROM dbo.Split(@PimAttributeIds, ',') SP
                 WHERE SP.Item = ZPA.PimAttributeId
             );
             
			PRINT @SQL
             EXEC SP_executesql
                  @SQL;
        
     IF EXISTS (SELECT Top 1 1 FROM @TAb )
	 BEGIN 

		  SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
	 END 
	 ELSE 
	 BEGIN
	 		  SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
	 END ;

             DROP TABLE #Temp_attribute;
             DROP TABLE #temp_Family;
   
             -- find the all locale values 
         END TRY
         BEGIN CATCH
		  SELECT ERROR_MESSAGE()
                DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductListByAttributes @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@PimAttributeIds='+@PimAttributeIds+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimProductId='+@PimProductId+',@IsProductNotIn='+CAST(@IsProductNotIn AS VARCHAR(50))+',@RelatedProductId='+CAST(@RelatedProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductListByAttributes',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_ManageProductTypeAssociationList')
BEGIN 
	DROP PROCEDURE Znode_ManageProductTypeAssociationList
END
GO
CREATE PROCEDURE [dbo].[Znode_ManageProductTypeAssociationList]
(   @WhereClause      NVARCHAR(MAX) = '',
    @Rows             INT           = 10,
    @PageNo           INT           = 1,
    @Order_BY         VARCHAR(1000) = '',
    @RelatedProductId INT           = 0,
    @IsAssociated     BIT           = 0,
    @RowsCount        INT OUT,
    @LocaleId         INT           = 1)
AS
/*
Summary: This Procedure is used to manage Product association
Unit Testing :
 EXEC [Znode_ManageProductTypeAssociationList] '', @RowsCount = 0,@RelatedProductId = 44
*/
     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE @SQL NVARCHAR(MAX), @AlternetOrderBy NVARCHAR(2000),@OutPimProductIds VARCHAR(max);
             DECLARE @DefaultLocaleId INT= Dbo.Fn_GetDefaultValue('Locale');
             DECLARE @DefaultAttributeFamily INT= Dbo.Fn_GetDefaultValue('PimFamily');
			 DECLARE @ProductIdTable TABLE (  PimProductId int, CountId int, RowId int IDENTITY(1,1));
			 DECLARE @ProductAttributeDetials TABLE ( PimProductId int, AttributeCode nvarchar(600), AttributeValue nvarchar(max), LocaleId int);
			 DECLARE @OrderByDisplay INT= 0;
			 DECLARE @ProductFinalDetails TABLE( PimProductId int, ProductName nvarchar(max), SKU nvarchar(max));             
			 DECLARE @PimProductId VARCHAR(MAX)= '';
             DECLARE @TransferPimProductId TransferId 
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

			 IF @Order_BY LIKE '%DisplayOrder%'
             BEGIN
                SET @OrderByDisplay = 1;
             END;

            INSERT INTO @TransferPimProductId  
			SELECT PimProductId
			FROM ZnodePimProductTypeAssociation 
			WHERE PimParentProductId = @RelatedProductId
            ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN DisplayOrder ELSE 1 END ELSE 1 END DESC,
                    CASE WHEN @Order_By LIKE '% ASC%'  THEN CASE WHEN @OrderByDisplay = 1 THEN DisplayOrder ELSE 1 END ELSE 1 END
					
	SET @IsAssociated = CASE WHEN @IsAssociated = 1 THEN 0 
	 WHEN @IsAssociated = 0 THEN 1  END


     DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid 
	 DECLARE @tBL_mainList TABLE(id INT , RowId INT )
	
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList @IsAssociated ,@TransferPimProductId

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN 
	  
	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))
	  
	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId
	  
      INSERT INTO @TAB 
	  EXEC (@SQL)
	 
	 END 
	 DECLARE @AttributeCode varchar(600)
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN 
	
	 SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))

	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId
	
	 END 
	 ELSE 
	 BEGIN
	  SET @AttributeCode = dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC',''))
	  	
		
	 INSERT INTO @TBL_MainList
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId 
	 END 	
		
	
			 INSERT INTO @ProductIdTable
             (PimProductId) 
			SELECT id FROM @TBL_MainList           	

			 DECLARE @PimProductIds TransferId

			 INSERT INTO @PimProductIds ( Id ) 
			 SELECT PimProductId FROM @ProductIdTable

			 DECLARE @DefaultAttributeCode  TRANSFERID
			  INSERT INTO @DefaultAttributeCode
			  SELECT  PimAttributeId FROM [dbo].[Fn_GetProductGridAttributes]() 
            
             
			 --select * from @DefaultAttributeCode

			 DECLARE @TBL_AttributeDetails AS TABLE (PimProductId int, AttributeValue nvarchar(max), AttributeCode varchar(600), PimAttributeId int);

			 
             DECLARE @TBL_AttributeDefaultValue TABLE (PimAttributeId INT, AttributeDefaultValueCode VARCHAR(100), IsEditable BIT,AttributeDefaultValue NVARCHAR(MAX),DisplayOrder INT);
            
			 INSERT INTO @TBL_AttributeDetails( PimProductId, AttributeValue, AttributeCode, PimAttributeId )
			 EXEC Znode_GetProductsAttributeValue_newTesting @PimProductIds, @DefaultAttributeCode, @LocaleId;  
			
			
			 
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT a.PimProductId ,CASE WHEN IsProductPublish = 1 THEN   'Published' WHEN IsProductPublish = 0 THEN 'Draft'  ELSE 'Not Published' END, 'PublishStatus',NULL
			FROM @ProductIdTable a 
			INNER JOIN ZnodePimProduct b ON (b.PimProductId = a.PimProductId)

			--select * from @TBL_AttributeDetails

			------------------------------------------------------------------------------------------------

			declare @SKU SelectColumnList
			declare @TBL_Inventorydetails table (Quantity NVARCHAR(MAx),PimProductId INT)

			INSERT INTO @SKU
			SELECT AttributeValue FROM @TBL_AttributeDetails
			WHERE AttributeCode = 'SKU'

			--select * from @SKU
			
			INSERT INTO @TBL_InventoryDetails(Quantity,PimProductId)
			EXEC Znode_GetPimProductAttributeInventory @SKU


			---------------------------------------------

             DECLARE @FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             INSERT INTO @FamilyDetails
             (PimAttributeFamilyId,
              PimProductId
             )
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId]
                  @PimProductIds,
                  1; 
             -- find the product families  
			 --;WITH Cte_ProductMedia
    --           AS (SELECT TBA.PimProductId , TBA.PimAttributeId 
			 --  , SUBSTRING( ( SELECT ','+URL+ZMSM.ThumbnailFolderName+'/'+ zm.PATH 
			 --  FROM ZnodeMedia AS ZM
    --           INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			 --  INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			 --  INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)))
			 --  INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			 --  WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId 
			 --  FOR XML PATH('')), 2 , 4000) AS AttributeValue 
			 --  FROM @TBL_AttributeDetails AS TBA 
			 --  INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId ))
                          
		  --    UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			 -- FROM @TBL_AttributeDetails TBAV 
			 -- INNER JOIN Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId 
			 -- AND CTPM.PimAttributeId = TBAV.PimAttributeId;
			  
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @LocaleId);
             UPDATE a
               SET
                   FamilyName = b.AttributeFamilyName
             FROM @FamilyDetails a
                  INNER JOIN ZnodePimFamilyLocale b ON(a.PimAttributeFamilyId = b.PimAttributeFamilyId
                                                       AND LocaleId = @DefaultLocaleId)
             WHERE a.FamilyName IS NULL
                   OR a.FamilyName = '';
			
			INSERT INTO @TBL_AttributeDetails             (PimProductId,              AttributeValue,              AttributeCode,              PimAttributeId             )
			SELECT PimProductId ,FamilyName, 'AttributeFamily',NULL
			FROM @FamilyDetails 
				
		
             --- Update the  product families name locale wise   
        UPDATE  @TBL_AttributeDetails SET PimAttributeId = 0 WHERE PimAttributeId IS nULL 
	     DECLARE @ProductXML XML 



	   	 SET @ProductXML =   '<MainProduct>'+ STUFF( (  SELECT '<Product>'
		                                                    +'<PimProductTypeAssociationId>'+CAST(ISNULL(ZPTA.PimProductTypeAssociationId,'') AS VARCHAR(50))+'</PimProductTypeAssociationId>'
															+'<PimProductId>'+CAST(zpp.PimProductId AS VARCHAR(50))+'</PimProductId>'
															+'<RelatedProductId>'+CAST(ISNULL(ZPTA.PimParentProductId,'') AS VARCHAR(50))+'</RelatedProductId>'
															+'<DisplayOrder>'+CAST(ZPTA.[DisplayOrder] AS VARCHAR(50))+'</DisplayOrder>'
															+'<AvailableInventory>'+CAST(ISNULL(IDD.[Quantity],'') AS VARCHAR(50))+'</AvailableInventory>'

		 + STUFF(    (  SELECT '<'+TBADI.AttributeCode+'>'+CAST( (SELECT ''+TBADI.AttributeValue FOR XML PATH('')) AS NVARCHAR(max))+'</'+TBADI.AttributeCode+'>'   
															FROM @TBL_AttributeDetails TBADI      
															 WHERE TBADI.PimProductId = zpp.PimProductId 
															 ORDER BY TBADI.PimProductId DESC
															 FOR XML PATH (''), TYPE
																).value('.', ' Nvarchar(max)'), 1, 0, '')+'</Product>'	   

			 FROM @ProductIdTable AS zpp
			 INNER JOIN @TBL_MainList TMM ON (TMM.id = zpp.PimProductId)
			 LEFT JOIN @TBL_InventoryDetails IDD ON (zpp.PimProductId = IDD.PimProductId)
             LEFT JOIN ZnodePimProductTypeAssociation ZPTA ON(ZPTA.PimProductId = Zpp.PimProductId
                                                                    AND ZPTA.PimParentProductId = @RelatedProductId)
             ORDER BY CASE
                          WHEN @Order_By LIKE '% DESC%'
                          THEN CASE
                                   WHEN @OrderByDisplay = 1
                                   THEN ZPTA.DisplayOrder
								   ELSE 1
                               END
                          ELSE 1
                      END DESC,
                      CASE
                          WHEN @Order_By LIKE '% ASC%'
                          THEN CASE
                                   WHEN @OrderByDisplay = 1
                                   THEN ZPTA.DisplayOrder
                                   ELSE 1
                               END
                          ELSE 1
                      END,TMM.RowId
			FOR XML PATH (''),TYPE).value('.', ' Nvarchar(max)'), 1, 0, '')+'</MainProduct>'
	
			SELECT  CAST(@ProductXML AS XML )  ProductXMl
		   
		     SELECT AttributeCode ,  ZPAL.AttributeName
			 FROM ZnodePimAttribute ZPA 
			 LEFT JOIN ZnodePiMAttributeLOcale ZPAL ON (ZPAL.PimAttributeId = ZPA.PimAttributeId )
             WHERE LocaleId = 1  
			 AND  IsCategory = 0 
			 AND ZPA.IsShowOnGrid = 1  
			 UNION ALL 
			 SELECT 'PublishStatus','Publish Status'


			   IF EXISTS (SELECT Top 1 1 FROM @TAb )
				BEGIN 

					SELECT (SELECT COUNT(1) FROM @TAb) AS RowsCount   
				END 
				ELSE 
				BEGIN
	 					SELECT (SELECT COUNT(1) FROM @ProductListIdRTR) AS RowsCount   
				END 

         END TRY
         BEGIN CATCH
               DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ManageProductTypeAssociationList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@RelatedProductId='+CAST(@RelatedProductId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_ManageProductTypeAssociationList',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_RevertOrderInventory')
BEGIN 
	DROP PROCEDURE Znode_RevertOrderInventory
END
GO
CREATE  PROCEDURE [dbo].[Znode_RevertOrderInventory]
(   @OmsOrderDetailsId   INT,
    @OmsOrderLineItemIds VARCHAR(2000) = '',
    @Status              BIT OUT,
    @UserId              INT,
	@IsRevertAll         BIT = 0)
AS 
   /* Summary: this proceedure is used to revert the order  inventory in case of order revert
      Unit Testing:
	  begin tran
	  EXEC  Znode_RevertOrderInventory 
      rollback tran
    */
     BEGIN
         BEGIN TRAN ZROI;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			 DECLARE @Revert NVARCHAR(MAX), @SQL NVARCHAR(MAX)
			 
			 SET @SQL = '
			
             UPDATE ZI
               SET
                   ZI.Quantity = ZI.Quantity + ZOOW.Quantity,
                   ZI.MOdifiedBy = '''+CAST(@UserId AS VARCHAR(1000))+''',
                   ZI.ModifiedDate = '''+CAST(@GetDate AS VARCHAR(1000))+'''
             FROM ZnodeOmsOrderWarehouse ZOOW
                  INNER JOIN ZnodeOmsOrderLineItems ZOOLI ON(ZOOLI.OmsOrderLineItemsId = ZOOW.OmsOrderLineItemsId)
                  INNER JOIN ZnodeInventory ZI ON(ZI.WarehouseId = ZOOW.WarehouseId
                                                  AND ZI.SKU = ZOOLI.SKU)
             WHERE 
			  ZOOLI.OmsOrderDetailsId = '+CAST(@OmsOrderDetailsId AS VARCHAR(1000))+'
                   AND EXISTS
             (
                 SELECT TOP 1 1     FROM dbo.split('''+@OmsOrderLineItemIds+''', '','') SP WHERE Sp.Item = ZOOLI.OmsOrderLineItemsId OR Sp.Item = ZOOLI.ParentOmsOrderLineItemsId OR '''+@OmsOrderLineItemIds+''' = ''''
             )  
			 ' +CASE WHEN @IsRevertAll = 0 THEN 'AND NOT EXISTS   (SELECT TOP  1 1 FROM ZnodeOmsOrderState OOS WHERE OOS.OrderStateName = ''RETURNED'' AND OOS.OmsOrderStateId = ZOOLI.OrderLineItemStateId) ' ELSE '' END

			

			 PRINT @sql

			 EXEC(@SQL)

             SET @Status = 1;
             SELECT 1 ID,
                    CAST(1 AS BIT) Status;
             COMMIT TRAN ZROI;
         END TRY
         BEGIN CATCH
              DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_RevertOrderInventory @OmsOrderDetailsId = '+CAST(@OmsOrderDetailsId AS VARCHAR(200))+',@OmsOrderLineItemIds='+@OmsOrderLineItemIds+',@UserId='+CAST(@UserId AS VARCHAR(200))+',@Status='+CAST(@Status AS VARCHAR(200));
             SET @Status = 0;
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
			 ROLLBACK TRAN ZROI;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_RevertOrderInventory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategoryHierarchy')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategoryHierarchy
END
GO
-- =============================================
-- Author:		Shubham
-- Create date: 
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[Znode_GetCatalogCategoryHierarchy] 
	-- Add the parameters for the stored procedure here
	@PimProductId int = 0	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DEclare @PimAttributeId int

	set  @PimAttributeId = (select top 1 PimAttributeId from ZnodePimAttribute where AttributeCode='CategoryName')

	select c.PimCatalogId,c.CatalogName,locale.CategoryValue, zCatalogCategory.PimCategoryId from ZnodePimCatalogCategory as zCatalogCategory
	inner join ZnodePimCatalog as c on c.PimCatalogId =zCatalogCategory.PimCatalogId
	inner join ZnodePimCategoryAttributeValue as categoryAttribute on categoryAttribute.PimCategoryId = zCatalogCategory.PimCategoryId
	inner join ZnodePimCategoryAttributeValueLocale as locale on locale.PimCategoryAttributeValueId = categoryAttribute.PimCategoryAttributeValueId
	where zCatalogCategory.PimProductId=@PimProductId and categoryAttribute.PimAttributeId = @PimAttributeId
END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategorySEODetail')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategorySEODetail
END
GO
---EXEC Znode_GetCatalogCategorySEODetail @WhereClause = '', @PortalId = 1, @RowsCount = 0
  CREATE PROCEDURE [dbo].[Znode_GetCatalogCategorySEODetail]
  (
	  @WhereClause      VARCHAR(MAX),
	  @Rows             INT           = 100,
	  @PageNo           INT           = 1,
	  @Order_BY         VARCHAR(1000) = '',
	  @RowsCount        INT OUT,
	  @LocaleId         INT           = 1,
	  @PortalId         INT
)
AS
BEGIN
	SET NOCOUNT ON;

	Declare @PimCatalogId INT, @SQL VARCHAR(MAX), @DefaultLocaleId VARCHAR(20)= dbo.Fn_GetDefaultLocaleId()

	SELECT @PimCatalogId = PimCatalogId 
	FROM ZnodePortalCatalog ZPC
	INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId


	IF OBJECT_ID('TEMPDB..#CategoryDetail') IS NOT NULL
		DROP TABLE #CategoryDetail

	IF OBJECT_ID('TEMPDB..##TempCategoryDetail') IS NOT NULL
		DROP TABLE ##TempCategoryDetail

		IF OBJECT_ID('TEMPDB..#znodeCatalogCategory') IS NOT NULL
		DROP TABLE #znodeCatalogCategory

	SELECT PimCategoryId, CategoryName, CategoryCode, LocaleId
	INTO #CategoryDetail
	FROM
	(
		SELECT ZPCAV.PimCategoryId,ZPA.AttributeCode,ZPCAVL.CategoryValue, ZPCAVL.LocaleId 
		FROM ZnodePimCategoryAttributeValue ZPCAV
		INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId
		INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId
		where ZPA.AttributeCode in ( 'CategoryName', 'CategoryCode')
	)TB PIVOT(MAX(CategoryValue) FOR AttributeCode in ( CategoryName, CategoryCode))AS PVT
	
	

	SET @SQL = '

	select distinct PimCatalogId,PimCategoryId into #znodeCatalogCategory
	FROm ZnodePimCatalogCategory

	;With CTE_CategoryDetail AS
	(
		SELECT DISTINCT PC.PimCatalogId, PC.CatalogName, CD.PimCategoryId, CD.CategoryCode, CD.CategoryName , CSD.SEOCode, CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		Case When Isnull(CSD.IsPublish ,0 ) = 0 then ''Draft'' ELSE ''Published'' END  IsPublish , ActivationDate , ExpirationDate, ZPC.IsActive, CD.LocaleId 
		FROM #CategoryDetail CD
		INNER JOIN ZnodePimCategory ZPC ON (ZPC.PimCategoryId = CD.PimCategoryId)
		INNER JOIN  #znodeCatalogCategory PCC on CD.PimCategoryId = PCC.PimCategoryId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodePimCategoryHierarchy CH ON (CH.PimCategoryId = CD.PimCategoryId)
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Category''
		LEFT JOIN ZnodeCMSSEODetail CSD on CD.CategoryCode = CSD.SEOCode and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId 	
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' AND CD.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+', '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
	)
	,CTE_CategoryDetail_Locale as
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, LocaleId
		FROM CTE_CategoryDetail CD
		WHERE CD.LocaleId ='+CAST(@LocaleId AS VARCHAR(50))+'
	)
	,CTE_CategoryDetail_BothLocale as
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive
		FROM CTE_CategoryDetail_Locale
		Union All
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive
		FROM CTE_CategoryDetail CDS
		WHERE LocaleId ='+CAST(@DefaultLocaleId AS VARCHAR(50))+' AND
			NOT EXISTS( SELECT * FROM CTE_CategoryDetail_Locale CSD1
						WHERE CDS.PimCategoryId = CSD1.PimCategoryId AND CDS.CatalogName = CSD1.CatalogName )
	)
	,CTE_CategoryDetail_WhereClause AS
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, '+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimCategoryId')+',Count(*)Over() CountId
		FROM CTE_CategoryDetail_BothLocale CD
		WHERE 1 = 1 '+CASE WHEN @WhereClause = '' THEN '' ELSE ' AND '+@WhereClause END +'
	)
	SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, CountId
	INTO ##TempCategoryDetail
	FROM CTE_CategoryDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempCategoryDetail ),0)

	SELECT  PimCategoryId, CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish, ActivationDate,ExpirationDate,IsActive FROM ##TempCategoryDetail

	IF OBJECT_ID('TEMPDB..#CategoryDetail') IS NOT NULL
		DROP TABLE #CategoryDetail

	IF OBJECT_ID('TEMPDB..##TempCategoryDetail') IS NOT NULL
		DROP TABLE ##TempCategoryDetail

	IF OBJECT_ID('TEMPDB..#znodeCatalogCategory') IS NOT NULL
	DROP TABLE #znodeCatalogCategory

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogProductSEODetail')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogProductSEODetail
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogProductSEODetail]
( 
  @WhereClause      NVARCHAR(MAX),
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PortalId			INT
 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetail @WhereClause=N'',@Rows=100,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 1 ,@LocaleId=1 
	   rollback tran
	  
	     declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetails @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 5 ,@LocaleId=1 


    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE  @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @SQL NVARCHAR(MAX), 
					 @PimProductId TransferId,
					 @PimAttributeId VARCHAR(MAX)
					
             DECLARE @TransferPimProductId TransferId 
		
	
			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct

			Declare @PimCatalogId INT

			SELECT @PimCatalogId = PimCatalogId 
			FROM ZnodePortalCatalog ZPC
			INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId
				
                SELECT  PimProductid,SKU,ProductName,ProductImage,IsActive
				INTO #ProductDetail
				 FROM 
				 (
				 SELECT c.pimproductId,PA.attributecode,e.AttributeValue
				 FROM
				 znodePimProduct c 
				 inner join ZnodePimAttributeValue d on (c.PimProductid = d.PimProductid)
				 inner join ZnodePimAttributeValueLocale e on (d.PimAttributeValueId = e.PimAttributeValueId)
				 inner join ZnodePimAttribute PA ON (PA.PimAttributeId = d.PimAttributeId)
				 where  PA.Attributecode IN ('SKU','ProductName','ProductImage','IsActive')
				-- AND e.localeid = @LocaleId
				 ) piv PIVOT(MAX(AttributeValue) FOR AttributeCode in ( SKU,ProductName,ProductImage,IsActive))AS PVT
				


		SET @SQL = 
		'
		--DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
		--INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
		--	 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		select distinct PimCatalogId,PimProductId into #znodeCatalogProduct
	FROm ZnodePimCatalogCategory

		DECLARE @TBL_MediaValue TABLE (PimAttributeValueId INT,PimProductId INT,MediaPath INT,PimAttributeId INt,LocaleId INT )
		INSERT INTO @TBL_MediaValue
		SELECT ZPAV.PimAttributeValueId	,ZPAV.PimProductId	,ZPPAM.MediaId MediaPath,ZPAV.PimAttributeId , 	ZPPAM.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimProductAttributeMedia ZPPAM ON ( ZPPAM.PimAttributeValueId = ZPAV.PimAttributeValueId)
					INNER JOIN #ProductDetail PD ON (PD.PimProductId = ZPAV.PimProductId)
					LEFT JOIN ZnodeMedia ZM ON (Zm.Path = ZPPAM.MediaPath) 
					WHERE  ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute pa where attributecode = ''ProductImage'') 

		;WITH Cte_ProductMedia
               AS (SELECT PD.PimProductId  , 
			   URL+ZMSM.ThumbnailFolderName+''/''+ zm.PATH  AS ProductImagePath 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_MediaValue PD ON (PD.MediaPath = CAST(ZM.MediaId AS VARCHAR(50)))
			   --INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = PD.PimATtributeId )
			   
			   )

		, CTE_ProductDetail AS
	(
		SELECT DISTINCT  CD.pimproductId, SKU,ProductName,
		case WHEN  CD.IsActive = ''true'' THEN 1 ELSE 0 END IsActive, CSD.SEOCode, CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		Case When Isnull(CSD.IsPublish ,0 ) = 0 then ''Draft'' ELSE ''Published'' END  IsPublish  , CPM.ProductImagePath
		FROM #ProductDetail CD
		INNER JOIN #znodeCatalogProduct PCC on CD.PimProductId = PCC.PimProductId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Product''
		LEFT JOIN ZnodeCMSSEODetail CSD on CD.SKU = CSD.SEOCode and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId AND CSDL.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
		
		INNER JOIN Cte_ProductMedia CPM ON (CPM.PimProductId = CD.PimProductId)
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' 
	)
	,CTE_ProductDetail_WhereClause AS
	(
		SELECT  pimproductId, SKU,ProductName,
		cast(IsActive as bit) IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimProductId')+',Count(*)Over() CountId
		FROM CTE_ProductDetail CD
		WHERE 1 = 1  '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath, CountId
	INTO ##TempProductDetail
	FROM CTE_ProductDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempProductDetail ),0)

	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 
	FROM ##TempProductDetail
	--GROUP by pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 

  
		

			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			
			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct


         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		 --    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			-- @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			--VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			--@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			--@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
   --          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
   --          EXEC Znode_InsertProcedureErrorLog
			--	@ProcedureName = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorMessage = @ErrorMessage,
			--	@ErrorLine = @ErrorLine,
			--	@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCategoryName')
BEGIN 
	DROP PROCEDURE Znode_GetCategoryName
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCategoryName]
  (
	  @CategoryCode nvarchar(300),
	  @LocaleId        INT        = 1
	  
)
AS

/*
exec Znode_GetCategoryName 'gg1',4

*/
BEGIN
	SET NOCOUNT ON;
	DECLARE @DefaultLocaleId VARCHAR(20)= dbo.Fn_GetDefaultLocaleId()
	
; with cte_CategoryName as
(
SELECT distinct d.PimCategoryId , c.AttributeCode , b.CategoryValue , b.LocaleId  
FROM  
ZnodePimAttribute c 
INNER JOIN ZnodePimAttributeLocale zpal ON(c.PimAttributeId = zpal.PimAttributeId)
inner join ZnodePimCategoryAttributeValue d on (d.PimAttributeId = c.PimAttributeId)
inner JOIN  ZnodePimCategoryAttributeValueLocale b ON ( b.PimCategoryAttributeValueId = d.PimCategoryAttributeValueId )
where c.AttributeCode in  ('Categorycode','CategoryName' )

)

, CTE_BothLocale AS
(
select  cast(piv.CategoryName as nvarchar(max)) AS CategoryName, piv.localeid
from ZnodePimCategory aa
inner join  cte_CategoryName b PIVOT(MAX(CategoryValue) FOR AttributeCode IN (Categorycode,
																		CategoryName ))
																		piv on (piv.PimCategoryId = aa.PimCategoryId)
where piv.Categorycode = @CategoryCode and
 piv.LocaleId IN (@LocaleId,@DefaultLocaleId)

 )
 ,CTE_FirstLocale AS
 (
 SELECT CategoryName,localeid
 FROM CTE_BothLocale
 WHERE Localeid = @LocaleId
 )

 , CTE_FilterRecords AS
 (
  SELECT CategoryName,localeid
 FROM CTE_FirstLocale
 UNION ALL
  SELECT CategoryName,localeid
 FROM CTE_BothLocale BL
 WHERE Localeid = @DefaultLocaleId
 AND NOT EXISTS (SELECT TOP 1 1 FROM CTE_FirstLocale FL WHERE  FL.CategoryName = BL.CategoryName)

 )

 SELECT CategoryName
  from CTE_FilterRecords



--Declare @CategoryName nvarchar(300)

--SET @CategoryName = (select TOP 1 CategoryValue  from View_PimCategoryAttributeValue a
--inner join View_PimCategoryAttributeValue b on (a.PimCategoryId =b.PimCategoryId)

--where a.attributecode = 'categorycode' AND CategoryValue = @CategoryCode AND LocaleId = @Localeid)
--select @CategoryName

END
GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPimProductAttributeInventory')
BEGIN 
	DROP PROCEDURE Znode_GetPimProductAttributeInventory
END
GO
CREATE  PROCEDURE [dbo].[Znode_GetPimProductAttributeInventory]
(   @SKU    SelectColumnList READONLY
    --@IsMultipleProduct BIT          = 0
	)
AS
/*
     Summary : - This procedure is used to find the inventory of product 
     Unit Testing 
	 begin tran
     Exec Znode_GetPimProductAttributeInventory 7
	 rollback tran
*/
     BEGIN
	 BEGIN TRAN PimProductAttributeFamilyId
         BEGIN TRY
             SET NOCOUNT ON;


             DECLARE @DefaultFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId();
             DECLARE @TBL_PimProductId TABLE(SKU NVARCHAR(MAX));
			 DECLARE @TBL_InventoryDetails TABLE (QUANTITY INT,PimProductId INT)
            

			 INSERT INTO @TBL_PimProductId 
			 SELECT StringColumn  FROM @SKU 

			 INSERT INTO @TBL_InventoryDetails 
			 SELECT DISTINCT sum(ZI.Quantity ) quantity  ,b.PimProductId 
			 FROM ZnodeInventory ZI
				INNER JOIN ZnodeWarehouse ZW on (ZI.WarehouseId = ZW.WarehouseId)
				Inner join View_LoadManageProductInternal  b ON ZI.SKU = b.AttributeValue  AND b.AttributeCode = 'SKU'
				--inner join ZnodePimAttributeValue PAV ON (PAV.PimProductId = b.PimProductId)
				--inner join ZnodePimProductAttributeDefaultValue a on (a.PimAttributeValueId = pav.PimAttributeValueId)
				--inner join ZnodePimAttributeDefaultValue dv on (a.PimAttributeDefaultValueId = dv.PimAttributeDefaultValueId)
				--inner join ZnodePimAttributeDefaultValuelocale dvl on (dv.PimAttributeDefaultValueId = dvl.PimAttributeDefaultValueId)
				--INNER JOIN ZnodePimAttribute PA ON (PA.pimattributeId = PAV.pimAttributeid AND PA.Attributecode = 'OutOfStockOptions')
				WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimProductId TBP WHERE ZI.SKU = TBP.SKU)
				group by b.PimProductId --, AttributeDefaultValueCode

				--select * from @TBL_InventoryDetails

				
			;WITH CTE_Getdetails AS (
				select DISTINCT case when  AttributeDefaultValueCode = 'DontTrackInventory' THEN 'DTI' 
			ELSE [dbo].[Fn_GetDefaultInventoryRoundOff](ISNULL(Quantity, 0))     END Quantity  ,tb.PimProductId --,ZW.WarehouseId,
			

				FROM @TBL_InventoryDetails tb
				inner join ZnodePimAttributeValue PAV ON (PAV.PimProductId = tb.PimProductId)
				inner join ZnodePimProductAttributeDefaultValue a on (a.PimAttributeValueId = pav.PimAttributeValueId)
				inner join ZnodePimAttributeDefaultValue dv on (a.PimAttributeDefaultValueId = dv.PimAttributeDefaultValueId)
				inner join ZnodePimAttributeDefaultValuelocale dvl on (dv.PimAttributeDefaultValueId = dvl.PimAttributeDefaultValueId)
				INNER JOIN ZnodePimAttribute PA ON (PA.pimattributeId = PAV.pimAttributeid AND PA.Attributecode = 'OutOfStockOptions')
				--WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimProductId TBP WHERE ZI.SKU = TBP.SKU )
				--group by b.PimProductId
			  )
		

			 select   cast(quantity as nvarchar(MAX))  quantity ,PimProductId
			 FROM CTE_Getdetails

		 COMMIT TRAN PimProductAttributeFamilyId;
         END TRY
         BEGIN CATCH

		 select Error_message ()
          DECLARE @Status BIT ;
		  SET @Status = 0;
		  --DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimProductAttributeFamilyId @PimProductId = '+cast (@PimProductId AS VARCHAR(50))+',@IsMultipleProduct='+CAST(@IsMultipleProduct AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  ROLLBACK TRAN PimProductAttributeFamilyId;

          --EXEC Znode_InsertProcedureErrorLog
          --  @ProcedureName = 'Znode_GetPimProductAttributeFamilyId',
          --  @ErrorInProcedure = @Error_procedure,
          --  @ErrorMessage = @ErrorMessage,
          --  @ErrorLine = @ErrorLine,
          --  @ErrorCall = @ErrorCall;
         END CATCH;
     END;

	--case when dv.AttributeDefaultValueCode = 'DontTrackInventory' THEN 'DTI' ELSE CAST(ZI.Quantity AS NVARCHAR(MAX)) END Quantity
			--case when dv.AttributeDefaultValueCode = 'DontTrackInventory' THEN 'DTI' 
			--ELSE CAST( [dbo].[Fn_GetDefaultInventoryRoundOff](ISNULL(ZI.Quantity, 0))AS NVARCHAR(MAX)) END Quantity
GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetProductGridAttributes')
BEGIN
DROP FUNCTION dbo.Fn_GetProductGridAttributes
END
GO

CREATE FUNCTION [dbo].[Fn_GetProductGridAttributes]
(
)
-- Summary :- This function is used to  get default category attribute for grid   
-- Unit Testing 
-- EXEC [dbo].[Fn_GetCategoryGridDefaultAttribute] 

RETURNS @Items TABLE
(Id             INT IDENTITY(1, 1),
 PimAttributeId INT,
 AttributeCode  VARCHAR(600)
)
AS
     BEGIN
         INSERT INTO @Items (PimAttributeId, AttributeCode )
                SELECT PimAttributeId,AttributeCode
                FROM ZnodePimAttribute ZPA
                WHERE IsCategory = 0
				AND (ISNULL(IsShowONGrid,0) = 1 OR IsConfigurable = 1 ) 
                UNION ALL
				SELECT 0,'AttributeFamily'
				UNION ALL
				SELECT PimAttributeId,AttributeCode
				FROM ZnodePimAttribute ZPA
				WHERE AttributeCode = 'OutOfStockOptions'
         RETURN;
     END; -- End Function
GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetDefaultValue')
BEGIN
DROP FUNCTION dbo.Fn_GetDefaultValue
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================


CREATE FUNCTION [dbo].[Fn_GetDefaultValue](
               @FilterBy NVARCHAR(MAX))
RETURNS NVARCHAR(MAX)
AS
     BEGIN
         -- Declare the return variable here
         DECLARE @DefaultValue NVARCHAR(MAX)= '';
         IF @FilterBy = 'PimFamily'
             BEGIN
                 SELECT @DefaultValue = CAST(ZPAF.PimAttributeFamilyId AS VARCHAR(100))
                 FROM ZnodePimAttributeFamily AS ZPAF
                 WHERE ZPAF.IsCategory = 0
                       AND
                       ZPAF.IsDefaultFamily = 1;
             END;
         ELSE IF @FilterBy = 'CategoryFamily'
                     BEGIN
                         SELECT @DefaultValue = CAST(ZPAF.PimAttributeFamilyId AS VARCHAR(100))
                         FROM ZnodePimAttributeFamily AS ZPAF
                         WHERE ZPAF.IsCategory = 1
                               AND
                               ZPAF.IsDefaultFamily = 1;
                     END;
         ELSE IF @FilterBy = 'MediaFamily'
                             BEGIN
                                 SELECT @DefaultValue = CAST(ZMAF.MediaAttributeFamilyId AS VARCHAR(100))
                                 FROM ZnodeMediaAttributeFamily AS ZMAF
                                 WHERE ZMAF.IsDefaultFamily = 1;
                             END;
         ELSE IF @FilterBy = 'AttributeCode'
		     BEGIN 
			     
							SET @DefaultValue= 'ProductName,SKU,Price,Quantity,IsActive,ProductType,ProductImage,Assortment,DisplayOrder,OutOfStockOptions'

			 END 
		 ELSE 
         BEGIN
                                 SELECT @DefaultValue = ZGS.FeatureValues
                                 FROM ZnodeGlobalSetting AS ZGS
                                 WHERE ZGS.FeatureName = @FilterBy;
          END;
                   
         RETURN @DefaultValue;
     END;
GO

IF EXISTS (SELECT TOP 1  1 FROM sys.Objects WHERE OBJECT_NAME(object_id) = 'Fn_GetCategoryCodeAttribute')
BEGIN
DROP FUNCTION dbo.Fn_GetCategoryCodeAttribute
END
GO
create FUNCTION [dbo].[Fn_GetCategoryCodeAttribute] 
(
   
)
	-- Summary :- This function is used to  get default category attribute for grid   
	-- Unit Testing 
	-- EXEC [dbo].[Fn_GetCategoryGridDefaultAttribute] 

RETURNS @Items TABLE ( Id int Identity(1,1),PimAttributeId INT,AttributeCode VARCHAR(600) )

AS
BEGIN
	 
	   INSERT INTO @Items (PimAttributeId,AttributeCode)
	   SELECT PimAttributeId , AttributeCode  
       FROM ZnodePimAttribute ZPA 
	   WHERE IsCategory = 1 
	   AND AttributeCode  IN ('CategoryCode')
	
      RETURN

END -- End Function
GO
---------------------------------------------------------------------data level changes -------------------------------------------------------------------------------------------------







UPDATE ZnodeApplicationSetting
SET SETTING = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>PimProductTypeAssociationId</name>
		<headertext>Checkbox</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>RelatedProductId</name>
		<headertext>RelatedProductId</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>y</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>ProductId</name>
		<headertext>ID</headertext>
		<width>30</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>Image</name>
		<headertext>Image</headertext>
		<width>20</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>ImagePath,ProductName</imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>ProductName</name>
		<headertext>Product Name</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>ProductType</name>
		<headertext>Product Type</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>SKU</name>
		<headertext>SKU</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>AvailableInventory</name>
		<headertext>Available Inventory</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>Assortment</name>
		<headertext>Assortment</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>10</id>
		<name>DisplayOrder</name>
		<headertext>Display Order</headertext>
		<width>10</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>3</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>Text</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>11</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit|Delete</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit|Delete</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/PIM/Products/UpdateAssociatedProducts|/PIM/Products/UnassociateProducts</manageactionurl>
		<manageparamfield>PimProductTypeAssociationId,ProductId,RelatedProductId|PimProductTypeAssociationId,ProductId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
WHERE ItemName =  'View_ManageProductTypeList'

GO

UPDATE ZnodeApplicationSetting
SET SETTING = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>ProductId</name>
		<headertext>Checkbox</headertext>
		<width>30</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield>ProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>ProductId</name>
		<headertext>ID</headertext>
		<width>30</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>ProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>Image</name>
		<headertext>Image</headertext>
		<width>20</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>ImagePath, ProductName</imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>ProductName</name>
		<headertext>Product Name</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>ProductType</name>
		<headertext>Product Type</headertext>
		<width>50</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>SKU</name>
		<headertext>SKU</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>AvailableInventory</name>
		<headertext>Available Inventory</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>Assortment</name>
		<headertext>Assortment</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
WHERE ItemName =  'UnassociatedProductsDynamic'

GO

UPDATE ZnodeApplicationSetting
SET SETTING = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>PimProductTypeAssociationId</name>
		<headertext>Checkbox</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>RelatedProductId</name>
		<headertext>RelatedProductId</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>y</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>PimProductId</name>
		<headertext>ID</headertext>
		<width>30</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>Image</name>
		<headertext>Image</headertext>
		<width>20</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>ProductImage,ProductName</imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>ProductName</name>
		<headertext>Product Name</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>ProductType</name>
		<headertext>Product Type</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>SKU</name>
		<headertext>SKU</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>AvailableInventory</name>
		<headertext>Available Inventory</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>Assortment</name>
		<headertext>Assortment</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>10</id>
		<name>DisplayOrder</name>
		<headertext>Display Order</headertext>
		<width>10</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>3</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>y</iscontrol>
		<controltype>Text</controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>Text</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>11</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit|Delete</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit|Delete</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/PIM/Products/UpdateAssociatedProducts|/PIM/Products/UnassociateProducts</manageactionurl>
		<manageparamfield>PimProductTypeAssociationId,PimProductId,RelatedProductId|PimProductTypeAssociationId,PimProductId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
WHERE ItemName =  'View_ManageProductTypeList_GroupProduct'

GO

UPDATE ZnodeApplicationSetting
SET SETTING = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>PimProductId</name>
    <headertext>Checkbox</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>y</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>PimProductId</name>
    <headertext>ID</headertext>
    <width>30</width>
    <datatype>Int32</datatype>
    <columntype>Int32</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>ProductId</checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>Image</name>
    <headertext>Image</headertext>
    <width>20</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>ProductImage,ProductName</imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>imageicon</Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>ProductName</name>
    <headertext>Product Name</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>ProductType</name>
    <headertext>Product Type</headertext>
    <width>50</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>n</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>SKU</name>
    <headertext>SKU</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>SKU</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>AvailableInventory</name>
    <headertext>Available Inventory</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>SKU</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>8</id>
    <name>Assortment</name>
    <headertext>Assortment</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>'
WHERE ItemName =  'UnassociatedProducts'

GO

-- dt\27_06_2018


update ZnodeApplicationSetting set Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
  <column>
    <id>1</id>
    <name>SEOCode</name>
    <headertext>SEO Code</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>2</id>
    <name>PageTitle</name>
    <headertext>Page Title</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>y</isallowlink>
    <islinkactionurl>/SEO/SEODetails</islinkactionurl>
    <islinkparamfield>SEOCode</islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>3</id>
    <name>ItemName</name>
    <headertext>Page Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>true</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>y</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>4</id>
    <name>PortalName</name>
    <headertext>Store Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>y</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>5</id>
    <name>PageTemplateName</name>
    <headertext>Template Name</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>6</id>
    <name>SEOUrl</name>
    <headertext>SEO Url</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>7</id>
    <name>SEOTitle</name>
    <headertext>SEO Title</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>8</id>
    <name>SEOKeywords</name>
    <headertext>SEO Keywords</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>9</id>
    <name>SEODescription</name>
    <headertext>SEO Description</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>true</allowpaging>
    <format>
    </format>
    <isvisible>n</isvisible>
    <mustshow>n</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>10</id>
    <name>IsActive</name>
    <headertext>Status</headertext>
    <width>60</width>
    <datatype>Boolean</datatype>
    <columntype>Boolean</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>11</id>
    <name>SEOPublishStatus</name>
    <headertext>Publish Status</headertext>
    <width>60</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>
    </format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>
    </displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>
    </manageactionurl>
    <manageparamfield>
    </manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
  <column>
    <id>12</id>
    <name>Manage</name>
    <headertext>Action</headertext>
    <width>30</width>
    <datatype>String</datatype>
    <columntype>String</columntype>
    <allowsorting>false</allowsorting>
    <allowpaging>false</allowpaging>
    <format>Edit|Publish</format>
    <isvisible>y</isvisible>
    <mustshow>y</mustshow>
    <musthide>n</musthide>
    <maxlength>0</maxlength>
    <isallowsearch>n</isallowsearch>
    <isconditional>n</isconditional>
    <isallowlink>n</isallowlink>
    <islinkactionurl>
    </islinkactionurl>
    <islinkparamfield>
    </islinkparamfield>
    <ischeckbox>n</ischeckbox>
    <checkboxparamfield>
    </checkboxparamfield>
    <iscontrol>n</iscontrol>
    <controltype>
    </controltype>
    <controlparamfield>
    </controlparamfield>
    <displaytext>Edit|Publish</displaytext>
    <editactionurl>
    </editactionurl>
    <editparamfield>
    </editparamfield>
    <deleteactionurl>
    </deleteactionurl>
    <deleteparamfield>
    </deleteparamfield>
    <viewactionurl>
    </viewactionurl>
    <viewparamfield>
    </viewparamfield>
    <imageactionurl>
    </imageactionurl>
    <imageparamfield>
    </imageparamfield>
    <manageactionurl>/SEO/SEODetails|/SEO/Publish</manageactionurl>
    <manageparamfield>SEOCode|SEOCode,seoTypeId,localeId,portalId</manageparamfield>
    <copyactionurl>
    </copyactionurl>
    <copyparamfield>
    </copyparamfield>
    <xaxis>n</xaxis>
    <yaxis>n</yaxis>
    <isadvancesearch>y</isadvancesearch>
    <Class>
    </Class>
    <SearchControlType>--Select--</SearchControlType>
    <SearchControlParameters>
    </SearchControlParameters>
    <DbParamField>
    </DbParamField>
    <useMode>DataBase</useMode>
    <IsGraph>n</IsGraph>
    <allowdetailview>n</allowdetailview>
  </column>
</columns>' , ModifiedDate = GETDATE()
where  ItemName = 'SEOContentPages'

GO

update ZnodeApplicationSetting 
set Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>SEOCode</name>
		<headertext>SEO Code</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>ID</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>CategoryName</name>
		<headertext>Category</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl>/SEO/SEODetails</islinkactionurl>
		<islinkparamfield>SEOCode</islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>SEOUrl</name>
		<headertext>SEO Url</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>SEOTitle</name>
		<headertext>SEO Title</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>SEOKeywords</name>
		<headertext>SEO Keywords</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>SEODescription</name>
		<headertext>SEO Description</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>Status</name>
		<headertext>Status</headertext>
		<width>0</width>
		<datatype>Boolean</datatype>
		<columntype>Boolean</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>PublishStatus</name>
		<headertext>Publish Status</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format>Edit|Publish</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit|Publish</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/SEO/SEODetailsOfCategory|/SEO/Publish</manageactionurl>
		<manageparamfield>SEOCode|SEOCode,seoTypeId,localeId,portalId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
where itemname = 'SEOCategoryDetails'

GO

Update ZnodeApplicationSetting
set Setting = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>ItemId</name>
		<headertext>ID</headertext>
		<width>40</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>ID</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>Image</name>
		<headertext>Image</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>Single</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>Image,ItemName</imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>n</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>ProductName</name>
		<headertext>Product Name</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>SKU</name>
		<headertext>SKU</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>SEOUrl</name>
		<headertext>SEO Url</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>SEOTitle</name>
		<headertext>SEO Title</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>SEOKeywords</name>
		<headertext>SEO Keywords</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>SEODescription</name>
		<headertext>SEO Description</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>IsActive</name>
		<headertext>Status</headertext>
		<width>40</width>
		<datatype>Boolean</datatype>
		<columntype>Boolean</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>10</id>
		<name>PublishStatus</name>
		<headertext>Publish Status</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>11</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit|Publish</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit|Publish</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/SEO/SEODetailsOfProduct|/SEO/Publish</manageactionurl>
		<manageparamfield>SEOCode|SEOCode,seoTypeId,localeId,portalId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>12</id>
		<name>SEOCode</name>
		<headertext>SEO Code</headertext>
		<width>40</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>y</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
where ItemName = 'SEOProductsDetails'


GO

--dt\29_06_2018

UPDATE ZnodeApplicationsetting
SET Setting  = '<?xml version="1.0" encoding="utf-16"?>
<columns>
	<column>
		<id>1</id>
		<name>PimProductId</name>
		<headertext>Checkbox</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>y</ischeckbox>
		<checkboxparamfield>PimProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>2</id>
		<name>RelatedProductId</name>
		<headertext>RelatedProductId</headertext>
		<width>20</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>n</isvisible>
		<mustshow>n</mustshow>
		<musthide>y</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield>PimProductId</checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>3</id>
		<name>PimProductId</name>
		<headertext>ID</headertext>
		<width>30</width>
		<datatype>Int32</datatype>
		<columntype>Int32</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>4</id>
		<name>Image</name>
		<headertext>Image</headertext>
		<width>20</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield>ProductImage,ProductName</imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class>imageicon</Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>5</id>
		<name>ProductName</name>
		<headertext>Product Name</headertext>
		<width>60</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>6</id>
		<name>ProductType</name>
		<headertext>Product Type</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>7</id>
		<name>Assortment</name>
		<headertext>Assortment</headertext>
		<width>0</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>false</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>n</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>y</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>8</id>
		<name>SKU</name>
		<headertext>SKU</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>SKU</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>9</id>
		<name>AvailableInventory</name>
		<headertext>Available Inventory</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>true</allowsorting>
		<allowpaging>true</allowpaging>
		<format></format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext></displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl></manageactionurl>
		<manageparamfield></manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
	<column>
		<id>10</id>
		<name>Manage</name>
		<headertext>Action</headertext>
		<width>30</width>
		<datatype>String</datatype>
		<columntype>String</columntype>
		<allowsorting>false</allowsorting>
		<allowpaging>true</allowpaging>
		<format>Edit|Delete</format>
		<isvisible>y</isvisible>
		<mustshow>y</mustshow>
		<musthide>n</musthide>
		<maxlength>0</maxlength>
		<isallowsearch>n</isallowsearch>
		<isconditional>n</isconditional>
		<isallowlink>n</isallowlink>
		<islinkactionurl></islinkactionurl>
		<islinkparamfield></islinkparamfield>
		<ischeckbox>n</ischeckbox>
		<checkboxparamfield></checkboxparamfield>
		<iscontrol>n</iscontrol>
		<controltype></controltype>
		<controlparamfield></controlparamfield>
		<displaytext>Edit|Delete</displaytext>
		<editactionurl></editactionurl>
		<editparamfield></editparamfield>
		<deleteactionurl></deleteactionurl>
		<deleteparamfield></deleteparamfield>
		<viewactionurl></viewactionurl>
		<viewparamfield></viewparamfield>
		<imageactionurl></imageactionurl>
		<imageparamfield></imageparamfield>
		<manageactionurl>/PIM/Products/UpdateAssociatedProducts|/PIM/Products/UnassociateProducts</manageactionurl>
		<manageparamfield>PimProductId,PimProductId,RelatedProductId|PimProductId,PimProductId</manageparamfield>
		<copyactionurl></copyactionurl>
		<copyparamfield></copyparamfield>
		<xaxis>n</xaxis>
		<yaxis>n</yaxis>
		<isadvancesearch>y</isadvancesearch>
		<Class></Class>
		<SearchControlType>--Select--</SearchControlType>
		<SearchControlParameters></SearchControlParameters>
		<DbParamField></DbParamField>
		<useMode>DataBase</useMode>
		<IsGraph>n</IsGraph>
		<allowdetailview>n</allowdetailview>
	</column>
</columns>'
WHERE ItemName = 'View_ManageProductTypeListForToBeAssociated'

GO



Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Products','GetAssociatedCatalog',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Products' and ActionName = 'GetAssociatedCatalog')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetAssociatedCatalog')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetAssociatedCatalog'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetAssociatedCatalog')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Products' and ActionName= 'GetAssociatedCatalog'))


GO
-- ALL action related to seo task
--dt\27_06_2018

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'SEO','GetSEODetailsBySEOCode',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'GetSEODetailsBySEOCode')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode'))

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode'))

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetSEODetailsBySEOCode'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select null ,'SEO','GetProductsForSEO',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'GetProductsForSEO')
Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
 (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO')	
    ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetProductsForSEO') ,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
     (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO') and ActionId = 
     (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetProductsForSEO'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId, CreatedBy ,CreatedDate,	ModifiedBy, ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetProductsForSEO')
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetProductsForSEO'))

--ZPD:2185 dt:29/06/2018
GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'SEO','CategorySEODetails',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'CategorySEODetails')
 

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'CategorySEODetails')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'CategorySEODetails'))


insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'CategorySEODetails')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'Category') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'CategorySEODetails'))

GO

Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Catalog','GetAssociatedCatalog',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Catalog' and ActionName = 'GetAssociatedCatalog')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetAssociatedCatalog')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetAssociatedCatalog'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetAssociatedCatalog')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'PIM' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Catalog' and ActionName= 'GetAssociatedCatalog'))

GO

--Bug ID:2163  dt:29/06/2018
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'Search' ,'Search','GetAutoSuggestion',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Search' and ActionName = 'GetAutoSuggestion')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAutoSuggestion')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAutoSuggestion'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration'),
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAutoSuggestion')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Site Search' AND ControllerName = 'SearchConfiguration') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Search' and ActionName= 'GetAutoSuggestion'))

GO

--dam dt\27_06
update ZnodeActions 
set IsGlobalAccess=0 
where Actionname = 'GetAjaxHeaders' AND Areaname = 'MediaManager' AND controllername = 'MediaManager'

GO

update ZnodeActions
set IsGlobalAccess=0 
where Actionname = 'List' AND Areaname = 'MediaManager' AND controllername = 'MediaManager'

GO
  IF NOT EXISTS (Select TOP 1 1 FROM [ZnodeGlobalSetting] WHERE [FeatureName]   = 'IsAllowWithOtherPromotionsAndCoupons')
  BEGIN
INSERT INTO ZnodeGlobalSetting (FeatureName,FeatureValues,FeatureSubValues,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'IsAllowWithOtherPromotionsAndCoupons','True',null,2,getdate(),2,getdate()
END
GO

Update ZnodeMediaConfiguration SET MediaServerMasterId=(select MediaServerMasterId  from ZnodeMediaservermaster where servername = 'Network Drive' )
WHERE server= 'Network Drive'

GO
update ZnodeMenu set ActionName='GetCategoriesForSEO' where ControllerName='SEO' and MenuName='Categories'
GO
update ZnodeMenu set ActionName='GetProductsForSEO' where ControllerName='SEO' and MenuName='Products'

GO

update s
set s.seocode = a.SKU
from ZnodeCMSSEODetail s 
inner join ZnodePublishProductDetail a on (s.seoid = a.PublishProductId)
inner join ZnodePublishProduct b ON (a.PublishProductId = b.PublishProductId)
where 
s.CMSSEOTypeId = (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Product')  

GO

delete a  
from ZnodeCMSSEODEtaillocale a 
inner join ZnodeCMSSEODetail s on (a.CMSSEODetailId = s.CMSSEODetailId)
where s.CMSSEOTypeId = (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Product')   
and not exists (select top 1 1 from ZnodePublishProduct b where s.SEOId = b.PublishProductId)

delete  s 
from ZnodeCMSSEODetail s 
where s.CMSSEOTypeId = (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Product')  
and not exists (select top 1 1 from ZnodePublishProduct b where s.SEOId = b.PublishProductId)

GO
update s
set s.seocode = d.categoryvalue
from ZnodeCMSSEODetail s 
inner join ZnodePublishCategoryDetail a on (s.seoid = a.publishcategoryid)
inner join ZnodePublishCategory b ON (a.PublishCategoryId = b.PublishCategoryId)
inner join ZnodePimcategoryAttributeValue c on (b.PimCategoryId = c.PimCategoryId)
inner join ZnodePimCategoryAttributeValueLocale d on (c.PimCategoryAttributeValueId = d.PimCategoryAttributeValueId)
where c.pimattributeid = (select pimattributeid FROM ZnodePimAttribute where AttributeCode = 'CategoryCode') and s.CMSSEOTypeId =  (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Category') 

GO

declare @tbl_content table (CMSSEODetailId INT)
insert into @tbl_content
select CMSSEODetailId from ZnodeCMSSEODetail
where CMSSEOTypeId =  (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Category') 
AND SEOCOde IS NULL

delete a
from ZnodeCMSSEODetailLocale a WHERE EXISTS (select top 1 1 from @tbl_content b where a.CMSSEODetailId = b.CMSSEODetailId)

delete a
from ZnodeCMSSEODetail a WHERE EXISTS (select top 1 1 from @tbl_content b where a.CMSSEODetailId = b.CMSSEODetailId)

GO

update s
set seocode = a.brandcode
from ZnodeCMSSEODetail s 
inner join ZnodeBrandDetails a on (a.BrandId = s.SEOId)
inner join ZnodeBrandDetailLocale b on (b.BrandId  = a.BrandId)
where  s.CMSSEOTypeId = (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Brand') 

GO

update s
set seocode = a.PageName
from ZnodeCMSSEODetail s 
inner join ZnodeCMSContentPages a on (a.CMSContentPagesId = s.SEOId ANd a.PortalId = s.PortalId)
inner join ZnodeCMSContentPagesLocale b on (b.CMSContentPagesId  = a.CMSContentPagesId)
where  s.CMSSEOTypeId =  (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Content Page') 
GO

delete a  
from ZnodeCMSSEODEtaillocale a 
inner join ZnodeCMSSEODetail s on (a.CMSSEODetailId = s.CMSSEODetailId)
where s.CMSSEOTypeId = (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Content Page') 
and s.SEOCode is null  
GO

delete  s 
from ZnodeCMSSEODetail s 
where s.CMSSEOTypeId = (select CMSSEOTypeId FROM  ZnodeCMSSEOType WHERE NAME = 'Content Page') 
and s.SEOCode is null

GO

declare @tbl_content table (CMSSEODetailId INT)

INSERT INTO ZnodeCMSSEODetail (CMSSEOTypeId,SEOId,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsPublish,SEOCode)
OUTPUT INSERTED.CMSSEODetailId INTO @tbl_content
SELECT (select CMSSEOTypeId FROM ZnodeCMSSEOType WHERE name = 'Content Page'),NULL,0,'',PortalId ,
'SimpleSearchPage',2,getdate(),2,getdate(),null,'Simple Search Page'
FROM ZnodePortal ZP
WHERE NOT EXISTS (select top 1 1 from ZnodeCMSSEODetail cd where cd.PortalId = ZP.PortalId AND CD.SEOCode = 'Simple Search Page')


INSERT INTO ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT CMSSEODetailId,1,'Simple Search Page','Simple Search Page','Simple Search Page',2,getdate(),2,getdate()
FROM @tbl_content



GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPriceFromAssociateProducts')
BEGIN 
	DROP PROCEDURE Znode_GetPriceFromAssociateProducts
END 
GO 

CREATE  PROCEDURE [dbo].[Znode_GetPriceFromAssociateProducts]
(   
	@PortalId         INT,
    @SKU			  NVARCHAR(300),
	@PimProductId	  INT,
	@UserId			  INT = 2,
	@ProductType	  VARCHAR(200),
	@LocaleId		  INT )
AS 
  /*  
    Summary: WebStore: Calculate price from associate product and assign to parent products
	EXEC [Znode_GetPriceFromAssociateProducts]
	@PortalId         = 1 ,
	@SKU	= 'gr990',
	@PimProductId	=  97 ,
	@UserId	= 2,
	@ProductType	= 'Configurable Product',
	@LocaleId	= 1 

 */
     BEGIN
         BEGIN TRAN A;
         BEGIN TRY
             SET NOCOUNT ON;

			 DECLARE @TBL_ListOfAssociateProducts TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingListOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				

			DECLARE @PimAttributeId INT,@currentUtcDate   VARCHAR(200) = ''
			SET @currentUtcDate   = GETDATE ()
			SET @PimAttributeId =   DBO.Fn_GetProductSKUAttributeId()
						    Declare @ChildProductIds TABLE (Id int, AssociatedProductDisplayOrder int )
			INSERT INTO @ChildProductIds (ID,AssociatedProductDisplayOrder) 
			SELECT ZPPT.PimProductId , ZPPT.DisplayOrder  from ZnodePimProductTypeAssociation ZPPT 
			WHERE ZPPT.PimParentProductId= @PimProductId
			

			--Price logic for Associate products
			INSERT INTO @TBL_ListOfAssociateProducts
			(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct,AssociatedProductDisplayOrder)
			SELECT ZPAV.PimProductId,ZPAVL.AttributeValue,@SKU ,@PimProductId,NULL , NULL,@PimProductId,
			CPI.AssociatedProductDisplayOrder 
			FROM ZnodePimAttributeValue ZPAV INNER JOIN ZnodePimAttributeValueLocale ZPAVL 
			ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
			Inner join @ChildProductIds  CPI ON CPI.ID = ZPAV.PimProductId  
			where ZPAV.PimAttributeId  = @PimAttributeId 

			


			SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),ChildSKU) 
			FROM @TBL_ListOfAssociateProducts where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			

			INSERT INTO @tbl_PricingListOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 


			update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			PLC.SalesPrice = PLCA.SalesPrice 
			from @TBL_ListOfAssociateProducts PLC inner join @tbl_PricingListOfAssociatedProduct
			PLCA on PLC.ChildSKU = PLCA.sku
			
			--If @ProductType = 'Configurable Product'
			--	select Min(RetailPrice)  RetailPrice  , Min(SalesPrice) SalesPrice  from @TBL_ListOfAssociateProducts
			--ELSE If @ProductType = 'grouped product'
			--	select TOP 1 RetailPrice , SalesPrice from @TBL_ListOfAssociateProducts
			--	Order by AssociatedProductDisplayOrder
			If @ProductType in ('Configurable Product','grouped product')
				select Min(RetailPrice)  RetailPrice  , Min(SalesPrice) SalesPrice  from @TBL_ListOfAssociateProducts			
				
			 COMMIT TRAN A;
			
         END TRY
         BEGIN CATCH
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore_ver1 @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductDataForWebStore_ver1',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogCategorySEODetail')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogCategorySEODetail
END 
GO 

  ---EXEC Znode_GetCatalogCategorySEODetail @WhereClause = '', @PortalId = 1, @RowsCount = 0
  CREATE PROCEDURE [dbo].[Znode_GetCatalogCategorySEODetail]
  (
	  @WhereClause      VARCHAR(MAX),
	  @Rows             INT           = 100,
	  @PageNo           INT           = 1,
	  @Order_BY         VARCHAR(1000) = '',
	  @RowsCount        INT OUT,
	  @LocaleId         INT           = 1,
	  @PortalId         INT
)
AS
BEGIN
	SET NOCOUNT ON;

	Declare @PimCatalogId INT, @SQL VARCHAR(MAX), @DefaultLocaleId VARCHAR(20)= dbo.Fn_GetDefaultLocaleId()

	SELECT @PimCatalogId = PimCatalogId 
	FROM ZnodePortalCatalog ZPC
	INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId


	IF OBJECT_ID('TEMPDB..#CategoryDetail') IS NOT NULL
		DROP TABLE #CategoryDetail

	IF OBJECT_ID('TEMPDB..##TempCategoryDetail') IS NOT NULL
		DROP TABLE ##TempCategoryDetail

		IF OBJECT_ID('TEMPDB..#znodeCatalogCategory') IS NOT NULL
		DROP TABLE #znodeCatalogCategory

	SELECT PimCategoryId, CategoryName, CategoryCode, LocaleId
	INTO #CategoryDetail
	FROM
	(
		SELECT ZPCAV.PimCategoryId,ZPA.AttributeCode,ZPCAVL.CategoryValue, ZPCAVL.LocaleId 
		FROM ZnodePimCategoryAttributeValue ZPCAV
		INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId
		INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId
		where ZPA.AttributeCode in ( 'CategoryName', 'CategoryCode')
	)TB PIVOT(MAX(CategoryValue) FOR AttributeCode in ( CategoryName, CategoryCode))AS PVT
	
	

	SET @SQL = '

	select distinct PimCatalogId,PimCategoryId into #znodeCatalogCategory
	FROm ZnodePimCatalogCategory

	;With CTE_CategoryDetail AS
	(
		SELECT DISTINCT PC.PimCatalogId, PC.CatalogName, CD.PimCategoryId, CD.CategoryCode, CD.CategoryName , ISNULL(CSD.SEOCode,CD.CategoryCode) as SEOCode , CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		Case When Isnull(CSD.IsPublish ,0 ) = 0 then ''Draft'' ELSE ''Published'' END  IsPublish , ActivationDate , ExpirationDate, ZPC.IsActive, CD.LocaleId 
		FROM #CategoryDetail CD
		INNER JOIN ZnodePimCategory ZPC ON (ZPC.PimCategoryId = CD.PimCategoryId)
		INNER JOIN  #znodeCatalogCategory PCC on CD.PimCategoryId = PCC.PimCategoryId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodePimCategoryHierarchy CH ON (CH.PimCategoryId = CD.PimCategoryId)
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Category''
		LEFT JOIN ZnodeCMSSEODetail CSD on CD.CategoryCode = CSD.SEOCode and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId 	
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' AND CD.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+', '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
	)
	,CTE_CategoryDetail_Locale as
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, LocaleId
		FROM CTE_CategoryDetail CD
		WHERE CD.LocaleId ='+CAST(@LocaleId AS VARCHAR(50))+'
	)
	,CTE_CategoryDetail_BothLocale as
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive
		FROM CTE_CategoryDetail_Locale
		Union All
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive
		FROM CTE_CategoryDetail CDS
		WHERE LocaleId ='+CAST(@DefaultLocaleId AS VARCHAR(50))+' AND
			NOT EXISTS( SELECT * FROM CTE_CategoryDetail_Locale CSD1
						WHERE CDS.PimCategoryId = CSD1.PimCategoryId AND CDS.CatalogName = CSD1.CatalogName )
	)
	,CTE_CategoryDetail_WhereClause AS
	(
		SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, '+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimCategoryId')+',Count(*)Over() CountId
		FROM CTE_CategoryDetail_BothLocale CD
		WHERE 1 = 1 '+CASE WHEN @WhereClause = '' THEN '' ELSE ' AND '+@WhereClause END +'
	)
	SELECT PimCatalogId, CatalogName, PimCategoryId, CategoryCode,CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ActivationDate,ExpirationDate,IsActive, CountId
	INTO ##TempCategoryDetail
	FROM CTE_CategoryDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempCategoryDetail ),0)

	SELECT  PimCategoryId, CategoryName, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish, ActivationDate,ExpirationDate,IsActive FROM ##TempCategoryDetail

	IF OBJECT_ID('TEMPDB..#CategoryDetail') IS NOT NULL
		DROP TABLE #CategoryDetail

	IF OBJECT_ID('TEMPDB..##TempCategoryDetail') IS NOT NULL
		DROP TABLE ##TempCategoryDetail

	IF OBJECT_ID('TEMPDB..#znodeCatalogCategory') IS NOT NULL
	DROP TABLE #znodeCatalogCategory

END

GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogProductSEODetail')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogProductSEODetail
END 
GO 


CREATE PROCEDURE [dbo].[Znode_GetCatalogProductSEODetail]
( 
  @WhereClause      NVARCHAR(MAX),
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PortalId			INT
 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetail @WhereClause=N'',@Rows=100,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 1 ,@LocaleId=1 
	   rollback tran
	  
	     declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetails @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 5 ,@LocaleId=1 


    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE  @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @SQL NVARCHAR(MAX), 
					 @PimProductId TransferId,
					 @PimAttributeId VARCHAR(MAX)
					
             DECLARE @TransferPimProductId TransferId 
		
	
			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct

			Declare @PimCatalogId INT

			SELECT @PimCatalogId = PimCatalogId 
			FROM ZnodePortalCatalog ZPC
			INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId
				
                SELECT  PimProductid,SKU,ProductName,ProductImage,IsActive
				INTO #ProductDetail
				 FROM 
				 (
				 SELECT c.pimproductId,PA.attributecode,e.AttributeValue
				 FROM
				 znodePimProduct c 
				 inner join ZnodePimAttributeValue d on (c.PimProductid = d.PimProductid)
				 inner join ZnodePimAttributeValueLocale e on (d.PimAttributeValueId = e.PimAttributeValueId)
				 inner join ZnodePimAttribute PA ON (PA.PimAttributeId = d.PimAttributeId)
				 where  PA.Attributecode IN ('SKU','ProductName','ProductImage','IsActive')
				-- AND e.localeid = @LocaleId
				 ) piv PIVOT(MAX(AttributeValue) FOR AttributeCode in ( SKU,ProductName,ProductImage,IsActive))AS PVT
				


		SET @SQL = 
		'
		--DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
		--INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
		--	 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		select distinct PimCatalogId,PimProductId into #znodeCatalogProduct
	FROm ZnodePimCatalogCategory

		DECLARE @TBL_MediaValue TABLE (PimAttributeValueId INT,PimProductId INT,MediaPath INT,PimAttributeId INt,LocaleId INT )
		INSERT INTO @TBL_MediaValue
		SELECT ZPAV.PimAttributeValueId	,ZPAV.PimProductId	,ZPPAM.MediaId MediaPath,ZPAV.PimAttributeId , 	ZPPAM.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimProductAttributeMedia ZPPAM ON ( ZPPAM.PimAttributeValueId = ZPAV.PimAttributeValueId)
					INNER JOIN #ProductDetail PD ON (PD.PimProductId = ZPAV.PimProductId)
					LEFT JOIN ZnodeMedia ZM ON (Zm.Path = ZPPAM.MediaPath) 
					WHERE  ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute pa where attributecode = ''ProductImage'') 

		;WITH Cte_ProductMedia
               AS (SELECT PD.PimProductId  , 
			   URL+ZMSM.ThumbnailFolderName+''/''+ zm.PATH  AS ProductImagePath 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_MediaValue PD ON (PD.MediaPath = CAST(ZM.MediaId AS VARCHAR(50)))
			   --INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = PD.PimATtributeId )
			   
			   )

		, CTE_ProductDetail AS
	(
		SELECT DISTINCT  CD.pimproductId, SKU,ProductName,
		case WHEN  CD.IsActive = ''true'' THEN 1 ELSE 0 END IsActive, ISNULL(CSD.SEOCode,SKU) as SEOCode, CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		Case When Isnull(CSD.IsPublish ,0 ) = 0 then ''Draft'' ELSE ''Published'' END  IsPublish  , CPM.ProductImagePath
		FROM #ProductDetail CD
		INNER JOIN #znodeCatalogProduct PCC on CD.PimProductId = PCC.PimProductId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Product''
		LEFT JOIN ZnodeCMSSEODetail CSD on CD.SKU = CSD.SEOCode and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId AND CSDL.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
		
		INNER JOIN Cte_ProductMedia CPM ON (CPM.PimProductId = CD.PimProductId)
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' 
	)
	,CTE_ProductDetail_WhereClause AS
	(
		SELECT  pimproductId, SKU,ProductName,
		cast(IsActive as bit) IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimProductId')+',Count(*)Over() CountId
		FROM CTE_ProductDetail CD
		WHERE 1 = 1  '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath, CountId
	INTO ##TempProductDetail
	FROM CTE_ProductDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempProductDetail ),0)

	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 
	FROM ##TempProductDetail
	--GROUP by pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 

  
		

			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			
			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct


         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		 --    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			-- @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			--VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			--@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			--@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
   --          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
   --          EXEC Znode_InsertProcedureErrorLog
			--	@ProcedureName = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorMessage = @ErrorMessage,
			--	@ErrorLine = @ErrorLine,
			--	@ErrorCall = @ErrorCall;
         END CATCH;
     END;

	 GO

IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCMSContentPagesFolderDetails')
BEGIN 
	DROP PROCEDURE Znode_GetCMSContentPagesFolderDetails
END 
GO 

CREATE   PROCEDURE [dbo].[Znode_GetCMSContentPagesFolderDetails]
( @WhereClause NVARCHAR(max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(100)  = NULL,
  @RowsCount   INT OUT,
  @LocaleId    INT           = 1)
AS  
   /* 
    Summary: To get content page folder details 
             Provide output for paging with dynamic where cluase                  
    		 User view : View_CMSContentPagesFolderDetails
    Unit Testing  
    Exec Znode_GetCMSContentPagesFolderDetails '',@RowsCount = 0
    
	*/
     BEGIN
        BEGIN TRY
          SET NOCOUNT ON;

		     DECLARE @SQL NVARCHAR(MAX);
			 DECLARE @SQLWhereClause nvarchar(max)

			 
             DECLARE @DefaultLocaleId VARCHAR(100)= dbo.Fn_GetDefaultLocaleId();
             DECLARE @TBL_ContenetPageLocale TABLE(CMSContentPagesId INT,PortalId INT,CMSTemplateId INT,PageTitle NVARCHAR(200),PageName NVARCHAR(200),ActivationDate DATETIME, ExpirationDate DATETIME,IsActive BIT
				    ,CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,ModifiedDate DATETIME,PortalName  NVARCHAR(max) ,CMSContentPageGroupId INT 
				    , PageTemplateName NVARCHAR(200),SEOUrl NVARCHAR(max),MetaInformation NVARCHAR(max),SEODescription NVARCHAR(max),SEOTitle NVARCHAR(max),SEOKeywords NVARCHAR(max),CMSContentPageGroupName NVARCHAR(200),RowId INT ,CountNo INT,PublishStatus nvarchar(300)  ,SEOPublishStatus  nvarchar(300), SEOCode NVARCHAR(4000) )
			--SET @SQLWhereClause  = [dbo].[Fn_GetFilterWhereClause](@WhereClause) 
					SET @SQL = '  
						;With CMSContentPages AS (		
						SELECT DISTINCT ZCCP.CMSContentPagesId,ZCCP.PortalId,ZCCP.CMSTemplateId,ZCCPL.PageTitle,ZCCP.PageName,ZCCP.ActivationDate, ZCCP.ExpirationDate,ZCCP.IsActive
						,ZCCP.CreatedBy,ZCCP.CreatedDate,ZCCP.ModifiedBy,ZCCP.ModifiedDate,e.StoreName PortalName   ,ISNULL(ZCCPG.CMSContentPageGroupId,0) CMSContentPageGroupId
						,zct.Name PageTemplateName ,zcsd.SEOUrl,zcsd.MetaInformation,ZCCPGL.Name CMSContentPageGroupName,ZCCPL.LocaleId,ZCSDL.SEODescription,ZCSDL.SEOTitle,ZCSDL.SEOKeywords	,ZCSDL.LocaleId LocaleSeo,ZCCPGL.LocaleId LocaeIdRTR ,ZCCP.IsPublished
						, zcsd.IsPublish IsSEOPublished, ISNULL(ZCSD.SEOCode,ZCCP.PageName) as SEOCode
					    FROM ZnodeCMSContentPages ZCCP 
						LEFt Outer JOIN [ZnodeCMSContentPageGroupMapping] ZCCPGM ON (ZCCPGM.CMSContentPagesId = ZCCP.CMSContentPagesId) 
					    LEFt Outer JOIN [ZnodeCMSContentPageGroup] ZCCPG ON (ZCCPG.CMSContentPageGroupId = ZCCPGM.CMSContentPageGroupId)
						LEFt Outer JOIN [ZnodeCMSContentPagesLocale] ZCCPL ON (ZCCP.CMSContentPagesId = ZCCPL.CMSContentPagesId  )
						LEFt Outer JOIN [ZnodeCMSContentPageGroupLocale] ZCCPGL ON (ZCCPGL.CMSContentPageGroupId = ZCCPG.CMSContentPageGroupId AND ZCCPGL.LocaleId = ZCCPL.LocaleId  )					
						LEFT JOIN ZnodeCMSTemplate zct ON (zct.CMSTemplateId = ZCCP.CMSTemplateId )
						LEFT JOIN ZnodeCMSSEODetail zcsd ON (zcsd.SEOCode = ZCCP.PageName AND ZCSD.Portalid = ZCCP.portalId AND 
					    EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType zcst WHERE zcst.CMSSEOTypeId = zcsd.CMSSEOTypeId AND zcst.Name = ''Content Page'' ))
					    LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON (ZCSDL.CMSSEODetailId = zcsd.CMSSEODetailId  AND ZCSDL.LocaleId = ZCCPL.LocaleId ) 
						LEFt Outer JOIN ZnodePortal e on ZCCP.PortalId = e.PortalId 
					    WHERE  ZCCPL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCSDL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						--AND ZCCPGL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+' , '+CAST(@DefaultLocaleId AS VARCHAR(50))+') 
						AND zcsd.PortalId IS NOT NULL ) 
						, Cte_ContaintPageDetails AS (
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEODescription,SEOTitle,SEOKeywords,MetaInformation,IsPublished	, IsSEOPublished,SEOCode FROM CMSContentPages WHERE LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+'
      --                  AND LocaleSeo = '+CAST(@LocaleId AS VARCHAR(50))+'
						--AND LocaeIdRTR   = '+CAST(@LocaleId AS VARCHAR(50))+'
						)
						, Cte_ContentPage  AS (     	 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished,SEOCode	FROM Cte_ContaintPageDetails 
						UNION ALL 
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
						,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName ,CMSContentPageGroupId , PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,IsPublished,IsSEOPublished,SEOCode
					    FROM CMSContentPages CCP WHERE LocaleId = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					    AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_ContaintPageDetails CTCPD WHERE CTCPD.CMSContentPagesId  = CCP.CMSContentPagesId AND  CTCPD.Portalid = CCp.PortalId)  AND  LocaleSeo = '+CAST(@DefaultLocaleId AS VARCHAR(50))+'
					    AND LocaeIdRTR   = '+CAST(@DefaultLocaleId AS VARCHAR(50))+')				

					    ,Cte_ContenetPageFilter AS (
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,SEOKeywords,SEOTitle,SEODescription,MetaInformation,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,Case When Isnull(IsPublished ,0 ) = 0 then ''Draft'' ELSE ''Published'' END PublishStatus
						,Case When Isnull(IsSEOPublished ,0 ) = 0 then ''Draft'' ELSE ''Published'' END SEOPublishStatus  , SEOCode
						
						 FROM Cte_ContentPage) '
   
						set @SQLWhereClause = @SQL + '
						
						,Cte_ContentFinal AS
						(
						SELECT CMSContentPagesId,PortalId,CMSTemplateId,
						PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,SEOKeywords,SEOTitle,
						SEODescription,MetaInformation,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,
						PortalName,CMSContentPageGroupId, PageTemplateName ,
						SEOUrl,CMSContentPageGroupName,PublishStatus,SEOPublishStatus,'+[dbo].[Fn_GetPagingRowId](@Order_BY,'CMSContentPagesId')+',Count(*)Over() CountNo,SEOCode
						FROM Cte_ContenetPageFilter WHERE  1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' )

						
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName   ,CMSContentPageGroupId 
						, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,MetaInformation,    PublishStatus,SEOPublishStatus, SEOCode
					    FROM Cte_ContentFinal  '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
						
						--select @SQLWhereClause
						print @SQLWhereClause


					    INSERT INTO @TBL_ContenetPageLocale (CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate, ExpirationDate,IsActive
									,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
									, PageTemplateName ,SEOUrl,CMSContentPageGroupName,RowId,CountNo,SEOKeywords,SEOTitle,SEODescription,
									MetaInformation,PublishStatus,SEOPublishStatus,SEOCode)
           				
					    EXEC (@SQLWhereClause)      
						                                                     
					    SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ContenetPageLocale) ,0)   
						     
					    SELECT CMSContentPagesId,PortalId,CMSTemplateId,PageTitle,PageName,ActivationDate,ExpirationDate,IsActive
							   ,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PortalName,CMSContentPageGroupId 
							   ,PageTemplateName ,SEOUrl,CMSContentPageGroupName,SEOKeywords,SEOTitle,SEODescription,MetaInformation,
							   PublishStatus,SEOPublishStatus,SEOCode
						FROM @TBL_ContenetPageLocale

           
    END TRY
	
    BEGIN CATCH
        DECLARE @Status BIT ;
		     SET @Status = 0;
			 select ERROR_MESSAGE()
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSContentPagesFolderDetails @WhereClause = '''+ISNULL(@WhereClause,'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');


              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		 
        EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorInProcedure = 'Znode_GetCMSContentPagesFolderDetails',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END 
GO 

CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   ,
			  CategoryCode  NVARCHAR(MAX)    );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				 Select Distinct PimCategoryId , Null FROM (
				 SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryId in 
				 (SELECT CategoryId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
				 SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

				INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
				SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				FROM ZnodePublishCategory AS ZPC 
				LEFT OUTER JOIN ZnodePublishCategoryProduct ZPCP ON(ZPC.PublishCategoryId  = ZPCP.PublishCategoryId 
				AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId
				AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				LEFT OUTER JOIN  ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				INNER JOIN  ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPC.PublishCatalogId)
				WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				--AND NOT EXISTS
				--(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				--AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				--AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				AND EXISTS  (select TOP 1 1  FROM @TBL_PimCategoryIds  t WHERE ZPC.PimCategoryId = t.PimCategoryId  AND ZPC.PimCategoryHierarchyId = t.PimCategoryHierarchyId) ;
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					   UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'')
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,@VersionId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId
  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

					IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 SELECT CategoryXml FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
Go

IF  EXISTS (Select TOP 1 1 from [ZnodeDomain] where [DomainName]   = 'localhost:44762')
 BEGIN
update ZnodeDomain
set ApplicationType = 'API'
where [DomainName]   = 'localhost:44762'
 
 END

 GO
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogProductSEODetail')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogProductSEODetail
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogProductSEODetail]
( 
  @WhereClause      NVARCHAR(MAX),
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PortalId			INT
 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetail @WhereClause=N'',@Rows=100,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 1 ,@LocaleId=1 
	   rollback tran
	  
	     declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetails @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 5 ,@LocaleId=1 


    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE  @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @SQL NVARCHAR(MAX), 
					 @PimProductId TransferId,
					 @PimAttributeId VARCHAR(MAX)
					
             DECLARE @TransferPimProductId TransferId 
		
	
			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct

			Declare @PimCatalogId INT

			SELECT @PimCatalogId = PimCatalogId 
			FROM ZnodePortalCatalog ZPC
			INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId
				
                SELECT  PimProductid,SKU,ProductName,ProductImage,IsActive,LocaleId
				INTO #ProductDetail
				 FROM 
				 (
				 SELECT c.pimproductId,PA.attributecode,e.AttributeValue,e.LocaleId
				 FROM
				 znodePimProduct c 
				 inner join ZnodePimAttributeValue d on (c.PimProductid = d.PimProductid)
				 inner join ZnodePimAttributeValueLocale e on (d.PimAttributeValueId = e.PimAttributeValueId)
				 inner join ZnodePimAttribute PA ON (PA.PimAttributeId = d.PimAttributeId)
				 where  PA.Attributecode IN ('SKU','ProductName','ProductImage','IsActive')
				-- AND e.localeid = @LocaleId
				 ) piv PIVOT(MAX(AttributeValue) FOR AttributeCode in ( SKU,ProductName,ProductImage,IsActive))AS PVT
				


		SET @SQL = 
		'
		--DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
		--INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
		--	 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		select distinct PimCatalogId,PimProductId into #znodeCatalogProduct
	FROm ZnodePimCatalogCategory

		DECLARE @TBL_MediaValue TABLE (PimAttributeValueId INT,PimProductId INT,MediaPath INT,PimAttributeId INt,LocaleId INT )
		INSERT INTO @TBL_MediaValue
		SELECT ZPAV.PimAttributeValueId	,ZPAV.PimProductId	,ZPPAM.MediaId MediaPath,ZPAV.PimAttributeId , 	ZPPAM.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimProductAttributeMedia ZPPAM ON ( ZPPAM.PimAttributeValueId = ZPAV.PimAttributeValueId)
					INNER JOIN #ProductDetail PD ON (PD.PimProductId = ZPAV.PimProductId)
					LEFT JOIN ZnodeMedia ZM ON (Zm.Path = ZPPAM.MediaPath) 
					WHERE  ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute pa where attributecode = ''ProductImage'') 

		;WITH Cte_ProductMedia
               AS (SELECT PD.PimProductId  , 
			   URL+ZMSM.ThumbnailFolderName+''/''+ zm.PATH  AS ProductImagePath 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_MediaValue PD ON (PD.MediaPath = CAST(ZM.MediaId AS VARCHAR(50)))
			   --INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = PD.PimATtributeId )
			   
			   )

		, CTE_ProductDetail AS
	(
		SELECT DISTINCT  CD.pimproductId, SKU,ProductName,
		case WHEN  CD.IsActive = ''true'' THEN 1 ELSE 0 END IsActive, ISNULL(CSD.SEOCode,SKU) as SEOCode, CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		Case When Isnull(CSD.IsPublish ,0 ) = 0 then ''Draft'' ELSE ''Published'' END  IsPublish  , CPM.ProductImagePath, PC.CatalogName, CD.LocaleId
		FROM #ProductDetail CD
		INNER JOIN #znodeCatalogProduct PCC on CD.PimProductId = PCC.PimProductId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Product''
		LEFT JOIN ZnodeCMSSEODetail CSD on CD.SKU = CSD.SEOCode and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId --AND CSDL.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
		
		LEFT JOIN Cte_ProductMedia CPM ON (CPM.PimProductId = CD.PimProductId)
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' AND CD.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+', '+CAST(@DefaultLocaleId AS VARCHAR(50))+')
	)

	, CTE_ProductLocale AS
	(
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName, LocaleId
	FROM CTE_ProductDetail CPD
	WHERE CPD.LocaleId ='+CAST(@LocaleId AS VARCHAR(50))+'	
	)

	, CTE_ProductBothLocale AS
	(
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName
	FROM CTE_ProductLocale PL
	UNION ALL 
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName
	FROM CTE_ProductDetail PD 
	WHERE LocaleId ='+CAST(@DefaultLocaleId AS VARCHAR(50))+' AND
	NOT EXISTS (select * from CTE_ProductLocale PCL WHERE PCL.pimproductId = PD.pimproductId AND PCL.CatalogName = PD.CatalogName )
	)

	,CTE_ProductDetail_WhereClause AS
	(
		SELECT  pimproductId, SKU,ProductName,
		cast(IsActive as bit) IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimProductId')+',Count(*)Over() CountId
		FROM CTE_ProductDetail CD
		WHERE 1 = 1  '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath,CatalogName, CountId
	INTO ##TempProductDetail
	FROM CTE_ProductDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempProductDetail ),0)

	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 
	FROM ##TempProductDetail
	--GROUP by pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 

  
		

			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			
			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct


         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		 --    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			-- @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			--VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			--@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			--@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
   --          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
   --          EXEC Znode_InsertProcedureErrorLog
			--	@ProcedureName = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorMessage = @ErrorMessage,
			--	@ErrorLine = @ErrorLine,
			--	@ErrorCall = @ErrorCall;
         END CATCH;
     END;
	 
	 Go
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCMSCustomerReviewInformation')
BEGIN 
	DROP PROCEDURE Znode_GetCMSCustomerReviewInformation
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetCMSCustomerReviewInformation]
( @WhereClause NVARCHAR(Max),
  @Rows        INT           = 100,
  @PageNo      INT           = 1,
  @Order_BY    VARCHAR(1000)  = '',
  @RowsCount   INT OUT,
  @LocaleId    INT           = 0,
  @PortalId    INT           = 0
  )
AS
/*
 Summary : Procedure is used to Get Customer Review Information.
 Unit Testing:
 exec Znode_GetCMSCustomerReviewInformation @WhereClause='',@RowsCount=null,@Rows = 100,@PageNo=1,@Order_BY = '',@PortalId = 0,@LocaleId = 1
*/
 BEGIN
   BEGIN TRY
      SET NOCOUNT ON;
             DECLARE @SQL NVARCHAR(MAX);
             IF @LocaleId = 0
                 BEGIN
                     SELECT @LocaleId = dbo.Fn_GetDefaultLocaleId();
                 END;
             DECLARE @TBL_CustomerReview TABLE (CMSCustomerReviewId INT ,PublishProductId INT ,UserId INT,Headline NVARCHAR(400) ,Comments NVARCHAR(1000),UserName NVARCHAR(600),StoreName NVARCHAR(600)
												,UserLocation NVARCHAR(2000),Rating INT,[Status] NVARCHAR(20),ProductName NVARCHAR(max),CreatedDate DATETIME,ModifiedDate DATETIME,CreatedBy INT,ModifiedBy INT,SEOUrl NVARCHAR(max),RowId INT,CountNo INT)
			 
		 SET @SQL = ' 
		  ;With Cte_CustomerReview AS 
		  (
		   SELECT CMSCustomerReviewId,a.PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,Status,ZPPD.ProductName,ZPPD.LocaleId,ZP.StoreName
					,a.CreatedDate
					,a.ModifiedDate,a.CreatedBy,a.ModifiedBy,ZCSD.SEOUrl,ZCSD.PortalId
			FROM ZNODECMSCUSTOMERREVIEW A 
			INNER JOIN ZnodePublishProductDetail ZPPD ON (A.PUBLISHPRODUCTID = ZPPD.PUBLISHPRODUCTID AND ZPPD.LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+')
			LEFT OUTER JOIN ZnodeCMSSEODetail ZCSD on (ZPPD.SKU = ZCSD.SEOCode AND  ( A.PortalId = ZCSD.PortalId )
			AND EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType ZCST WHERE  (ZCSD.CMSSEOTypeId = ZCST.CMSSEOTypeId AND ZCST.NAME = ''Product'')
			)
			 )
	
			INNER  JOIN ZnodePortal ZP ON (A.PortalId = ZP.PortalId)
			WHERE ZP.PortalId = '+CAST(@PortalId AS VARCHAR(50))+' OR '+CAST(@PortalId AS VARCHAR(50))+' = 0 
			
		  )
		  ,Cte_CustomerInfo AS 
		  (		  
		   SELECT CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,Status,ProductName,StoreName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl ,'+dbo.Fn_GetPagingRowId(@Order_BY,'CMSCustomerReviewId')+',Count(*)Over() CountNo  
		   FROM Cte_CustomerReview 
		   WHERE 1=1  
		   '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
		  )
		  SELECT CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,Status,ProductName,StoreName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl,RowId,CountNo
		  FROM Cte_CustomerInfo 
		  '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)                                                                                                                                                                                                                                                                        
          
		 PRINT @SQL
		  INSERT INTO @TBL_CustomerReview (CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,[Status],ProductName,StoreName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl,RowId,CountNo)                                                                                                                                                                                                                                        
          EXEC (@SQL)

		  SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_CustomerReview ),0)

		  SELECT CMSCustomerReviewId,PublishProductId,UserId,Headline,Comments,UserName,UserLocation,Rating,[Status],ProductName
					,CreatedDate,ModifiedDate,CreatedBy,ModifiedBy,SEOUrl,StoreName
		  FROM @TBL_CustomerReview

           
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCMSCustomerReviewInformation @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PortalId='+CAST(@PortalId AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetCMSCustomerReviewInformation',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select NULL ,'SEO','GetCategoriesForSEO',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'SEO' and ActionName = 'GetCategoriesForSEO')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO')	
      ,(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetCategoriesForSEO')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetCategoriesForSEO'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO'),
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetCategoriesForSEO')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Categories' AND ControllerName = 'SEO') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'SEO' and ActionName= 'GetCategoriesForSEO'))

GO

 Insert  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 'PIM' ,'Category','GetUnAssociatedCategoriesToProduct',0,2,Getdate(),2,Getdate() where not exists
(select * from ZnodeActions where ControllerName = 'Category' and ActionName = 'GetUnAssociatedCategoriesToProduct')
 Go

insert into ZnodeActionMenu ( MenuId,	ActionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
	   (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products')	
      ,(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetUnAssociatedCategoriesToProduct')	,2,Getdate(),2,Getdate()
where not exists (select * from ZnodeActionMenu where MenuId = 
       (select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
       (select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetUnAssociatedCategoriesToProduct'))
Go

insert into ZnodeMenuActionsPermission ( MenuId,	ActionId, AccessPermissionId,	CreatedBy	,CreatedDate,	ModifiedBy,	ModifiedDate )
select 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products'),
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetUnAssociatedCategoriesToProduct')	
,1,2,Getdate(),2,Getdate() where not exists 
(select * from ZnodeMenuActionsPermission where MenuId = 
(select MenuId from ZnodeMenu where MenuName = 'Products' AND ControllerName = 'Products') and ActionId = 
(select ActionId from ZnodeActions where ControllerName = 'Category' and ActionName= 'GetUnAssociatedCategoriesToProduct'))

GO


update a
set a.categorycode = d.categoryvalue
from  
ZnodePublishCategoryDetail a 
inner join ZnodePublishCategory b ON (a.PublishCategoryId = b.PublishCategoryId)
inner join ZnodePimcategoryAttributeValue c on (b.PimCategoryId = c.PimCategoryId)
inner join ZnodePimCategoryAttributeValueLocale d on (c.PimCategoryAttributeValueId = d.PimCategoryAttributeValueId)
where c.pimattributeid = (select PimAttributeId from ZnodePimattribute where attributecode = 'CategoryCode')

Go
SET  IDENTITY_INSERT znodePaymenttype ON
insert into ZnodePaymentType (PaymentTypeId,Code,Name,Description,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 5,NULL,'Amazon_Pay','Amazon Pay',	1,	2,	GETDATE(),	2, GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodePaymentType WHERE NAME = 'Amazon_Pay')
SET  IDENTITY_INSERT znodePaymenttype OFF
Go 
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishAssociatedAddons')
BEGIN 
	DROP PROCEDURE Znode_GetPublishAssociatedAddons
END 
GO
CREATE  PROCEDURE [dbo].[Znode_GetPublishAssociatedAddons](@PublishCatalogId NVARCHAR(MAX) = 0,
                                                         @PimProductId    TransferId Readonly,
                                                         @VersionId        INT           = 0,
                                                         @UserId           INT,
														 @PimCategoryHierarchyId int = 0 )
AS 
   
     BEGIN
        -- BEGIN TRANSACTION GetPublishAssociatedAddons;
         BEGIN TRY
          SET NOCOUNT ON 
			 DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @LocaleId INT, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId()
			 , @Counter INT= 1
			 , @MaxRowId INT= 0;

            -- DECLARE @PimAddOnGroupId VARCHAR(MAX);

			 CREATE TABLE #TBL_PublisshIds  (PublishProductId INT , PimProductId INT , PublishCatalogId INT)

             DECLARE @TBL_LocaleId TABLE
             (RowId    INT IDENTITY(1, 1),
              LocaleId INT
             );


			 IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1
			   
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM #TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
			 END 
			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
			 		 
			   INSERT INTO #TBL_PublisshIds 
			   EXEC [dbo].[Znode_InsertPublishProductIds] @PublishCatalogId,@userid,@PimProductId,1,@PimCategoryHierarchyId 

			
			  -- SET @PimProductId = SUBSTRING((SELECT DISTINCT ','+CAST(PimProductId AS VARCHAr(50)) FROM #TBL_PublisshIds FOR XML PATH ('')),2,8000 )

			  -- SELECT 	@PimProductId	
			 END 
			
			
			--SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN 0 = 0 OR 0 IS NULL THEN  MAX(PublishCatalogLogId) ELSE 0 END 
			--FROM ZnodePublishProduct ZPP 
			--INNEr JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
			--       WHERE zpp.PublishProductId  IN (218,214)
			--          GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT , VersionId INT  );

			 IF  ISnull(@PimCategoryHierarchyId,0) <> 0 
			 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @VersionId = 0 OR @VersionId IS NULL THEN  MAX(PublishCatalogLogId) ELSE @VersionId END 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId   ) 
				
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 END 
			 ELSE 
			 Begin
				 BEGIN 
				 INSERT INTO #TBL_PublishCatalogId 
				 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @VersionId = 0 OR @VersionId IS NULL THEN  MAX(PublishCatalogLogId) ELSE @VersionId END 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM #TBL_PublisshIds SP WHERE SP.PublishProductId = ZPP.PublishProductId  AND  @PublishCatalogId = '0' ) 
				 OR (ZPP.PublishCatalogId =  @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
			 END 

			 End
			
             DECLARE @TBL_AddonGroupLocale TABLE
             (PimAddonGroupId INT,
              DisplayType     NVARCHAR(400),
              AddonGroupName  NVARCHAR(MAX),
			  LocaleId INT 
             );
           
             INSERT INTO @TBL_LocaleId(LocaleId)
                    SELECT LocaleId
                    FROM ZnodeLocale
                    WHERE IsActive = 1;

          
             SET @MaxRowId = ISNULL(
                                   (
                                       SELECT MAX(RowId)
                                       FROM @TBL_LocaleId
                                   ), 0);
    
             WHILE @Counter <= @MaxRowId
                 BEGIN
                     SET @LocaleId =
                     (
                         SELECT LocaleId
                         FROM @TBL_LocaleId
                         WHERE RowId = @Counter
                     );
                     INSERT INTO @TBL_AddonGroupLocale
                     (PimAddonGroupId,
                      DisplayType,
                      AddonGroupName					  
                     )
                     EXEC Znode_GetAddOnGroupLocale
                          '',
                          @LocaleId;

					UPDATE @TBL_AddonGroupLocale SET LocaleId = @LocaleId WHERE LocaleId IS NULL 

                    SET @Counter = @Counter + 1;
                 END;
				     
					  IF  @PublishCatalogId IS NULL  OR @PublishCatalogId = 0 
			           BEGIN 
			 		 
			         DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1  
					 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId TBLV WHERE ZnodePublishedXML.PublishedId = TBLV.PublishProductId   AND ZnodePublishedXML.PublishCatalogLogId = TBLV.VersionId )
			    
			  
					 END 
					 ELSE 
					 BEGIN 

					 SET @versionid  =(SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId TBLV )

					 DELETE FROM ZnodePublishedXML WHERE IsAddOnXML =1 
					 AND PublishCatalogLogId  = @versionid 
					 END 
			
					--SELECT * FROM #TBL_PublishCatalogId
					 MERGE INTO ZnodePublishedXML TARGET 
					 USING (
					 SELECT   ZPPP.PublishProductId,ZPPP.PublishCatalogId,ZPPD.LocaleId,ZPPP.VersionId,'<AddonEntity><VersionId>'+CAST(ZPPP.VersionId AS VARCHAR(50))+'</VersionId><ZnodeProductId>'+CAST(ZPPP.[PublishProductId] AS VARCHAR(50))+'</ZnodeProductId><ZnodeCatalogId>'
				     +CAST(ZPPP.[PublishCatalogId] AS VARCHAR(50))+'</ZnodeCatalogId><AssociatedZnodeProductId>'+CAST(ZPP.PublishProductId  AS VARCHAR(50))
					 +'</AssociatedZnodeProductId><DisplayOrder>'+CAST( ISNULL(ZPOPD.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder><AssociatedProductDisplayOrder>'
					 +CAST(ISNULL(ZPAOP.DisplayOrder,'') AS VARCHAR(50))+'</AssociatedProductDisplayOrder><RequiredType>'+ISNULL(RequiredType,'')+'</RequiredType><DisplayType>'
					 + ISNULL(DisplayType,'')+'</DisplayType><GroupName>'+ISNULL(AddonGroupName,'')+'</GroupName><LocaleId>'+CAST(ZPPD.LocaleId AS VARCHAR(50))+'</LocaleId><IsDefault>'+CAST(ISNULL(IsDefault,0) AS VARCHAR(50))+'</IsDefault></AddonEntity>'  ReturnXML		   
				 
                      FROM [ZnodePimAddOnProductDetail] AS ZPOPD
                           INNER JOIN [ZnodePimAddOnProduct] AS ZPAOP ON ZPOPD.[PimAddOnProductId] = ZPAOP.[PimAddOnProductId]
						    INNER JOIN #TBL_PublishCatalogId ZPPP ON (ZPPP.PimProductId = ZPAOP.PimProductId )
                           INNER JOIN #TBL_PublishCatalogId ZPP ON(ZPP.PimProductId = ZPOPD.[PimChildProductId] AND ZPP.PublishCatalogId = ZPPP.PublishCatalogId )
						   INNER JOIN ZnodePublishProductDetail ZPPD ON (ZPPD.PublishProductId = ZPPP.PublishProductId)
						   INNER JOIN @TBL_AddonGroupLocale TBAG ON (TBAG.PimAddonGroupId   = ZPAOP.PimAddonGroupId AND TBAG.LocaleId = ZPPD.LocaleId )
						   
					) SOURCE 
					ON (
						 TARGET.PublishCatalogLogId = SOURCE.VersionId 
						 AND TARGET.PublishedId = SOURCE.PublishProductId
						 AND TARGET.IsAddonXML = 1 
						 AND TARGET.LocaleId = SOURCE.LocaleId 
					)
					WHEN MATCHED THEN 
					UPDATE 
					SET  PublishedXML = ReturnXML
					   , ModifiedBy = @userId 
					   ,ModifiedDate = @GetDate
					WHEN NOT MATCHED THEN 
					INSERT (PublishCatalogLogId
					,PublishedId
					,PublishedXML
					,IsAddonXML
					,LocaleId
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
					
					VALUES (Source.VersionId , Source.publishProductid,Source.ReturnXML,1,SOURCE.localeid,@userId,@getDate,@userId,@getDate);
					
					
					SELECT Cast(PublishedXML as xml) ReturnXML
					FROM #TBL_PublishCatalogId TBLPP 
					INNER JOIN ZnodePublishedXML ZPX ON (ZPX.PublishCatalogLogId = TBLPP.VersionId AND ZPX.PublishedId = TBLPP.publishProductid )
					WHERE ZPX.IsAddonXML = 1
             --SELECT ReturnXML
             --FROM @TBL_AddonXML;
		
           --  COMMIT TRANSACTION GetPublishAssociatedAddons;
         END TRY
         BEGIN CATCH
		     SELECT ERROR_MESSAGE(),ERROR_PROCEDURE()
             DECLARE @Status BIT;
             SET @Status = 0;
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishAssociatedAddons @PublishCatalogId = '+@PublishCatalogId+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
             SELECT 0 AS ID,
                    CAST(0 AS BIT) AS Status;
           --  ROLLBACK TRANSACTION GetPublishAssociatedAddons;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishAssociatedAddons',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishCategoryGroup')
BEGIN 
	DROP PROCEDURE Znode_GetPublishCategoryGroup
END 
GO

CREATE  PROCEDURE [dbo].[Znode_GetPublishCategoryGroup]
(   @PublishCatalogId INT,
    @UserId           INT,
    @VersionId        INT,
    @Status           BIT = 0 OUT,
	@PimCategoryHierarchyId int = 0, 
    @IsDebug          BIT = 0)
AS 
/*

       Summary:Publish category with their respective products and details 
	            The result is fetched in xml form   
       Unit Testing   
       Begin transaction 
       SELECT * FROM ZnodePIMAttribute 
	   SELECT * FROM ZnodePublishCatalog 
	   SELECT * FROM ZnodePublishCategory WHERE publishCAtegoryID = 167 


       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 
       EXEC [Znode_GetPublishCategory] @PublishCatalogId = 5,@VersionId = 0 ,@UserId =2 ,@IsDebug = 1 ,@PimCategoryHierarchyId = ? 


       Rollback Transaction 
	*/
     BEGIN
         BEGIN TRAN GetPublishCategory;
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @LocaleId INT= 0, @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId(), @Counter INT= 1, @MaxId INT= 0, @CategoryIdCount INT;
             DECLARE @IsActive BIT= [dbo].[Fn_GetIsActiveTrue]();
             DECLARE @AttributeIds VARCHAR(MAX)= '', @PimCategoryIds VARCHAR(MAX)= '', @DeletedPublishCategoryIds VARCHAR(MAX)= '', @DeletedPublishProductIds VARCHAR(MAX);
             --get the pim catalog id 
			 DECLARE @PimCatalogId INT=(SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId); 

             DECLARE @TBL_AttributeIds TABLE
             (PimAttributeId       INT,
              ParentPimAttributeId INT,
              AttributeTypeId      INT,
              AttributeCode        VARCHAR(600),
              IsRequired           BIT,
              IsLocalizable        BIT,
              IsFilterable         BIT,
              IsSystemDefined      BIT,
              IsConfigurable       BIT,
              IsPersonalizable     BIT,
              DisplayOrder         INT,
              HelpDescription      VARCHAR(MAX),
              IsCategory           BIT,
              IsHidden             BIT,
              CreatedDate          DATETIME,
              ModifiedDate         DATETIME,
              AttributeName        NVARCHAR(MAX),
              AttributeTypeName    VARCHAR(300)
             );
             DECLARE @TBL_AttributeDefault TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX)
			  ,DisplayOrder   INT
             );
             DECLARE @TBL_AttributeValue TABLE
             (PimCategoryAttributeValueId INT,
              PimCategoryId               INT,
              CategoryValue               NVARCHAR(MAX),
              AttributeCode               VARCHAR(300),
              PimAttributeId              INT
             );
             DECLARE @TBL_LocaleIds TABLE
             (RowId     INT IDENTITY(1, 1),
              LocaleId  INT,
              IsDefault BIT
             );
             DECLARE @TBL_PimCategoryIds TABLE
             (PimCategoryId       INT,
              PimParentCategoryId INT,
              DisplayOrder        INT,
              ActivationDate      DATETIME,
              ExpirationDate      DATETIME,
              CategoryName        NVARCHAR(MAX),
              ProfileId           VARCHAR(MAX),
              IsActive            BIT,PimCategoryHierarchyId INT,ParentPimCategoryHierarchyId INT   ,
			  CategoryCode  NVARCHAR(MAX)    );


             DECLARE @TBL_PublishPimCategoryIds TABLE
             (PublishCategoryId       INT,
              PimCategoryId           INT,
              PublishProductId        varchar(max),
              PublishParentCategoryId INT ,
			  PimCategoryHierarchyId INT ,parentPimCategoryHierarchyId INT
             );
             DECLARE @TBL_DeletedPublishCategoryIds TABLE
             (PublishCategoryId INT,
              PublishProductId  INT
             );
             DECLARE @TBL_CategoryXml TABLE
             (PublishCategoryId INT,
              CategoryXml       XML,
              LocaleId          INT
             );
             INSERT INTO @TBL_LocaleIds
             (LocaleId,
              IsDefault
             )
			  -- here collect all locale ids
             SELECT LocaleId,IsDefault FROM ZnodeLocale WHERE IsActive = @IsActive;


			IF @PimCategoryHierarchyId > 0 
			Begin 
				 DECLARE @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int,ParentCategoryId int ) 
				 INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
				 Select Distinct PimCategoryId , Null FROM (
				 SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				 Union 
				 Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				 Union 
				 Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  

			
				 INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				
				 SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				 FROM ZnodePimCategoryHierarchy AS ZPCH 
				 LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				 WHERE ZPCH.PimCatalogId = @PimCatalogId  AND ZPCH.PimCategoryId in 
				 (SELECT CategoryId from @TBL_CategoryCategoryHierarchyIds where CategoryId is not null )  ; 
				
				-- Delete from @TBL_PimCategoryIds where PimCategoryId  in (
				-- select PimCategoryId  from ZnodePublishCategory where PublishCatalogId = @PublishCatalogId 
				--)
		
				 SELECT @VersionId  = PublishCatalogLogId from ZnodePublishCatalogLog where PublishCatalogId = @PublishCatalogId  and IsCatalogPublished =1 

				INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
				SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				FROM ZnodePublishCategory AS ZPC 
				LEFT OUTER JOIN ZnodePublishCategoryProduct ZPCP ON(ZPC.PublishCategoryId  = ZPCP.PublishCategoryId 
				AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId
				AND  ZPCP.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId  )                                                  
				LEFT OUTER JOIN  ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				INNER JOIN  ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPC.PublishCatalogId)
				WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				--AND NOT EXISTS
				--(SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				--AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				--AND TBPC.PimCatalogId = ZPCC.PimCatalogId  AND  ZPCP.PimCategoryHierarchyId=  @PimCategoryHierarchyId   ) 
				AND EXISTS  (select TOP 1 1  FROM @TBL_PimCategoryIds  t WHERE ZPC.PimCategoryId = t.PimCategoryId  AND ZPC.PimCategoryHierarchyId = t.PimCategoryHierarchyId) ;
			End
			ELSE 
			Begin
				INSERT INTO @TBL_PimCategoryIds(PimCategoryId,PimParentCategoryId,DisplayOrder,ActivationDate,ExpirationDate,IsActive,PimCategoryHierarchyId,ParentPimCategoryHierarchyId)
				SELECT DISTINCT ZPCH.PimCategoryId,ZPCH2.PimCategoryId  PimParentCategoryId,ZPCH.DisplayOrder,ZPCH.ActivationDate,ZPCH.ExpirationDate,ZPCH.IsActive ,ZPCH.PimCategoryHierarchyId,ZPCH.ParentPimCategoryHierarchyId
				FROM ZnodePimCategoryHierarchy AS ZPCH 
				LEFT JOIN ZnodePimCategoryHierarchy AS ZPCH2 ON (ZPCH2.PimCategoryHierarchyId = ZPCH. ParentPimCategoryHierarchyId ) 
				WHERE ZPCH.PimCatalogId = @PimCatalogId; 

			 -- AND IsActive = @IsActive ; -- As discussed with @anup active flag maintain on demo site 23/12/2016
			 --	SELECT * FROM @TBL_PimCategoryIds
			 -- here is find the deleted publish category id on basis of publish catalog

             INSERT INTO @TBL_DeletedPublishCategoryIds(PublishCategoryId,PublishProductId)
			 SELECT ZPC.PublishCategoryId,ZPCP.PublishProductId 
				 FROM ZnodePublishCategoryProduct ZPCP
				 INNER JOIN ZnodePublishCategory AS ZPC ON(ZPCP.PublishCategoryId = ZPC.PublishCategoryId AND ZPCP.PublishCatalogId = ZPC.PublishCatalogId)                                                  
				 INNER JOIN ZnodePublishProduct ZPP ON(zpp.PublishProductId = zpcp.PublishProductId AND zpp.PublishCatalogId = zpcp.PublishCatalogId)
				 INNER JOIN ZnodePublishCatalog ZPCC ON(ZPCC.PublishCatalogId = ZPCP.PublishCatalogId)
				 WHERE ZPC.PublishCatalogId = @PublishCataLogId 
				 AND NOT EXISTS
				 (SELECT TOP 1 1 FROM ZnodePimCatalogCategory AS TBPC WHERE TBPC.PimCategoryId = ZPC.PimCategoryId 
				 AND TBPC.PimCategoryHierarchyId = ZPC.PimCategoryHierarchyId AND TBPC.PimProductId = ZPP.PimProductId 
				 AND TBPC.PimCatalogId = ZPCC.PimCatalogId);

			End
			
          

			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishCategoryIds = ISNULL(SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_DeletedPublishCategoryIds AS ZPC
                                              GROUP BY ZPC.PublishCategoryId FOR XML PATH('') ), 2, 4000), '');
			 -- here is find the deleted publish category id on basis of publish catalog
             SET @DeletedPublishProductIds = '';
			 -- Delete the publish category id 
	         EXEC Znode_DeletePublishCatalog @PublishCatalogIds = @PublishCatalogId,@PublishCategoryIds = @DeletedPublishCategoryIds,@PublishProductIds = @DeletedPublishProductIds; 
			
             MERGE INTO ZnodePublishCategory TARGET USING  @TBL_PimCategoryIds SOURCE ON
			 (
				 TARGET.PimCategoryId = SOURCE.PimCategoryId 
				 AND TARGET.PublishCatalogId = @PublishCataLogId 
				 AND TARGET.PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId
			 )
			 WHEN MATCHED THEN UPDATE SET TARGET.PimParentCategoryId = SOURCE.PimParentCategoryId,TARGET.CreatedBy = @UserId,TARGET.CreatedDate = @GetDate,
             TARGET.ModifiedBy = @UserId,TARGET.ModifiedDate = @GetDate,PimCategoryHierarchyId = SOURCE.PimCategoryHierarchyId,ParentPimCategoryHierarchyId=SOURCE.ParentPimCategoryHierarchyId
             WHEN NOT MATCHED THEN INSERT(PimCategoryId,PublishCatalogId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimCategoryHierarchyId,ParentPimCategoryHierarchyId) 
			 VALUES(SOURCE.PimCategoryId,@PublishCatalogId,@UserId,@GetDate,@UserId,@GetDate,SOURCE.PimCategoryHierarchyId
			 ,SOURCE.ParentPimCategoryHierarchyId)
             OUTPUT INSERTED.PublishCategoryId,INSERTED.PimCategoryId,INSERTED.PimCategoryHierarchyId,
			 INSERTED.parentPimCategoryHierarchyId 
			 INTO @TBL_PublishPimCategoryIds(PublishCategoryId,PimCategoryId,PimCategoryHierarchyId,parentPimCategoryHierarchyId);
			           
		     -- here update the publish parent category id
             UPDATE ZPC SET [PimParentCategoryId] =TBPC.[PimCategoryId] 
				FROM ZnodePublishCategory ZPC
				INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
				WHERE ZPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL
				AND TBPC.PublishCatalogId =@PublishCatalogId
				AND ZPC.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);
				;
			 UPDATE a
				SET  a.PublishParentCategoryId = b.PublishCategoryId
				FROM ZnodePublishCategory a 
				INNER JOIN ZnodePublishCategory b   ON (a.parentpimCategoryHierarchyId = b.pimCategoryHierarchyId)
				WHERE a.parentpimCategoryHierarchyId IS NOT NULL 
				AND a.PublishCatalogId =@PublishCatalogId
				AND b.PublishCatalogId =@PublishCatalogId
				AND a.PimCategoryId in (select PimCategoryId FROM @TBL_PimCategoryIds);

			 --UPDATE ZPC SET [PimParentCategoryId] = TBPC.[PimCategoryId] 
			 --FROM ZnodePublishCategory ZPC
    --         INNER JOIN ZnodePublishCategory TBPC ON(ZPC.parentPimCategoryHierarchyId = TBPC.PimCategoryHierarchyId  ) 
			 --WHERE ZPC.PublishCatalogId =@PublishCatalogId
			 --AND ZPC.ParentPimCategoryHierarchyId IS NOT NULL ;

			 -- product are published here 
            --  EXEC Znode_GetPublishProducts @PublishCatalogId,0,@UserId,1,0,0;

             SET @MaxId =(SELECT MAX(RowId)FROM @TBL_LocaleIds);
			 DECLARE @TransferID TRANSFERID 
			 INSERT INTO @TransferID 
			 SELECT DISTINCT  PimCategoryId
			 FROM @TBL_PublishPimCategoryIds 

             SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
			 
             WHILE @Counter <= @MaxId -- Loop on Locale id 
                 BEGIN
                     SET @LocaleId =(SELECT LocaleId FROM @TBL_LocaleIds WHERE RowId = @Counter);
                   
				     SET @AttributeIds = SUBSTRING((SELECT ','+CAST(ZPCAV.PimAttributeId AS VARCHAR(50)) FROM ZnodePimCategoryAttributeValue ZPCAV 
										 WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC WHERE TBPC.PimCategoryId = ZPCAV.PimCategoryId) GROUP BY ZPCAV.PimAttributeId FOR XML PATH('')), 2, 4000);
                
				     SET @CategoryIdCount =(SELECT COUNT(1) FROM @TBL_PimCategoryIds);

                     INSERT INTO @TBL_AttributeIds (PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
					 IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName)
                     EXEC [Znode_GetPimAttributesDetails] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeDefault (PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder)
                     EXEC [dbo].[Znode_GetAttributeDefaultValueLocale] @AttributeIds,@LocaleId;

                     INSERT INTO @TBL_AttributeValue (PimCategoryAttributeValueId,PimCategoryId,CategoryValue,AttributeCode,PimAttributeId)
                     EXEC [dbo].[Znode_GetCategoryAttributeValueId] @TransferID,@AttributeIds,@LocaleId;

					-- SELECT * FROM @TBL_AttributeValue WHERE PimCategoryId = 281


                     ;WITH Cte_UpdateDefaultAttributeValue
                     AS (
					  SELECT TBAV.PimCategoryId,TBAV.PimAttributeId,SUBSTRING((SELECT ','+AttributeDefaultValue FROM @TBL_AttributeDefault TBD WHERE TBAV.PimAttributeId = TBD.PimAttributeId
						AND EXISTS(SELECT TOP 1 1 FROM Split(TBAV.CategoryValue, ',') SP WHERE SP.Item = TBD.AttributeDefaultValueCode)FOR XML PATH('')), 2, 4000) DefaultCategoryAttributeValue
						FROM @TBL_AttributeValue TBAV WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_AttributeDefault TBAD WHERE TBAD.PimAttributeId = TBAV.PimAttributeId))
					 
					 -- update the default value with locale 
                     UPDATE TBAV SET CategoryValue = CTUDFAV.DefaultCategoryAttributeValue FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_UpdateDefaultAttributeValue CTUDFAV ON(CTUDFAV.PimCategoryId = TBAV.PimCategoryId AND CTUDFAV.PimAttributeId = TBAV.PimAttributeId)
					 WHERE CategoryValue IS NULL ;
					 
					 -- here is update the media path  
                     WITH Cte_productMedia
                     AS (SELECT TBA.PimCategoryId,TBA.PimAttributeId,[dbo].[FN_GetThumbnailMediaPathPublish](SUBSTRING((SELECT ','+zm.PATH FROM ZnodeMedia ZM WHERE EXISTS
					    (SELECT TOP 1 1 FROM dbo.split(TBA.CategoryValue, ',') SP WHERE SP.Item = CAST(Zm.MediaId AS VARCHAR(50)))FOR XML PATH('')), 2, 4000)) CategoryValue
						FROM @TBL_AttributeValue TBA WHERE EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FNMA WHERE FNMA.PImAttributeId = TBA.PimATtributeId))
                         
					 UPDATE TBAV SET CategoryValue = CTCM.CategoryValue 
					 FROM @TBL_AttributeValue TBAV 
					 INNER JOIN Cte_productMedia CTCM ON(CTCM.PimCategoryId = TBAV.PimCategoryId
					 AND CTCM.PimAttributeId = TBAV.PimAttributeId);

                     WITH Cte_PublishProductIds
					 AS (SELECT TBPC.PublishcategoryId,SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50))
					  FROM ZnodePublishCategoryProduct ZPCP 
					  WHERE ZPCP.PublishCategoryId = TBPC.publishCategoryId
					  AND ZPCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId
                      AND ZPCP.PublishCatalogId = @PublishCatalogId FOR XML PATH('')), 2, 8000) PublishProductId ,PimCategoryHierarchyId
					  FROM @TBL_PublishPimCategoryIds TBPC)
                          
					 UPDATE TBPPC SET PublishProductId = CTPP.PublishProductId FROM @TBL_PublishPimCategoryIds TBPPC INNER JOIN Cte_PublishProductIds CTPP ON(TBPPC.PublishCategoryId = CTPP.PublishCategoryId 
					 AND TBPPC.PimCategoryHierarchyId = CTPP.PimCategoryHierarchyId);

					 WITH Cte_CategoryProfile
						AS (SELECT PimCategoryId,ZPCC.PimCategoryHierarchyId,SUBSTRING(( SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPC 
						INNER JOIN ZnodeProfileCategoryHierarchy ZPRCC ON(ZPRCC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId
						AND ZPRCC.ProfileCatalogId = ZPC.ProfileCatalogId) 
						WHERE ZPC.PimCatalogId = ZPCC.PimCatalogId FOR XML PATH('')), 2, 4000) ProfileIds
                      
						FROM ZnodePimCategoryHierarchy ZPCC 
						WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_PimCategoryIds TBPC 
						WHERE TBPC.PimCategoryId = ZPCC.PimCategoryId AND ZPCC.PimCatalogId = @PimCatalogId 
						AND ZPCC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId))
                          
				     UPDATE TBPC SET TBPC.ProfileId = CTCP.ProfileIds FROM @TBL_PimCategoryIds TBPC 
					 LEFT JOIN Cte_CategoryProfile CTCP ON(CTCP.PimCategoryId = TBPC.PimCategoryId AND CTCP.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId );
                     
					 UPDATE TBPC SET TBPC.CategoryName = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
                     AND EXISTS(SELECT TOP 1 1 FROM [dbo].[Fn_GetCategoryNameAttribute]() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId));

					   UPDATE TBPC SET TBPC.CategoryCode = TBAV.CategoryValue FROM @TBL_PimCategoryIds TBPC INNER JOIN @TBL_AttributeValue TBAV ON(TBAV.PimCategoryId = TBPC.PimCategoryId
					 AND EXISTS(SELECT TOP 1 1 FROM dbo.Fn_GetCategoryCodeAttribute() FNGCNA WHERE FNGCNA.PimAttributeId = TBAV.PimAttributeId)
					 )


					-- SELECT * FROM @TBL_AttributeValue WHERE pimCategoryId = 369

					 -- here update the publish category details 
                     ;WITH Cte_UpdateCategoryDetails
                     AS (
							 SELECT TBC.PimCategoryId,PublishCategoryId,CategoryName, TBPPC.PimCategoryHierarchyId,CategoryCode
							 FROM @TBL_PimCategoryIds TBC
							 INNER JOIN @TBL_PublishPimCategoryIds TBPPC ON(TBC.PimCategoryId = TBPPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPPC.PimCategoryHierarchyId)
					 )						
                     MERGE INTO ZnodePublishCategoryDetail TARGET USING Cte_UpdateCategoryDetails SOURCE ON(
					 TARGET.PublishCategoryId = SOURCE.PublishCategoryId
					 AND TARGET.LocaleId = @LocaleId)
                     WHEN MATCHED THEN UPDATE SET PublishCategoryId = SOURCE.PublishcategoryId,PublishCategoryName = SOURCE.CategoryName,LocaleId = @LocaleId,ModifiedBy = @userId,ModifiedDate = @GetDate,CategoryCode=SOURCE.CategoryCode
                     WHEN NOT MATCHED THEN INSERT(PublishCategoryId,PublishCategoryName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CategoryCode) VALUES
                     (SOURCE.PublishCategoryId,SOURCE.CategoryName,@LocaleId,@userId,@GetDate,@userId,@GetDate,SOURCE.CategoryCode);

                     ;WITH Cte_CategoryXML
                     AS (SELECT PublishcategoryId,PimCategoryId,(SELECT @VersionId VersionId,TBPC.PublishCategoryId ZnodeCategoryId,@PublishCatalogId ZnodeCatalogId
																		,THR.PublishParentCategoryId TempZnodeParentCategoryIds,ZPC.CatalogName ,
																		 ISNULL(DisplayOrder, '0') DisplayOrder,@LocaleId LocaleId,ActivationDate 
																		 ,ExpirationDate,TBC.IsActive,ISNULL(CategoryName, '') Name,ProfileId TempProfileIds,ISNULL(PublishProductId, '') TempProductIds,ISNULL(CategoryCode,'') CategoryCode 
                        FROM @TBL_PublishPimCategoryIds TBPC 
						INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId= @PublishCatalogId)
						INNER JOIN ZnodePublishCAtegory THR ON (THR.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId AND THR.PimCategoryId = TBPC.PimCategoryId AND THR.PublishCatalogId= @PublishCatalogId )
						INNER JOIN @TBL_PimCategoryIds TBC ON(TBC.PimCategoryId = TBPC.PimCategoryId AND TBC.PimCategoryHierarchyId = TBPC.PimCategoryHierarchyId) WHERE TBPC.PublishCategoryId = TBPCO.PublishCategoryId 
						FOR XML PATH('')) CategoryXml 
						FROM @TBL_PublishPimCategoryIds TBPCO),

                     Cte_CategoryAttributeXml
                     AS (SELECT CTCX.PublishCategoryId,'<CategoryEntity>'+ISNULL(CategoryXml, '')+ISNULL((SELECT(SELECT TBA.AttributeCode,TBA.AttributeName,ISNULL(IsUseInSearch, 0) IsUseInSearch,
                        ISNULL(IsHtmlTags, 0) IsHtmlTags,ISNULL(IsComparable, 0) IsComparable,(SELECT ''+TBAV.CategoryValue FOR XML PATH('')) AttributeValues,TBA.AttributeTypeName FROM @TBL_AttributeValue TBAV
                        INNER JOIN @TBL_AttributeIds TBA ON(TBAV.PimAttributeId = TBA.PimAttributeId) LEFT JOIN ZnodePimFrontendProperties ZPFP ON(ZPFP.PimAttributeId = TBA.PimAttributeId)
                        WHERE CTCX.PimCategoryId = TBAV.PimCategoryId AND TBAO.PimAttributeId = TBA.PimAttributeId FOR XML PATH('AttributeEntity'), TYPE) FROM @TBL_AttributeIds TBAO
                        FOR XML PATH('Attributes')), '')+'</CategoryEntity>' CategoryXMl FROM Cte_CategoryXML CTCX)

                     INSERT INTO @TBL_CategoryXml(PublishCategoryId,CategoryXml,LocaleId)
                     SELECT PublishCategoryId,CategoryXml,@LocaleId LocaleId FROM Cte_CategoryAttributeXml;
                   
				     DELETE FROM @TBL_AttributeIds;
                     DELETE FROM @TBL_AttributeDefault;
                     DELETE FROM @TBL_AttributeValue;
                     SET @Counter = @Counter + 1;
                 END;

				 -----------------------
			IF @PimCategoryHierarchyId > 0 
			Begin 
				Select PublishCategoryId ,@VersionId VersionId	, @PimCatalogId PimCatalogId	, LocaleId
				into #OutPublish  FROM @TBL_CategoryXml  
				--group by PimCatalogId,VersionId,PublishCategoryId
  

				Alter TABLE #OutPublish ADD Id int Identity 

				SET @MaxId =(SELECT COUNT(*) FROM #OutPublish);
				--SET @PimCategoryIds = SUBSTRING((SELECT ','+CAST(PimCategoryId AS VARCHAR(50)) FROM @TBL_PublishPimCategoryIds FOR XML PATH('')), 2, 4000);
				Declare @ExistingPublishCategoryId  nvarchar(max), @PublishCategoryId  int 
				SET @Counter =1 
				WHILE @Counter <= @MaxId -- Loop on Locale id 
				BEGIN
					SELECT @VersionId = VersionId  ,
					@PublishCategoryId = PublishCategoryId 
					from #OutPublish where Id = @Counter

					SELECT @ExistingPublishCategoryId  = PublishCategoryId FROM ZnodePublishCatalogLog ZPCL 
					where ZPCL.PublishCatalogLogId = @VersionId  and IsCategoryPublished =1 

					IF NOT EXISTS (SELECT TOP 1 1 FROM Split(@ExistingPublishCategoryId  , ',') SP WHERE SP.Item = Convert(nvarchar(50),  @PublishCategoryId) )
					BEGIN
					
						If Isnull(@ExistingPublishCategoryId,'')  = '' 
							SET @ExistingPublishCategoryId  = Convert(nvarchar(100),@PublishCategoryId )
						else 
							SET @ExistingPublishCategoryId  = Isnull(@ExistingPublishCategoryId,'') + ',' +  Convert(nvarchar(100),@PublishCategoryId )

							
				
						UPDATE ZnodePublishCatalogLog SET PublishCategoryId = @ExistingPublishCategoryId ,
						ModifiedDate = @GetDate
						WHERE PublishCatalogLogId = @VersionId;
					END
					DELETE FROM ZnodePublishedXml where  IsCategoryXML =1  and  PublishCataloglogId = @VersionId  and  PublishedId = @PublishCategoryId 
					SET @Counter  = @Counter  + 1  
				END
			END 
			ElSE
			Begin
				 UPDATE ZnodePublishCatalogLog 
				 SET PublishCategoryId = SUBSTRING((SELECT ','+CAST(PublishCategoryId AS VARCHAR(50)) FROM @TBL_CategoryXml
				 GROUP BY PublishCategoryId																				
				 FOR XML PATH('')), 2, 4000), IsCategoryPublished = 1 WHERE PublishCatalogLogId = @VersionId;

				 DELETE FROM ZnodePublishedXml WHERE PublishCataloglogId = @VersionId;
             End
             
			 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsCategoryXML,IsProductXML,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
             SELECT @VersionId PublishCataloglogId,PublishCategoryId,CategoryXml,1,0,LocaleId,@UserId,@GetDate,@UserId,@GetDate FROM @TBL_CategoryXml WHERE @VersionId <> 0;
			 Select Distinct PublishCategoryId from @TBL_DeletedPublishCategoryIds
			 SELECT CategoryXml FROM @TBL_CategoryXml 
			
			 UPDATE ZnodePimCategory SET IsCategoryPublish =1 WHERE pimCategoryId IN (SELECT PimCategoryId FROM @TBL_PimCategoryIds)
             COMMIT TRAN GetPublishCategory;
			 
         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE();
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCategory @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
             SET @Status = 0;
             ROLLBACK TRAN GetPublishCategory;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_GetPublishCategory',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;
Go
 IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetPublishProductbulk')
BEGIN 
	DROP PROCEDURE Znode_GetPublishProductbulk
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetPublishProductbulk]
(
@PublishCatalogId INT = 0 
,@VersionId       VARCHAR(50) = 0 
,@PimProductId    TransferId Readonly
,@UserId		  INT = 0 
,@PimCategoryHierarchyId  INT = 0 
,@PimCatalogId INT = 0 
)
With RECOMPILE
AS
-- EXEC Znode_GetPublishProductbulk 5, 0 , '' , 2  
BEGIN 
  
 SET NOCOUNT ON 

EXEC Znode_InsertUpdatePimAttributeXML 1 
EXEC Znode_InsertUpdateCustomeFieldXML 1
EXEC Znode_InsertUpdateAttributeDefaultValue 1 

  --DECLARE @PimProductAttributeXML TABLE(PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )

   IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
   BEGIN 
	 DELETE FROM #PimProductAttributeXML
   END

   CREATE TABLE #PimProductAttributeXML (PimAttributeXMLId INT  PRIMARY KEY ,PimAttributeId INT,LocaleId INT  )
  	
   Declare @TBL_CategoryCategoryHierarchyIds TABLE (CategoryId int , ParentCategoryId int ) 
	
   If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
		INSERT INTO @TBL_CategoryCategoryHierarchyIds(CategoryId , ParentCategoryId )
			Select Distinct PimCategoryId , Null FROM (
				SELECT PimCategoryId,ParentPimCategoryId from DBO.[Fn_GetRecurciveCategoryIds](@PimCategoryHierarchyId,@PimCatalogId)
				Union 
				Select PimCategoryId , null  from ZnodePimCategoryHierarchy where PimCategoryHierarchyId = @PimCategoryHierarchyId 
				Union 
				Select PimCategoryId , null  from [Fn_GetRecurciveCategoryIds_new] (@PimCategoryHierarchyId,@PimCatalogId) ) Category  


   DECLARE @PimDefaultValueLocale  TABLE (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT ) 
   DECLARE @ProductNamePimAttributeId INT = dbo.Fn_GetProductNameAttributeId(),@DefaultLocaleId INT= Dbo.Fn_GetDefaultLocaleId(),@LocaleId INT = 0 
		,@SkuPimAttributeId  INT =  dbo.Fn_GetProductSKUAttributeId() , @IsActivePimAttributeId INT =  dbo.Fn_GetProductIsActiveAttributeId()
   DECLARE @GetDate DATETIME =dbo.Fn_GetDate()
   DECLARE @TBL_LocaleId  TABLE (RowId INT IDENTITY(1,1) PRIMARY KEY  , LocaleId INT )
			INSERT INTO @TBL_LocaleId (LocaleId)
			SELECT  LocaleId
			FROM ZnodeLocale 
			WHERE IsActive = 1
  DECLARE @Counter INT =1 ,@maxCountId INT = (SELECT max(RowId) FROM @TBL_LocaleId ) 
 
 --DECLARE #TBL_PublishCatalogId TABLE(PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT )

 CREATE TABLE #TBL_PublishCatalogId (PublishCatalogId INT,PublishProductId INT,PimProductId  INT   , VersionId INT, PublishCategoryId int  )

 CREATE INDEX idx_#TBL_PublishCatalogIdPimProductId on #TBL_PublishCatalogId(PimProductId)

  CREATE INDEX idx_#TBL_PublishCatalogIdPimPublishCatalogId on #TBL_PublishCatalogId(PublishCatalogId)

  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )  
			 SELECT distinct ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,@versionId ,ZPC.PublishCategoryId
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 INNER JOIN ZnodePublishCategoryProduct ZPPP ON ZPP.PublishProductId  = ZPPP.PublishProductId  
				 AND ZPCP.PublishCatalogId = ZPPP.PublishCatalogId
				 INNER JOIN ZnodePublishCategory ZPC ON ZPC.PublishCatalogId = ZPPP.PublishCatalogId AND ZPPP.PublishCategoryId = ZPC.PublishCategoryId 
				 WHERE ZPP.PublishCatalogId = @PublishCatalogId  and  
				 ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds )

			INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId ,PimProductId  , VersionId ,PublishCategoryId )
			SELECT DISTINCT @publishCatalogId,ZPP.PublishProductId,PimProductId,@versionId,NULL 
				 FROM ZnodePublishProduct ZPP INNER JOIN ZnodePublishCatalogLog ZPCP ON 
				 (ZPCP.PublishCatalogId = ZPP.PublishCatalogId) WHERE
				 (EXISTS (SELECT TOP 1 1 FROM @pimProductId SP WHERE SP.Id = ZPP.PimProductId ))
				 AND (ZPP.PublishCatalogId = @publishCatalogId )
				 AND NOT Exists (Select TOP 1 1 from #TBL_PublishCatalogId TPL where TPL.PublishProductId = ZPP.PublishProductId)


  END
  ELSE 
  BEGIN
			 INSERT INTO #TBL_PublishCatalogId(PublishCatalogId ,PublishProductId,PimProductId ,VersionId ) 
			 SELECT ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId,CASE WHEN @versionId = 0 OR @versionId IS NULL THEN  
											MAX(PublishCatalogLogId) ELSE @versionId END 
				 FROM ZnodePublishProduct ZPP 
				 INNER JOIN ZnodePublishCatalogLog ZPCP ON (ZPCP.PublishCatalogId  = ZPP.PublishCatalogId)
				 WHERE (EXISTS (SELECT TOP 1 1 FROM @PimProductId SP 
				 WHERE SP.Id = ZPP.PimProductId  AND  (@PublishCatalogId IS NULL OR @PublishCatalogId = 0 ))
				 OR  (ZPP.PublishCatalogId = @PublishCatalogId ))
				 GROUP BY ZPP.PublishCatalogId , ZPP.PublishProductId,PimProductId
  END
           
		     DECLARE   @TBL_ZnodeTempPublish TABLE (PimProductId INT , AttributeCode VARCHAR(300) ,AttributeValue NVARCHAR(max) ) 			
			 DECLARE @TBL_AttributeVAlueLocale TABLE(PimProductId INT,PimAttributeId INT,ZnodePimAttributeValueLocaleId INT,LocaleId INT 
			 )

WHILE @Counter <= @maxCountId
BEGIN
 
  SET @LocaleId = (SELECT TOP 1 LocaleId FROM @TBL_LocaleId WHERE RowId = @Counter)
 
  INSERT INTO #PimProductAttributeXML 
  SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
  FROM ZnodePimAttributeXML
  WHERE LocaleId = @LocaleId
  
  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO #PimProductAttributeXML 
	SELECT PimAttributeXMLId ,PimAttributeId,LocaleId
	FROM ZnodePimAttributeXML ZPAX
	WHERE ZPAX.LocaleId = @DefaultLocaleId  
	AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProductAttributeXML ZPAXI WHERE ZPAXI.PimAttributeId = ZPAX.PimAttributeId )
  END

  INSERT INTO @PimDefaultValueLocale
  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
  FROM ZnodePimAttributeDefaultXML
  WHERE localeId = @LocaleId

  IF( @LocaleId <> @DefaultLocaleId )
  BEGIN
	INSERT INTO @PimDefaultValueLocale 
	SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId 
	FROM ZnodePimAttributeDefaultXML ZX
	WHERE localeId = @DefaultLocaleId
	AND NOT EXISTS (SELECT TOP 1 1 FROM @PimDefaultValueLocale TRTR WHERE TRTR.PimAttributeDefaultValueId = ZX.PimAttributeDefaultValueId)
  END
  
  DECLARE @TBL_CustomeFiled TABLE (PimCustomeFieldXMLId INT ,CustomCode VARCHAR(300),PimProductId INT ,LocaleId INT )

  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,RTR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML RTR 
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = RTR.PimProductId)
  WHERE RTR.LocaleId = @LocaleId
 
 
  INSERT INTO @TBL_CustomeFiled (PimCustomeFieldXMLId,PimProductId ,LocaleId,CustomCode)
  SELECT  PimCustomeFieldXMLId,ITR.PimProductId ,LocaleId,CustomCode
  FROM ZnodePimCustomeFieldXML ITR
  INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ITR.PimProductId)
  WHERE ITR.LocaleId = @DefaultLocaleId
  AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_CustomeFiled TBL  WHERE ITR.CustomCode = TBL.CustomCode AND ITR.PimProductId = TBL.PimProductId)
       

	 SELECT VIR.PimProductId,PimAttributeId,ZnodePimAttributeValueLocaleId,VIR.LocaleId , VIR.AttributeValue, VIR.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,PimAttributeId ORDER BY VIR.PimProductId,PimAttributeId  ) RowId
	 INTO #TBL_AttributeVAlue
	 FROM View_LoadManageProductInternal VIR
	 WHERE ( LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  UNION ALL 
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDE.PimProductAttributeMediaId,ZPDE.LocaleId ,ZPDE.MediaPath AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimProductAttributeMedia ZPDE ON (ZPDE.PimAttributeValueId = VIR.PimAttributeValueId )
	 INNER JOIN ZnodePimAttribute d ON ( d.PimAttributeId=VIR.PimAttributeId )
	 WHERE ( ZPDE.LocaleId = @DefaultLocaleId OR ZPDE.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )
	  Union All
	 SELECT VIR.PimProductId,VIR.PimAttributeId,ZPDVL.PimAttributeDefaultValueLocaleId,ZPDVL.LocaleId ,ZPDVL.AttributeDefaultValue AS AttributeValue, d.AttributeCode ,ROW_NUMBER() Over(Partition By VIR.PimProductId,VIR.PimAttributeId ORDER BY VIR.PimProductId,VIR.PimAttributeId  ) RowId
	 FROM ZnodePimAttributeValue  VIR
	 INNER JOIN ZnodePimAttribute D ON ( D.PimAttributeId=VIR.PimAttributeId AND D.IsPersonalizable =1  )
	 INNER JOIN ZnodePimAttributeDefaultValue ZPADV ON ZPADV.PimAttributeId = D.PimAttributeId
	 INNER JOIN ZnodePimAttributeDefaultValueLocale ZPDVL   on (ZPADV.PimAttributeDefaultValueId = ZPDVL.PimAttributeDefaultValueId)
	 --INNER JOIN ZnodePimProductAttributeDefaultValue ZPDVP ON (ZPDVP.PimAttributeValueId = VIR.PimAttributeValueId AND ZPADV.PimAttributeDefaultValueId = ZPDVP.PimAttributeDefaultValueId )
	 WHERE ( ZPDVL.LocaleId = @DefaultLocaleId OR ZPDVL.LocaleId = @LocaleId )
	 AND EXISTS (SELECT TOP 1 1 FROM #TBL_PublishCatalogId ZPP WHERE (ZPP.PimProductId = VIR.PimProductId) )

	 UPDATE #TBL_AttributeVAlue SET rowid = (SELECT MAX(rowid) from #TBL_AttributeVAlue b where a.PimProductId=b.PimProductId and a.PimAttributeId = b.PimAttributeId )
	 from #TBL_AttributeVAlue a

	 --select * from #TBL_AttributeVAlue
	 --return
  SET @versionId = (SELECT TOP 1 VersionId FROM #TBL_PublishCatalogId) 
  

 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END 

 create table #Cte_GetData (PimProductId int,AttributeCode varchar(600),AttributeValue nvarchar(max))

 create index idx_#Cte_GetDataPimProductId on #Cte_GetData(PimProductId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT  a.PimProductId,a.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(a.AttributeValue,'')+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue
FROM #TBL_AttributeVAlue a 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
where a.LocaleId  = CASE WHEN a.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
AND NOT EXISTS (SELECT TOP 1 1 FROM Fn_GetProductMediaAttributeId() TY WHERE TY.PimAttributeId = c.PimAttributeId)
--INNER JOIN #TBL_AttributeVAlue CTE ON (Cte.PimAttributeId = a.PimAttributeId AND Cte.ZnodePimAttributeValueLocaleId = a.ZnodePimAttributeValueLocaleId AND CTE.LocaleId  = CASE WHEN cte.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )

--insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
--SELECT  a.PimProductId,c.AttributeCode , '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+''+'</AttributeValues> </AttributeEntity>  </Attributes>'  AttributeValue                 
--FROM ZnodePimAttributeValue  a 
--INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = a.PimAttributeId )
--INNER JOIN ZnodePImAttribute ZPA  ON (ZPA.PimAttributeId = a.PimAttributeId)
--INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = a.PimProductId)
--WHERE ZPA.IsPersonalizable = 1 
--AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale q WHERE q.PimAttributeValueId = a.PimAttributeValueId) 
--and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

	 

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT THB.PimProductId,'','<Attributes><AttributeEntity>'+CustomeFiledXML+'</AttributeEntity></Attributes>' 
FROM ZnodePimCustomeFieldXML THB 
INNER JOIN @TBL_CustomeFiled TRTE ON (TRTE.PimCustomeFieldXMLId = THB.PimCustomeFieldXMLId)
UNION ALL 
SELECT ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
			   STUFF((
                    SELECT '  '+ DefaultValueXML  FROM ZnodePimAttributeDefaultXML AA 
				 INNER JOIN @PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
				 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
				 WHERE (ZPADV.PimAttributeValueId = ZPAV.PimAttributeValueId)
    FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> </AttributeEntity></Attributes>' AttributeValue 
FROM ZnodePimAttributeValue ZPAV  
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)


insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT DISTINCT  ZPAV.PimProductId,c.AttributeCode,'<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+SUBSTRING((SELECT DISTINCT  ',' +ZPPG.MediaPath FROM ZnodePimProductAttributeMedia ZPPG
     INNER JOIN #TBL_AttributeVAlue FTRE ON (FTRE.PimProductId = ZPAV.PimProductId AND FTRE.PimAttributeId = ZPAV.PimAttributeId  AND FTRE.LocaleId  = CASE WHEN FTRE.RowId = 2 THEN  @LocaleId ELSE @DefaultLocaleId END )
	 WHERE ZPPG.PimProductAttributeMediaId = FTRE.ZnodePimAttributeValueLocaleId
	 FOR XML PATH ('')
 ),2,4000)+'</AttributeValues></AttributeEntity></Attributes>' AttributeValue 	 
FROM ZnodePimAttributeValue ZPAV 
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPAV.PimAttributeId )
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPAV.PimProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPADVL WHERE ZPADVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
and exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)

insert into #Cte_GetData(PimProductId ,AttributeCode,AttributeValue)
SELECT ZPLP.PimParentProductId ,c.AttributeCode, '<Attributes><AttributeEntity>'+c.AttributeXML+'<AttributeValues>'+ISNULL(SUBSTRING((SELECT ','+CAST(PublishProductId AS VARCHAR(50)) 
							 FROM #TBL_PublishCatalogId ZPPI 
							 INNER JOIN ZnodePimLinkProductDetail ZPLPI ON (ZPLPI.PimProductId = ZPPI.PimProductId)
							 WHERE ZPLPI.PimParentProductId = ZPLP.PimParentProductId
							 AND ZPLPI.PimAttributeId   = ZPLP.PimAttributeId
							 FOR XML PATH ('') ),2,4000),'')+'</AttributeValues></AttributeEntity></Attributes>'   AttributeValue 
							
FROM ZnodePimLinkProductDetail ZPLP  
INNER JOIN #TBL_PublishCatalogId ZPP ON (ZPP.PimProductId = ZPLP.PimParentProductId)
INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = ZPLP.PimAttributeId )
where exists (select * from #PimProductAttributeXML b where b.PimAttributeXMLId = c.PimAttributeXMLId)
GROUP BY ZPLP.PimParentProductId , ZPP.PublishProductId  ,ZPLP.PimAttributeId,c.AttributeCode,c.AttributeXML,ZPP.PublishCatalogId

--  --CREATE INDEX IND_Znode

  DELETE FROM ZnodePublishedXml WHERE PublishCatalogLogId = @versionId AND IsProductXML = 1   AND LocaleId = @LocaleId 

--  --ALTER INDEX ALL ON ZnodePublishedXml  REBUILD WITH (FILLFACTOR = 80 ) 
  If (@PimCategoryHierarchyId <> 0 AND @PimCatalogId <> 0 )
  BEGIN
		
		--Collect index of other categorys
		IF OBJECT_ID('tempdb..#Index') is not null
		BEGIN 
			DROP TABLE #Index
		END 
		CREATE TABLE #Index (RowIndex int ,PublishCategoryId int , PublishProductId  int )		
		insert into  #Index ( RowIndex ,PublishCategoryId , PublishProductId )
		Select CAST(ROW_NUMBER()Over(Partition BY ZPC.PublishProductId 
		Order BY ISNULL(ZPC.PublishCategoryId,'0') desc )   AS VARCHAR(100)),
		ZPC.PublishCategoryId , ZPC.PublishProductId
		FROM ZnodePublishCategoryProduct ZPC where ZPC.PublishCatalogId = @PublishCatalogId
		
		--Publish parent products with index number 
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST(Isnull((select RowIndex from #Index WHERE PublishProductId = zpp.PublishProductId
								AND PublishCategoryId = ZPCP.PublishCategoryId  ),0)
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
		)
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId AND  ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds ) 
		and zpp.PublishCategoryId is NOT NULL
	 --Publish only associate product 
	 INSERT INTO ZnodePublishedXml (PublishCatalogLogId,PublishedId,PublishedXML,IsProductXML,LocaleId
		,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+
						'</TempProfileIds>
						 <ProductIndex>'+ 
								--CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPCP.PublishCategoryId,'0') desc ) 
								CAST(Isnull((select RowIndex from #Index WHERE PublishProductId = zpp.PublishProductId ) ,0)
								AS VARCHAr(100))+
						'</ProductIndex>
						<IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId 
		AND ZPP.PublishCategoryId = ZPC.PublishCategoryId 
		AND ZPC.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId
		AND ZPCCF.PimCategoryId in (Select CategoryId from @TBL_CategoryCategoryHierarchyIds ))
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId and zpp.PublishCategoryId is  NULL
		
  END
  ELSE
  BEGIN
		INSERT INTO ZnodePublishedXml (PublishCatalogLogId
		,PublishedId
		,PublishedXML
		,IsProductXML
		,LocaleId
		,CreatedBy
		,CreatedDate
		,ModifiedBy
		,ModifiedDate
		,PublishCategoryId)
		SELECT zpp.VersionId,zpp.PublishProductId,'<ProductEntity><VersionId>'+CAST(zpp.VersionId AS VARCHAR(50)) +'</VersionId><ZnodeProductId>'+CAST(zpp.PublishProductId AS VARCHAR(50))+'</ZnodeProductId><ZnodeCategoryIds>'+CAST(ISNULL(ZPCP.PublishCategoryId,'')  AS VARCHAR(50))+'</ZnodeCategoryIds><Name>'+CAST(ISNULL((SELECT ''+ZPPDFG.ProductName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</Name>'+'<SKU>'+CAST(ISNULL((SELECT ''+ZPPDFG.SKU FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKU>'+'<SKULower>'+CAST(ISNULL((SELECT ''+LOWER(ZPPDFG.SKU) FOR XML PATH ('')),'') AS NVARCHAR(2000))+ '</SKULower>'+'<IsActive>'+CAST(ISNULL(ZPPDFG.IsActive ,'0') AS VARCHAR(50))+'</IsActive>' 
		+'<ZnodeCatalogId>'+CAST(ZPP.PublishCatalogId  AS VARCHAR(50))+'</ZnodeCatalogId><IsParentProducts>'+CASE WHEN ZPCD.PublishCategoryId IS NULL THEN '0' ELSE '1' END  +'</IsParentProducts><CategoryName>'+CAST(ISNULL((SELECT ''+PublishCategoryName FOR XML PATH ('')),'') AS NVARCHAR(2000)) +'</CategoryName><CatalogName>'+CAST(ISNULL((SELECT ''+CatalogName FOR XML PATH ('')),'') AS NVARCHAR(2000))+'</CatalogName><LocaleId>'+CAST( @LocaleId AS VARCHAR(50))+'</LocaleId>'
		+'<TempProfileIds>'+ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfileCatalog ZPFC 
						INNER JOIN ZnodeProfileCatalogCategory ZPCCH  ON ( ZPCCH.ProfileCatalogId = ZPFC.ProfileCatalogId )
						WHERE ZPCCH.PimCatalogCategoryId = ZPCCF.PimCatalogCategoryId  FOR XML PATH('')),2,8000),'')+'</TempProfileIds><ProductIndex>'+CAST(ROW_NUMBER()Over(Partition BY zpp.PublishProductId Order BY ISNULL(ZPC.PublishCategoryId,'0') ) AS VARCHAr(100))+'</ProductIndex><IndexId>'+CAST( ISNULL(ZPCP.PublishCategoryProductId,'0') AS VARCHAr(100))+'</IndexId>'+
		'<DisplayOrder>'+CAST(ISNULL(ZPCCF.DisplayOrder,'') AS VARCHAR(50))+'</DisplayOrder>'+
		STUFF(( SELECT '  '+ AttributeValue  FROM #Cte_GetData TY WHERE TY.PimProductId = ZPP.PimProductId   
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</ProductEntity>' xmlvalue,1,@LocaleId,@UserId , @GetDate , @UserId,@GetDate
		,ZPCP.PublishCategoryId
		FROM  #TBL_PublishCatalogId zpp
		INNER JOIN ZnodePublishCatalog ZPCV ON (ZPCV.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePublishProductDetail ZPPDFG ON (ZPPDFG.PublishProductId =  ZPP.PublishProductId)
		LEFT JOIN ZnodePublishCategoryProduct ZPCP ON (ZPCP.PublishProductId = ZPP.PublishProductId AND ZPCP.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT JOIN ZnodePublishCategory ZPC ON (ZPCP.PublishCatalogId = ZPC.PublishCatalogId AND   ZPC.PublishCategoryId = ZPCP.PublishCategoryId )
		LEFT JOIN ZnodePimCatalogCategory ZPCCF ON (ZPCCF.PimCatalogId = ZPCV.PimCatalogId AND ZPCCF.PimCategoryId = ZPC.PimCategoryId  AND ZPCCF.PimProductId = ZPP.PimProductId AND  ZPCCF.PimCategoryHierarchyId =  ZPC.PimCategoryHierarchyId)
		LEFT JOIN ZnodePublishCategoryDetail ZPCD ON (ZPCD.PublishCategoryId = ISNULL(ZPCP.PublishCategoryId,0) AND ZPCD.LocaleId = @LocaleId )
		WHERE ZPPDFG.LocaleId = @LocaleId
END 
 


--DELETE FROM @PimProductAttributeXML
DELETE FROM @TBL_CustomeFiled
DELETE FROM @PimDefaultValueLocale
 IF OBJECT_ID('tempdb..#PimProductAttributeXML') is not null
 BEGIN 
 DELETE FROM #PimProductAttributeXML
 END
 IF OBJECT_ID('tempdb..#Cte_GetData') is not null
 BEGIN 
 DROP TABLE #Cte_GetData
 END
  IF OBJECT_ID('tempdb..#TBL_AttributeVAlue') is not null
 BEGIN 
 DROP TABLE #TBL_AttributeVAlue
 END
SET @Counter = @counter + 1 
END 

END
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetTextWidgetConfiguration')
BEGIN 
	DROP PROCEDURE Znode_GetTextWidgetConfiguration
END 
GO

CREATE PROCEDURE [dbo].[Znode_GetTextWidgetConfiguration]
(
       @PortalId INT
	   ,@UserId INT =  0  	
	   ,@CMSMappingId INT =0,
	   @LocaleId INT = 0
)
AS
/*
Summary: This Procedure is used to get text widget configuration
Unit Testing :
 EXEC Znode_GetTextWidgetConfiguration 1,2

 exec Znode_GetTextWidgetConfiguration 1,2,213,1

 exec Znode_GetTextWidgetConfiguration @PortalId=1,@UserId=2,@CMSMappingId=213
*/
     BEGIN
         BEGIN TRY
		
             DECLARE @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId() ,@IncrementValue INT= 1;

             DECLARE @LocaleAll TABLE (
                                      RowId    INT IDENTITY(1 , 1) ,
                                      LocaleId INT ,
                                      Code     VARCHAR(300)
                                      );
             INSERT INTO @LocaleAll ( LocaleId , Code
                                    )
                    SELECT LocaleId , Code
                    FROM ZnodeLocale AS a
                    WHERE a.IsActive = 1 AND
					a.LocaleId IN (CASE WHEN  @LocaleId = 0  THEN LocaleId ELSE @LocaleId END)
					;

             DECLARE @ReturnXML TABLE (
                                      ReturnXMl XML
                                      );
             WHILE @IncrementValue <= ( SELECT MAX(RowId)
                                        FROM @LocaleAll
                                      )
                 BEGIN
                     DECLARE @CMSWidgetData TABLE (CMSTextWidgetConfigurationId INT ,LocaleId  INT ,CMSWidgetsId INT ,WidgetsKey NVARCHAR(256) ,CMSMappingId  INT ,TypeOFMapping   NVARCHAR(100) ,[Text]  NVARCHAR(MAX));
                     
					 DECLARE @CMSWidgetDataFinal TABLE (CMSTextWidgetConfigurationId INT ,LocaleId    INT ,CMSWidgetsId INT ,WidgetsKey  NVARCHAR(256) ,CMSMappingId  INT ,TypeOFMapping NVARCHAR(100) ,[Text]  NVARCHAR(MAX));

                     INSERT INTO @CMSWidgetDataFinal
                            SELECT CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
                            FROM ZnodeCMSTextWidgetConfiguration AS a
                            WHERE (a.TypeOFMapping = 'ContentPageMapping'
                            AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  )
                            OR (a.TypeOFMapping = 'PortalMapping' AND a.CMSMappingId = @PortalId ))
							AND
                                 ( a.LocaleId IN 
								 ( ( SELECT LocaleId
                                                      FROM @LocaleAll
                                                      WHERE RowId = @IncrementValue
                                                    ) , @DefaultLocaleId 
                                                  ) ) )
										  
						   AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0  )
						 	  


                     INSERT INTO @CMSWidgetData
                            SELECT CMSTextWidgetConfigurationId , (SELECT  LocaleId FROM @LocaleAll WHERE RowId = @IncrementValue)  AS LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
                            FROM @CMSWidgetDataFinal
                            WHERE LocaleId = ( SELECT LocaleId
                                               FROM @LocaleAll
                                               WHERE RowId = @IncrementValue
                                             );



                     INSERT INTO @CMSWidgetData
                            SELECT CMSTextWidgetConfigurationId , ( SELECT LocaleId FROM @LocaleAll WHERE RowId = @IncrementValue) AS LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
                            FROM @CMSWidgetDataFinal AS p
                            WHERE p.LocaleId = @DefaultLocaleId
                                  AND
                                  NOT EXISTS ( SELECT TOP 1 1
                                               FROM @CMSWidgetData AS q
                                               WHERE q.CMSWidgetsId = p.CMSWidgetsId
                                                     AND
                                                     q.WidgetsKey = p.WidgetsKey
                                                     AND
                                                     q.TypeOFMapping = p.TypeOFMapping
                                                     AND
                                                     q.CMSMappingId = p.CMSMappingId
                                             );

										

                     INSERT INTO @ReturnXML ( ReturnXMl
                                            )
                            SELECT ( SELECT CMSTextWidgetConfigurationId AS TextWidgetConfigurationId , LocaleId , CMSWidgetsId AS WidgetsId , WidgetsKey , CMSMappingId AS MappingId , TypeOFMapping , [Text] , @PortalId AS PortalId
                                     FROM @CMSWidgetData AS a
                                     WHERE a.CMSTextWidgetConfigurationId = w.CMSTextWidgetConfigurationId 
                                     FOR XML PATH('TextWidgetEntity')
                                   )
                            FROM @CMSWidgetData AS w
						
							;
                     SET @IncrementValue = @IncrementValue + 1;
                     DELETE FROM @CMSWidgetData;
                     DELETE FROM @CMSWidgetDataFinal;
                 END;
             SELECT *
             FROM @ReturnXML;
         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetTextWidgetConfiguration @PortalId = '+CAST(@PortalId AS VARCHAR(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetTextWidgetConfiguration',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogProductSEODetail')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogProductSEODetail
END 
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogProductSEODetail]
( 
  @WhereClause      NVARCHAR(MAX),
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PortalId			INT
 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetail @WhereClause=N'',@Rows=100,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 1 ,@LocaleId=1 
	   rollback tran
	  
	     declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetails @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 5 ,@LocaleId=1 


    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE  @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @SQL NVARCHAR(MAX), 
					 @PimProductId TransferId,
					 @PimAttributeId VARCHAR(MAX)
					
             DECLARE @TransferPimProductId TransferId 
		
	
			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct

			Declare @PimCatalogId INT

			SELECT @PimCatalogId = PimCatalogId 
			FROM ZnodePortalCatalog ZPC
			INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId
				
                SELECT  PimProductid,SKU,ProductName,ProductImage,IsActive,LocaleId
				INTO #ProductDetail
				 FROM 
				 (
				 SELECT c.pimproductId,PA.attributecode,e.AttributeValue,e.LocaleId
				 FROM
				 znodePimProduct c 
				 inner join ZnodePimAttributeValue d on (c.PimProductid = d.PimProductid)
				 inner join ZnodePimAttributeValueLocale e on (d.PimAttributeValueId = e.PimAttributeValueId)
				 inner join ZnodePimAttribute PA ON (PA.PimAttributeId = d.PimAttributeId)
				 where  PA.Attributecode IN ('SKU','ProductName','ProductImage','IsActive')
				-- AND e.localeid = @LocaleId
				 ) piv PIVOT(MAX(AttributeValue) FOR AttributeCode in ( SKU,ProductName,ProductImage,IsActive))AS PVT
				


		SET @SQL = 
		'
		--DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
		--INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
		--	 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		select distinct PimCatalogId,PimProductId into #znodeCatalogProduct
	FROm ZnodePimCatalogCategory

		DECLARE @TBL_MediaValue TABLE (PimAttributeValueId INT,PimProductId INT,MediaPath INT,PimAttributeId INt,LocaleId INT )
		INSERT INTO @TBL_MediaValue
		SELECT ZPAV.PimAttributeValueId	,ZPAV.PimProductId	,ZPPAM.MediaId MediaPath,ZPAV.PimAttributeId , 	ZPPAM.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimProductAttributeMedia ZPPAM ON ( ZPPAM.PimAttributeValueId = ZPAV.PimAttributeValueId)
					INNER JOIN #ProductDetail PD ON (PD.PimProductId = ZPAV.PimProductId)
					LEFT JOIN ZnodeMedia ZM ON (Zm.Path = ZPPAM.MediaPath) 
					WHERE  ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute pa where attributecode = ''ProductImage'') 

		;WITH Cte_ProductMedia
               AS (SELECT PD.PimProductId  , 
			   URL+ZMSM.ThumbnailFolderName+''/''+ zm.PATH  AS ProductImagePath 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_MediaValue PD ON (PD.MediaPath = CAST(ZM.MediaId AS VARCHAR(50)))
			   --INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = PD.PimATtributeId )
			   
			   )

		, CTE_ProductDetail AS
	(
		SELECT DISTINCT  CD.pimproductId, SKU,ProductName,
		case WHEN  CD.IsActive = ''true'' THEN 1 ELSE 0 END IsActive, ISNULL(CSD.SEOCode,SKU) as SEOCode, CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		Case When Isnull(CSD.IsPublish ,0 ) = 0 then ''Draft'' ELSE ''Published'' END  IsPublish  , CPM.ProductImagePath, PC.CatalogName, CSDL.LocaleId
		FROM #ProductDetail CD
		INNER JOIN #znodeCatalogProduct PCC on CD.PimProductId = PCC.PimProductId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Product''
		LEFT JOIN ZnodeCMSSEODetail CSD on CD.SKU = CSD.SEOCode and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId --AND CSDL.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
		
		LEFT JOIN Cte_ProductMedia CPM ON (CPM.PimProductId = CD.PimProductId)
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' AND CSDL.LocaleId IN ('+CAST(@LocaleId AS VARCHAR(50))+', '+CAST(@DefaultLocaleId AS VARCHAR(50))+')
	)

	, CTE_ProductLocale AS
	(
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName, LocaleId
	FROM CTE_ProductDetail CPD
	WHERE CPD.LocaleId ='+CAST(@LocaleId AS VARCHAR(50))+'	
	)

	, CTE_ProductBothLocale AS
	(
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName
	FROM CTE_ProductLocale PL
	UNION ALL 
	SELECT pimproductId, SKU,ProductName,IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName
	FROM CTE_ProductDetail PD 
	WHERE LocaleId ='+CAST(@DefaultLocaleId AS VARCHAR(50))+' AND
	NOT EXISTS (select * from CTE_ProductLocale PCL WHERE PCL.pimproductId = PD.pimproductId AND PCL.CatalogName = PD.CatalogName )
	)

	,CTE_ProductDetail_WhereClause AS
	(
		SELECT  pimproductId, SKU,ProductName,
		cast(IsActive as bit) IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,CatalogName,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimProductId')+',Count(*)Over() CountId
		FROM CTE_ProductBothLocale CD
		WHERE 1 = 1  '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath,CatalogName, CountId
	INTO ##TempProductDetail
	FROM CTE_ProductDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempProductDetail ),0)

	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 
	FROM ##TempProductDetail
	--GROUP by pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 

  
		

			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			
			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct


         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		 --    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			-- @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			--VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			--@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			--@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
   --          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
   --          EXEC Znode_InsertProcedureErrorLog
			--	@ProcedureName = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorMessage = @ErrorMessage,
			--	@ErrorLine = @ErrorLine,
			--	@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO
update ZnodePimAttributeValidation
set name = '\S*(\S*([a-zA-Z]\S*[0-9])|([0-9]\S*[a-zA-Z]))\S*'
where PimAttributeId = (select PimAttributeId from ZnodePimAttribute where attributecode = 'CategoryCode')
AND InputValidationId = (select  InputValidationId from ZnodeAttributeInputValidation where name = 'RegularExpression')
GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_GetCatalogProductSEODetail')
BEGIN 
	DROP PROCEDURE Znode_GetCatalogProductSEODetail
END
GO
CREATE PROCEDURE [dbo].[Znode_GetCatalogProductSEODetail]
( 
  @WhereClause      NVARCHAR(MAX),
  @Rows             INT           = 100,
  @PageNo           INT           = 1,
  @Order_BY         VARCHAR(1000) = '',
  @RowsCount        INT OUT,
  @LocaleId         INT           = 1,
  @PortalId			INT
 
  )
AS
   
/*
	   Summary:  Get product List  Catalog / category / respective product list   		   
	   Unit Testing   
	   begin tran
	   declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetail @WhereClause=N'',@Rows=100,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 1 ,@LocaleId=1 
	   rollback tran
	  
	     declare @p7 int = 0  
	   EXEC Znode_GetCatalogProductSEODetails @WhereClause=N'',@Rows=10,@PageNo=1,@Order_By=N'',
	   @RowsCount=@p7 output,@PortalId= 5 ,@LocaleId=1 


    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             DECLARE  @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
             DECLARE @SQL NVARCHAR(MAX), 
					 @PimProductId TransferId,
					 @PimAttributeId VARCHAR(MAX)
					
             DECLARE @TransferPimProductId TransferId 
		
	
			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct

			Declare @PimCatalogId INT

			SELECT @PimCatalogId = PimCatalogId 
			FROM ZnodePortalCatalog ZPC
			INNER JOIN ZnodePublishCatalog PC ON ZPC.PublishCatalogId = pc.PublishCatalogId WHERE PortalId = @PortalId
				
                SELECT  PimProductid,SKU,ProductName,ProductImage,IsActive
				INTO #ProductDetail
				 FROM 
				 (
				 SELECT c.pimproductId,PA.attributecode,e.AttributeValue
				 FROM
				 znodePimProduct c 
				 inner join ZnodePimAttributeValue d on (c.PimProductid = d.PimProductid)
				 inner join ZnodePimAttributeValueLocale e on (d.PimAttributeValueId = e.PimAttributeValueId)
				 inner join ZnodePimAttribute PA ON (PA.PimAttributeId = d.PimAttributeId)
				 where  PA.Attributecode IN ('SKU','ProductName','ProductImage','IsActive')
				-- AND e.localeid = @LocaleId
				 ) piv PIVOT(MAX(AttributeValue) FOR AttributeCode in ( SKU,ProductName,ProductImage,IsActive))AS PVT
				


		SET @SQL = 
		'
		--DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
		--INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
		--	 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

		select distinct PimCatalogId,PimProductId into #znodeCatalogProduct
	FROm ZnodePimCatalogCategory

		DECLARE @TBL_MediaValue TABLE (PimAttributeValueId INT,PimProductId INT,MediaPath INT,PimAttributeId INt,LocaleId INT )
		INSERT INTO @TBL_MediaValue
		SELECT ZPAV.PimAttributeValueId	,ZPAV.PimProductId	,ZPPAM.MediaId MediaPath,ZPAV.PimAttributeId , 	ZPPAM.LocaleId
					FROM ZnodePimAttributeValue ZPAV
					INNER JOIN ZnodePimProductAttributeMedia ZPPAM ON ( ZPPAM.PimAttributeValueId = ZPAV.PimAttributeValueId)
					INNER JOIN #ProductDetail PD ON (PD.PimProductId = ZPAV.PimProductId)
					LEFT JOIN ZnodeMedia ZM ON (Zm.Path = ZPPAM.MediaPath) 
					WHERE  ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute pa where attributecode = ''ProductImage'') 

		;WITH Cte_ProductMedia
               AS (SELECT PD.PimProductId  , 
			   URL+ZMSM.ThumbnailFolderName+''/''+ zm.PATH  AS ProductImagePath 
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_MediaValue PD ON (PD.MediaPath = CAST(ZM.MediaId AS VARCHAR(50)))
			   --INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = PD.PimATtributeId )
			   
			   )

		, CTE_ProductDetail AS
	(
		SELECT DISTINCT  CD.pimproductId, SKU,ProductName,
		case WHEN  CD.IsActive = ''true'' THEN 1 ELSE 0 END IsActive, ISNULL(CSD.SEOCode,SKU) SEOCode, CSD.SEOUrl, CSDL.SEOTitle, CSDL.SEODescription, CSDL.SEOKeywords,
		Case When Isnull(CSD.IsPublish ,0 ) = 0 then ''Draft'' ELSE ''Published'' END  IsPublish  , CPM.ProductImagePath
		FROM #ProductDetail CD
		INNER JOIN #znodeCatalogProduct PCC on CD.PimProductId = PCC.PimProductId
		INNER JOIN ZnodePimCatalog PC on PCC.PimCatalogId = PC.PimCatalogId
		LEFT JOIN ZnodeCMSSEOType CST ON CST.Name = ''Product''
		LEFT JOIN ZnodeCMSSEODetail CSD on LTRIM(RTRIM(CD.SKU)) = LTRIM(RTRIM(CSD.SEOCode)) and CSD.CMSSEOTypeId = CST.CMSSEOTypeId AND CSD.PortalId = '+CAST(@PortalId AS VARCHAR(10))+'
		LEFT JOIN ZnodeCMSSEODetailLocale CSDL ON  CSD.CMSSEODetailId = CSDL.CMSSEODetailId AND CSDL.LocaleId =  '+CAST(@LocaleId AS VARCHAR(10))+'
		
		LEFT OUTER JOIN Cte_ProductMedia CPM ON (CPM.PimProductId = CD.PimProductId)
		WHERE PCC.PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(10))+' 
	)
	,CTE_ProductDetail_WhereClause AS
	(
		SELECT  pimproductId, SKU,ProductName,
		cast(IsActive as bit) IsActive , SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords, IsPublish,ProductImagePath,'+[dbo].[Fn_GetPagingRowId](@Order_BY, 'PimProductId')+',Count(*)Over() CountId
		FROM CTE_ProductDetail CD
		WHERE 1 = 1  '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	SELECT  pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath, CountId
	INTO ##TempProductDetail
	FROM CTE_ProductDetail_WhereClause
	'+[dbo].[Fn_GetPaginationWhereClause](@PageNo, @Rows);
	print @SQL
	EXEC (@SQL)

	SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM ##TempProductDetail ),0)

	SELECT  pimproductId, LTRIM(RTRIM(SKU)) SKU,ProductName,IsActive, LTRIM(RTRIM(SEOCode)) SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 
	FROM ##TempProductDetail
	--GROUP by pimproductId, SKU,ProductName,IsActive, SEOCode, SEOUrl, SEOTitle, SEODescription, SEOKeywords,IsPublish,ProductImagePath 

  
		

			IF OBJECT_ID('TEMPDB..#ProductDetail') IS NOT NULL
			DROP TABLE #ProductDetail

			IF OBJECT_ID('TEMPDB..##TempProductDetail') IS NOT NULL
			DROP TABLE ##TempProductDetail

			
			IF OBJECT_ID('TEMPDB..#znodeCatalogProduct') IS NOT NULL
		DROP TABLE #znodeCatalogProduct


         END TRY
         BEGIN CATCH
		    SELECT ERROR_message()
             DECLARE @Status BIT ;
		     SET @Status = 0;
		 --    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			-- @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogCategoryProducts @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(MAX)),'''''')+''',@Rows='+ISNULL(CAST(@Rows AS
			--VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
			--@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',@PimCategoryId='+ISNULL(CAST(@PimCategoryId AS VARCHAR(50)),'''')+',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',@IsAssociated='+ISNULL(CAST(@IsAssociated AS VARCHAR(50)),'''')+',
			--@ProfileCatalogId='+ISNULL(CAST(@ProfileCatalogId AS VARCHAR(50)),'''')+',@AttributeCode='''+ISNULL(CAST(@AttributeCode AS VARCHAR(50)),'''''')+''',@PimCategoryHierarchyId='+ISNULL(CAST(@PimCategoryHierarchyId AS VARCHAR(10)),'''');
              			 
   --          SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
   --          EXEC Znode_InsertProcedureErrorLog
			--	@ProcedureName = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorInProcedure = 'Znode_GetCatalogCategoryProducts',
			--	@ErrorMessage = @ErrorMessage,
			--	@ErrorLine = @ErrorLine,
			--	@ErrorCall = @ErrorCall;
         END CATCH;
     END;
GO

GO
IF EXISTS (SELECT TOP 1 1 FROM SYS.procedures WHERE name = 'Znode_DeleteOrderById')
BEGIN 
	DROP PROCEDURE Znode_DeleteOrderById
END 
GO
CREATE PROCEDURE [dbo].[Znode_DeleteOrderById]
(@OrderDetailId INT,
 @Status                     BIT OUT

)
AS

/*
begin tran
exec Znode_DeleteOrderById 6
rollback tran
*/
BEGIN
  SET NOCOUNT ON
   BEGIN  TRAN DeleteOrderById
  BEGIN TRY 


			DECLARE @OmsOrderId INT 
			DECLARE @TBL_OmsOrderLineItems TABLE (OmsOrderLineItemsId INT,OmsOrderShipmentId INT, OmsOrderDetailsId INT)
			INSERT INTO @TBL_OmsOrderLineItems
			SELECT OmsOrderLineItemsId,OmsOrderShipmentId, OmsOrderDetailsId FROM znodeOmsOrderLineItems 
			WHERE OmsOrderDetailsId = @OrderDetailId

			SET @OmsOrderId = (SELECT OmsOrderId FROM ZnodeOmsOrderDetails  WHERE OmsOrderDetailsId = @OrderDetailId )

			DELETE FROM ZnodeOmsOrderAttribute WHERE EXISTS (SELECT OmsOrderLineItemsId FROM znodeOmsOrderLineItems  WHERE OmsOrderDetailsId = @OrderDetailId)
			DELETE FROM ZnodeOmsOrderDiscount WHERE (OmsOrderDetailsId = @OrderDetailId  or OmsOrderLineItemId IN (SELECT OmsOrderLineItemsId FROM znodeOmsOrderLineItems  WHERE OmsOrderDetailsId = @OrderDetailId))
			DELETE FROM ZnodeOmsOrderWarehouse WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsOrderWarehouse.OmsOrderLineItemsId  )
			--DELETE FROM ZnodeOmsOrderLineItems WHERE OmsOrderDetailsId IN (SELECT OmsOrderDetailsId FROM ZnodeOmsOrderLineItems WHERE OmsOrderDetailsId = @OrderDetailId)

			DELETE FROM ZnodeOmsOrderLineItemsAdditionalCost WHERE EXISTS ( SELECT TOP 1 1 FROM 
			ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)
			AND ZnodeOmsOrderLineItems.OmsOrderLineItemsId = ZnodeOmsOrderLineItemsAdditionalCost.OmsOrderLineItemsId)


			DELETE FROM ZnodeOmsPersonalizeItem WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsPersonalizeItem.OmsOrderLineItemsId)

			
			DELETE FROM ZnodeOmsTaxOrderLineDetails WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsTaxOrderLineDetails.OmsOrderLineItemsId)

			DELETE FROM ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)

			DELETE FROM ZnodeOmsOrderShipment WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderShipmentId = ZnodeOmsOrderShipment.OmsOrderShipmentId )

			DELETE FROM znodeGiftCardHistory WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM znodeOmsEmailHistory WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM znodeOmsNotes  WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM ZnodeOmsReferralCommission WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM ZnodeOmsTaxOrderDetails WHERE OmsOrderDetailsId = @OrderDetailId

			DELETE FROM ZnodeOmsOrderDetails  WHERE  OmsOrderDetailsId = @OrderDetailId 

			DELETE FROM ZnodeOmsOrder WHERE OmsOrderId = @OmsOrderId AND  NOT EXISTS (SELECT TOP  1 1 FROM ZnodeOmsOrderDetails EREE 
			     WHERE EREE.OmsOrderId = ZnodeOmsOrder.OmsOrderId)
            
			
            SELECT 1 AS ID , CAST(1 AS BIT) AS Status;
        SET @Status = 1;    
		 COMMIT  TRAN DeleteOrderById
	END TRY
	BEGIN CATCH
	   SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
	    SET @Status = 0;
		ROLLBACK TRAN DeleteOrderById
	SELECT ERROR_MESSAGE()
	END CATCH

END
Go