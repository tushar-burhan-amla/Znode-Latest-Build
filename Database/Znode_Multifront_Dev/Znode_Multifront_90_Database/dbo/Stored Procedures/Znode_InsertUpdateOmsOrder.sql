CREATE PROCEDURE [dbo].[Znode_InsertUpdateOmsOrder]
(
	@OrderXML XML,
	@UserId INT
)
AS
BEGIN
SET NOCOUNT ON;
BEGIN TRY

	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @OMSOrder TABLE(OmsOrderId INT,OrderNumber VARCHAR(200))
	DECLARE @OMSOrderDetail TABLE(OmsOrderId INT,OmsOrderDetailsId INT)
	DECLARE @OmsOrderLineItems TABLE(RowId INT IDENTITY(1,1),OmsOrderDetailsId INT,OmsOrderLineItemsId INT, Sku VARCHAR(600), ParentOmsOrderLineItemsId INT, GroupId NVARCHAR(MAX),OrderLineItemRelationshipTypeId INT,ParentSku VARCHAR(600), GroupIdentifier INT)
	DECLARE @OmsParentOrderLineItems TABLE(RowId INT IDENTITY(1,1),OmsOrderDetailsId INT,OmsOrderLineItemsId INT, Sku VARCHAR(600), ParentOmsOrderLineItemsId INT, GroupId NVARCHAR(MAX), OrderLineItemRelationshipTypeId INT, GroupIdentifier INT)

	DECLARE @OrderLineItemRelationshipTypeIdAddon int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'AddOns'
	);

	DECLARE @OrderLineItemRelationshipTypeIdSimple int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Simple'
	);

	DECLARE @OrderLineItemRelationshipTypeIdBundles int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Bundles'
	);

	DECLARE @OrderLineItemRelationshipTypeIdGroup int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Group'
	);

	DECLARE @OrderLineItemRelationshipTypeIdConfig int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Configurable'
	);


	CREATE TABLE #TempOrderData
	(
		RowId INT IDENTITY(1,1),OrderNumber VARCHAR(200), PublishStateId INT,OmsOrderId INT,OmsOrderStateId INT,
		DiscountAmount NUMERIC(28,6),SalesTax NUMERIC(28,6),TaxRate NUMERIC(28,6),IsOldOrder BIT,VAT NUMERIC(28,6),GST NUMERIC(28,6),
		PST NUMERIC(28,6),HST NUMERIC(28,6),Total NUMERIC(28,6),BillingAddressId INT,ShippingAddressId INT,ShippingId INT,
		PortalId INT,ShippingNumber NVARCHAR(max),TrackingNumber NVARCHAR(1000),CouponCode NVARCHAR(1000),
		PromoDescription NVARCHAR(max),ReferralUserId int,PurchaseOrderNumber NVARCHAR(1000),OmsPaymentStateId int,
		WebServiceDownloadDate datetime,PaymentSettingId int,PaymentTransactionToken NVARCHAR(600),ShipDate datetime,ReturnDate datetime,
		AddressId int,PoDocument NVARCHAR(600),IsActive bit,ExternalId NVARCHAR(1000),PaymentTypeId INT,CreatedBy INT,CreatedDate datetime,ModifiedBy INT,
		ModifiedDate datetime,CreditCardNumber VARCHAR(4),IsShippingCostEdited bit,IsTaxCostEdited bit,ShippingDifference NUMERIC(28,6),
		EstimateShippingCost NUMERIC(28,6),TransactionId NVARCHAR(800),Custom1 NVARCHAR(MAX),Custom2 NVARCHAR(MAX),Custom3 NVARCHAR(MAX),
		Custom4 NVARCHAR(MAX),Custom5 NVARCHAR(MAX),FirstName NVARCHAR(200),LastName NVARCHAR(200),CardType VARCHAR(50),CreditCardExpMonth INT,
		CreditCardExpYear INT,TotalAdditionalCost NUMERIC(28,6),PaymentDisplayName NVARCHAR(2000),PaymentExternalId NVARCHAR(2000),
		CultureCode VARCHAR(200),DisplayName NVARCHAR(2000),InHandDate datetime,IpAddress VARCHAR(100),JobName NVARCHAR(200),
		ShippingConstraintCode NVARCHAR(100),ShippingDiscount NUMERIC(28,6),ShippingHandlingCharges NUMERIC(28,6),ReturnCharges NUMERIC(28,6),
		IsCalculateTaxAfterDiscount bit,Email VARCHAR(50),PhoneNumber VARCHAR(50),OrderTotalWithoutVoucher NUMERIC(28,6),ImportDuty NUMERIC(28,6),
		TaxCost NUMERIC(28,6),ShippingCost NUMERIC(28,6), SubTotal NUMERIC(28,6),CurrencyCode VARCHAR(100),OverDueAmount NUMERIC(28,6), ShippingTypeId INT,
		AccountNumber NVARCHAR(4000),ShippingMethod NVARCHAR(4000),PaymentCode NVARCHAR(400) ,PaymentStatusId Int, RemainingOrderAmount NUMERIC(28,6),AvataxIsSellerImporterOfRecord bit,
		AccountId INT
	)

	CREATE TABLE #TempOrderBillingAddress
	(
		AddressId INT,BillingFirstName VARCHAR(300),BillingLastName VARCHAR(300),BillingCountry VARCHAR(3000),BillingStateCode VARCHAR(300),
		BillingPostalCode VARCHAR(50),BillingPhoneNumber VARCHAR(50),BillingEmailId VARCHAR(50),BillingStreet1 VARCHAR(300),BillingStreet2 VARCHAR(300),
		BillingCity VARCHAR(3000),BillingCompanyName NVARCHAR(1200)
	)
	
	CREATE TABLE #TempParentLineItemDetails
	(
		RowId INT IDENTITY(1,1),OrderLineItemRelationshipTypeId INT,OmsOrderDetailsId INT,OmsOrderShipmentId INT,RmaReasonForReturnId INT,Sku NVARCHAR(600),ProductName NVARCHAR(1000),
		Description NVARCHAR(max),Quantity NUMERIC(28,6),Price NUMERIC(28,6),Weight NUMERIC(28,6),DownloadLink NVARCHAR(max),DiscountAmount NUMERIC(28,6),
		ShipSeparately bit,ShipDate datetime,ReturnDate datetime,ShippingCost NUMERIC(28,6),PromoDescription NVARCHAR(max),TransactionNumber NVARCHAR(max),
		PaymentStatusId int,TrackingNumber NVARCHAR(max),IsAutoGeneratedTracking bit,OrderLineItemStateId int,IsRecurringBilling bit,RecurringBillingPeriod NVARCHAR(100),
		RecurringBillingCycles int,RecurringBillingFrequency NVARCHAR(100),RecurringBillingAmount NUMERIC(28,6),AppliedPromo NVARCHAR(max),CouponsApplied NVARCHAR(100),
		ExternalId NVARCHAR(1000),IsActive bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,AutoAddonSKU NVARCHAR(max),IsShippingReturn bit,
		PartialRefundAmount NUMERIC(28,6),Custom1 NVARCHAR(max),Custom2 NVARCHAR(max),Custom3 NVARCHAR(max),Custom4 NVARCHAR(max),Custom5 NVARCHAR(max),
		GroupId NVARCHAR(max),BundleQuantity int, TaxRuleId INT,TaxTransactionNumber NVARCHAR(1200),Comments NVARCHAR(MAX),SalesTax NUMERIC(28,6),VAT NUMERIC(28,6),
		GST NUMERIC(28,6),PST NUMERIC(28,6),HST NUMERIC(28,6),ImportDuty NUMERIC(28,6), GroupIdentifier INT
	)

	CREATE TABLE #TempChildLineItemDetails
	(
		RowId INT IDENTITY(1,1),OrderLineItemRelationshipTypeId INT,OmsOrderDetailsId INT,OmsOrderShipmentId INT,RmaReasonForReturnId INT,Sku NVARCHAR(600),ProductName NVARCHAR(1000),
		Description NVARCHAR(max),Quantity NUMERIC(28,6),Price NUMERIC(28,6),Weight NUMERIC(28,6),DownloadLink NVARCHAR(max),DiscountAmount NUMERIC(28,6),
		ShipSeparately bit,ShipDate datetime,ReturnDate datetime,ShippingCost NUMERIC(28,6),PromoDescription NVARCHAR(max),TransactionNumber NVARCHAR(max),
		PaymentStatusId int,TrackingNumber NVARCHAR(max),IsAutoGeneratedTracking bit,OrderLineItemStateId int,IsRecurringBilling bit,RecurringBillingPeriod NVARCHAR(100),
		RecurringBillingCycles int,RecurringBillingFrequency NVARCHAR(100),RecurringBillingAmount NUMERIC(28,6),AppliedPromo NVARCHAR(max),CouponsApplied NVARCHAR(100),
		ExternalId NVARCHAR(1000),IsActive bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,AutoAddonSKU NVARCHAR(max),IsShippingReturn bit,
		PartialRefundAmount NUMERIC(28,6),Custom1 NVARCHAR(max),Custom2 NVARCHAR(max),Custom3 NVARCHAR(max),Custom4 NVARCHAR(max),Custom5 NVARCHAR(max),
		GroupId NVARCHAR(max),BundleQuantity int, TaxRuleId INT,TaxTransactionNumber NVARCHAR(1200),Comments NVARCHAR(MAX),SalesTax NUMERIC(28,6),VAT NUMERIC(28,6),
		GST NUMERIC(28,6),PST NUMERIC(28,6),HST NUMERIC(28,6),ImportDuty NUMERIC(28,6), ParentSku NVARCHAR(600), GroupIdentifier INT
	)

	CREATE TABLE #TempOrderAttribute
	(
		AttributeCode NVARCHAR(1000),AttributeValue NVARCHAR(MAX),CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,
		ModifiedDate DATETIME,AttributeValueCode NVARCHAR(1000), Sku VARCHAR(600), GroupId NVARCHAR(max), GroupIdentifier INT
	)

	CREATE TABLE #OmsPersonalizeItem
	(
		PersonalizeCode NVARCHAR(400),PersonalizeValue NVARCHAR(MAX),CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,
		ModifiedDate DATETIME,DesignId NVARCHAR(4000),ThumbnailURL NVARCHAR(MAX), Sku VARCHAR(600), GroupId NVARCHAR(max),
		GroupIdentifier INT
	)

	CREATE TABLE #OmsOrderDiscount
	(
		OmsDiscountTypeId INT,DiscountCode VARCHAR(MAX),DiscountAmount NUMERIC(28,6),Description NVARCHAR(MAX),CreatedBy INT,CreatedDate DATETIME,
		ModifiedBy INT,ModifiedDate DATETIME,PerQuantityDiscount NUMERIC(28,6),DiscountMultiplier NUMERIC(28,6),ParentOmsOrderLineItemsId INT,
		DiscountLevelTypeId INT,PromotionName NVARCHAR(1200),PromotionTypeId INT,DiscountAppliedSequence INT,PromotionMessage NVARCHAR(MAX),Sku VARCHAR(600),
		GroupId NVARCHAR(max)
	)

	--------Getting Order details
	INSERT INTO #TempOrderData
	(
		OrderNumber, PublishStateId ,OmsOrderId ,OmsOrderStateId ,DiscountAmount ,SalesTax ,TaxRate ,IsOldOrder ,
		VAT ,GST ,PST ,HST ,Total ,BillingAddressId ,ShippingAddressId ,ShippingId ,PortalId,
		ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId
		,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,AddressId,PoDocument,IsActive
		,ExternalId,PaymentTypeId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited
		,ShippingDifference,EstimateShippingCost,TransactionId,Custom1,Custom2,Custom3,Custom4,Custom5,FirstName,LastName
		,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName,PaymentExternalId,CultureCode
		,DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges
		,IsCalculateTaxAfterDiscount,Email,PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,TaxCost,ShippingCost, SubTotal,
		CurrencyCode,OverDueAmount, ShippingTypeId, AccountNumber, ShippingMethod, PaymentCode, PaymentStatusId,RemainingOrderAmount,AvataxIsSellerImporterOfRecord
		,AccountId
	)
	SELECT
		CASE WHEN Tbl.Col.value( 'OrderNumber[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderNumber[1]', 'NVARCHAR(Max)' ) END  AS OrderNumber,
		CASE WHEN Tbl.Col.value( 'PublishStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PublishStateId[1]', 'NVARCHAR(Max)' ) END AS PublishStateId,
		CASE WHEN Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderId,
		CASE WHEN Tbl.Col.value( 'OmsOrderStateId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderStateId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderStateId,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		CASE WHEN Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE  Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) END AS SalesTax,
		CASE WHEN Tbl.Col.value( 'TaxRate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'TaxRate[1]', 'NVARCHAR(Max)' ) END AS TaxRate,
		CASE WHEN Tbl.Col.value('IsOldOrder[1]', 'NVARCHAR(2000)') = '' THEN NULL ELSE Tbl.Col.value('IsOldOrder[1]', 'NVARCHAR(2000)') END AS IsOldOrder,
		CASE WHEN Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE  Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) END AS VAT,
		CASE WHEN Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) END AS GST,
		CASE WHEN Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) END  AS PST,
		CASE WHEN Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) END AS HST,
		CASE WHEN Tbl.Col.value( 'Total[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'Total[1]', 'NVARCHAR(Max)' ) END AS Total,
		CASE WHEN Tbl.Col.value( 'BillingAddressId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'BillingAddressId[1]', 'NVARCHAR(Max)' ) END AS BillingAddressId,
		CASE WHEN Tbl.Col.value( 'ShippingAddressId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ShippingAddressId[1]', 'NVARCHAR(Max)' ) END AS ShippingAddressId,
		CASE WHEN (Tbl.Col.value( 'ShippingId[1]', 'NVARCHAR(Max)' )) = '' THEN NULL ELSE (Tbl.Col.value( 'ShippingId[1]', 'NVARCHAR(Max)' )) END  AS ShippingId,
		CASE WHEN Tbl.Col.value( 'PortalId[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'PortalId[1]', 'NVARCHAR(Max)' ) END AS PortalId,
		Tbl.Col.value( 'ShippingNumber[1]', 'NVARCHAR(Max)' ) AS ShippingNumber,
		Tbl.Col.value( 'TrackingNumber[1]', 'NVARCHAR(Max)' ) AS TrackingNumber,
		Tbl.Col.value( 'CouponCode[1]', 'NVARCHAR(Max)' ) AS CouponCode,
		Tbl.Col.value( 'PromoDescription[1]', 'NVARCHAR(Max)' ) AS PromoDescription,
		CASE WHEN Tbl.Col.value( 'ReferralUserId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ReferralUserId[1]', 'NVARCHAR(Max)' ) END  AS ReferralUserId,
		Tbl.Col.value( 'PurchaseOrderNumber[1]', 'NVARCHAR(Max)' ) AS PurchaseOrderNumber,
		CASE WHEN Tbl.Col.value( 'OmsPaymentStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsPaymentStateId[1]', 'NVARCHAR(Max)' ) END AS OmsPaymentStateId,
		Tbl.Col.value( 'WebServiceDownloadDate[1]', 'NVARCHAR(Max)' ) AS WebServiceDownloadDate,
		CASE WHEN Tbl.Col.value( 'PaymentSettingId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PaymentSettingId[1]', 'NVARCHAR(Max)' ) END AS PaymentSettingId,
		Tbl.Col.value( 'PaymentTransactionToken[1]', 'NVARCHAR(Max)' ) AS PaymentTransactionToken,
		CASE WHEN Tbl.Col.value( 'ShipDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE @GetDate END AS ShipDate,
		CASE WHEN Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) END AS ReturnDate,
		CASE WHEN Tbl.Col.value( 'AddressId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'AddressId[1]', 'NVARCHAR(Max)' ) END AS AddressId,
		Tbl.Col.value( 'PoDocument[1]', 'NVARCHAR(Max)' ) AS PoDocument,
		CASE WHEN Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) END  AS IsActive,
		Tbl.Col.value( 'ExternalId[1]', 'NVARCHAR(Max)' ) AS ExternalId,
		CASE WHEN Tbl.Col.value( 'PaymentTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PaymentTypeId[1]', 'NVARCHAR(Max)' ) END  AS PaymentTypeId,
		@UserId AS CreatedBy,
		@GetDate AS CreatedDate,
		@UserId AS ModifiedBy,
		@GetDate AS ModifiedDate,
		Tbl.Col.value( 'CreditCardNumber[1]', 'NVARCHAR(Max)' ) AS CreditCardNumber,
		CASE WHEN Tbl.Col.value( 'IsShippingCostEdited[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsShippingCostEdited[1]', 'NVARCHAR(Max)' ) END AS IsShippingCostEdited,
		CASE WHEN Tbl.Col.value( 'IsTaxCostEdited[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsTaxCostEdited[1]', 'NVARCHAR(Max)' ) END AS IsTaxCostEdited,
		Tbl.Col.value( 'ShippingDifference[1]', 'NVARCHAR(Max)' ) AS ShippingDifference,
		CASE WHEN Tbl.Col.value( 'EstimateShippingCost[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'EstimateShippingCost[1]', 'NVARCHAR(Max)' ) END AS EstimateShippingCost,
		Tbl.Col.value( 'TransactionId[1]', 'NVARCHAR(Max)' ) AS TransactionId,
		Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
		Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
		Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
		Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
		Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
		Tbl.Col.value( 'FirstName[1]', 'NVARCHAR(Max)' ) AS FirstName,
		Tbl.Col.value( 'LastName[1]', 'NVARCHAR(Max)' ) AS LastName,
		Tbl.Col.value( 'CardType[1]', 'NVARCHAR(Max)' ) AS CardType,
		Tbl.Col.value( 'CreditCardExpMonth[1]', 'NVARCHAR(Max)' ) AS CreditCardExpMonth,
		Tbl.Col.value( 'CreditCardExpYear[1]', 'NVARCHAR(Max)' ) AS CreditCardExpYear,
		CASE WHEN Tbl.Col.value( 'TotalAdditionalCost[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'TotalAdditionalCost[1]', 'NVARCHAR(Max)' ) END AS TotalAdditionalCost,
		Tbl.Col.value( 'PaymentDisplayName[1]', 'NVARCHAR(Max)' ) AS PaymentDisplayName,
		Tbl.Col.value( 'PaymentExternalId[1]', 'NVARCHAR(Max)' ) AS PaymentExternalId,
		Tbl.Col.value( 'CultureCode[1]', 'NVARCHAR(Max)' ) AS CultureCode,
		Tbl.Col.value( 'DisplayName[1]', 'NVARCHAR(Max)' ) AS DisplayName,
		Tbl.Col.value( 'InHandDate[1]', 'NVARCHAR(Max)' ) AS InHandDate,
		Tbl.Col.value( 'IpAddress[1]', 'NVARCHAR(Max)' ) AS IpAddress,
		Tbl.Col.value( 'JobName[1]', 'NVARCHAR(Max)' ) AS JobName,
		Tbl.Col.value( 'ShippingConstraintCode[1]', 'NVARCHAR(Max)' ) AS ShippingConstraintCode,
		Tbl.Col.value( 'ShippingDiscount[1]', 'NVARCHAR(Max)' ) AS ShippingDiscount,
		Tbl.Col.value( 'ShippingHandlingCharges[1]', 'NVARCHAR(Max)' ) AS ShippingHandlingCharges,
		CASE WHEN Tbl.Col.value( 'ReturnCharges[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'ReturnCharges[1]', 'NVARCHAR(Max)' ) END AS ReturnCharges,
		CASE WHEN Tbl.Col.value( 'IsCalculateTaxAfterDiscount[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsCalculateTaxAfterDiscount[1]', 'NVARCHAR(Max)' ) END AS IsCalculateTaxAfterDiscount,
		Tbl.Col.value( 'Email[1]', 'NVARCHAR(Max)' ) AS Email,
		Tbl.Col.value( 'PhoneNumber[1]', 'NVARCHAR(Max)' ) AS PhoneNumber,
		CASE WHEN Tbl.Col.value( 'OrderTotalWithoutVoucher[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'OrderTotalWithoutVoucher[1]', 'NVARCHAR(Max)' )  END AS OrderTotalWithoutVoucher,
		CASE WHEN Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' )='' THEN '' ELSE Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' ) END AS ImportDuty,
		CASE WHEN Tbl.Col.value( 'TaxCost[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'TaxCost[1]', 'NVARCHAR(Max)' ) END  AS TaxCost,
		CASE WHEN Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) END AS ShippingCost,
		CASE WHEN Tbl.Col.value( 'SubTotal[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'SubTotal[1]', 'NVARCHAR(Max)' ) END AS SubTotal,
		Tbl.Col.value( 'CurrencyCode[1]', 'NVARCHAR(Max)' ) AS CurrencyCode,
		CASE WHEN Tbl.Col.value( 'OverDueAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OverDueAmount[1]', 'NVARCHAR(Max)' ) END AS OverDueAmount,
		CASE WHEN Tbl.Col.value( 'ShippingTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ShippingTypeId[1]', 'NVARCHAR(Max)' ) END AS ShippingTypeId,
		Tbl.Col.value( 'AccountNumber[1]', 'NVARCHAR(Max)' ) AS AccountNumber,
		Tbl.Col.value( 'ShippingMethod[1]', 'NVARCHAR(Max)' ) AS ShippingMethod,
		Tbl.Col.value( 'PaymentCode[1]', 'NVARCHAR(Max)' ) AS PaymentCode,
		CASE WHEN Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) END AS PaymentStatusId,
		CASE WHEN Tbl.Col.value( 'RemainingOrderAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'RemainingOrderAmount[1]', 'NVARCHAR(Max)' ) END AS RemainingOrderAmount,
		CASE WHEN Tbl.Col.value( 'AvataxIsSellerImporterOfRecord[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'AvataxIsSellerImporterOfRecord[1]', 'NVARCHAR(Max)' ) END AS AvataxIsSellerImporterOfRecord,
		Tbl.Col.value( 'AccountId[1]', 'NVARCHAR(Max)' ) AS AccountId
	FROM @OrderXML.nodes( '//PlaceOrderModel' ) AS Tbl(Col);


	--Getting billing address info
	INSERT INTO #TempOrderBillingAddress
	(
		AddressId,BillingFirstName,BillingLastName,BillingCompanyName,BillingStreet1,BillingStreet2,
		BillingCity,BillingStateCode,BillingPostalCode,BillingCountry,BillingPhoneNumber,BillingEmailId
	)
	SELECT
		Tbl.Col.value( 'AddressId[1]', 'NVARCHAR(Max)' ) AS AddressId,
		Tbl.Col.value( 'FirstName[1]', 'NVARCHAR(Max)' ) AS FirstName,
		Tbl.Col.value( 'LastName[1]', 'NVARCHAR(Max)' ) AS LastName,
		Tbl.Col.value( 'CompanyName[1]', 'NVARCHAR(Max)' ) AS CompanyName,
		Tbl.Col.value( 'Street1[1]', 'NVARCHAR(Max)' ) AS Street1 ,
		Tbl.Col.value( 'Street2[1]', 'NVARCHAR(Max)' ) AS Street2,
		Tbl.Col.value( 'City[1]', 'NVARCHAR(Max)' ) AS City,
		Tbl.Col.value( 'StateCode[1]', 'NVARCHAR(Max)' ) AS StateCode,
		Tbl.Col.value( 'PostalCode[1]', 'NVARCHAR(Max)' ) AS PostalCode,
		Tbl.Col.value( 'Country[1]', 'NVARCHAR(Max)' ) AS Country,
		Tbl.Col.value( 'PhoneNumber[1]', 'NVARCHAR(Max)' ) AS PhoneNumber,
		Tbl.Col.value( 'EmailId[1]', 'NVARCHAR(Max)' ) AS EmailId
	FROM @OrderXML.nodes( '//PlaceOrderModel/BillingAddressModel' ) AS Tbl(Col);
	----Parent line item details insert
	INSERT INTO #TempParentLineItemDetails
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description,Quantity,
		Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber,
		PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles,
		RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy,
		ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity,
		TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty, GroupIdentifier
	)
	SELECT
		CASE WHEN Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemRelationshipTypeId,
		CASE WHEN Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) END  AS OmsOrderDetailsId,
		CASE WHEN Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderShipmentId,
		CASE WHEN Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) END AS RmaReasonForReturnId,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(2000)' ) AS ProductName,
		Tbl.Col.value( 'Description[1]', 'NVARCHAR(2000)' ) AS Description,
		Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(Max)' ) AS Quantity,
		CASE WHEN Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) END AS Price,
		Tbl.Col.value( 'Weight[1]', 'NVARCHAR(Max)' ) AS Weight,
		Tbl.Col.value( 'DownloadLink[1]', 'NVARCHAR(Max)' ) AS DownloadLink,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		Tbl.Col.value( 'ShipSeparately[1]', 'NVARCHAR(Max)' ) AS ShipSeparately,
		CASE WHEN Tbl.Col.value( 'ShipDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE @GetDate END AS ShipDate,
		CASE WHEN Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) END AS ReturnDate,
		CASE WHEN Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) END AS ShippingCost,
		Tbl.Col.value( 'PromoDescription[1]', 'NVARCHAR(Max)' ) AS PromoDescription,
		Tbl.Col.value( 'TransactionNumber[1]', 'NVARCHAR(Max)' ) AS TransactionNumber,
		CASE WHEN Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) END AS PaymentStatusId,
		Tbl.Col.value( 'TrackingNumber[1]', 'NVARCHAR(Max)' ) AS TrackingNumber,
		CASE WHEN Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' ) END AS IsAutoGeneratedTracking,
		CASE WHEN Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemStateId,
		CASE WHEN Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) END AS IsRecurringBilling,
		Tbl.Col.value( 'RecurringBillingPeriod[1]', 'NVARCHAR(Max)' ) AS RecurringBillingPeriod,
		Tbl.Col.value( 'RecurringBillingCycles[1]', 'NVARCHAR(Max)' ) AS RecurringBillingCycles,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingFrequency,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingAmount,
		Tbl.Col.value( 'AppliedPromo[1]', 'NVARCHAR(Max)' ) AS AppliedPromo,
		Tbl.Col.value( 'CouponsApplied[1]', 'NVARCHAR(Max)' ) AS CouponsApplied,
		Tbl.Col.value( 'ExternalId[1]', 'NVARCHAR(Max)' ) AS ExternalId,
		CASE WHEN Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) END AS IsActive,
		@UserId AS CreatedBy,
		@GetDate AS CreatedDate,
		@UserId AS ModifiedBy,
		@GetDate AS ModifiedDate,
		Tbl.Col.value( 'AutoAddonSKU[1]', 'NVARCHAR(Max)' ) AutoAddonSKU,
		CASE WHEN Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' ) END IsShippingReturn,
		CASE WHEN Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' ) END PartialRefundAmount,
		Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
		Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
		Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
		Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
		Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
		CASE WHEN Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' ) = ''  THEN NULL ELSE Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' ) END AS BundleQuantity,
		CASE WHEN Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' ) END AS TaxRuleId,
		Tbl.Col.value( 'TaxTransactionNumber[1]', 'NVARCHAR(Max)' ) AS TaxTransactionNumber,
		Tbl.Col.value( 'Comments[1]', 'NVARCHAR(Max)' ) AS Comments,
		CASE WHEN Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) END AS SalesTax,
		CASE WHEN Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) END AS VAT,
		CASE WHEN Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) END AS GST,
		CASE WHEN Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) END AS PST,
		CASE WHEN Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) END  AS HST,
		CASE WHEN Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' ) END AS ImportDuty,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(Max)' ) AS GroupIdentifier
	FROM @OrderXML.nodes( '//PlaceOrderModel/LineItems/PlaceOrderLineItemModel' ) AS Tbl(Col);

	----Child line item details insert
	INSERT INTO #TempChildLineItemDetails
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description,Quantity,
		Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber,
		PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles,
		RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy,
		ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity,
		TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty, ParentSku, GroupIdentifier
	)
	SELECT
		CASE WHEN Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemRelationshipTypeId,
		CASE WHEN Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) ='' THEN NULL ELSE Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderDetailsId,
		CASE WHEN Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderShipmentId,
		CASE WHEN Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) END AS RmaReasonForReturnId,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(2000)' ) AS ProductName,
		Tbl.Col.value( 'Description[1]', 'NVARCHAR(2000)' ) AS Description,
		Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(Max)' ) AS Quantity,
		CASE WHEN Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) END AS Price,
		Tbl.Col.value( 'Weight[1]', 'NVARCHAR(Max)' ) AS Weight,
		Tbl.Col.value( 'DownloadLink[1]', 'NVARCHAR(Max)' ) AS DownloadLink,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		Tbl.Col.value( 'ShipSeparately[1]', 'NVARCHAR(Max)' ) AS ShipSeparately,
		CASE WHEN Tbl.Col.value( 'ShipDate[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE @GetDate END AS ShipDate,
		CASE WHEN Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) END AS ReturnDate,
		CASE WHEN Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) END AS ShippingCost,
		Tbl.Col.value( 'PromoDescription[1]', 'NVARCHAR(Max)' ) AS PromoDescription,
		Tbl.Col.value( 'TransactionNumber[1]', 'NVARCHAR(Max)' ) AS TransactionNumber,
		CASE WHEN Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) END AS PaymentStatusId,
		Tbl.Col.value( 'TrackingNumber[1]', 'NVARCHAR(Max)' ) AS TrackingNumber,
		CASE WHEN Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' ) END AS IsAutoGeneratedTracking,
		CASE WHEN Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemStateId,
		CASE WHEN Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) END AS IsRecurringBilling,
		Tbl.Col.value( 'RecurringBillingPeriod[1]', 'NVARCHAR(Max)' ) AS RecurringBillingPeriod,
		Tbl.Col.value( 'RecurringBillingCycles[1]', 'NVARCHAR(Max)' ) AS RecurringBillingCycles,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingFrequency,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingAmount,
		Tbl.Col.value( 'AppliedPromo[1]', 'NVARCHAR(Max)' ) AS AppliedPromo,
		Tbl.Col.value( 'CouponsApplied[1]', 'NVARCHAR(Max)' ) AS CouponsApplied,
		Tbl.Col.value( 'ExternalId[1]', 'NVARCHAR(Max)' ) AS ExternalId,
		Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) AS IsActive,
		@UserId AS CreatedBy,
		@GetDate AS CreatedDate,
		@UserId AS ModifiedBy,
		@GetDate AS ModifiedDate,
		Tbl.Col.value( 'AutoAddonSKU[1]', 'NVARCHAR(Max)' ) AutoAddonSKU,
		CASE WHEN Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' ) END AS IsShippingReturn,
		CASE WHEN Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' ) END AS  PartialRefundAmount,
		Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
		Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
		Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
		Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
		Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
		CASE WHEN Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' ) END AS BundleQuantity,
		CASE WHEN Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' ) END AS TaxRuleId,
		Tbl.Col.value( 'TaxTransactionNumber[1]', 'NVARCHAR(Max)' ) AS TaxTransactionNumber,
		Tbl.Col.value( 'Comments[1]', 'NVARCHAR(Max)' ) AS Comments,
		CASE WHEN Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) END AS SalesTax,
		CASE WHEN Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) END AS VAT,
		CASE WHEN Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) END AS GST,
		CASE WHEN Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) END AS PST,
		CASE WHEN Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) END AS HST,
		CASE WHEN Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE  Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' ) END AS ImportDuty,
		Tbl.Col.value( 'ParentProductSKU[1]', 'NVARCHAR(Max)' ) AS ParentSku,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(Max)' ) AS GroupIdentifier
	FROM @OrderXML.nodes('//PlaceOrderModel/LineItems/PlaceOrderLineItemModel/OrderLineItem/PlaceOrderlineItemCollection') AS Tbl(Col);

	--Updating parent for simple products
	UPDATE #TempChildLineItemDetails SET ParentSku = Sku WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdSimple
	AND OrderLineItemRelationshipTypeId IS NOT NULL

BEGIN TRAN OrderInsert

	--Inserting order number which are unique and getting in xml from code side
	INSERT INTO ZnodeOmsOrder(IsQuoteOrder,OrderNumber,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishStateId,IsOldOrder)
	OUTPUT INSERTED.OmsOrderId, INSERTED.OrderNumber INTO @OMSOrder
	SELECT 0 AS IsQuoteOrder, OrderNumber,OrderNumber AS ExternalId,@UserId,@GetDate,@UserId,@GetDate,PublishStateId, CAST(0 AS BIT)
	FROM #TempOrderData
	WHERE ISNULL(OmsOrderId,0) = 0

	--If order is new then creating new order details
	IF EXISTS(SELECT * FROM @OMSOrder)
	BEGIN
		INSERT INTO ZnodeOmsOrderDetails
		(
			OmsOrderId,PortalId,UserId,OrderDate,OmsOrderStateId,ShippingId,PaymentTypeId,BillingFirstName,BillingLastName
			,BillingCompanyName,BillingStreet1,BillingStreet2,BillingCity,BillingStateCode,BillingPostalCode,BillingCountry
			,BillingPhoneNumber,BillingEmailId,TaxCost,ShippingCost,SubTotal,DiscountAmount,CurrencyCode,OverDueAmount,Total
			,ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId
			,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,AddressId,PoDocument,IsActive
			,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited
			,ShippingDifference,EstimateShippingCost,TransactionId,Custom1,Custom2,Custom3,Custom4,Custom5,FirstName,LastName
			,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName,PaymentExternalId,CultureCode
			,DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges
			,IsCalculateTaxAfterDiscount,Email,PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,RemainingOrderAmount,AccountId
		)
		OUTPUT INSERTED.OmsOrderId, INSERTED.OmsOrderDetailsId INTO @OMSOrderDetail
		SELECT OO.OmsOrderId, OD.PortalId,@UserId,@GetDate,OD.OmsOrderStateId,OD.ShippingId,OD.PaymentTypeId,OBA.BillingFirstName,OBA.BillingLastName,OBA.BillingCompanyName,
			OBA.BillingStreet1,OBA.BillingStreet2,OBA.BillingCity,OBA.BillingStateCode,OBA.BillingPostalCode,OBA.BillingCountry,OBA.BillingPhoneNumber,OBA.BillingEmailId,OD.TaxCost,
			OD.ShippingCost,OD.SubTotal, OD.DiscountAmount,OD.CurrencyCode,OD.OverDueAmount,OD.Total
			,OD.ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId
			,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,OD.BillingAddressId,PoDocument,CAST(1 AS BIT) AS IsActive
			,OD.ExternalId,OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited
			,ShippingDifference,EstimateShippingCost,TransactionId,OD.Custom1,OD.Custom2,OD.Custom3,OD.Custom4,OD.Custom5,OD.FirstName,OD.LastName
			,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName,PaymentExternalId,CultureCode
			,OD.DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges
			,IsCalculateTaxAfterDiscount,Email,OD.PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,OD.RemainingOrderAmount,OD.AccountId
		FROM #TempOrderData OD
		INNER JOIN @OMSOrder OO ON OD.OrderNumber = OO.OrderNumber
		LEFT JOIN #TempOrderBillingAddress OBA ON OD.BillingAddressId = OBA.AddressId

	END
	--If order managed then creating new order details and disable old order details
	ELSE
	BEGIN
		Declare @OldOmsOrderDetailsId INT
		SET @OldOmsOrderDetailsId = (SELECT TOP 1 OOD.OmsOrderDetailsId FROM ZnodeOmsOrderDetails OOD  WITH (NOLOCK) 
									 WHERE EXISTS(SELECT * FROM  #TempOrderData OD WHERE OOD.OmsOrderId = OD.OmsOrderId) AND OOD.IsActive = 1)

		INSERT INTO ZnodeOmsOrderDetails
		(
			OmsOrderId,PortalId,UserId,OrderDate,OmsOrderStateId,ShippingId,PaymentTypeId,BillingFirstName,BillingLastName --1
			,BillingCompanyName,BillingStreet1,BillingStreet2,BillingCity,BillingStateCode,BillingPostalCode,BillingCountry --2
			,BillingPhoneNumber,BillingEmailId,TaxCost,ShippingCost,SubTotal,DiscountAmount,CurrencyCode,OverDueAmount,Total --3
			,ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId --4
			,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,AddressId,PoDocument,IsActive --5
			,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited --6
			,ShippingDifference,EstimateShippingCost,TransactionId,Custom1,Custom2,Custom3,Custom4,Custom5,FirstName,LastName --7
			,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName, --8
			PaymentExternalId,CultureCode, --9
			DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges --10
			,IsCalculateTaxAfterDiscount,Email,PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,RemainingOrderAmount --11 
		)
		OUTPUT INSERTED.OmsOrderId, INSERTED.OmsOrderDetailsId INTO @OMSOrderDetail
		SELECT OO.OmsOrderId, OD.PortalId,@UserId,@GetDate,OD.OmsOrderStateId,OD.ShippingId,OD.PaymentTypeId,OBA.BillingFirstName,OBA.BillingLastName,--1
			OBA.BillingCompanyName,OBA.BillingStreet1,OBA.BillingStreet2,OBA.BillingCity,OBA.BillingStateCode,OBA.BillingPostalCode,OBA.BillingCountry, --2
			OBA.BillingPhoneNumber,OBA.BillingEmailId,OD.TaxCost,OD.ShippingCost,OD.SubTotal, OD.DiscountAmount,OD.CurrencyCode,OD.OverDueAmount,OD.Total, --3
			OD.ShippingNumber,OD.TrackingNumber,OD.CouponCode,OD.PromoDescription,OD.ReferralUserId,OD.PurchaseOrderNumber,OD.OmsPaymentStateId, --4
			OD.WebServiceDownloadDate,OD.PaymentSettingId,OD.PaymentTransactionToken,OD.ShipDate,OD.ReturnDate,OD.BillingAddressId,OD.PoDocument,CAST(1 AS BIT) AS IsActive --5
			,OD.ExternalId,OD.CreatedBy,OOD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.CreditCardNumber,OD.IsShippingCostEdited,OD.IsTaxCostEdited, --6
			OD.ShippingDifference,OD.EstimateShippingCost,OD.TransactionId,OD.Custom1,OD.Custom2,OD.Custom3,OD.Custom4,OD.Custom5,OD.FirstName,OD.LastName, --7
			OD.CardType,OD.CreditCardExpMonth,OD.CreditCardExpYear,OD.TotalAdditionalCost,CASE WHEN OD.PaymentSettingId = OOD.PaymentSettingId THEN OOD.PaymentDisplayName ELSE OD.PaymentDisplayName END AS PaymentDisplayName, --8
			CASE WHEN OD.PaymentSettingId = OOD.PaymentSettingId THEN OOD.PaymentExternalId ELSE OD.PaymentExternalId END AS PaymentExternalId,OD.CultureCode, --9 
			OD.DisplayName,OD.InHandDate,OD.IpAddress,OD.JobName,OD.ShippingConstraintCode,OD.ShippingDiscount,OD.ShippingHandlingCharges,OD.ReturnCharges, --10
			OD.IsCalculateTaxAfterDiscount,OD.Email,OD.PhoneNumber,OD.OrderTotalWithoutVoucher,OD.ImportDuty,OD.RemainingOrderAmount --11
		FROM #TempOrderData OD
		INNER JOIN ZnodeOmsOrder OO WITH (NOLOCK) ON OD.OrderNumber = OO.OrderNumber
		INNER JOIN ZnodeOmsOrderDetails OOD  WITH (NOLOCK) ON OO.OmsOrderId = OOD.OmsOrderId AND OOD.IsActive = 1
		LEFT JOIN #TempOrderBillingAddress OBA ON OD.BillingAddressId = OBA.AddressId
	
		DECLARE @OmsOrderStateIdCancelled int =  (select top 1 OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName = 'CANCELED')

		UPDATE ZnodeOmsOrderDetails SET IsActive = 0 , OmsOrderStateId = @OmsOrderStateIdCancelled
		WHERE OmsOrderDetailsId = @OldOmsOrderDetailsId

		UPDATE ZnodeOmsOrderLineItems SET IsActive = 0
		WHERE OmsOrderDetailsId = @OldOmsOrderDetailsId
	END

	----Geting new OmsOrderDetailsId always
	Declare @OmsOrderDetailsId INT
	SET @OmsOrderDetailsId = ( SELECT TOP 1 OmsOrderDetailsId FROM @OMSOrderDetail )

	--Insert Order notes only for new order details
	IF EXISTS(SELECT * FROM @OMSOrder)
	BEGIN
		INSERT INTO ZnodeOmsNotes(OmsOrderDetailsId,Notes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
		SELECT @OmsOrderDetailsId,Tbl.Col.value( 'AdditionalInstructions[1]', 'NVARCHAR(Max)' ) AS Notes,
			@UserId,@GetDate,@UserId,@GetDate
		FROM @OrderXML.nodes( '//PlaceOrderModel' ) AS Tbl(Col)
		WHERE Tbl.Col.value( 'AdditionalInstructions[1]', 'NVARCHAR(Max)' ) <> '';
	END

	----Inserting parent line item data
	INSERT INTO ZnodeOmsOrderLineItems
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description --1
		,Quantity,Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber --2
		,PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles --3
		,RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy --4
		,ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity, GroupIdentifier --5
	)
	OUTPUT INSERTED.OmsOrderDetailsId, INSERTED.OmsOrderLineItemsId, INSERTED.Sku,INSERTED.ParentOmsOrderLineItemsId, INSERTED.GroupId, INSERTED.OrderLineItemRelationshipTypeId,INSERTED.GroupIdentifier INTO @OmsParentOrderLineItems
	SELECT OrderLineItemRelationshipTypeId,@OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description--1
		,Quantity,Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber --2
		,PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles --3
		,RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,ISNULL(IsActive,1) AS IsActive,CreatedBy,CreatedDate,ModifiedBy --4
		,ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity, GroupIdentifier --5
	FROM #TempParentLineItemDetails PLID

	----Inserting child line item data
	INSERT INTO ZnodeOmsOrderLineItems
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description --1
		,Quantity,Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber --2
		,PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles --3
		,RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy --4
		,ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity, --5
		ParentSku, GroupIdentifier --6
	)
	OUTPUT INSERTED.OmsOrderDetailsId, INSERTED.OmsOrderLineItemsId, INSERTED.Sku,INSERTED.ParentOmsOrderLineItemsId, INSERTED.GroupId, INSERTED.OrderLineItemRelationshipTypeId, INSERTED.ParentSku, INSERTED.GroupIdentifier INTO @OmsOrderLineItems
	SELECT PLID.OrderLineItemRelationshipTypeId,@OmsOrderDetailsId,PLID.OmsOrderShipmentId,PLID.RmaReasonForReturnId,PLID.Sku,PLID.ProductName,PLID.Description, --1
		PLID.Quantity,PLID.Price,PLID.Weight,PLID.DownloadLink,PLID.DiscountAmount,PLID.ShipSeparately,PLID.ShipDate,PLID.ReturnDate,PLID.ShippingCost,PLID.PromoDescription,PLID.TransactionNumber, --2
		PLID.PaymentStatusId,PLID.TrackingNumber,PLID.IsAutoGeneratedTracking,PLID.OrderLineItemStateId,PLID.IsRecurringBilling,PLID.RecurringBillingPeriod,PLID.RecurringBillingCycles,--3
		PLID.RecurringBillingFrequency,PLID.RecurringBillingAmount,PLID.AppliedPromo,PLID.CouponsApplied,PLID.ExternalId,isnull(PLID.IsActive,1) AS IsActive,PLID.CreatedBy,PLID.CreatedDate,PLID.ModifiedBy, --4
		PLID.ModifiedDate,PLID.AutoAddonSKU,PLID.IsShippingReturn,PLID.PartialRefundAmount,PLID.Custom1,PLID.Custom2,PLID.Custom3,PLID.Custom4,PLID.Custom5,PLID.GroupId,PLID.BundleQuantity, --5
		case when PLID.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdSimple then PLID.Sku else PLID.ParentSku end AS ParentSku, GroupIdentifier --6
	FROM #TempChildLineItemDetails PLID

	--Updating ParentOmsOrderLineItemsId for child line items for simple, group and configurable products
	UPDATE A SET A.ParentOmsOrderLineItemsId = (SELECT TOP 1 OmsOrderLineItemsId FROM @OmsParentOrderLineItems d WHERE d.GroupIdentifier = a.GroupIdentifier AND A.ParentSku = D.Sku  and ISNULL(a.GroupId,'-') = ISNULL(d.GroupId,'-'))
	FROM @OmsOrderLineItems a
	WHERE a.OrderLineItemRelationshipTypeId NOT IN ( @OrderLineItemRelationshipTypeIdAddon, @OrderLineItemRelationshipTypeIdGroup)  
	AND a.ParentOmsOrderLineItemsId IS NULL 
	
	--Updating ParentOmsOrderLineItemsId for child line items for group products
	IF EXISTS(SELECT * FROM @OmsOrderLineItems WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdGroup)
	BEGIN
		---Getting child lineitems for group product
		;WITH Cte_GroupProductChild AS
		(
			SELECT GroupIdentifier,Sku, ParentSku, OmsOrderLineItemsId, ParentOmsOrderLineItemsId,Dense_Rank()Over(Partition By GroupIdentifier ORDER BY OmsOrderLineItemsId) AS RowId1 
			FROM @OmsOrderLineItems
			WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdGroup
		)
		---Getting parent lineitems for group product
		,Cte_GroupProductParent AS 
		(
			SELECT GroupIdentifier,Sku, OmsOrderLineItemsId, Dense_Rank()Over(Partition By GroupIdentifier ORDER BY OmsOrderLineItemsId) AS RowId1 
			FROM @OmsParentOrderLineItems a
			WHERE OrderLineItemRelationshipTypeId IS NULL
			AND EXISTS(SELECT * FROM @OmsOrderLineItems b WHERE a.GroupIdentifier = b.GroupIdentifier AND a.Sku = b.ParentSku)
		)
		--Updating ParentOmsOrderLineItemsId on child for group products
		UPDATE a SET a.ParentOmsOrderLineItemsId = b.OmsOrderLineItemsId
		FROM Cte_GroupProductChild a
		INNER JOIN Cte_GroupProductParent B ON A.GroupIdentifier = B.GroupIdentifier AND a.RowId1 = b.RowId1 AND b.Sku = a.ParentSku 
	END

	---Updating ParentOmsOrderLineItemsId for addons if present
	IF EXISTS(SELECT * FROM @OmsOrderLineItems WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
	BEGIN
		--Updating ParentOmsOrderLineItemsId for addon with Simple products , group products and configurable products
		UPDATE b SET b.ParentOmsOrderLineItemsId = c.OmsOrderLineItemsId
		FROM @OmsOrderLineItems c
		INNER JOIN @OmsOrderLineItems b on b.ParentSku = c.Sku AND c.GroupIdentifier = b.GroupIdentifier
		WHERE c.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeIdAddon and c.OrderLineItemRelationshipTypeId is not null
		and b.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
		AND b.ParentOmsOrderLineItemsId IS NULL
		
		--Updating ParentOmsOrderLineItemsId for addon with bundle products
		UPDATE c SET c.ParentOmsOrderLineItemsId = b.OmsOrderLineItemsId
		FROM @OmsOrderLineItems c
		INNER JOIN @OmsParentOrderLineItems b on B.sku = C.parentsku AND c.GroupIdentifier= b.GroupIdentifier
		WHERE B.OrderLineItemRelationshipTypeId is null 
		AND c.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
		AND C.ParentOmsOrderLineItemsId IS NULL
	 END
	 ---Updating ParentOmsOrderLineItemsId in main table
	 UPDATE a SET a.ParentOmsOrderLineItemsId = b.ParentOmsOrderLineItemsId
	 FROM  ZnodeOmsOrderLineItems a
	 INNER JOIN @OmsOrderLineItems b on a.OmsOrderLineItemsId = b.OmsOrderLineItemsId

	----Shipping details Start
	DECLARE @ShippingTypeId INT
	IF EXISTS(SELECT * FROM #TempOrderData WHERE ShippingTypeId IS NULL)
	BEGIN
		SET @ShippingTypeId = (SELECT TOP 1 ShippingTypeId FROM ZnodeShipping WHERE EXISTS(SELECT * FROM #TempOrderData WHERE ZnodeShipping.ShippingId = #TempOrderData.ShippingId))
	END
	ELSE
	BEGIN
		SET @ShippingTypeId = (SELECT TOP 1 ShippingTypeId FROM #TempOrderData)
	END
	IF EXISTS(SELECT * FROM ZnodeShippingTypes WITH (NOLOCK)  WHERE ShippingTypeId = @ShippingTypeId AND ClassName = 'ZnodeCustomerShipping')
	BEGIN
		INSERT INTO ZnodeOmsCustomerShipping(OmsOrderDetailsId,UserId,ShippingTypeId,AccountNumber,ShippingMethod,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT TOP 1 @OmsOrderDetailsId,@UserId,@ShippingTypeId,AccountNumber,ShippingMethod,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		FROM #TempOrderData
	END
	----Shipping details end

	----Order tax details start
	----Inserting order tax data
	IF (SELECT TOP 1 TaxCost FROM #TempOrderData) > 0
	BEGIN
		INSERT INTO ZnodeOmsTaxOrderDetails(OmsOrderDetailsId,SalesTax,VAT,GST,PST,HST,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportDuty)
		SELECT @OmsOrderDetailsId,OD.SalesTax,OD.VAT,OD.GST,OD.PST,OD.HST,OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.ImportDuty
		FROM #TempOrderData OD
	END

	----Inserting order tax data for parent line item
	INSERT INTO ZnodeOmsTaxOrderLineDetails
	(
		OmsOrderLineItemsId,TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty,
		CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
	)
	SELECT POLI.OmsOrderLineItemsId,CLID.TaxRuleId,CLID.TaxTransactionNumber,CLID.Comments,CLID.SalesTax,CLID.VAT,CLID.GST,CLID.PST,CLID.HST,CLID.ImportDuty,
	CLID.CreatedBy,CLID.CreatedDate,CLID.ModifiedBy,CLID.ModifiedDate
	FROM #TempParentLineItemDetails CLID
	INNER JOIN @OmsParentOrderLineItems POLI ON CLID.Sku = POLI.Sku AND ISNULL(CLID.GroupId,'') = ISNULL(POLI.GroupId,'') AND CLID.GroupIdentifier = POLI.GroupIdentifier
	WHERE POLI.ParentOmsOrderLineItemsId IS NULL
	AND (ISNULL(CLID.SalesTax,0)+ISNULL(CLID.VAT,0)+ISNULL(CLID.GST,0)+ISNULL(CLID.PST,0)+ISNULL(CLID.HST,0)) > 0

	----Inserting order tax data for child line item
	INSERT INTO ZnodeOmsTaxOrderLineDetails
	(
		OmsOrderLineItemsId,TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty,
		CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
	)
	SELECT POLI.OmsOrderLineItemsId,CLID.TaxRuleId,CLID.TaxTransactionNumber,CLID.Comments,CLID.SalesTax,CLID.VAT,CLID.GST,CLID.PST,CLID.HST,CLID.ImportDuty,
		CLID.CreatedBy,CLID.CreatedDate,CLID.ModifiedBy,CLID.ModifiedDate
	FROM #TempChildLineItemDetails CLID
	INNER JOIN @OmsOrderLineItems POLI ON CLID.Sku = POLI.Sku AND ISNULL(CLID.GroupId,'') = ISNULL(POLI.GroupId,'') AND CLID.GroupIdentifier = POLI.GroupIdentifier
	WHERE POLI.ParentOmsOrderLineItemsId IS NOT NULL
	AND (ISNULL(CLID.SalesTax,0)+ISNULL(CLID.VAT,0)+ISNULL(CLID.GST,0)+ISNULL(CLID.PST,0)+ISNULL(CLID.HST,0)) > 0
	----Order tax details end

	----Order attribte details start
	----Fetching order attributes FROM xml
	INSERT INTO #TempOrderAttribute(AttributeCode ,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeValueCode,Sku,GroupId, GroupIdentifier )
	SELECT
		Tbl.Col.value( 'AttributeCode[1]', 'NVARCHAR(Max)' ) AS AttributeCode,
		Tbl.Col.value( 'AttributeValue[1]', 'NVARCHAR(Max)' ) AS AttributeValue,
		@UserId,@GetDate,@UserId,@GetDate,
		Tbl.Col.value( 'AttributeValueCode[1]', 'NVARCHAR(2000)' ) AS AttributeValueCode,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(2000)' ) AS GroupIdentifier
	FROM @OrderXML.nodes( '//PlaceOrderModel/LineItems/PlaceOrderLineItemModel/OrderLineItem/PlaceOrderlineItemCollection/OrderAttribute/PlaceOrderAttributeModel' ) AS Tbl(Col);

	----Inserting order attributes data
	INSERT INTO ZnodeOmsOrderAttribute(OmsOrderLineItemsId,AttributeCode,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeValueCode)
	SELECT POLI.OmsOrderLineItemsId, OA.AttributeCode,OA.AttributeValue,OA.CreatedBy,OA.CreatedDate,OA.ModifiedBy,OA.CreatedDate,OA.AttributeValueCode
	FROM #TempOrderAttribute OA
	INNER JOIN @OmsOrderLineItems POLI ON OA.Sku = POLI.Sku AND ISNULL(OA.GroupId,'') = ISNULL(POLI.GroupId,'') AND OA.GroupIdentifier = POLI.GroupIdentifier
	----Order attribte details end

	----Personalise details start
	----Fetching personalize order data
	INSERT INTO #OmsPersonalizeItem(PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL,Sku,GroupId, GroupIdentifier)
	SELECT
		Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode,
		Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue,
		@UserId,@GetDate,@UserId,@GetDate,
		Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(2000)' ) AS DesignId,
		Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(2000)' ) AS ThumbnailURL,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(2000)' ) AS GroupIdentifier
	FROM @OrderXML.nodes( '//PlaceOrderModel/LineItems/PlaceOrderLineItemModel/PersonaliseDetails/PlaceOrderPersonaliseModel' ) AS Tbl(Col);

	--Inserting personalize order data
	INSERT INTO ZnodeOmsPersonalizeItem(OmsOrderLineItemsId,PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL)
	SELECT OmsOrderLineItemsId,PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL
	FROM #OmsPersonalizeItem OPI
	INNER JOIN @OmsParentOrderLineItems POLI ON OPI.Sku = POLI.Sku AND ISNULL(OPI.GroupId,'') = ISNULL(POLI.GroupId,'') AND OPI.GroupIdentifier = POLI.GroupIdentifier
	WHERE POLI.ParentOmsOrderLineItemsId IS NULL
	----Personalise details end

	----discount details start
	----Fetching order discount data
	INSERT INTO #OmsOrderDiscount
	(
		OmsDiscountTypeId ,DiscountCode,DiscountAmount ,Description ,CreatedBy ,CreatedDate ,
		ModifiedBy ,ModifiedDate ,PerQuantityDiscount,DiscountMultiplier ,DiscountLevelTypeId ,
		PromotionName ,PromotionTypeId ,DiscountAppliedSequence,PromotionMessage ,Sku,GroupId 
	)
	SELECT
	CASE WHEN Tbl.Col.value( 'OmsDiscountTypeId[1]', 'NVARCHAR(2000)' ) ='' THEN NULL ELSE Tbl.Col.value( 'OmsDiscountTypeId[1]', 'NVARCHAR(2000)' ) END AS OmsDiscountTypeId,
		Tbl.Col.value( 'DiscountCode[1]', 'NVARCHAR(Max)' ) AS DiscountCode,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		Tbl.Col.value( 'Description[1]', 'NVARCHAR(2000)' ) AS Description,
		@UserId,@GetDate,@UserId,@GetDate,
		CASE WHEN Tbl.Col.value( 'PerQuantityDiscount[1]', 'NVARCHAR(2000)' )='' THEN NULL ELSE Tbl.Col.value( 'PerQuantityDiscount[1]', 'NVARCHAR(2000)' ) END AS PerQuantityDiscount,
		CASE WHEN Tbl.Col.value( 'DiscountMultiplier[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'DiscountMultiplier[1]', 'NVARCHAR(2000)' ) END AS DiscountMultiplier,
		CASE WHEN Tbl.Col.value( 'DiscountLevelTypeId[1]', 'NVARCHAR(2000)' )= '' THEN NULL ELSE Tbl.Col.value( 'DiscountLevelTypeId[1]', 'NVARCHAR(2000)' ) END AS DiscountLevelTypeId,
		Tbl.Col.value( 'PromotionName[1]', 'NVARCHAR(2000)' ) AS PromotionName,
		CASE WHEN Tbl.Col.value( 'PromotionTypeId[1]', 'NVARCHAR(2000)' )= '' THEN NULL ELSE Tbl.Col.value( 'PromotionTypeId[1]', 'NVARCHAR(2000)' ) END AS PromotionTypeId,
		Tbl.Col.value( 'DiscountAppliedSequence[1]', 'NVARCHAR(2000)' ) AS DiscountAppliedSequence,
		Tbl.Col.value( 'PromotionMessage[1]', 'NVARCHAR(2000)' ) AS PromotionMessage,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId
	FROM @OrderXML.nodes('//PlaceOrderModel/OrderDiscounts/PlaceOrderDiscountModel') AS Tbl(Col)

	----Inserting order discount data
	--Inserting product level discount for simple and group products
	INSERT INTO ZnodeOmsOrderDiscount
	(
		OmsOrderDetailsId,OmsOrderLineItemId,OmsDiscountTypeId,DiscountCode,DiscountAmount ,Description,
		CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PerQuantityDiscount,DiscountMultiplier,ParentOmsOrderLineItemsId,
		DiscountLevelTypeId,PromotionName,PromotionTypeId,DiscountAppliedSequence,PromotionMessage
	)
	SELECT DISTINCT @OmsOrderDetailsId,POLI.OmsOrderLineItemsId,OD.OmsDiscountTypeId,OD.DiscountCode,OD.DiscountAmount,OD.Description,
		OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.PerQuantityDiscount,OD.DiscountMultiplier,POLI.ParentOmsOrderLineItemsId,
		OD.DiscountLevelTypeId,OD.PromotionName,OD.PromotionTypeId,OD.DiscountAppliedSequence,OD.PromotionMessage
	FROM #OmsOrderDiscount OD
	INNER JOIN @OmsOrderLineItems POLI ON OD.Sku = POLI.Sku AND ISNULL(OD.GroupId,'') = ISNULL(POLI.GroupId,'') 
	WHERE isnull(OD.Sku,'') <> '' AND POLI.OrderLineItemRelationshipTypeId IN (@OrderLineItemRelationshipTypeIdSimple , @OrderLineItemRelationshipTypeIdGroup)
	
	--Inserting product level discount for config and bundle products
	INSERT INTO ZnodeOmsOrderDiscount
	(
		OmsOrderDetailsId,OmsOrderLineItemId,OmsDiscountTypeId,DiscountCode,DiscountAmount ,Description,
		CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PerQuantityDiscount,DiscountMultiplier,ParentOmsOrderLineItemsId,
		DiscountLevelTypeId,PromotionName,PromotionTypeId,DiscountAppliedSequence,PromotionMessage
	)
	SELECT DISTINCT @OmsOrderDetailsId,POLI.ParentOmsOrderLineItemsId,OD.OmsDiscountTypeId,OD.DiscountCode,OD.DiscountAmount,OD.Description,
	OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.PerQuantityDiscount,OD.DiscountMultiplier,NULL,
	OD.DiscountLevelTypeId,OD.PromotionName,OD.PromotionTypeId,OD.DiscountAppliedSequence,OD.PromotionMessage
	FROM #OmsOrderDiscount OD
	INNER JOIN @OmsOrderLineItems POLI ON OD.Sku = POLI.ParentSku AND ISNULL(OD.GroupId,'') = ISNULL(POLI.GroupId,'')
	WHERE isnull(OD.Sku,'') <> '' AND POLI.OrderLineItemRelationshipTypeId IN (@OrderLineItemRelationshipTypeIdBundles , @OrderLineItemRelationshipTypeIdConfig)
	
	--Inserting order level discount 
	INSERT INTO ZnodeOmsOrderDiscount
	(
		OmsOrderDetailsId,OmsOrderLineItemId,OmsDiscountTypeId,DiscountCode,DiscountAmount ,Description,
		CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PerQuantityDiscount,DiscountMultiplier,ParentOmsOrderLineItemsId,
		DiscountLevelTypeId,PromotionName,PromotionTypeId,DiscountAppliedSequence,PromotionMessage
	)
	SELECT DISTINCT @OmsOrderDetailsId,NULL,OD.OmsDiscountTypeId,OD.DiscountCode,OD.DiscountAmount,OD.Description,
	OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.PerQuantityDiscount,OD.DiscountMultiplier,NULL,
	OD.DiscountLevelTypeId,OD.PromotionName,OD.PromotionTypeId,OD.DiscountAppliedSequence,OD.PromotionMessage
	FROM #OmsOrderDiscount OD
	WHERE isnull(OD.Sku,'') = ''
	----discount details end

	----Additional Cost details start
	IF OBJECT_ID('TEMPDB..#TempAdditionalCost') IS NOT NULL
	DROP TABLE #TempAdditionalCost
	--fetching additional cost details
	SELECT Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl1.Col.value( 'KeyName[1]', 'NVARCHAR(2000)' ) AS KeyName,
		CASE WHEN Tbl1.Col.value( 'KeyValue[1]', 'NVARCHAR(2000)' )='' THEN NULL ELSE Tbl1.Col.value( 'KeyValue[1]', 'NVARCHAR(2000)' ) END AS KeyValue,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId
	INTO #TempAdditionalCost
	FROM @OrderXML.nodes('//PlaceOrderModel/LineItems/PlaceOrderLineItemModel') AS Tbl(Col)
	CROSS APPLY Tbl.Col.nodes( '*:AdditionalCostList/AdditionalCost' ) AS Tbl1(Col);

	--Inserting additional cost details
	IF EXISTS(SELECT * FROM #TempAdditionalCost)
	BEGIN
		INSERT INTO ZnodeOmsOrderLineItemsAdditionalCost(OmsOrderLineItemsId,KeyName,KeyValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT OLI.OmsOrderLineItemsId, AC.KeyName, AC.KeyValue, @UserId, @GetDate, @UserId, @GetDate
		FROM #TempAdditionalCost AC
		INNER JOIN @OmsOrderLineItems OLI ON AC.Sku = OLI.Sku AND ISNULL(AC.GroupId,'') = ISNULL(OLI.GroupId,'') 
		WHERE OLI.ParentOmsOrderLineItemsId IS NULL
		AND ISNULL(AC.KeyName,'') <> ''
	END
	----Additional Cost details end
	
	DECLARE @OmsOrderId INT
	IF EXISTS(SELECT * FROM @OMSOrder)
	BEGIN
		SET @OmsOrderId = (SELECT TOP 1 OmsOrderId FROM @OMSOrder)
	END
	ELSE
	BEGIN 
		SET @OmsOrderId = (SELECT TOP 1 OmsOrderId FROM #TempOrderData)
	END
	----RMA details start
	IF (SELECT TOP 1 OmsOrderId FROM #TempOrderData) > 0
	BEGIN
		DECLARE @OldOmsOrderDetailID INT
		SET @OmsOrderID = (SELECT TOP 1 OmsOrderId FROM #TempOrderData)
		SET @OldOmsOrderDetailID = (SELECT TOP 1 OmsOrderDetailsId FROM ZnodeOmsOrderDetails WHERE OmsOrderId = @OmsOrderID AND OmsOrderDetailsId <> @OmsOrderDetailsId ORDER BY OmsOrderDetailsId DESC)

		UPDATE ZnodeRmaReturnDetails
		SET OmsOrderDetailsId = @OmsOrderDetailsId
		WHERE OmsOrderId = @OmsOrderID

		SELECT OOLI.OmsOrderLineItemsId AS OldOmsOrderLineItemsId, OOLI.OmsOrderDetailsId, OOLI.Sku, LI.OmsOrderLineItemsId AS NewOmsOrderLineItemsId
		INTO #OldOrderLineItems
		FROM ZnodeOmsOrderLineItems OOLI WITH (NOLOCK)
		INNER JOIN @OmsOrderLineItems LI ON LI.Sku = OOLI.Sku
		WHERE OOLI.OmsOrderDetailsId = @OldOmsOrderDetailID --AND OOLI.ParentOmsOrderLineItemsId IS NULL
 
		UPDATE RRLI SET RRLI.OmsOrderLineItemsId = OldLI.NewOmsOrderLineItemsId
		FROM ZnodeRmaReturnLineItems RRLI
		INNER JOIN #OldOrderLineItems OldLI ON RRLI.OmsOrderLineItemsId = OldOmsOrderLineItemsId
	
		UPDATE ZnodeOmsOrder set IsOldOrder = 0
		where OmsOrderId = @OmsOrderID
	END
	----RMA details end
	
	---Inserting OrderTaxDetails
	IF(NOT EXISTS(SELECT 1 from ZnodeOmsTaxRule where OmsOrderId= @OmsOrderId))
	BEGIN
		DECLARE @TaxRate Numeric(28,6), @TaxRuleId INT, @AvataxIsSellerImporterOfRecord bit
		SET @TaxRate = (SELECT TOP 1 TaxRate FROM #TempOrderData)
		SET @TaxRuleId = (SELECT TOP 1 TaxRuleId FROM #TempChildLineItemDetails)
		SET @AvataxIsSellerImporterOfRecord = (SELECT TOP 1 AvataxIsSellerImporterOfRecord FROM #TempOrderData)

		 EXEC [Znode_InsertOrderTaxDetails] @OmsOrderId = @OmsOrderId, @TaxRuleId = @TaxRuleId, @TaxRate = @TaxRate, @AvataxIsSellerImporterOfRecord = @AvataxIsSellerImporterOfRecord, @Status = 0
	END

	COMMIT TRAN OrderInsert

	SELECT TOP 1 OmsOrderId,@OmsOrderDetailsId AS OmsOrderDetailsId, cast(1 AS bit)  AS Status, '' AS ErrorMessage
	FROM @OMSOrderDetail

END TRY
BEGIN CATCH
	ROLLBACK TRAN OrderInsert
	SELECT TOP 1 0 AS OmsOrderId,0 AS OmsOrderDetailsId, cast(0 AS bit)  AS Status, ERROR_MESSAGE() AS ErrorMessage

	INSERT INTO ZnodeOmsFailedOrderPayments(PaymentCode,PaymentDisplayName,TransactionToken,TotalAmount,UserName,UserId,Email,PaymentSettingId,OrderNumber,OrderDate,PaymentStatusId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT TOP 1 PaymentCode,PaymentDisplayName, isnull(PaymentTransactionToken,''),Total,a.FirstName+' '+a.LastName,@UserId,a.Email,a.PaymentSettingId,a.OrderNumber,@GetDate,PaymentStatusId,@UserId,@GetDate,@UserId,@GetDate
	FROM #TempOrderData A
	
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateOmsOrder @OrderXML ='+CAST(@OrderXML AS VARCHAR(MAX))+' , @UserId = '+CAST(@UserId AS VARCHAR(50));

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_InsertUpdateOmsOrder',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
	--If error throw in SP the deleting records FROM order tables if data inserted
	EXEC Znode_DeleteOrderById @OrderDetailId=@OmsOrderDetailsId,@Status=0
END CATCH

END